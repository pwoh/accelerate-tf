
==================== FINAL INTERFACE ====================
2017-08-29 05:27:46.072542 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.FromIntegral 8002
  interface hash: 16d89dfa6cb1fec6fb0c3ae4b741fbbf
  ABI hash: c06fea6ff5a7af191d75e7f95b36e541
  export-list hash: bc5520e986a7e20fd2601829537ce128
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 08547c834e3901f3f8bb869e051d7bd5
  sig of: Nothing
  used TH splices: True
  where
exports:
  Data.Array.Accelerate.Classes.FromIntegral.FromIntegral{Data.Array.Accelerate.Classes.FromIntegral.fromIntegral}
module dependencies: Data.Array.Accelerate.AST
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique
                     Data.Array.Accelerate.Classes.Enum Data.Array.Accelerate.Classes.Eq
                     Data.Array.Accelerate.Classes.Integral
                     Data.Array.Accelerate.Classes.Num Data.Array.Accelerate.Classes.Ord
                     Data.Array.Accelerate.Classes.Real
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Lifetime Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Smart Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
orphans: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Enum
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Eq
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Integral
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Num
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Ord
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Real
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Smart
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  Data.Array.Accelerate.Classes.Integral a60aaecd6e207deee19ca96483ccfae0
  exports: bc100fffba1159ea81ec5fb738bd1c61
  Integral a4731d1481a3ada4e7f0f61536fc3d73
import  -/  Data.Array.Accelerate.Smart c6a471aeed497009ce791e94dc05d100
  exports: 1e3a20050ce25466608a82a26d24d5f0
  Exp dff601899922d9e86e5ab6941dfbac5f
  mkFromIntegral 9472e060a988175e76d3fbde1665edf7
import  -/  Data.Array.Accelerate.Type a1c7885f4a79193eaa1f192a9acbec78
  exports: 7aad7ca015788892b1349ebab929b71f
  IntegralType 0b35b82481c40d13579644883a8a096c
  NumType 13909a3ca52b1a41105a7d98e1d63baf
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH d856a1f9d606be57026da48a46c8b0a9
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH.Lib 715cf040319ba19bc69da4853519bde7
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH.Syntax f73a6f51a55e744c097972689232ddf4
addDependentFile "/home/pwoh/.stack/programs/x86_64-linux-dkd1ce2ff9c9560b648268df668d177711/ghc-8.0.2/lib/ghc-8.0.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux-dkd1ce2ff9c9560b648268df668d177711/Cabal-1.24.2.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CDouble>_N)) -}
03ec5713123310324ae9c85238fe0886
  $fFromIntegralCIntCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCDouble2
                   eta) -}
c1959bdc9a63128f4ad0b899ddd3dc16
  $fFromIntegralCIntCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
08b28e65052664f5be13c4adce2ab22b
  $fFromIntegralCIntCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CFloat>_N)) -}
a243e16900a353e36166bbcfa088cde5
  $fFromIntegralCIntCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCFloat2
                   eta) -}
f04d674a09853626d77d04bd58edee90
  $fFromIntegralCIntCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
829c20f5b9fab466b7c992c7163614a1
  $fFromIntegralCIntCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CInt>_N)) -}
f128f6f9f922642f34b949f046dafe8b
  $fFromIntegralCIntCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCInt2
                   eta) -}
608db86cf82b93f3769616550dc55c79
  $fFromIntegralCIntCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
72a07239f878b40d8f812011d2f14ba1
  $fFromIntegralCIntCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CLLong>_N)) -}
e44eb1ab1fc85670ead781be1cac1467
  $fFromIntegralCIntCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCLLong2
                   eta) -}
46c88231592909f3a26d61cb83c06881
  $fFromIntegralCIntCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
f36a4bc6966b3ac0e548eb9fd892de5c
  $fFromIntegralCIntCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CLong>_N)) -}
6105ff9765894110b1e098d1d324c92f
  $fFromIntegralCIntCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCLong2
                   eta) -}
0e4be08e424314c4ce3171dcc7e6f6eb
  $fFromIntegralCIntCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
6917b7969aad962d51b1c3b717692a28
  $fFromIntegralCIntCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CShort>_N)) -}
b8205f63b5e172562b0b23ff1de11dbc
  $fFromIntegralCIntCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCShort2
                   eta) -}
db832a08642fb6189f9a7a34dead37f5
  $fFromIntegralCIntCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
7c427c1a75391c8ddd852cf5bb5dd9a7
  $fFromIntegralCIntCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CUInt>_N)) -}
549eb88d95909abbb1fb3bf73981853f
  $fFromIntegralCIntCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCUInt2
                   eta) -}
2665e49e51e35beb774e33058f857cc8
  $fFromIntegralCIntCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
8ecf21560e9009ce684d04eabb8d58a5
  $fFromIntegralCIntCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CULLong>_N)) -}
fa7638efa6be012a35ac52797fa5ba00
  $fFromIntegralCIntCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCULLong2
                   eta) -}
dc98cbf5289532ee6cba85a19af9c5f6
  $fFromIntegralCIntCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
877dc0ff40affa4d1e142feef7908504
  $fFromIntegralCIntCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CULong>_N)) -}
9a5c082fc9181736c1ac1c1ef04c5eaa
  $fFromIntegralCIntCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCULong2
                   eta) -}
4cc96964a2599eee356f19180455fab1
  $fFromIntegralCIntCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
8eefef4374eac56153a9f58570d8fa33
  $fFromIntegralCIntCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <Foreign.C.Types.CUShort>_N)) -}
af4afa746d29febbb267b81fb9126ebe
  $fFromIntegralCIntCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCUShort2
                   eta) -}
f2b2a40a220c06139c1b58701729128f
  $fFromIntegralCIntCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CInt
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
903c6ed6b5e766dabcf42424acc18df7
  $fFromIntegralCIntCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Types.Double>_N)) -}
0c844fc711eeea40f23fec458394004e
  $fFromIntegralCIntDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntDouble2
                   eta) -}
f4fd49d68396c2bdf5e4a5c6de2dbbad
  $fFromIntegralCIntDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Types.Double)
                      @ Foreign.C.Types.CInt
                      @ GHC.Types.Double
                      @~ <Foreign.C.Types.CInt -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
d65604b14493151e3faa26101e265fa2
  $fFromIntegralCIntDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Types.Float>_N)) -}
ac89365c06316a160d00e8f2c41f8824
  $fFromIntegralCIntFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntFloat2
                   eta) -}
8540f438b140992955b2f97dff4d0b08
  $fFromIntegralCIntFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Types.Float)
                      @ Foreign.C.Types.CInt
                      @ GHC.Types.Float
                      @~ <Foreign.C.Types.CInt -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
c5132e8403d01e1448d048ba9e5c0347
  $fFromIntegralCIntFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Types.Int>_N)) -}
ab878871647b394dbec36998dce55348
  $fFromIntegralCIntInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt2
                   eta) -}
631653303e10e9d39a9308f062cd4547
  $fFromIntegralCIntInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt11
                   eta) -}
50e82b79f737ed6c31f48681dc95b788
  $fFromIntegralCIntInt11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Int.Int8)
                      @ Foreign.C.Types.CInt
                      @ GHC.Int.Int8
                      @~ <Foreign.C.Types.CInt -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Int.Int16>_N)) -}
d05f473775dc18db0ca8dd1dbb1c6b6d
  $fFromIntegralCIntInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
e581790ac6e78cc7a0b6a2292e864913
  $fFromIntegralCIntInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Types.Int)
                      @ Foreign.C.Types.CInt
                      @ GHC.Types.Int
                      @~ <Foreign.C.Types.CInt -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
e24a75c6f78a4fafeeb9788b89053b4f
  $fFromIntegralCIntInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Int.Int32>_N)) -}
613d95451256013ef3a23a7ff20ebb5f
  $fFromIntegralCIntInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
e065d7ac5e236d72ea0895973e6de1ae
  $fFromIntegralCIntInt4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Int.Int16)
                      @ Foreign.C.Types.CInt
                      @ GHC.Int.Int16
                      @~ <Foreign.C.Types.CInt -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
8f08a94d4fb35747b735e13ed91a0847
  $fFromIntegralCIntInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt6
                   eta) -}
ae515a0c145cbafe54f2df55658d9480
  $fFromIntegralCIntInt6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Int.Int32)
                      @ Foreign.C.Types.CInt
                      @ GHC.Int.Int32
                      @~ <Foreign.C.Types.CInt -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Int.Int64>_N)) -}
cee2bd6e4aebfb402fd171dbb1175919
  $fFromIntegralCIntInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
fa2276e460c28d34aaec6eb215188e79
  $fFromIntegralCIntInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Int.Int8>_N)) -}
c0dc33a44dbf028e086a7cd9f815626c
  $fFromIntegralCIntInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
7c399f92052c4660b2cdc75b954e5776
  $fFromIntegralCIntInt9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Int.Int64)
                      @ Foreign.C.Types.CInt
                      @ GHC.Int.Int64
                      @~ <Foreign.C.Types.CInt -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
3807b38ae37c174cdf500b3112c83879
  $fFromIntegralCIntInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Types.Word>_N)) -}
002526fd6c8bf4349f6d07266a56cc43
  $fFromIntegralCIntWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord2
                   eta) -}
6092444bf2a881a56b4c4ddf18dd35ac
  $fFromIntegralCIntWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord11
                   eta) -}
43de6907c5bd6f347f6f9e1c240efdde
  $fFromIntegralCIntWord11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Word.Word8)
                      @ Foreign.C.Types.CInt
                      @ GHC.Word.Word8
                      @~ <Foreign.C.Types.CInt -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Word.Word16>_N)) -}
6c74ba3f3df6d5edcfe3bba527fbd47b
  $fFromIntegralCIntWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
9cfec3d9ef17cb49b25bef3adde0c761
  $fFromIntegralCIntWord2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Types.Word)
                      @ Foreign.C.Types.CInt
                      @ GHC.Types.Word
                      @~ <Foreign.C.Types.CInt -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
4d6f0f36e73e2b9b4899f0cea7d59688
  $fFromIntegralCIntWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Word.Word32>_N)) -}
b6989aa98a053dc74baa27667d151b4e
  $fFromIntegralCIntWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
63955eebf233fd187de785c8d1f570e8
  $fFromIntegralCIntWord4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Word.Word16)
                      @ Foreign.C.Types.CInt
                      @ GHC.Word.Word16
                      @~ <Foreign.C.Types.CInt -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
782f65c3105b026fa487b7c31a2feeb0
  $fFromIntegralCIntWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord6
                   eta) -}
ff57f98c8128d43b9fa68e9c5deda1ab
  $fFromIntegralCIntWord6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Word.Word32)
                      @ Foreign.C.Types.CInt
                      @ GHC.Word.Word32
                      @~ <Foreign.C.Types.CInt -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Word.Word64>_N)) -}
c53db49f903748bc81022fdc15f9155b
  $fFromIntegralCIntWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
7297291544fccb0ae5c2bb99d77d4f07
  $fFromIntegralCIntWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCIntWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CInt GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CInt>_N <GHC.Word.Word8>_N)) -}
0f5d7001a0ee70ce694d4f97b5729cc7
  $fFromIntegralCIntWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
78a3c12a174a0668b8ab2a64c3e4f15e
  $fFromIntegralCIntWord9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CInt -> GHC.Word.Word64)
                      @ Foreign.C.Types.CInt
                      @ GHC.Word.Word64
                      @~ <Foreign.C.Types.CInt -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
5540c81efb55be9b31a62cb2d0f96fad
  $fFromIntegralCIntWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CDouble>_N)) -}
2f5a33cc88d685654caa8e7994c25fb8
  $fFromIntegralCLLongCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCDouble2
                   eta) -}
4b622565ab38da10ca94c4437df9dd12
  $fFromIntegralCLLongCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
3b7bcfd0850d67ffd7ebbaff20fb0b71
  $fFromIntegralCLLongCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CFloat>_N)) -}
bcde183f33e25c558ef79a2c570abdb9
  $fFromIntegralCLLongCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCFloat2
                   eta) -}
14fa98467f1d0c94380f3d7346dd9cb6
  $fFromIntegralCLLongCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
cd1c87d0cc61c8f54e4c7614f6fe262c
  $fFromIntegralCLLongCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CInt>_N)) -}
b79878f7883d912b66f909d7cff064c5
  $fFromIntegralCLLongCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCInt2
                   eta) -}
3129585095063217b7d5204d018428d1
  $fFromIntegralCLLongCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
6968a6fd195aedc4cd97b3a96d47443d
  $fFromIntegralCLLongCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CLLong>_N)) -}
400e133b7b8414245f63eadb1a3f28f9
  $fFromIntegralCLLongCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCLLong2
                   eta) -}
ee1d8cba578b1fab9555db9a753177ae
  $fFromIntegralCLLongCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
1bc5793b49d8195477dfd1d9bc4b6ff0
  $fFromIntegralCLLongCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CLong>_N)) -}
4f5942bd909ccafe6829e379c0bbd8f1
  $fFromIntegralCLLongCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCLong2
                   eta) -}
7ebd96135cfb208a10ad8f3110eff4b8
  $fFromIntegralCLLongCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
30320d8e598cc74d8b9028586d96a44b
  $fFromIntegralCLLongCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CShort>_N)) -}
731fce53f4e8cd5d4c865071213bcf46
  $fFromIntegralCLLongCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCShort2
                   eta) -}
ff37db351b1ea91edb6bb274df8e327d
  $fFromIntegralCLLongCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
f2345ed7249df06e135a9f7829b4793c
  $fFromIntegralCLLongCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CUInt>_N)) -}
221b9fd5c4e2dcda632300a163af76e5
  $fFromIntegralCLLongCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCUInt2
                   eta) -}
9dea8de52e2ec7aa408091d764ae8a0b
  $fFromIntegralCLLongCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
5c16f9ae3b0057a6719c51673715eaf9
  $fFromIntegralCLLongCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CULLong>_N)) -}
e071dcc9abfa89c43291cbd6b14f5830
  $fFromIntegralCLLongCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCULLong2
                   eta) -}
2f0bed692417a20daf29570583131714
  $fFromIntegralCLLongCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
9b4b8b4c3aa1dba9e7b12ac08b09cd78
  $fFromIntegralCLLongCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CULong>_N)) -}
4e750ba5ef6bdde67a99ad4b90528a75
  $fFromIntegralCLLongCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCULong2
                   eta) -}
f7ef40236ddb0393182f4b679e71c2be
  $fFromIntegralCLLongCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
5fae29bba43f96091a7bf514e83b2829
  $fFromIntegralCLLongCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CUShort>_N)) -}
beff8ac9594b17bb2677463bd580b641
  $fFromIntegralCLLongCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCUShort2
                   eta) -}
ef62f142236bd5461a9bf922b19fad05
  $fFromIntegralCLLongCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CLLong
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
85d7d28f890f228c63bf0ba0ac4b989c
  $fFromIntegralCLLongCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Types.Double>_N)) -}
0fc58514656dfea734b2a40a28e8279e
  $fFromIntegralCLLongDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongDouble2
                   eta) -}
b6119482b1a2e837c6818b79e1827c73
  $fFromIntegralCLLongDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Types.Double)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Types.Double
                      @~ <Foreign.C.Types.CLLong -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
400e0ddf3ba51d6597bc0cb1c7608993
  $fFromIntegralCLLongDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Types.Float>_N)) -}
6fb0ecd59a8416148b8eee5f993bafc2
  $fFromIntegralCLLongFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongFloat2
                   eta) -}
cb95e235214b08b1ffc2149fda8b862b
  $fFromIntegralCLLongFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Types.Float)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Types.Float
                      @~ <Foreign.C.Types.CLLong -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
fc0d3da94ba02558ab5c68a520e3fc6d
  $fFromIntegralCLLongFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Types.Int>_N)) -}
1aee16fa74d087e626f0a469fd8709d8
  $fFromIntegralCLLongInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt2
                   eta) -}
afc69fa17a3bec8c27cfb75f4726e20e
  $fFromIntegralCLLongInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt11
                   eta) -}
80eb58d1f17d21c2b87255c558e7dc17
  $fFromIntegralCLLongInt11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Int.Int8)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Int.Int8
                      @~ <Foreign.C.Types.CLLong -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Int.Int16>_N)) -}
7f160179c250d71b60bd93bb6ee8a60a
  $fFromIntegralCLLongInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
2f94ffe5a06e94b45a6d6a5a9156dd5a
  $fFromIntegralCLLongInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Types.Int)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Types.Int
                      @~ <Foreign.C.Types.CLLong -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
7155c8c45a68f3080944110e7abeb2da
  $fFromIntegralCLLongInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Int.Int32>_N)) -}
ec79daeabb6f1bc3bf0cdd26cebe85c7
  $fFromIntegralCLLongInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
509f8ee31d843c46411e738af9962eea
  $fFromIntegralCLLongInt4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Int.Int16)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Int.Int16
                      @~ <Foreign.C.Types.CLLong -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
24880d648ae24f3d1dddb324b1a97bb8
  $fFromIntegralCLLongInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt6
                   eta) -}
012d60eada26b2f271d2ea84eabf8483
  $fFromIntegralCLLongInt6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Int.Int32)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Int.Int32
                      @~ <Foreign.C.Types.CLLong -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Int.Int64>_N)) -}
d0afd446ac1ca40a8a5d3aa16760068c
  $fFromIntegralCLLongInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
9b3acc88511124db2c645e4dfe0be45a
  $fFromIntegralCLLongInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Int.Int8>_N)) -}
6b3b2132bb1aacc2a23a93aca0bcdbe9
  $fFromIntegralCLLongInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
9d3014e085f5fe8dc4be5172ae9cefd2
  $fFromIntegralCLLongInt9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Int.Int64)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Int.Int64
                      @~ <Foreign.C.Types.CLLong -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
300e57b14667689f0233ae5edf744a47
  $fFromIntegralCLLongInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Types.Word>_N)) -}
7ce64f529d412ec2da0603e50fc22ed2
  $fFromIntegralCLLongWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord2
                   eta) -}
7a4cfd2febe84e3a06894cdac750da8f
  $fFromIntegralCLLongWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord11
                   eta) -}
c499cb37b4779da337164c53352a9bec
  $fFromIntegralCLLongWord11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Word.Word8)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Word.Word8
                      @~ <Foreign.C.Types.CLLong -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Word.Word16>_N)) -}
5585e6acd77afe8e4654424db7687960
  $fFromIntegralCLLongWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
4e3a7fd47560337b78679ac57b53a63f
  $fFromIntegralCLLongWord2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Types.Word)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Types.Word
                      @~ <Foreign.C.Types.CLLong -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
2d01ffed30f826f194e91b9cf10dd3dc
  $fFromIntegralCLLongWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Word.Word32>_N)) -}
d5baf72c857626f82dbc4a695dedbb08
  $fFromIntegralCLLongWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
04366936b7d3f9c4bb9e50e7b325c1ed
  $fFromIntegralCLLongWord4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Word.Word16)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Word.Word16
                      @~ <Foreign.C.Types.CLLong -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
455a0212048423920e8d539ec2282e2d
  $fFromIntegralCLLongWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord6
                   eta) -}
0761b5add449030730b0d68528c8354b
  $fFromIntegralCLLongWord6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Word.Word32)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Word.Word32
                      @~ <Foreign.C.Types.CLLong -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Word.Word64>_N)) -}
e3cdf8ada8ec1e05e4953acef3d77178
  $fFromIntegralCLLongWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
ad0b086fa3b58d65ee07c1bf26286403
  $fFromIntegralCLLongWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLLongWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLLong GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLLong>_N <GHC.Word.Word8>_N)) -}
b7c2a74d076e8b5b9f04e6e6a4f5be73
  $fFromIntegralCLLongWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
c9fe7a1153afbf24d272abbf6251584e
  $fFromIntegralCLLongWord9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLLong -> GHC.Word.Word64)
                      @ Foreign.C.Types.CLLong
                      @ GHC.Word.Word64
                      @~ <Foreign.C.Types.CLLong -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
ab774854b765e4b21097ea650a24b934
  $fFromIntegralCLLongWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CDouble>_N)) -}
e7b65719e11186a2bec8dddb1a6c7974
  $fFromIntegralCLongCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCDouble2
                   eta) -}
8fe218f57fd321565ba908a5c2271309
  $fFromIntegralCLongCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
80f42481ae451ee8fd0e6752edb4e354
  $fFromIntegralCLongCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CFloat>_N)) -}
1b952ac3cca5423e2df10663b50a70e8
  $fFromIntegralCLongCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCFloat2
                   eta) -}
fec909f87e4d73de2a346cd70a9a1699
  $fFromIntegralCLongCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
5e95f6a750c20d08d68eb31b9bd09181
  $fFromIntegralCLongCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CInt>_N)) -}
356f1be90cda117641d6295f88887a8a
  $fFromIntegralCLongCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCInt2
                   eta) -}
021442020e06be5def73170d877f9a95
  $fFromIntegralCLongCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
42b43e8e2ccbef21709ff642da104f84
  $fFromIntegralCLongCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CLLong>_N)) -}
aec985c43f5c8f59020c6533c314b601
  $fFromIntegralCLongCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCLLong2
                   eta) -}
b97d482d43b3d462496deada86158a7b
  $fFromIntegralCLongCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
33697c4d1ca19ad28b7c73be7190f4c9
  $fFromIntegralCLongCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CLong>_N)) -}
cdb8a178b149dbbd5673623135beb24a
  $fFromIntegralCLongCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCLong2
                   eta) -}
8e227bb6620a546a4855b91624228c17
  $fFromIntegralCLongCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
edb7c4e063b919db7f1754326fc0afd8
  $fFromIntegralCLongCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CShort>_N)) -}
6a6aae14f66927442a012ed62144373c
  $fFromIntegralCLongCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCShort2
                   eta) -}
a47c58be88f53c4359f5f5f70c56f7db
  $fFromIntegralCLongCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
96944aedfe5fd6b5232cb8f07986cc15
  $fFromIntegralCLongCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CUInt>_N)) -}
6748c77b87574672e985853977f9df7c
  $fFromIntegralCLongCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCUInt2
                   eta) -}
aa69f58e9bfade038d58c813b4c5a3fd
  $fFromIntegralCLongCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
77cfca2bf82529fbf18b1e3aec3da5ea
  $fFromIntegralCLongCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CULLong>_N)) -}
500971704600102cbd64c2aef4052b9e
  $fFromIntegralCLongCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCULLong2
                   eta) -}
9f1c293b468979565cce3b8d58eb20bf
  $fFromIntegralCLongCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
3062872961da1bd118a57b1b4207f120
  $fFromIntegralCLongCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CULong>_N)) -}
7b7f011cc87536bf4572289225c83a22
  $fFromIntegralCLongCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCULong2
                   eta) -}
8f9b39a6a862e5153a03747de336fbc7
  $fFromIntegralCLongCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
0b87545e7ef362099ab7e3275763809b
  $fFromIntegralCLongCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <Foreign.C.Types.CUShort>_N)) -}
ea508a2ebf5af615c80d79666e37d1e1
  $fFromIntegralCLongCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCUShort2
                   eta) -}
18955edd74f51d4e3ba90efc4d10621e
  $fFromIntegralCLongCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CLong
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
56d49bd156fdcc66d4688ac432a3259e
  $fFromIntegralCLongCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Types.Double>_N)) -}
3bd4d5b94c8fd6c82956e60367a5a952
  $fFromIntegralCLongDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongDouble2
                   eta) -}
a32166e90add6a7c7502efbd6d652c4c
  $fFromIntegralCLongDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Types.Double)
                      @ Foreign.C.Types.CLong
                      @ GHC.Types.Double
                      @~ <Foreign.C.Types.CLong -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
263e85a88e6034116e5baf0626b69c5a
  $fFromIntegralCLongDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Types.Float>_N)) -}
c542b1df7fc55c0101a22d2237c68ff2
  $fFromIntegralCLongFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongFloat2
                   eta) -}
120b18b26198844e03b10ee87407aa59
  $fFromIntegralCLongFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Types.Float)
                      @ Foreign.C.Types.CLong
                      @ GHC.Types.Float
                      @~ <Foreign.C.Types.CLong -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
3bf1eb9a7914f0dc58499885a524011f
  $fFromIntegralCLongFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Types.Int>_N)) -}
a60e4df10c8aecb604f9a89c77655372
  $fFromIntegralCLongInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt2
                   eta) -}
f7519679b5ee57855d227c61e439a1c1
  $fFromIntegralCLongInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt11
                   eta) -}
b7495e02708308611a1d9aee9f912165
  $fFromIntegralCLongInt11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Int.Int8)
                      @ Foreign.C.Types.CLong
                      @ GHC.Int.Int8
                      @~ <Foreign.C.Types.CLong -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Int.Int16>_N)) -}
e6aa398584afc9f3ce83e8bb1ae1c7c7
  $fFromIntegralCLongInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
f07db6de2589a62f3c4c886da1be975b
  $fFromIntegralCLongInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Types.Int)
                      @ Foreign.C.Types.CLong
                      @ GHC.Types.Int
                      @~ <Foreign.C.Types.CLong -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
f3a9c4a55c330c90f689f727c81e9b91
  $fFromIntegralCLongInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Int.Int32>_N)) -}
6e812a863c9d7efa334ca27a3b91e44d
  $fFromIntegralCLongInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
8d2be0c6c56d4af40c83684cd4538f7d
  $fFromIntegralCLongInt4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Int.Int16)
                      @ Foreign.C.Types.CLong
                      @ GHC.Int.Int16
                      @~ <Foreign.C.Types.CLong -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
8fd86a05341e5aa440c7b0d95f66c9c8
  $fFromIntegralCLongInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt6
                   eta) -}
ec35f9d081da857feb37fbea524efc7e
  $fFromIntegralCLongInt6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Int.Int32)
                      @ Foreign.C.Types.CLong
                      @ GHC.Int.Int32
                      @~ <Foreign.C.Types.CLong -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Int.Int64>_N)) -}
ac49c8beb5ff6f6ee6abdb9465b9a3bd
  $fFromIntegralCLongInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
0afa97d09df1bcc5449fd34f6fba9590
  $fFromIntegralCLongInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Int.Int8>_N)) -}
7ff7cfe53fdf50f631cb338dca93608b
  $fFromIntegralCLongInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
8b128d65ed2d0cf126fea1316a2fb4c7
  $fFromIntegralCLongInt9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Int.Int64)
                      @ Foreign.C.Types.CLong
                      @ GHC.Int.Int64
                      @~ <Foreign.C.Types.CLong -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
1f0a6d2bb14480341e5b0b8d7c5ee97d
  $fFromIntegralCLongInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Types.Word>_N)) -}
0debec2de065e94fc399cc5937ce35a1
  $fFromIntegralCLongWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord2
                   eta) -}
7ce4fed76d555fed95164b30c08a379c
  $fFromIntegralCLongWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord11
                   eta) -}
344d43720c4bc88b6d8f45ea993aefa6
  $fFromIntegralCLongWord11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Word.Word8)
                      @ Foreign.C.Types.CLong
                      @ GHC.Word.Word8
                      @~ <Foreign.C.Types.CLong -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Word.Word16>_N)) -}
1a3fbd943eeefe91500d01f15d4c2c62
  $fFromIntegralCLongWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
c1ab1978258e83d3f45affe8cc450c6f
  $fFromIntegralCLongWord2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Types.Word)
                      @ Foreign.C.Types.CLong
                      @ GHC.Types.Word
                      @~ <Foreign.C.Types.CLong -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
93e20152654484fe96cf095dada310f9
  $fFromIntegralCLongWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Word.Word32>_N)) -}
efe42f9caf9ebab499acd22ad77328e6
  $fFromIntegralCLongWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
a8fa1d58068c811fbe43b7e802f1b23d
  $fFromIntegralCLongWord4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Word.Word16)
                      @ Foreign.C.Types.CLong
                      @ GHC.Word.Word16
                      @~ <Foreign.C.Types.CLong -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
f79ba08dea90392d2f48190cbac92c27
  $fFromIntegralCLongWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord6
                   eta) -}
1c4667c75a6a245b3a0fb9a83adc220e
  $fFromIntegralCLongWord6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Word.Word32)
                      @ Foreign.C.Types.CLong
                      @ GHC.Word.Word32
                      @~ <Foreign.C.Types.CLong -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Word.Word64>_N)) -}
98f8eea3987ca4f5d9e378792249f257
  $fFromIntegralCLongWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
f8dc70f3e95a6a98ed9ac8049f07d859
  $fFromIntegralCLongWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCLongWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CLong GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CLong>_N <GHC.Word.Word8>_N)) -}
a82c163d698f0171f1555380239aea67
  $fFromIntegralCLongWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
35a31a5053f8aab1f1b95ce1baaf70ec
  $fFromIntegralCLongWord9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CLong -> GHC.Word.Word64)
                      @ Foreign.C.Types.CLong
                      @ GHC.Word.Word64
                      @~ <Foreign.C.Types.CLong -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
a5e45a2d564dfc1c2c5aaae0284419c4
  $fFromIntegralCLongWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CDouble>_N)) -}
ffd35171326d97dd8828110ebb5f82c1
  $fFromIntegralCShortCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCDouble2
                   eta) -}
1bd179974c2242322efd5f798ac965f0
  $fFromIntegralCShortCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
de5a5bd48db37c7a933f843c063e5e2a
  $fFromIntegralCShortCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CFloat>_N)) -}
f9a7534b276d3cf06784bd56bb962160
  $fFromIntegralCShortCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCFloat2
                   eta) -}
02b6304b21ca0c45e09b13969e8a758b
  $fFromIntegralCShortCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
fc1d2f82ddd368f68a81bd0f31ddaa57
  $fFromIntegralCShortCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CInt>_N)) -}
acdadac6810dea07d555db1e850a8f23
  $fFromIntegralCShortCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCInt2
                   eta) -}
ae9aa2a9671706edb5e19a51da7fda5c
  $fFromIntegralCShortCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
6ebb84c292b5a3f5f1975738f08a0c2b
  $fFromIntegralCShortCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CLLong>_N)) -}
3c1b568849f6c7f71dd9abb2412f60dc
  $fFromIntegralCShortCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCLLong2
                   eta) -}
c459830fd0739642a53d5a6e7e0ec698
  $fFromIntegralCShortCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
541f088cc1d8452a6474a8d47475a2ea
  $fFromIntegralCShortCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CLong>_N)) -}
cb5ae1def4b2c966b757e2cf0fabf2b3
  $fFromIntegralCShortCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCLong2
                   eta) -}
f467c790fdc9bb1585a4874b6850135d
  $fFromIntegralCShortCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
34bb55aa4bd369039f73fbe72563eacf
  $fFromIntegralCShortCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CShort>_N)) -}
c28d6c86613ea5e21b5c76c919bfbd0b
  $fFromIntegralCShortCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCShort2
                   eta) -}
1bfbf106a221658231b188490db47219
  $fFromIntegralCShortCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
bb3e8bc20c74906aab262fe28988114b
  $fFromIntegralCShortCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CUInt>_N)) -}
2b3d216823dc69b8ab3147d1d5895f02
  $fFromIntegralCShortCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCUInt2
                   eta) -}
834292b687ce5816c373fe776dd8b6ed
  $fFromIntegralCShortCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
24affeba3489c6ed8b7de76f75cdd7d4
  $fFromIntegralCShortCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CULLong>_N)) -}
e92e3cbb66d69ed3ec0e1992316ae939
  $fFromIntegralCShortCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCULLong2
                   eta) -}
95d191ee6a311d487345d7f192af2578
  $fFromIntegralCShortCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
c457d53170e1f9408b3cded7e921e67b
  $fFromIntegralCShortCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CULong>_N)) -}
be2bd215ec3a8e58c8e700117b9188df
  $fFromIntegralCShortCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCULong2
                   eta) -}
fd04ec4901ab648eb1b62a5eaa7ccd1e
  $fFromIntegralCShortCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
27053f079473c9bc52e09d99f933c0c6
  $fFromIntegralCShortCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <Foreign.C.Types.CUShort>_N)) -}
82a32cb75dffd023dcbffce959cd972e
  $fFromIntegralCShortCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCUShort2
                   eta) -}
bd5794b7db25b52a59236d640a87cd4a
  $fFromIntegralCShortCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CShort
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
f807fcf67ff5daedd29a1bfe70d4d8ba
  $fFromIntegralCShortCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Types.Double>_N)) -}
1d53ee9a124eeb682ef8bfb824be1c98
  $fFromIntegralCShortDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortDouble2
                   eta) -}
efc7bc9e62218d48e67a4312637ec866
  $fFromIntegralCShortDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Types.Double)
                      @ Foreign.C.Types.CShort
                      @ GHC.Types.Double
                      @~ <Foreign.C.Types.CShort -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
bdfbacaaf6f25f4c5ab516ada5d514ec
  $fFromIntegralCShortDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Types.Float>_N)) -}
b00aa22015cc81223dfbbdf99d561505
  $fFromIntegralCShortFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortFloat2
                   eta) -}
76dfdcaa47b54ffe628aa317afcb21e1
  $fFromIntegralCShortFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Types.Float)
                      @ Foreign.C.Types.CShort
                      @ GHC.Types.Float
                      @~ <Foreign.C.Types.CShort -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
3fe7bafe3340b232cda0961f59c07eb2
  $fFromIntegralCShortFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Types.Int>_N)) -}
389f244cbd1ca7c7a5013d88f6f0b9d6
  $fFromIntegralCShortInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt2
                   eta) -}
c23cf940447e4697dba853342158845d
  $fFromIntegralCShortInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt11
                   eta) -}
5890f99f63d43a3b613ec70062eff337
  $fFromIntegralCShortInt11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Int.Int8)
                      @ Foreign.C.Types.CShort
                      @ GHC.Int.Int8
                      @~ <Foreign.C.Types.CShort -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Int.Int16>_N)) -}
2ecd21cd0f79f490ac2703896f1c063f
  $fFromIntegralCShortInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
596029a8969b83a8bb8b1e9a3bc8db13
  $fFromIntegralCShortInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Types.Int)
                      @ Foreign.C.Types.CShort
                      @ GHC.Types.Int
                      @~ <Foreign.C.Types.CShort -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
4485462bdda5961f914111dae953505b
  $fFromIntegralCShortInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Int.Int32>_N)) -}
01244ece6f3e3424f1c15137128bcef3
  $fFromIntegralCShortInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
94d6561f172a59141151f5a7e1485e6b
  $fFromIntegralCShortInt4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Int.Int16)
                      @ Foreign.C.Types.CShort
                      @ GHC.Int.Int16
                      @~ <Foreign.C.Types.CShort -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
51462ce2f956b2a199a3b305b6b69fec
  $fFromIntegralCShortInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt6
                   eta) -}
99846652aa87b3a276e8d9bc3abac472
  $fFromIntegralCShortInt6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Int.Int32)
                      @ Foreign.C.Types.CShort
                      @ GHC.Int.Int32
                      @~ <Foreign.C.Types.CShort -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Int.Int64>_N)) -}
9de3072dca1bfdf96499ffd5a81f0290
  $fFromIntegralCShortInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
af01af7d2c89dd88465ced1d934d93d2
  $fFromIntegralCShortInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Int.Int8>_N)) -}
850c5d176ae2bf6b7d6bf2e626c0410b
  $fFromIntegralCShortInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
3d47435cf8dda8e1ac207952cd628100
  $fFromIntegralCShortInt9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Int.Int64)
                      @ Foreign.C.Types.CShort
                      @ GHC.Int.Int64
                      @~ <Foreign.C.Types.CShort -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
e0b7fd6c943d0e5c8ebb1efbe7332249
  $fFromIntegralCShortInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Types.Word>_N)) -}
979774a0bf8758102bf4f56f2fd10552
  $fFromIntegralCShortWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord2
                   eta) -}
219b7521fa6e0d0a1bc60e6a01221bd6
  $fFromIntegralCShortWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord11
                   eta) -}
b243dd914e83394d799494c03c86caee
  $fFromIntegralCShortWord11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Word.Word8)
                      @ Foreign.C.Types.CShort
                      @ GHC.Word.Word8
                      @~ <Foreign.C.Types.CShort -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Word.Word16>_N)) -}
f697cfe994548c06e7afdbe61911421e
  $fFromIntegralCShortWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
034a9ff9e9fe6447606408acacf5d27b
  $fFromIntegralCShortWord2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Types.Word)
                      @ Foreign.C.Types.CShort
                      @ GHC.Types.Word
                      @~ <Foreign.C.Types.CShort -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
fe1e6e99b57dfff780a7f61d19379491
  $fFromIntegralCShortWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Word.Word32>_N)) -}
7ee1bf719b7393265a83ebfa433419e6
  $fFromIntegralCShortWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
0d56a489a48eba79f45bf3b141fa582b
  $fFromIntegralCShortWord4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Word.Word16)
                      @ Foreign.C.Types.CShort
                      @ GHC.Word.Word16
                      @~ <Foreign.C.Types.CShort -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
7444e4336c12ffaad24f75a9c84860ee
  $fFromIntegralCShortWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord6
                   eta) -}
ab0edcdfd1a5995e4f65add3ac181c2f
  $fFromIntegralCShortWord6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Word.Word32)
                      @ Foreign.C.Types.CShort
                      @ GHC.Word.Word32
                      @~ <Foreign.C.Types.CShort -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Word.Word64>_N)) -}
b386c4654245479673bae9503e7dafcb
  $fFromIntegralCShortWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
4b90ae20c1bc58d8e359db9f3fe22b00
  $fFromIntegralCShortWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCShortWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CShort GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CShort>_N <GHC.Word.Word8>_N)) -}
79288d89f2c5eda3f83a2448cb6747a8
  $fFromIntegralCShortWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
2c0c29573017f12752abad7fc6d5f887
  $fFromIntegralCShortWord9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CShort -> GHC.Word.Word64)
                      @ Foreign.C.Types.CShort
                      @ GHC.Word.Word64
                      @~ <Foreign.C.Types.CShort -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
29f3b20dd9429d654841639799c94b4f
  $fFromIntegralCShortWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CDouble>_N)) -}
d8ca60b3297eb2eac8de9a00c44656cc
  $fFromIntegralCUIntCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCDouble2
                   eta) -}
aadf2d9b4bd19992be10c46dee80c073
  $fFromIntegralCUIntCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
41e9498ecdd3110c70470df6253de743
  $fFromIntegralCUIntCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CFloat>_N)) -}
4baef15a67d656f5f0eeb3b5cbc44763
  $fFromIntegralCUIntCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCFloat2
                   eta) -}
44b716e7152b5475864f806a80236fe4
  $fFromIntegralCUIntCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
d02cdfa5bf923a5fa74e097c263c928f
  $fFromIntegralCUIntCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CInt>_N)) -}
2df252a5b9d2c0449cb1798ea5e57e64
  $fFromIntegralCUIntCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCInt2
                   eta) -}
68616241768d68b1ef7aa515e51c13ba
  $fFromIntegralCUIntCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
26352ce6bf12902f582800c90b691e08
  $fFromIntegralCUIntCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CLLong>_N)) -}
93c19c9cefd8d3255c1bc150c49977d7
  $fFromIntegralCUIntCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCLLong2
                   eta) -}
43528ffdeb4cf00a4454f14abb7aae0a
  $fFromIntegralCUIntCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
bff882ef728e273254aeeec9dc11cfd8
  $fFromIntegralCUIntCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CLong>_N)) -}
d03cfcb7c2640d8034a691450366944b
  $fFromIntegralCUIntCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCLong2
                   eta) -}
db363774300be826c7352e233f3be947
  $fFromIntegralCUIntCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
3c55dadf475d5249ea6d4aad19e659ad
  $fFromIntegralCUIntCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CShort>_N)) -}
aee98c093d195fa6f7ca206d99f8cb55
  $fFromIntegralCUIntCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCShort2
                   eta) -}
202f6b5c20373ac519cde4b09720b09e
  $fFromIntegralCUIntCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
9747f57004b90f78831188751c1abcf0
  $fFromIntegralCUIntCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CUInt>_N)) -}
8064b6e10e9e952fd19d3244503eb6b4
  $fFromIntegralCUIntCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCUInt2
                   eta) -}
06722085d688577964f3c6c5cbe4a3f3
  $fFromIntegralCUIntCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
83517365f97d6c3c11879377668e70bf
  $fFromIntegralCUIntCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CULLong>_N)) -}
55661372574bb82f457cf53941299224
  $fFromIntegralCUIntCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCULLong2
                   eta) -}
f511403baa100c5f299a8a32b3762407
  $fFromIntegralCUIntCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
07f60a46c7be1134ca5dfdf1ec204aaf
  $fFromIntegralCUIntCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CULong>_N)) -}
b75bf4df064045a547acb7cfcc108939
  $fFromIntegralCUIntCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCULong2
                   eta) -}
b76512fa46df25cd8028caeca642915b
  $fFromIntegralCUIntCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
06f48083c9af5537befc324f15754ffb
  $fFromIntegralCUIntCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CUShort>_N)) -}
a9f449dfe60a405faa2d44599ce91e2c
  $fFromIntegralCUIntCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCUShort2
                   eta) -}
c1b87f6f79d6846cf7dd52178aa236d0
  $fFromIntegralCUIntCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CUInt
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
079001045fbb3b90f1fe7521e8fd81c5
  $fFromIntegralCUIntCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Types.Double>_N)) -}
cea75d1608d1dffc3bd393512e51c66a
  $fFromIntegralCUIntDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntDouble2
                   eta) -}
5945b0ca15bd18164933d9edf43f9b13
  $fFromIntegralCUIntDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Types.Double)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Types.Double
                      @~ <Foreign.C.Types.CUInt -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
6650fac1e4328348652ee5169432ec26
  $fFromIntegralCUIntDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Types.Float>_N)) -}
b8e5da5a9ff871940b0fa968d590bb7e
  $fFromIntegralCUIntFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntFloat2
                   eta) -}
10e9c05f624c367c655487ae32087150
  $fFromIntegralCUIntFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Types.Float)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Types.Float
                      @~ <Foreign.C.Types.CUInt -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
0180ec50f6b4a252bed9fdc4ffb65706
  $fFromIntegralCUIntFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Types.Int>_N)) -}
80b99c99ebd9f9d4d8661f20f8e3293f
  $fFromIntegralCUIntInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt2
                   eta) -}
2fcf0a0c1e3c049ea85badb9f6f00135
  $fFromIntegralCUIntInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt11
                   eta) -}
d453977e1dc2fdca6146436c7b2a4047
  $fFromIntegralCUIntInt11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Int.Int8)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Int.Int8
                      @~ <Foreign.C.Types.CUInt -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Int.Int16>_N)) -}
a4905d72b70fe67c5fd63fdb1abbd5e4
  $fFromIntegralCUIntInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
a800ab78c86bc694ba11c44aa8a9f260
  $fFromIntegralCUIntInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Types.Int)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Types.Int
                      @~ <Foreign.C.Types.CUInt -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
f326e443b57e69957d3ffb29954e1b90
  $fFromIntegralCUIntInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Int.Int32>_N)) -}
c020e8edbe6c8d835670c075f2a8b00d
  $fFromIntegralCUIntInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
9b84649b3c04077edb860e428897badd
  $fFromIntegralCUIntInt4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Int.Int16)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Int.Int16
                      @~ <Foreign.C.Types.CUInt -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
34aeca220b3d35ee803759af8fbe5036
  $fFromIntegralCUIntInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt6
                   eta) -}
5559bc030276b7b33d947bbbec91c057
  $fFromIntegralCUIntInt6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Int.Int32)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Int.Int32
                      @~ <Foreign.C.Types.CUInt -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Int.Int64>_N)) -}
7e014dc351746911a48ce04d1e64d813
  $fFromIntegralCUIntInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
81c17f0224f69f7a7f063c934f468395
  $fFromIntegralCUIntInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Int.Int8>_N)) -}
5e79c06fa71478b6f299233a579c9822
  $fFromIntegralCUIntInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
be6ea76ad7c79441368a49ed160d99ce
  $fFromIntegralCUIntInt9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Int.Int64)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Int.Int64
                      @~ <Foreign.C.Types.CUInt -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
ef1eca5bc6073657f91d3c64ae4a3952
  $fFromIntegralCUIntInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Types.Word>_N)) -}
27c0eed3cea3811a26ad85e1875017c8
  $fFromIntegralCUIntWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord2
                   eta) -}
0e780a7cd9c8dfee68810fdddca3d7b5
  $fFromIntegralCUIntWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord11
                   eta) -}
3ce514e019efa55b8a34f5f41aa01f22
  $fFromIntegralCUIntWord11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Word.Word8)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Word.Word8
                      @~ <Foreign.C.Types.CUInt -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Word.Word16>_N)) -}
80894b592741f0f49b97b06c1b07fd2e
  $fFromIntegralCUIntWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
98d492dab13d6aafa95116f6172ccbc6
  $fFromIntegralCUIntWord2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Types.Word)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Types.Word
                      @~ <Foreign.C.Types.CUInt -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
2d1e6ddc3a6afeb24173be292f07e43c
  $fFromIntegralCUIntWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Word.Word32>_N)) -}
26dfc9febcb7f4787aadbb3d01c2a8ee
  $fFromIntegralCUIntWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
1e623d36ef2f9470222a3f3e9ae74c0c
  $fFromIntegralCUIntWord4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Word.Word16)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Word.Word16
                      @~ <Foreign.C.Types.CUInt -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
abac54b46940ff6e8048ec677a0a5a21
  $fFromIntegralCUIntWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord6
                   eta) -}
a3f9ff44487aa75d4b987e4ab7794185
  $fFromIntegralCUIntWord6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Word.Word32)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Word.Word32
                      @~ <Foreign.C.Types.CUInt -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Word.Word64>_N)) -}
f68e1f9512e0c9ba53f3767e10991fce
  $fFromIntegralCUIntWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
96cbc3d9f6faa949bab09efac922f87d
  $fFromIntegralCUIntWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUInt)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUIntWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUInt GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUInt>_N <GHC.Word.Word8>_N)) -}
1bf5e92a62918591780fb1a529f80014
  $fFromIntegralCUIntWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
a5360d34474905eb4dd8a5c8dc5f4f07
  $fFromIntegralCUIntWord9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUInt -> GHC.Word.Word64)
                      @ Foreign.C.Types.CUInt
                      @ GHC.Word.Word64
                      @~ <Foreign.C.Types.CUInt -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
d6f23f959c318fee833d26685bfca314
  $fFromIntegralCUIntWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUInt =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CDouble>_N)) -}
b60f3c6c0ab8beef803514f9402f94af
  $fFromIntegralCULLongCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCDouble2
                   eta) -}
3da9bfe9ba11fa9a7d075ca473803451
  $fFromIntegralCULLongCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
ceda7e56ef19590bf7aa3d5946dcaff3
  $fFromIntegralCULLongCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CFloat>_N)) -}
355d6eb6e4781344fc173788b93fbba4
  $fFromIntegralCULLongCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCFloat2
                   eta) -}
d4fb68f331a65b15c06d911efd7a7b9d
  $fFromIntegralCULLongCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
d94e5cdaab6a7c164bb39e2e54b89fbc
  $fFromIntegralCULLongCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CInt>_N)) -}
3ff595ad85ab51b39b2063eb594e1fa4
  $fFromIntegralCULLongCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCInt2
                   eta) -}
6953394d1b2bb385e6e1b4115ca53d06
  $fFromIntegralCULLongCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
c44f994760134d8da818a36485fd1693
  $fFromIntegralCULLongCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CLLong>_N)) -}
bb58ba950114f9999dc0e3dd581ba1ce
  $fFromIntegralCULLongCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCLLong2
                   eta) -}
5d0ce019f3947aadcbd1d0b17071619f
  $fFromIntegralCULLongCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
ea1fbdf3857566adc434fdce99b3ae51
  $fFromIntegralCULLongCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CLong>_N)) -}
81414e73f391e17bafd32ad9c3d8eebd
  $fFromIntegralCULLongCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCLong2
                   eta) -}
5eb5de02a6238f57f782541a2a780ffe
  $fFromIntegralCULLongCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
4e8701601fc76853c4b98c361c069b6b
  $fFromIntegralCULLongCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CShort>_N)) -}
dd0c3f11f964b74c75e3c5076feb5a05
  $fFromIntegralCULLongCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCShort2
                   eta) -}
1677ef5afbd7469337a73485c2e10da4
  $fFromIntegralCULLongCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
c96b23710638c6704070b8ae302a136c
  $fFromIntegralCULLongCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CUInt>_N)) -}
01e26a6c855aa1afa70b9837abac4b92
  $fFromIntegralCULLongCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCUInt2
                   eta) -}
a9b555e89c505cae6bde74105f4ee152
  $fFromIntegralCULLongCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
2ecd0cdb5eec13941dfe892e5997d752
  $fFromIntegralCULLongCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CULLong>_N)) -}
205d45f94218eeddf86a0d379d5f19fc
  $fFromIntegralCULLongCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCULLong2
                   eta) -}
8ae6dd272d0d1e07bb34e028ba1c5754
  $fFromIntegralCULLongCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
b67dc2ca3b5dac577b33ca02750d4095
  $fFromIntegralCULLongCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CULong>_N)) -}
45c6c4adf390235c2063421d787bf597
  $fFromIntegralCULLongCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCULong2
                   eta) -}
4ffc73cfb00e7c89f5ae995ca4dfd4a9
  $fFromIntegralCULLongCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
be29a02c0852d69bbe1dbbd25e2b68f6
  $fFromIntegralCULLongCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CUShort>_N)) -}
28433c06aa0e633267e866f0b9d171ad
  $fFromIntegralCULLongCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCUShort2
                   eta) -}
da7f183e181ffa6b0d5f115c21196dbf
  $fFromIntegralCULLongCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CULLong
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
d35de1b120bdc5726587a2b475500533
  $fFromIntegralCULLongCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Types.Double>_N)) -}
6617dc87fff16ebda9c9bb1e9a5a3c99
  $fFromIntegralCULLongDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongDouble2
                   eta) -}
ce53428ea5938480c7a3f088205aed73
  $fFromIntegralCULLongDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Types.Double)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Types.Double
                      @~ <Foreign.C.Types.CULLong -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
f697724342e37cac17911ca6ed113132
  $fFromIntegralCULLongDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Types.Float>_N)) -}
9748b9b7b4448847fbf0164d122c9d8c
  $fFromIntegralCULLongFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongFloat2
                   eta) -}
c99ad406c28d90a8653f75835132a38c
  $fFromIntegralCULLongFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Types.Float)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Types.Float
                      @~ <Foreign.C.Types.CULLong -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
097c427a4b77d4ef38b07e259f13d4bf
  $fFromIntegralCULLongFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Types.Int>_N)) -}
c3fac95ea6a522c58392172c34b8af7c
  $fFromIntegralCULLongInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt2
                   eta) -}
ea763132f29f2585e1e8f7ea1c905690
  $fFromIntegralCULLongInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt11
                   eta) -}
39ebfe93c098a8177d63b398fc64fbbb
  $fFromIntegralCULLongInt11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Int.Int8)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Int.Int8
                      @~ <Foreign.C.Types.CULLong -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Int.Int16>_N)) -}
8a5c36d467188fc768184bf4bc212627
  $fFromIntegralCULLongInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
721f492b39f4a70dc716c900c36a9a6e
  $fFromIntegralCULLongInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Types.Int)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Types.Int
                      @~ <Foreign.C.Types.CULLong -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
2adb1d2b0c787365264ca20fd0c468df
  $fFromIntegralCULLongInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Int.Int32>_N)) -}
bf516218d5547ce3b192a2a6eee4ca9d
  $fFromIntegralCULLongInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
b8561d0fa82dc15e5b747636df017751
  $fFromIntegralCULLongInt4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Int.Int16)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Int.Int16
                      @~ <Foreign.C.Types.CULLong -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
ca76388e456d834dc009320c36c56985
  $fFromIntegralCULLongInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt6
                   eta) -}
cb4c738974d5acb5ae26b234b2db16ee
  $fFromIntegralCULLongInt6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Int.Int32)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Int.Int32
                      @~ <Foreign.C.Types.CULLong -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Int.Int64>_N)) -}
7e0a9feb48fb621c8e46366cb52b1031
  $fFromIntegralCULLongInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
f44f08d1d6d2de8476c240122dc971b7
  $fFromIntegralCULLongInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Int.Int8>_N)) -}
8db513ceedf568dabd2f2f914ee6cc01
  $fFromIntegralCULLongInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
55a9fcb348a1acbd31a55ba610096600
  $fFromIntegralCULLongInt9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Int.Int64)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Int.Int64
                      @~ <Foreign.C.Types.CULLong -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
d39dbf1fca6b222d8da5545b74c0ea43
  $fFromIntegralCULLongInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Types.Word>_N)) -}
0851f7d61ed982c25b30dd5f3d9bf9b6
  $fFromIntegralCULLongWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord2
                   eta) -}
6f2bcecc615f70bcdb079e57ce304eec
  $fFromIntegralCULLongWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord11
                   eta) -}
bf6c233a10efe5d627ec5734c91c23f5
  $fFromIntegralCULLongWord11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Word.Word8)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Word.Word8
                      @~ <Foreign.C.Types.CULLong -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Word.Word16>_N)) -}
3aee13b33f969f68d3925258c2ad8120
  $fFromIntegralCULLongWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
fac95f742f480113b7bc646692d70e06
  $fFromIntegralCULLongWord2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Types.Word)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Types.Word
                      @~ <Foreign.C.Types.CULLong -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
a8fc9baae863a63d79c00fa146bea223
  $fFromIntegralCULLongWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Word.Word32>_N)) -}
65dbea940a7ba9e4754afa394a7d1c4f
  $fFromIntegralCULLongWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
a59dfd8f522d2d632add7658ede1d088
  $fFromIntegralCULLongWord4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Word.Word16)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Word.Word16
                      @~ <Foreign.C.Types.CULLong -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
1934da2ce6ed019b61421686daa03a8d
  $fFromIntegralCULLongWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord6
                   eta) -}
956befd2cb80a5514e4ca433a7107d24
  $fFromIntegralCULLongWord6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Word.Word32)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Word.Word32
                      @~ <Foreign.C.Types.CULLong -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Word.Word64>_N)) -}
f48027f2377abe67b1aae9635eb55a67
  $fFromIntegralCULLongWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
628417a520e5d4b1fb08546824174a87
  $fFromIntegralCULLongWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULLong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULLongWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULLong GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULLong>_N <GHC.Word.Word8>_N)) -}
e1d7c128a45b0a9551ebf29706c368cc
  $fFromIntegralCULLongWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
a16d840449dba72a6af733611ee046a8
  $fFromIntegralCULLongWord9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULLong -> GHC.Word.Word64)
                      @ Foreign.C.Types.CULLong
                      @ GHC.Word.Word64
                      @~ <Foreign.C.Types.CULLong -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
f612e7bb8996ef71534f5b89325de83b
  $fFromIntegralCULLongWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULLong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CDouble>_N)) -}
23c17d67f162fb326302c5ac3620571c
  $fFromIntegralCULongCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCDouble2
                   eta) -}
dcf2c52f0d87d3722a01e660e9961250
  $fFromIntegralCULongCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
8cab9057de79def0270ae0bc61143210
  $fFromIntegralCULongCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CFloat>_N)) -}
2ff89888b1454c36dfa9a0b0ff9d9df4
  $fFromIntegralCULongCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCFloat2
                   eta) -}
c0ea05e0d62f6e0f407ffca8b978d06a
  $fFromIntegralCULongCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
1e8a845d28b15190d38b507001fc5809
  $fFromIntegralCULongCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CInt>_N)) -}
2a5ba2835564a7fdb3a9f47ba8436ed1
  $fFromIntegralCULongCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCInt2
                   eta) -}
ceae6c6e133e10c62748ee341e6c87b8
  $fFromIntegralCULongCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
749edbe2184b685f55548d55754d2e0e
  $fFromIntegralCULongCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CLLong>_N)) -}
4e5efe31ca653e659394640c5375c0b8
  $fFromIntegralCULongCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCLLong2
                   eta) -}
6a7fe5d3a92bd99fc54b3489bc554331
  $fFromIntegralCULongCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
14cd257ede9449ee11f227b7f9f87388
  $fFromIntegralCULongCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CLong>_N)) -}
b7b25a3806046cf2f6b3b2eb76265bcd
  $fFromIntegralCULongCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCLong2
                   eta) -}
5d8a97c9fd664df1166d2fc8afdfcbaf
  $fFromIntegralCULongCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
0171afe7a4097f8062b448d353f83f1f
  $fFromIntegralCULongCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CShort>_N)) -}
5913a4be1fca1b62639a3c14f64061c7
  $fFromIntegralCULongCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCShort2
                   eta) -}
4906e2956bce6fbfbceafaebb1377f41
  $fFromIntegralCULongCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
31923b92a508d212032b7c7d93d41f32
  $fFromIntegralCULongCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CUInt>_N)) -}
893ec14e9692c3933365fd04a41bed6d
  $fFromIntegralCULongCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCUInt2
                   eta) -}
e59b4e49ba200cd5b986efcfe845c827
  $fFromIntegralCULongCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
681910720175721de57916ecbc122f40
  $fFromIntegralCULongCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CULLong>_N)) -}
4209b505b7391feda7b0b1609e155879
  $fFromIntegralCULongCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCULLong2
                   eta) -}
d17d988122ebd3b4c277e24df1ad81a0
  $fFromIntegralCULongCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
f674c8ae184e766448a9203d144f232e
  $fFromIntegralCULongCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CULong>_N)) -}
1b55bb19ec418aee12f5cbf1268808a5
  $fFromIntegralCULongCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCULong2
                   eta) -}
9ebfd1b227d476b360eecfc31b1c59c9
  $fFromIntegralCULongCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
e79b9bd063eaace2f845549fcff75cf0
  $fFromIntegralCULongCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <Foreign.C.Types.CUShort>_N)) -}
41cde0a4354cdb85c0c59527d095cbf7
  $fFromIntegralCULongCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCUShort2
                   eta) -}
ce046bc2d6ed6facb8d453e1ea0b01fe
  $fFromIntegralCULongCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CULong
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
999e63557744451936695d809c92d205
  $fFromIntegralCULongCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Types.Double>_N)) -}
4d84b9835a19d5e96415b27f702cc1a7
  $fFromIntegralCULongDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongDouble2
                   eta) -}
6279d66da8f26dcbeabdc27c84d46276
  $fFromIntegralCULongDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Types.Double)
                      @ Foreign.C.Types.CULong
                      @ GHC.Types.Double
                      @~ <Foreign.C.Types.CULong -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
55214e4ca9731340f81c37db07d16404
  $fFromIntegralCULongDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Types.Float>_N)) -}
fb73936723ee1d3b2c70f875c18b2817
  $fFromIntegralCULongFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongFloat2
                   eta) -}
f6d04cee489e990e89d3e3cfd9832dcc
  $fFromIntegralCULongFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Types.Float)
                      @ Foreign.C.Types.CULong
                      @ GHC.Types.Float
                      @~ <Foreign.C.Types.CULong -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
9f423411592df1d7d7b5afece477a662
  $fFromIntegralCULongFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Types.Int>_N)) -}
e7ca560c0c56632abf35237a5e4cbed3
  $fFromIntegralCULongInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt2
                   eta) -}
f6bd1f58efc8ad92b848ea37c6a1f713
  $fFromIntegralCULongInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt11
                   eta) -}
546aa8bbcd3f9769961765d41416801a
  $fFromIntegralCULongInt11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Int.Int8)
                      @ Foreign.C.Types.CULong
                      @ GHC.Int.Int8
                      @~ <Foreign.C.Types.CULong -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Int.Int16>_N)) -}
327c4c397842cfbc819ec0555b3cf9ff
  $fFromIntegralCULongInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
5df2eba67a2bd92c8037264dd0a7c47a
  $fFromIntegralCULongInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Types.Int)
                      @ Foreign.C.Types.CULong
                      @ GHC.Types.Int
                      @~ <Foreign.C.Types.CULong -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
471f2f8288321a196f761739145b8995
  $fFromIntegralCULongInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Int.Int32>_N)) -}
45889d4ea12cbc143b4d94b88aed7712
  $fFromIntegralCULongInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
ae4e4f4baee085608fd247e5898d4d9e
  $fFromIntegralCULongInt4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Int.Int16)
                      @ Foreign.C.Types.CULong
                      @ GHC.Int.Int16
                      @~ <Foreign.C.Types.CULong -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
49c79fe7a44394c60353d4fb5236cbe0
  $fFromIntegralCULongInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt6
                   eta) -}
9283b1bad5b3ce5688ae6cae2892817f
  $fFromIntegralCULongInt6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Int.Int32)
                      @ Foreign.C.Types.CULong
                      @ GHC.Int.Int32
                      @~ <Foreign.C.Types.CULong -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Int.Int64>_N)) -}
f7441d303617c47352564e4330f1b9eb
  $fFromIntegralCULongInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
1b3efd40f5d855c6b63ec015a0e2d64b
  $fFromIntegralCULongInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Int.Int8>_N)) -}
67bdd8502d69e5354ec3c813f1f36466
  $fFromIntegralCULongInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
cdb383ad68348ac62ab4d67c39565df9
  $fFromIntegralCULongInt9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Int.Int64)
                      @ Foreign.C.Types.CULong
                      @ GHC.Int.Int64
                      @~ <Foreign.C.Types.CULong -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
324ccbc18e881020efe826c3937209fb
  $fFromIntegralCULongInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Types.Word>_N)) -}
aa43eeb939bacc6569f6001ce939ef08
  $fFromIntegralCULongWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord2
                   eta) -}
f579e9c8bd1949f1dd9b0f742db8cbdc
  $fFromIntegralCULongWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord11
                   eta) -}
2b0608d8d66bf2205c9f86c40b70e4dd
  $fFromIntegralCULongWord11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Word.Word8)
                      @ Foreign.C.Types.CULong
                      @ GHC.Word.Word8
                      @~ <Foreign.C.Types.CULong -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Word.Word16>_N)) -}
1bf565c27faa2153b11aec04245f307e
  $fFromIntegralCULongWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
e72e3e244ba2897838a53e2bba0ca314
  $fFromIntegralCULongWord2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Types.Word)
                      @ Foreign.C.Types.CULong
                      @ GHC.Types.Word
                      @~ <Foreign.C.Types.CULong -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
c7504e95fc84dd1cdc9ca7ea396537c8
  $fFromIntegralCULongWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Word.Word32>_N)) -}
ea9bca201b7f7d6d99269733a12f5f2e
  $fFromIntegralCULongWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
9f11a2c8b08810f8b6f5c5b74f744332
  $fFromIntegralCULongWord4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Word.Word16)
                      @ Foreign.C.Types.CULong
                      @ GHC.Word.Word16
                      @~ <Foreign.C.Types.CULong -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
3b23cfb7ae66157f1cf6b4cfe1b37eac
  $fFromIntegralCULongWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord6
                   eta) -}
dbc04b8f59f198f9cbf887acc83777be
  $fFromIntegralCULongWord6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Word.Word32)
                      @ Foreign.C.Types.CULong
                      @ GHC.Word.Word32
                      @~ <Foreign.C.Types.CULong -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Word.Word64>_N)) -}
e8e34e5704f8613526379acf36943c0a
  $fFromIntegralCULongWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
41fb4b83fda9684b0518f29e7975c754
  $fFromIntegralCULongWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CULong)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCULongWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CULong GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CULong>_N <GHC.Word.Word8>_N)) -}
370de149ed447922fd2c319d180b916f
  $fFromIntegralCULongWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
7a4d374d3f9e4d14aee33d38c17a15ea
  $fFromIntegralCULongWord9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CULong -> GHC.Word.Word64)
                      @ Foreign.C.Types.CULong
                      @ GHC.Word.Word64
                      @~ <Foreign.C.Types.CULong -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
62028ff4e45819dbf1d923f62e782ea5
  $fFromIntegralCULongWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CULong =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CDouble>_N)) -}
9f5f6dda51d97402e00d64fa999bdaca
  $fFromIntegralCUShortCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCDouble2
                   eta) -}
690ed0cb61051db15bb691414fd4d8c7
  $fFromIntegralCUShortCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
07e8f4bd7db528387e337f46ac0b4148
  $fFromIntegralCUShortCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CFloat>_N)) -}
6a27c2800707e11d805a5eb5c6223f90
  $fFromIntegralCUShortCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCFloat2
                   eta) -}
3b3c05174950ab6c00d50d20ca0c206e
  $fFromIntegralCUShortCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
84766a38f36e1a39fe9e13505a4416cc
  $fFromIntegralCUShortCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CInt>_N)) -}
a2925653aec45ef9d9cdbf6f5a31b2b6
  $fFromIntegralCUShortCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCInt2
                   eta) -}
40bf39a4183ddd74d6d5005208163623
  $fFromIntegralCUShortCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
a64afaa30f9e8a0180e5a3d44a077132
  $fFromIntegralCUShortCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CLLong>_N)) -}
78eb597234cb8813b12204ed879ce0f0
  $fFromIntegralCUShortCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCLLong2
                   eta) -}
8057852175aed91434bffc970ac88061
  $fFromIntegralCUShortCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
cfefbd9664c1c786878dc5b84e651534
  $fFromIntegralCUShortCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CLong>_N)) -}
bb000c9b31d1089505e7f6a6d6ef240a
  $fFromIntegralCUShortCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCLong2
                   eta) -}
ee1892b7844406c86f34622555706a5c
  $fFromIntegralCUShortCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
4f96fe0512136b3b7d2fbad37c006997
  $fFromIntegralCUShortCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CShort>_N)) -}
71acf08457a5d2b5bd09affa3b1fd2a4
  $fFromIntegralCUShortCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCShort2
                   eta) -}
4d89ae75a408caa9951993d8b3e00f0a
  $fFromIntegralCUShortCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
6117372e11edc97d808d31db4f8bcd9e
  $fFromIntegralCUShortCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CUInt>_N)) -}
dec13e56dd9a4a6c707f07a5403db897
  $fFromIntegralCUShortCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCUInt2
                   eta) -}
c1ad3eff421c208bbb68d4ce7a7bd0d7
  $fFromIntegralCUShortCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
93bfeccfce1d1a705047ca43e9499b38
  $fFromIntegralCUShortCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CULLong>_N)) -}
27cd422e0867d4bdb6f42a6b818b9950
  $fFromIntegralCUShortCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCULLong2
                   eta) -}
b8fc603639b989d4ba6daac7a807eb69
  $fFromIntegralCUShortCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
8ef1c12722c6faf133b9b53d955d7df0
  $fFromIntegralCUShortCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CULong>_N)) -}
c83d9a2c1ea9d736e038db56d2176b0f
  $fFromIntegralCUShortCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCULong2
                   eta) -}
83b2952ab4d39cfe1a85e7f855f883fd
  $fFromIntegralCUShortCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
f8761ce9a715f9f3f26da510fb54089f
  $fFromIntegralCUShortCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CUShort>_N)) -}
b3d54f167dadfba070a01fafd05785ba
  $fFromIntegralCUShortCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCUShort2
                   eta) -}
87cba9f2acefe97e1a608fa5b914208a
  $fFromIntegralCUShortCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CUShort
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
7d783a0a45449ce2a7066c008afdd365
  $fFromIntegralCUShortCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Types.Double>_N)) -}
a3418679ed1189f6df39261ff1ce7d60
  $fFromIntegralCUShortDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortDouble2
                   eta) -}
d92ffdf058676479ee5299b395b650be
  $fFromIntegralCUShortDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Types.Double)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Types.Double
                      @~ <Foreign.C.Types.CUShort -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
d9ddfea401538953aaf4a1d005a896d9
  $fFromIntegralCUShortDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Types.Float>_N)) -}
ed2013352ab65964c1e4d5ad297b5e51
  $fFromIntegralCUShortFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortFloat2
                   eta) -}
dfd7414507c2f43c07cabf9489fe7f4f
  $fFromIntegralCUShortFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Types.Float)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Types.Float
                      @~ <Foreign.C.Types.CUShort -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
4652b0aa793d6f237e91b4c960dbc148
  $fFromIntegralCUShortFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Types.Int>_N)) -}
ee006805a743fff7942d6c2a34a29d28
  $fFromIntegralCUShortInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt2
                   eta) -}
568f87acc0d5d99b3106b6f24bd5fc6f
  $fFromIntegralCUShortInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt11
                   eta) -}
6d8bf330dcca2f73e408aa11912fe1ea
  $fFromIntegralCUShortInt11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Int.Int8)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Int.Int8
                      @~ <Foreign.C.Types.CUShort -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Int.Int16>_N)) -}
e8f0beb75f98283357bff0085b36ee8b
  $fFromIntegralCUShortInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
29e96858857ceee4da684b7dcf4bde4a
  $fFromIntegralCUShortInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Types.Int)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Types.Int
                      @~ <Foreign.C.Types.CUShort -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
9009a660a713019756da7e98dcfdf3d6
  $fFromIntegralCUShortInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Int.Int32>_N)) -}
479a3aa0c3b78d2ebf3ae3689d1688c5
  $fFromIntegralCUShortInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
b39202629886fc0910123fcacedc22ac
  $fFromIntegralCUShortInt4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Int.Int16)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Int.Int16
                      @~ <Foreign.C.Types.CUShort -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
e974985b19ad5ef063c92e828ec99813
  $fFromIntegralCUShortInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt6
                   eta) -}
cec15e112eaf506523ecc2336dbc059f
  $fFromIntegralCUShortInt6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Int.Int32)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Int.Int32
                      @~ <Foreign.C.Types.CUShort -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Int.Int64>_N)) -}
0af389d93e5fe10269c124780b3cabc7
  $fFromIntegralCUShortInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
13e34ceed2b6982fd1586a34f653cb16
  $fFromIntegralCUShortInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Int.Int8>_N)) -}
52e9e167c6946896d60be0b260323547
  $fFromIntegralCUShortInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
b0e62ee948cf9c9c438e61afb160ac4d
  $fFromIntegralCUShortInt9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Int.Int64)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Int.Int64
                      @~ <Foreign.C.Types.CUShort -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
3568da1e7396f131ef7e22a65ceb468d
  $fFromIntegralCUShortInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Types.Word>_N)) -}
fc1b95844b440b379da06001dd402fc3
  $fFromIntegralCUShortWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord2
                   eta) -}
0971eb32fcbfd17553911d35aa6b1116
  $fFromIntegralCUShortWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord11
                   eta) -}
2c35662df3b59396f69b7764829c2332
  $fFromIntegralCUShortWord11 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Word.Word8)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Word.Word8
                      @~ <Foreign.C.Types.CUShort -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Word.Word16>_N)) -}
3f0b0867adf2969f7a91f1c1b24fef6b
  $fFromIntegralCUShortWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
ad841814e7bbc335262216d905a42e67
  $fFromIntegralCUShortWord2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Types.Word)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Types.Word
                      @~ <Foreign.C.Types.CUShort -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
fd98427cd7295ceff085bad32f3e8fb9
  $fFromIntegralCUShortWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Word.Word32>_N)) -}
b196b2a4ade34e5512021a0f15a995d3
  $fFromIntegralCUShortWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
910b6f99f4823b8ff9f689f8a6e9e660
  $fFromIntegralCUShortWord4 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Word.Word16)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Word.Word16
                      @~ <Foreign.C.Types.CUShort -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
a72ff597294626102bdcbb87fc6de9bd
  $fFromIntegralCUShortWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord6
                   eta) -}
daadfb1f16a9397c2355cebcb47d26a1
  $fFromIntegralCUShortWord6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Word.Word32)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Word.Word32
                      @~ <Foreign.C.Types.CUShort -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Word.Word64>_N)) -}
9e927b82ba157bb02bb836243228e5af
  $fFromIntegralCUShortWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
576d65c74c666c96dddc8ec648599091
  $fFromIntegralCUShortWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  Foreign.C.Types.CUShort)
                   (eta :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralCUShortWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      Foreign.C.Types.CUShort GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <Foreign.C.Types.CUShort>_N <GHC.Word.Word8>_N)) -}
b1761133062f0bf286cb381dfaff43e9
  $fFromIntegralCUShortWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
7d92072bed423901b3ddf0f78e312cd9
  $fFromIntegralCUShortWord9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (Foreign.C.Types.CUShort -> GHC.Word.Word64)
                      @ Foreign.C.Types.CUShort
                      @ GHC.Word.Word64
                      @~ <Foreign.C.Types.CUShort -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
279e53b4ce453cd48d097b4c9f08ccd1
  $fFromIntegralCUShortWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral
      Foreign.C.Types.CUShort =>
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CDouble>_N)) -}
25c6505520b4a382bf54e0256739dc4a
  $fFromIntegralInt16CDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CDouble2
                   eta) -}
95b13b0eb47e0e230b506116299d5009
  $fFromIntegralInt16CDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CDouble)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
30bb876ac5306b8dc8619d9d3b927ff5
  $fFromIntegralInt16CDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CFloat>_N)) -}
acc230ad33581de7e72b83dad5ff11ee
  $fFromIntegralInt16CFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CFloat2
                   eta) -}
89fbd25f797765f99b119ae5e7089104
  $fFromIntegralInt16CFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CFloat)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
201af2e71d6ccc82318c0d44b1a1ac44
  $fFromIntegralInt16CFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CInt>_N)) -}
662567c91a62943b2c2eaa85099b2ee0
  $fFromIntegralInt16CInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CInt2
                   eta) -}
e0e3dd38f133ce87f7b8ff51b2a34af5
  $fFromIntegralInt16CInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CInt)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
8ecd1f332e109a82c0075710acaaadf3
  $fFromIntegralInt16CInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CLLong>_N)) -}
52931ceb4263c7c8c914f3252f56afaa
  $fFromIntegralInt16CLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CLLong2
                   eta) -}
ee7f056d1fc885430fe366e44f96659c
  $fFromIntegralInt16CLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CLLong)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
501288af4325281d7863192fa0e35a08
  $fFromIntegralInt16CLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CLong>_N)) -}
6327524dfa9d940a01657f926d31cf1a
  $fFromIntegralInt16CLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CLong2
                   eta) -}
cad6aedd5a18f02ec85e98efd3b1ba4a
  $fFromIntegralInt16CLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CLong)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
7b2f711e2e3ee4ffdc73917a20b6390e
  $fFromIntegralInt16CLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CShort>_N)) -}
c730cb6efd4f09a6cfe002a1d1796e30
  $fFromIntegralInt16CShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CShort2
                   eta) -}
52b2f07ed4fbb95591a2b69acdffe77c
  $fFromIntegralInt16CShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CShort)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
6a3e31400d69bed46071bf5ea50cf741
  $fFromIntegralInt16CShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CUInt>_N)) -}
0399baa77fee2d5a0cabfa4e4575cc9c
  $fFromIntegralInt16CUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CUInt2
                   eta) -}
3dc6c0585b140cfb3d3545ea6b762b38
  $fFromIntegralInt16CUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CUInt)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
0a42212880826b70e127c852fa109858
  $fFromIntegralInt16CUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CULLong>_N)) -}
53b9f6b705a8c18978e2e749ef1bcb91
  $fFromIntegralInt16CULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CULLong2
                   eta) -}
97ca0267afccbb107052971461d6c38f
  $fFromIntegralInt16CULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CULLong)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
59c16330d6270b3d77b5165432293771
  $fFromIntegralInt16CULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CULong>_N)) -}
429640fda7c33723c25ab7e68210bf5d
  $fFromIntegralInt16CULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CULong2
                   eta) -}
471032c88dca18a5e99f4850b2d7d894
  $fFromIntegralInt16CULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CULong)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
f9da8c16a31d1c1ff2df1f9328d4df8a
  $fFromIntegralInt16CULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16CUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <Foreign.C.Types.CUShort>_N)) -}
dcd1aab35b75c2f4ddf3fa4b919a7324
  $fFromIntegralInt16CUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CUShort2
                   eta) -}
1bc37d236ca91b085405c90296c9857d
  $fFromIntegralInt16CUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> Foreign.C.Types.CUShort)
                      @ GHC.Int.Int16
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Int.Int16 -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
a7e5138704acb32da341e855d98cadb8
  $fFromIntegralInt16CUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Double ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Double_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Types.Double>_N)) -}
aa9f1097897fde85d64c1e305f7aaef2
  $fFromIntegralInt16Double1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Double2
                   eta) -}
32b4f95c8720cba71b713af2990fa939
  $fFromIntegralInt16Double2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Types.Double)
                      @ GHC.Int.Int16
                      @ GHC.Types.Double
                      @~ <GHC.Int.Int16 -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
0d881cec4b235edaef0677c78ca36842
  $fFromIntegralInt16Double_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Double1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Float ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Float_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Types.Float>_N)) -}
ab95510b8f400cf6c47f68f69d544939
  $fFromIntegralInt16Float1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Float2
                   eta) -}
f51d20ed6ad71a90092b106dafb34138
  $fFromIntegralInt16Float2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Types.Float)
                      @ GHC.Int.Int16
                      @ GHC.Types.Float
                      @~ <GHC.Int.Int16 -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
46f87d63f73b263d78cb556fb460a514
  $fFromIntegralInt16Float_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Float1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Int ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Types.Int>_N)) -}
6a9c41edd7a2b0f850db5060aefa123c
  $fFromIntegralInt16Int1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int2
                   eta) -}
f62d3452373d146e99031d05ae4ea07e
  $fFromIntegralInt16Int10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int11
                   eta) -}
4eb9e5db89965c4fdfbdd4642bc6ee67
  $fFromIntegralInt16Int11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Int.Int8)
                      @ GHC.Int.Int16
                      @ GHC.Int.Int8
                      @~ <GHC.Int.Int16 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Int16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Int.Int16>_N)) -}
b2cf769ca9a4765e38ad8c2ea2d2b1c2
  $fFromIntegralInt16Int16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
73d0dedd58f68356be297ae8b0addbae
  $fFromIntegralInt16Int2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Types.Int)
                      @ GHC.Int.Int16
                      @ GHC.Types.Int
                      @~ <GHC.Int.Int16 -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
c99fa22973a6d3306aec7e8226d381a7
  $fFromIntegralInt16Int3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Int32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Int.Int32>_N)) -}
7a70d4e9221023126e5c2bea1986c0be
  $fFromIntegralInt16Int32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
103fce749e6d0b02959e780a1865361c
  $fFromIntegralInt16Int4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Int.Int16)
                      @ GHC.Int.Int16
                      @ GHC.Int.Int16
                      @~ <GHC.Int.Int16 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
cdb75667617b793e35264b62cae51e41
  $fFromIntegralInt16Int5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int6
                   eta) -}
d230f017d3fa8ac8b165a1401721f4c3
  $fFromIntegralInt16Int6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Int.Int32)
                      @ GHC.Int.Int16
                      @ GHC.Int.Int32
                      @~ <GHC.Int.Int16 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Int64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Int.Int64>_N)) -}
53d061c8302b9ab9507c405cc6ebf9e0
  $fFromIntegralInt16Int64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
f835629450ebc276eec1813e1af5af89
  $fFromIntegralInt16Int7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Int8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Int.Int8>_N)) -}
b57be40a1614907d4fe5ba1505a22898
  $fFromIntegralInt16Int8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
6110f6588c6a521b3805d5323fc1b532
  $fFromIntegralInt16Int9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Int.Int64)
                      @ GHC.Int.Int16
                      @ GHC.Int.Int64
                      @~ <GHC.Int.Int16 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
c990b097aec76ba52d8062d42f50a4fc
  $fFromIntegralInt16Int_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Word ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Types.Word>_N)) -}
f4c7d2b40ab82702c2d6e161747421b0
  $fFromIntegralInt16Word1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word2
                   eta) -}
fc468b8784b6d796e8a5128efee98a5f
  $fFromIntegralInt16Word10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word11
                   eta) -}
94925fd81849f4239ad32b50f6218081
  $fFromIntegralInt16Word11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Word.Word8)
                      @ GHC.Int.Int16
                      @ GHC.Word.Word8
                      @~ <GHC.Int.Int16 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Word16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Word.Word16>_N)) -}
e2ce0ea66811c358042de8abe16d8b07
  $fFromIntegralInt16Word16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
9fd622fee5ca412c2fd4926a1cc82f7c
  $fFromIntegralInt16Word2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Types.Word)
                      @ GHC.Int.Int16
                      @ GHC.Types.Word
                      @~ <GHC.Int.Int16 -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
33922cd1e4d0b35e0fd4cd0ea361a846
  $fFromIntegralInt16Word3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Word32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Word.Word32>_N)) -}
b5e4a59cbbe6cd4e4ad49c74ac51edad
  $fFromIntegralInt16Word32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
1524d20175201520cb71abbe8585f76a
  $fFromIntegralInt16Word4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Word.Word16)
                      @ GHC.Int.Int16
                      @ GHC.Word.Word16
                      @~ <GHC.Int.Int16 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
5b5fcfe20678c3a5cb6261bcd3a8faa9
  $fFromIntegralInt16Word5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word6
                   eta) -}
be92997fae7c520b1b3b62ff197429f8
  $fFromIntegralInt16Word6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Word.Word32)
                      @ GHC.Int.Int16
                      @ GHC.Word.Word32
                      @~ <GHC.Int.Int16 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Word64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Word.Word64>_N)) -}
9182bb594040d1bb891e1747e7b0aba8
  $fFromIntegralInt16Word64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
1a74b6e9a0315f925f83758e8c8216e7
  $fFromIntegralInt16Word7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt16Word8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int16 GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int16>_N <GHC.Word.Word8>_N)) -}
850563cc6506be862a84d7d24f3d4e1d
  $fFromIntegralInt16Word8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
54b346baa1dd9662e76210430333e3b1
  $fFromIntegralInt16Word9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int16 -> GHC.Word.Word64)
                      @ GHC.Int.Int16
                      @ GHC.Word.Word64
                      @~ <GHC.Int.Int16 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
761bc35541af98d05e2e60ed77658c9a
  $fFromIntegralInt16Word_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CDouble>_N)) -}
0b26624f960db2b89faa5d904badcefb
  $fFromIntegralInt32CDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CDouble2
                   eta) -}
d085d61b25e6f5bff5df4d3f720e4321
  $fFromIntegralInt32CDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CDouble)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
4619a8954dbc3513fc9996d0211979e1
  $fFromIntegralInt32CDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CFloat>_N)) -}
13f4a846a51d71f97ea27fda2f66d5cb
  $fFromIntegralInt32CFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CFloat2
                   eta) -}
ba0c2d059814f6e347b47101a7512d49
  $fFromIntegralInt32CFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CFloat)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
9b11646fda6cd56cd974dc6e02ffaf2b
  $fFromIntegralInt32CFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CInt>_N)) -}
4543430821782ab9b248136c49ac18c1
  $fFromIntegralInt32CInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CInt2
                   eta) -}
613fb513a03110b37655e5541434f4db
  $fFromIntegralInt32CInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CInt)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
9a6409b70c677dbe90595030df1f1265
  $fFromIntegralInt32CInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CLLong>_N)) -}
5761905b5c41f9875c1471549a33a6bf
  $fFromIntegralInt32CLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CLLong2
                   eta) -}
65ec318699c35fe63a3301dec095f1e3
  $fFromIntegralInt32CLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CLLong)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
220db8756894d24d6fc55bf88f6fe515
  $fFromIntegralInt32CLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CLong>_N)) -}
e80c107f17ffec9f170f6c6c2de61123
  $fFromIntegralInt32CLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CLong2
                   eta) -}
e87aa435c79fb79cec7411a686449753
  $fFromIntegralInt32CLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CLong)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
54c6251f43c9484fd487637ba219437a
  $fFromIntegralInt32CLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CShort>_N)) -}
2a070de005c848577b22f5e2ace8ae9b
  $fFromIntegralInt32CShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CShort2
                   eta) -}
f1fced8e4defd1c7ec77d829605502e2
  $fFromIntegralInt32CShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CShort)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
2c9e8997eec418a9de8a3704d8190abb
  $fFromIntegralInt32CShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CUInt>_N)) -}
c80ade1ede0dadab03b9bb4343eb4184
  $fFromIntegralInt32CUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CUInt2
                   eta) -}
05bd29b07a7791a31a73e42aeb366103
  $fFromIntegralInt32CUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CUInt)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
fb3a31688ae786489411a140856c56e0
  $fFromIntegralInt32CUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CULLong>_N)) -}
e642660f04eb20fdc0de0d2ad1fab336
  $fFromIntegralInt32CULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CULLong2
                   eta) -}
9c25f8bc9607821e6fae0e203efc605e
  $fFromIntegralInt32CULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CULLong)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
d50ee82f0bb377d62b714b20c9a65811
  $fFromIntegralInt32CULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CULong>_N)) -}
89bb636201b58d43746cb81c5c145e75
  $fFromIntegralInt32CULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CULong2
                   eta) -}
12b542af46045cca9f8ee311c6320e42
  $fFromIntegralInt32CULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CULong)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
4557f1a01f3d35dad0772b900b797730
  $fFromIntegralInt32CULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32CUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <Foreign.C.Types.CUShort>_N)) -}
a2a8ab7566d975ed465b5881f67ab6c1
  $fFromIntegralInt32CUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CUShort2
                   eta) -}
81c32183aadebdee87a7aea5c7b224c4
  $fFromIntegralInt32CUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> Foreign.C.Types.CUShort)
                      @ GHC.Int.Int32
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Int.Int32 -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
2ac9ebceb8f7d8bcb914176ecb1fa7fd
  $fFromIntegralInt32CUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Double ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Double_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Types.Double>_N)) -}
872981488277dcaa7eab7e34392a3862
  $fFromIntegralInt32Double1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Double2
                   eta) -}
19170d21f8185027e329891c76e0b2cc
  $fFromIntegralInt32Double2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Types.Double)
                      @ GHC.Int.Int32
                      @ GHC.Types.Double
                      @~ <GHC.Int.Int32 -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
c265916f44344c97e0544192779721ea
  $fFromIntegralInt32Double_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Double1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Float ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Float_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Types.Float>_N)) -}
1e5d6134826fc2d4719ec889b9a269ec
  $fFromIntegralInt32Float1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Float2
                   eta) -}
9f8b151bab7ba3923400a64a67b25e26
  $fFromIntegralInt32Float2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Types.Float)
                      @ GHC.Int.Int32
                      @ GHC.Types.Float
                      @~ <GHC.Int.Int32 -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
58254bcd96c44806b67130f784dd51f8
  $fFromIntegralInt32Float_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Float1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Int ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Types.Int>_N)) -}
5a08887f2432271e02fc511aeafd4bb7
  $fFromIntegralInt32Int1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int2
                   eta) -}
13a8810c7d6d5b24246373344ae3521e
  $fFromIntegralInt32Int10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int11
                   eta) -}
22cec290f95a38fb106def258d4cb03c
  $fFromIntegralInt32Int11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Int.Int8)
                      @ GHC.Int.Int32
                      @ GHC.Int.Int8
                      @~ <GHC.Int.Int32 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Int16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Int.Int16>_N)) -}
d438f1cc12104c1155faf312b8c6bf52
  $fFromIntegralInt32Int16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
7d8ce19c82ad9963762dc840a27ef200
  $fFromIntegralInt32Int2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Types.Int)
                      @ GHC.Int.Int32
                      @ GHC.Types.Int
                      @~ <GHC.Int.Int32 -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
1c32d7c1e127c44b895e05e69028b5fe
  $fFromIntegralInt32Int3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Int32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Int.Int32>_N)) -}
55407f717dd5ab2b87e93d8a87f7441e
  $fFromIntegralInt32Int32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
dc86523bddb5825951136d95bde47755
  $fFromIntegralInt32Int4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Int.Int16)
                      @ GHC.Int.Int32
                      @ GHC.Int.Int16
                      @~ <GHC.Int.Int32 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
2cafb1b95f24fdf397efcd7fd3a111a4
  $fFromIntegralInt32Int5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int6
                   eta) -}
54e449bb1c3737121e5126285192c72e
  $fFromIntegralInt32Int6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Int.Int32)
                      @ GHC.Int.Int32
                      @ GHC.Int.Int32
                      @~ <GHC.Int.Int32 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Int64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Int.Int64>_N)) -}
674fe528f4e41bbec39a5befb2028627
  $fFromIntegralInt32Int64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
2cff79a467fa5dcd1587c524e375caad
  $fFromIntegralInt32Int7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Int8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Int.Int8>_N)) -}
23464427ffedf78711d67deeeb981ac3
  $fFromIntegralInt32Int8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
dc16ee9e04ffa1dfa604304ebf98ad5c
  $fFromIntegralInt32Int9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Int.Int64)
                      @ GHC.Int.Int32
                      @ GHC.Int.Int64
                      @~ <GHC.Int.Int32 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
c556e9c4be3fda15fdb2c99fd10ab19b
  $fFromIntegralInt32Int_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Word ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Types.Word>_N)) -}
3d20997328b4bbce96e19faa691cb8dd
  $fFromIntegralInt32Word1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word2
                   eta) -}
dae11d04ea54e0095cc5921c492cc0c9
  $fFromIntegralInt32Word10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word11
                   eta) -}
cbc4f14f86db4c6926aac7b21c4bb5ad
  $fFromIntegralInt32Word11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Word.Word8)
                      @ GHC.Int.Int32
                      @ GHC.Word.Word8
                      @~ <GHC.Int.Int32 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Word16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Word.Word16>_N)) -}
d34684b64e8d62d90b16921ce9d17e81
  $fFromIntegralInt32Word16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
46dfe112b9d85268cca48776d5b01840
  $fFromIntegralInt32Word2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Types.Word)
                      @ GHC.Int.Int32
                      @ GHC.Types.Word
                      @~ <GHC.Int.Int32 -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
8ddc223ed81cd9af88f97706948d838f
  $fFromIntegralInt32Word3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Word32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Word.Word32>_N)) -}
0e4351fa72dd9ef775d06781a2d96160
  $fFromIntegralInt32Word32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
b0019318f8832426871664769172e7cb
  $fFromIntegralInt32Word4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Word.Word16)
                      @ GHC.Int.Int32
                      @ GHC.Word.Word16
                      @~ <GHC.Int.Int32 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
22464e217a10b45c37282557cc8361c9
  $fFromIntegralInt32Word5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word6
                   eta) -}
ee2fb91e094fbf2ce48623d0327930f3
  $fFromIntegralInt32Word6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Word.Word32)
                      @ GHC.Int.Int32
                      @ GHC.Word.Word32
                      @~ <GHC.Int.Int32 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Word64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Word.Word64>_N)) -}
25014c6263c1c54ae88a00059192b139
  $fFromIntegralInt32Word64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
c5fa108b57fee84c006b7416a82fb03d
  $fFromIntegralInt32Word7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt32Word8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int32 GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int32>_N <GHC.Word.Word8>_N)) -}
9b34338b8ebd8a7ed87c787343eefe91
  $fFromIntegralInt32Word8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
a0a2ed52b2783b152e68e64e40da005a
  $fFromIntegralInt32Word9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int32 -> GHC.Word.Word64)
                      @ GHC.Int.Int32
                      @ GHC.Word.Word64
                      @~ <GHC.Int.Int32 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
3e70a86d9347c08176bb0d7a0cc2175d
  $fFromIntegralInt32Word_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CDouble>_N)) -}
e813260fac52f82e78f6c578a1035a6f
  $fFromIntegralInt64CDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CDouble2
                   eta) -}
5766e78f791d7977bbcc1fb7cfda71df
  $fFromIntegralInt64CDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CDouble)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
95052478bc17835506be5ec28197c3c4
  $fFromIntegralInt64CDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CFloat>_N)) -}
98c8cacf2e6483382c4347ed52888518
  $fFromIntegralInt64CFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CFloat2
                   eta) -}
bf7fcd1debc452d45552d77c7cd7be93
  $fFromIntegralInt64CFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CFloat)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
b17fba7963a7cecc3ef923dc7ab566d8
  $fFromIntegralInt64CFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CInt>_N)) -}
c929c2dfe49826d7895bedc2c3831719
  $fFromIntegralInt64CInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CInt2
                   eta) -}
d6902b9f55e95cdf1548f83089c46422
  $fFromIntegralInt64CInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CInt)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
26879c05501e45057b5ed854b9dd3ae8
  $fFromIntegralInt64CInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CLLong>_N)) -}
b3e68faa683aca5b26de0c9bd45abf5a
  $fFromIntegralInt64CLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CLLong2
                   eta) -}
21af0b3bebdc65480d291a9b7566c147
  $fFromIntegralInt64CLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CLLong)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
5e6160e68640e5240aacb3b3f107549e
  $fFromIntegralInt64CLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CLong>_N)) -}
cbdc7b493964f5b59bba8ba9f4641bd6
  $fFromIntegralInt64CLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CLong2
                   eta) -}
44619518acbf55a81bf033430313e898
  $fFromIntegralInt64CLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CLong)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
d08298560f136e41933d3288849387b0
  $fFromIntegralInt64CLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CShort>_N)) -}
3280e9e01d5dd192ad310a6f90dfea4c
  $fFromIntegralInt64CShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CShort2
                   eta) -}
7d34090eb4bf08c732f11b9c34612a33
  $fFromIntegralInt64CShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CShort)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
96852fdf58e5dbc12ba7349edf8ac46e
  $fFromIntegralInt64CShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CUInt>_N)) -}
49e392a8d8e5156539051d2873d2c82f
  $fFromIntegralInt64CUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CUInt2
                   eta) -}
3b1ac0bbf4cf384d477227386b5ea231
  $fFromIntegralInt64CUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CUInt)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
2cd33334cdad79c069f191d4c2870f72
  $fFromIntegralInt64CUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CULLong>_N)) -}
909ca7e2956fa4aefa4bc3ad02d5663f
  $fFromIntegralInt64CULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CULLong2
                   eta) -}
fec95266b55f83b473a3dd684a3bf256
  $fFromIntegralInt64CULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CULLong)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
a8effe839d7cce8acd485d3739c8c37e
  $fFromIntegralInt64CULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CULong>_N)) -}
4a1c91503672b6a69ca39b607bbd3ce0
  $fFromIntegralInt64CULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CULong2
                   eta) -}
51f3d83179cb0d3af0cc0c0a8319c1c5
  $fFromIntegralInt64CULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CULong)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
32d0ba0d34cf32f55f85208ef36a195a
  $fFromIntegralInt64CULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64CUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <Foreign.C.Types.CUShort>_N)) -}
90c53f36b33e0e0251f68bb1fef04cb6
  $fFromIntegralInt64CUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CUShort2
                   eta) -}
730d080d4c89bbeba5f824be5fd4a173
  $fFromIntegralInt64CUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> Foreign.C.Types.CUShort)
                      @ GHC.Int.Int64
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Int.Int64 -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
0b1e7f3aa40d5ef2987e38c261841dcc
  $fFromIntegralInt64CUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Double ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Double_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Types.Double>_N)) -}
c3a65dab7cb354363ca1624af17ad4ff
  $fFromIntegralInt64Double1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Double2
                   eta) -}
41ae533c2b80cadf618b43c71506f6e7
  $fFromIntegralInt64Double2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Types.Double)
                      @ GHC.Int.Int64
                      @ GHC.Types.Double
                      @~ <GHC.Int.Int64 -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
17e568b343ecf72816c1f0eb4ad795e1
  $fFromIntegralInt64Double_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Double1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Float ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Float_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Types.Float>_N)) -}
4b207d951b54968cfd8aa3988c81402f
  $fFromIntegralInt64Float1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Float2
                   eta) -}
67dca91e4b2514627ab9a74c6a51fe80
  $fFromIntegralInt64Float2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Types.Float)
                      @ GHC.Int.Int64
                      @ GHC.Types.Float
                      @~ <GHC.Int.Int64 -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
aac63667f63cf09b42443460472aa8f4
  $fFromIntegralInt64Float_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Float1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Int ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Types.Int>_N)) -}
7df44461c9ff0eed7cafa67cbef41ef9
  $fFromIntegralInt64Int1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int2
                   eta) -}
cc0345ccf19349c919b94e61aa528e35
  $fFromIntegralInt64Int10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int11
                   eta) -}
055b5f088aaa4fdd830e1e936ae46f35
  $fFromIntegralInt64Int11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Int.Int8)
                      @ GHC.Int.Int64
                      @ GHC.Int.Int8
                      @~ <GHC.Int.Int64 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Int16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Int.Int16>_N)) -}
6b6b888012281e9977e5f9c37e6cb870
  $fFromIntegralInt64Int16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
f15130b6f4274ed4ae29a1c1362b2dda
  $fFromIntegralInt64Int2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Types.Int)
                      @ GHC.Int.Int64
                      @ GHC.Types.Int
                      @~ <GHC.Int.Int64 -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
ee4a53d8355675ee5f7cec6a1ae34556
  $fFromIntegralInt64Int3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Int32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Int.Int32>_N)) -}
42f3e3ccb1c34e34e15448cdce834c45
  $fFromIntegralInt64Int32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
e2e1ca5076a50b05e5612f460d6f6961
  $fFromIntegralInt64Int4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Int.Int16)
                      @ GHC.Int.Int64
                      @ GHC.Int.Int16
                      @~ <GHC.Int.Int64 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
425a2214781a4fd75262b8dc6ecb0b6c
  $fFromIntegralInt64Int5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int6
                   eta) -}
2e4608a972c9062c55402865e056fc1c
  $fFromIntegralInt64Int6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Int.Int32)
                      @ GHC.Int.Int64
                      @ GHC.Int.Int32
                      @~ <GHC.Int.Int64 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Int64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Int.Int64>_N)) -}
981efbbe5937e8dc0b35715e483d20b1
  $fFromIntegralInt64Int64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
b1f96b6337bf6b6638997e40b6e34449
  $fFromIntegralInt64Int7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Int8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Int.Int8>_N)) -}
1c360f64264e6fb7afdbbd671525e94d
  $fFromIntegralInt64Int8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
7127c5f0a7188c7f6f277733eca47749
  $fFromIntegralInt64Int9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Int.Int64)
                      @ GHC.Int.Int64
                      @ GHC.Int.Int64
                      @~ <GHC.Int.Int64 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
16870045235d1a5d31ec1aa38a0cefb8
  $fFromIntegralInt64Int_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Word ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Types.Word>_N)) -}
08243dfaee437aa038c0c077156b9258
  $fFromIntegralInt64Word1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word2
                   eta) -}
593dc7c3723e4611bce60eaae84bff1a
  $fFromIntegralInt64Word10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word11
                   eta) -}
706a139f4afe9df5c17496b5a0cd5506
  $fFromIntegralInt64Word11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Word.Word8)
                      @ GHC.Int.Int64
                      @ GHC.Word.Word8
                      @~ <GHC.Int.Int64 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Word16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Word.Word16>_N)) -}
9a301302f728df070e09202b6ba0f6cb
  $fFromIntegralInt64Word16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
114e422ad2fb55b2d82ced4f10707772
  $fFromIntegralInt64Word2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Types.Word)
                      @ GHC.Int.Int64
                      @ GHC.Types.Word
                      @~ <GHC.Int.Int64 -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
521cdad8fbeb8bbd47fec7d5a66de19f
  $fFromIntegralInt64Word3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Word32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Word.Word32>_N)) -}
0af5081760896d7f37d30b9c30195023
  $fFromIntegralInt64Word32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
c6fcdd846eec4801f7449f39069fc9b4
  $fFromIntegralInt64Word4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Word.Word16)
                      @ GHC.Int.Int64
                      @ GHC.Word.Word16
                      @~ <GHC.Int.Int64 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
834a7b3d6e6fec5db43dc45f81ba18e5
  $fFromIntegralInt64Word5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word6
                   eta) -}
948ba72bc32d5fa17827b994e7cc0a99
  $fFromIntegralInt64Word6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Word.Word32)
                      @ GHC.Int.Int64
                      @ GHC.Word.Word32
                      @~ <GHC.Int.Int64 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Word64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Word.Word64>_N)) -}
5ce2bcdf7f477588d2f7dc8621d057a5
  $fFromIntegralInt64Word64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
d68b12c57da8f929511ba358961ff4df
  $fFromIntegralInt64Word7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt64Word8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int64 GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int64>_N <GHC.Word.Word8>_N)) -}
4af37865608913a849721ca85713a385
  $fFromIntegralInt64Word8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
e6c30205a64794f62475c311a72ae01a
  $fFromIntegralInt64Word9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int64 -> GHC.Word.Word64)
                      @ GHC.Int.Int64
                      @ GHC.Word.Word64
                      @~ <GHC.Int.Int64 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
c13b6884724e96a023486444338ecdd7
  $fFromIntegralInt64Word_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CDouble>_N)) -}
83e7ce43cb06fe474a2fa6f1186c2669
  $fFromIntegralInt8CDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CDouble2
                   eta) -}
d91d1021df50f4a0286c61362e96a43a
  $fFromIntegralInt8CDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CDouble)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
abc55aa992de597426a79d6b7ca41f30
  $fFromIntegralInt8CDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CFloat>_N)) -}
be2cd7ca0ca9009717cc0f9a5671b205
  $fFromIntegralInt8CFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CFloat2
                   eta) -}
64f3b3fede4deffb6119ed53435d37a3
  $fFromIntegralInt8CFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CFloat)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
35c611814dda2dd75ed67f1fba570e3e
  $fFromIntegralInt8CFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CInt>_N)) -}
b558a77f4ee7dcf71f4ee9c360c56a41
  $fFromIntegralInt8CInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CInt2
                   eta) -}
4c0ce6a24e57c21c2868afacc323526f
  $fFromIntegralInt8CInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CInt)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
3ed964c81ff27a782a8ca1deb3050ded
  $fFromIntegralInt8CInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CLLong>_N)) -}
fccf1b306954d5bd33d66c16285e728f
  $fFromIntegralInt8CLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CLLong2
                   eta) -}
f399a1422e9411ccb3faf8612fbb8af1
  $fFromIntegralInt8CLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CLLong)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
3cc65b47ce2cebc7bc32e14184677999
  $fFromIntegralInt8CLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CLong>_N)) -}
bcd6306dc99bf183c2f11a4fed55d41d
  $fFromIntegralInt8CLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CLong2
                   eta) -}
c8d6f75d882695d29ee1eddb905e8af8
  $fFromIntegralInt8CLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CLong)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
22ba6249e8145e6180df42090b59cec3
  $fFromIntegralInt8CLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CShort>_N)) -}
99be2d373c9dd9f630a0dff58f864850
  $fFromIntegralInt8CShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CShort2
                   eta) -}
ff2892756c122852de1aca2772621105
  $fFromIntegralInt8CShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CShort)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
446d623bd0877a054f766fc55469caa3
  $fFromIntegralInt8CShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CUInt>_N)) -}
94af033d5b7b393c8ab7adbd892c0293
  $fFromIntegralInt8CUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CUInt2
                   eta) -}
b7bbc6a61dd42d5c1c68bc782f699873
  $fFromIntegralInt8CUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CUInt)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
e372bb8971ea61e840bf6c91c3c9a7da
  $fFromIntegralInt8CUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CULLong>_N)) -}
bb66d3778518522b5de5baa11ee567fe
  $fFromIntegralInt8CULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CULLong2
                   eta) -}
a8ba259577b1151bafc605f0bd24755c
  $fFromIntegralInt8CULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CULLong)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
67aa8d7beb7bb14d8f297a4430c52951
  $fFromIntegralInt8CULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CULong>_N)) -}
f20d577f13561ae97179dc838790c5ec
  $fFromIntegralInt8CULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CULong2
                   eta) -}
0ca7d476a044a6f8bc1aad8cd0e02a1b
  $fFromIntegralInt8CULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CULong)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
23b1d01d0aa62c66929af6a47c974b72
  $fFromIntegralInt8CULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8CUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <Foreign.C.Types.CUShort>_N)) -}
698eac5ffa9d66b405570d9c1f79bb78
  $fFromIntegralInt8CUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CUShort2
                   eta) -}
5db51710e61f023b5d76a6229c800fab
  $fFromIntegralInt8CUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> Foreign.C.Types.CUShort)
                      @ GHC.Int.Int8
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Int.Int8 -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
49e0fb2df59ecea6fcaf6e5c5f472820
  $fFromIntegralInt8CUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Double ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Double_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Types.Double>_N)) -}
7bd0e32dd71b6a253871867139426177
  $fFromIntegralInt8Double1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Double2
                   eta) -}
427e3bda257ecab197228de08b284d57
  $fFromIntegralInt8Double2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Types.Double)
                      @ GHC.Int.Int8
                      @ GHC.Types.Double
                      @~ <GHC.Int.Int8 -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
d139ad6e428695314eb2b79c3e9c26cb
  $fFromIntegralInt8Double_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Double1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Float ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Float_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Types.Float>_N)) -}
016e2c2c8370c64031284fe50d9eb22d
  $fFromIntegralInt8Float1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Float2
                   eta) -}
1239084227121cd6582af6c138c3bc79
  $fFromIntegralInt8Float2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Types.Float)
                      @ GHC.Int.Int8
                      @ GHC.Types.Float
                      @~ <GHC.Int.Int8 -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
ab462be0c7fb1bfd3ec966da2afd3a2b
  $fFromIntegralInt8Float_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Float1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Int ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Types.Int>_N)) -}
b9a32f373341164b62fe315133ba2aa8
  $fFromIntegralInt8Int1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int2
                   eta) -}
72111b22b3ffc8909f89d1c429600dda
  $fFromIntegralInt8Int10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int11
                   eta) -}
509c30476b5cc1e418c34d58d5f42043
  $fFromIntegralInt8Int11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Int.Int8)
                      @ GHC.Int.Int8
                      @ GHC.Int.Int8
                      @~ <GHC.Int.Int8 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Int16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Int.Int16>_N)) -}
3d1a1c9fe8f7bdb3d6a6601bbf03572c
  $fFromIntegralInt8Int16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
96c222f8420d1bb888fc6a1d57fb775d
  $fFromIntegralInt8Int2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Types.Int)
                      @ GHC.Int.Int8
                      @ GHC.Types.Int
                      @~ <GHC.Int.Int8 -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
7ce8289537c717b84e86a2bf55ca95c3
  $fFromIntegralInt8Int3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Int32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Int.Int32>_N)) -}
ace47f0f3c29a9efb5effb9f14ba772d
  $fFromIntegralInt8Int32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
82122b86bc7dc61fd316a4f267421a44
  $fFromIntegralInt8Int4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Int.Int16)
                      @ GHC.Int.Int8
                      @ GHC.Int.Int16
                      @~ <GHC.Int.Int8 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
e753a458620f7efcd92cfda8f649d50b
  $fFromIntegralInt8Int5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int6
                   eta) -}
cd436df0fadfaa47f3439938bee1df11
  $fFromIntegralInt8Int6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Int.Int32)
                      @ GHC.Int.Int8
                      @ GHC.Int.Int32
                      @~ <GHC.Int.Int8 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Int64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Int.Int64>_N)) -}
754298f8d54ac4755324ac1c77e2efb9
  $fFromIntegralInt8Int64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
479c23887ab6db04f58d80c91032a8ec
  $fFromIntegralInt8Int7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Int8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Int.Int8>_N)) -}
dad8e55b6e9cf7dcfde2ad40a0c6d7e3
  $fFromIntegralInt8Int8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
20e07cd14d84d4b9dd0a1b88a93080ba
  $fFromIntegralInt8Int9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Int.Int64)
                      @ GHC.Int.Int8
                      @ GHC.Int.Int64
                      @~ <GHC.Int.Int8 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
c9d519a86d323874e514ecd51b7948ff
  $fFromIntegralInt8Int_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Word ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Types.Word>_N)) -}
e03963527f88087eabd2802e9d4a53b0
  $fFromIntegralInt8Word1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word2
                   eta) -}
ac437132be2f0afa65ee0c5d300f05d6
  $fFromIntegralInt8Word10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word11
                   eta) -}
997ef12fecd73c2daf5d4bce77bb9ef9
  $fFromIntegralInt8Word11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Word.Word8)
                      @ GHC.Int.Int8
                      @ GHC.Word.Word8
                      @~ <GHC.Int.Int8 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Word16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Word.Word16>_N)) -}
fdd8bd74ba7da0ace21245f7eb33affc
  $fFromIntegralInt8Word16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
c16da90ced35f5a5e07c9259e70f141f
  $fFromIntegralInt8Word2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Types.Word)
                      @ GHC.Int.Int8
                      @ GHC.Types.Word
                      @~ <GHC.Int.Int8 -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
518bb3192a51c4cd1de34f564973fb22
  $fFromIntegralInt8Word3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Word32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Word.Word32>_N)) -}
473500898badb5227e61ee3dce8e5689
  $fFromIntegralInt8Word32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
eec3f590e4f45c1f8e221fc38e204a02
  $fFromIntegralInt8Word4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Word.Word16)
                      @ GHC.Int.Int8
                      @ GHC.Word.Word16
                      @~ <GHC.Int.Int8 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
3e902ce946067636c35c25b35f2bdb10
  $fFromIntegralInt8Word5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word6
                   eta) -}
b410b5646f954d4bcbcdd73dc1cc3cc0
  $fFromIntegralInt8Word6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Word.Word32)
                      @ GHC.Int.Int8
                      @ GHC.Word.Word32
                      @~ <GHC.Int.Int8 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Word64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Word.Word64>_N)) -}
e08e01762089cb6af2765166437a604e
  $fFromIntegralInt8Word64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
736678662e884bd435df268c39c99c82
  $fFromIntegralInt8Word7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Int.Int8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralInt8Word8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Int.Int8 GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Int.Int8>_N <GHC.Word.Word8>_N)) -}
de704bc48ce5d8888f917716119e4aad
  $fFromIntegralInt8Word8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
a8675dc569a9fa65e8036c328a36d1e1
  $fFromIntegralInt8Word9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Int.Int8 -> GHC.Word.Word64)
                      @ GHC.Int.Int8
                      @ GHC.Word.Word64
                      @~ <GHC.Int.Int8 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
07851985b0c628ea520eb1c33bba55fc
  $fFromIntegralInt8Word_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CDouble>_N)) -}
3a429c87c52e358a71a6abe54e399180
  $fFromIntegralIntCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCDouble2
                   eta) -}
43a391656dbc20c7ca0e93a6c41d5d70
  $fFromIntegralIntCDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CDouble)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Types.Int -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
80329ddf160bee42efd6e0fb3c921137
  $fFromIntegralIntCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CFloat>_N)) -}
1e8021be25d8c8dc52b5962341d4780d
  $fFromIntegralIntCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCFloat2
                   eta) -}
6835e3ee80c7b63407d2986f985cf313
  $fFromIntegralIntCFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CFloat)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Types.Int -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
8d1905421e204c1128cd70054d321722
  $fFromIntegralIntCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CInt>_N)) -}
4b8bd79558796ccee9b4bb6c10ecbacd
  $fFromIntegralIntCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCInt2
                   eta) -}
1de33a64ac033ea3511393ff53bc8c6d
  $fFromIntegralIntCInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CInt)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Types.Int -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
15d5c905b3847de526c9e6c637641910
  $fFromIntegralIntCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CLLong>_N)) -}
d803bbf4b6166e503c2e2a8151b47220
  $fFromIntegralIntCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCLLong2
                   eta) -}
4eaade23fa85035c6840819443bd2ca8
  $fFromIntegralIntCLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CLLong)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Types.Int -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
eabf56b0e923d1dab03971c9a9c3b274
  $fFromIntegralIntCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CLong>_N)) -}
f11a292ed87bb54f80fcaf32e4312e0a
  $fFromIntegralIntCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCLong2
                   eta) -}
1678301553c7e7da6ce0efdba18b5559
  $fFromIntegralIntCLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CLong)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Types.Int -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
17bf562edc8d7d75f3b066548a86e8bc
  $fFromIntegralIntCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CShort>_N)) -}
f26e16e01c063a124b60d280c31f107a
  $fFromIntegralIntCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCShort2
                   eta) -}
1887dbd26b790fd5331f63455ed43ddc
  $fFromIntegralIntCShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CShort)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Types.Int -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
e7c0e82122436ac5e167532793d71bd8
  $fFromIntegralIntCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CUInt>_N)) -}
e02d761036033fcc4905be82ce89d8b9
  $fFromIntegralIntCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCUInt2
                   eta) -}
cfdbb54cde4ed600e91b2d73dc461b3e
  $fFromIntegralIntCUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CUInt)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Types.Int -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
1f0d1bfae867b0b823a05fa6205ad5a7
  $fFromIntegralIntCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CULLong>_N)) -}
912a0f4ee01b4724880e0a2dfaba65c9
  $fFromIntegralIntCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCULLong2
                   eta) -}
440e086efa695befe42b6aa661870b30
  $fFromIntegralIntCULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CULLong)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Types.Int -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
321ff280e456dee7d61655ec9719801a
  $fFromIntegralIntCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CULong>_N)) -}
f43700acca170e5659ac18ae35c852ff
  $fFromIntegralIntCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCULong2
                   eta) -}
9a943efac255f234dea56f3e25b9d193
  $fFromIntegralIntCULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CULong)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Types.Int -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
b72f37686b42caeab2bf721c2fe4c308
  $fFromIntegralIntCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <Foreign.C.Types.CUShort>_N)) -}
925fe32deaa83a05720f7160175aba14
  $fFromIntegralIntCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCUShort2
                   eta) -}
048991548d09c1e2920c3e50bc3dda53
  $fFromIntegralIntCUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> Foreign.C.Types.CUShort)
                      @ GHC.Types.Int
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Types.Int -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
389cc204297c8c110246ad2abb9e555e
  $fFromIntegralIntCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Types.Double>_N)) -}
0cadaedab64f75ae547ff5c4f79334a0
  $fFromIntegralIntDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntDouble2
                   eta) -}
801505029a78d1215f6a3383951f4e1b
  $fFromIntegralIntDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Types.Double)
                      @ GHC.Types.Int
                      @ GHC.Types.Double
                      @~ <GHC.Types.Int -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
76b647872fb2019c0bedb61643933529
  $fFromIntegralIntDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Types.Float>_N)) -}
dc4b571e29312e17fe8191ab3f1be602
  $fFromIntegralIntFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntFloat2
                   eta) -}
1c961eb5ce319e22536e56f2e7f52e88
  $fFromIntegralIntFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Types.Float)
                      @ GHC.Types.Int
                      @ GHC.Types.Float
                      @~ <GHC.Types.Int -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
dc809b098ae4d7d870e9cdc85cdadef9
  $fFromIntegralIntFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Types.Int>_N)) -}
893a03479f2fee6ad3ca6d7915e3f4a2
  $fFromIntegralIntInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt2
                   eta) -}
4d08ac61134878eaf47742c4bf9e6f52
  $fFromIntegralIntInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt11
                   eta) -}
279ea75eb06d76804c4c734e3b8d4896
  $fFromIntegralIntInt11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Int.Int8)
                      @ GHC.Types.Int
                      @ GHC.Int.Int8
                      @~ <GHC.Types.Int -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Int.Int16>_N)) -}
e94d1bd431bdfe7e6fa386912da5840f
  $fFromIntegralIntInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
5bc585fd9653a1281f4d97c8d46bb20b
  $fFromIntegralIntInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Types.Int)
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      @~ <GHC.Types.Int -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
bb23caad208fbf98ff0f5fb906157bd6
  $fFromIntegralIntInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Int.Int32>_N)) -}
bab76af93ae1f72988b6154c48d6b2d6
  $fFromIntegralIntInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
6eb0aa2ed41bca9fa9b2b0cc373f3479
  $fFromIntegralIntInt4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Int.Int16)
                      @ GHC.Types.Int
                      @ GHC.Int.Int16
                      @~ <GHC.Types.Int -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
9b296ec847c21479e4a75a83d869c256
  $fFromIntegralIntInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt6
                   eta) -}
24542ca99014b5306519ef95a3e2aad3
  $fFromIntegralIntInt6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Int.Int32)
                      @ GHC.Types.Int
                      @ GHC.Int.Int32
                      @~ <GHC.Types.Int -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Int.Int64>_N)) -}
e7b2c9dd5dcca1b22fe5922e2225c54d
  $fFromIntegralIntInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
6d5700300a35a25d7913fe2aa0c6ec51
  $fFromIntegralIntInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Int.Int8>_N)) -}
22a453f0df8acca954b9caa94fa85859
  $fFromIntegralIntInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
a35ce1a2fc1d4dfaf19208ffd355bdc0
  $fFromIntegralIntInt9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Int.Int64)
                      @ GHC.Types.Int
                      @ GHC.Int.Int64
                      @~ <GHC.Types.Int -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
55b2e357ca22562d648f6fba31e5f061
  $fFromIntegralIntInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Types.Word>_N)) -}
8d34693a9b5f328657245be5b9885cb6
  $fFromIntegralIntWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord2
                   eta) -}
30a3379dd9386abe4bae6c81f7127f0c
  $fFromIntegralIntWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord11
                   eta) -}
3daefceb5066e0ccc4bfc343bf93ef03
  $fFromIntegralIntWord11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Word.Word8)
                      @ GHC.Types.Int
                      @ GHC.Word.Word8
                      @~ <GHC.Types.Int -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Word.Word16>_N)) -}
b0bc1ca601e298af2c3f8c40dfad836a
  $fFromIntegralIntWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
2efa84c437cc83eea8d7a83ebda4b295
  $fFromIntegralIntWord2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Types.Word)
                      @ GHC.Types.Int
                      @ GHC.Types.Word
                      @~ <GHC.Types.Int -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
9d1f42d2523f4ef20731bc851edaca30
  $fFromIntegralIntWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Word.Word32>_N)) -}
ee055ee5a64c28b99468ed88c2778a40
  $fFromIntegralIntWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
947f4b3a3feb1f2081bf21ea21476315
  $fFromIntegralIntWord4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Word.Word16)
                      @ GHC.Types.Int
                      @ GHC.Word.Word16
                      @~ <GHC.Types.Int -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
1e17e04b1afa21ba30a5b43df0a0fbb0
  $fFromIntegralIntWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord6
                   eta) -}
45a8168a98407c253136c772c5d1978f
  $fFromIntegralIntWord6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Word.Word32)
                      @ GHC.Types.Int
                      @ GHC.Word.Word32
                      @~ <GHC.Types.Int -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Word.Word64>_N)) -}
c54a420f0691e91c5bcbfcc6dca0dd30
  $fFromIntegralIntWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
9160b1e8043e6ce52ec9701b4b888163
  $fFromIntegralIntWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Int)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralIntWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Int GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Int>_N <GHC.Word.Word8>_N)) -}
9f826de9037106ef00c9734cdd5d9d35
  $fFromIntegralIntWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
1f57b7f8f6dd019d88bb2257933cc940
  $fFromIntegralIntWord9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Int -> GHC.Word.Word64)
                      @ GHC.Types.Int
                      @ GHC.Word.Word64
                      @~ <GHC.Types.Int -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
084513234309d3e118334d19071116df
  $fFromIntegralIntWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CDouble>_N)) -}
b675be0bf5e259a6bd4cb7ad0d8237c5
  $fFromIntegralWord16CDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CDouble2
                   eta) -}
00ddb7d8399203ef64c7a818623fc740
  $fFromIntegralWord16CDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CDouble)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
14ce2cfa81c7aa2e4925691c72f1d9dc
  $fFromIntegralWord16CDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CFloat>_N)) -}
ab49c2c135eaeb7da0052c0a1acacf26
  $fFromIntegralWord16CFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CFloat2
                   eta) -}
a44f651b8b069dd347d2666f0abc4526
  $fFromIntegralWord16CFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CFloat)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
7d02660ad49df1ab41093a0ccb8656aa
  $fFromIntegralWord16CFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CInt>_N)) -}
5566d37669b02ebf00563b20fdf0217a
  $fFromIntegralWord16CInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CInt2
                   eta) -}
cb8d2c415a6975f04acbf32e812e61b1
  $fFromIntegralWord16CInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CInt)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
2bd54cb333a7f1fc92222d2975264ca1
  $fFromIntegralWord16CInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CLLong>_N)) -}
ec2ef4901c63af7edebbe43a036ce656
  $fFromIntegralWord16CLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CLLong2
                   eta) -}
13a8f2d099c102d0f9eb8f5c1d3bbad5
  $fFromIntegralWord16CLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CLLong)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
203de493b38ebba8c602765a0371ab43
  $fFromIntegralWord16CLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CLong>_N)) -}
adec1fe07a5eaadbbd3f2e323fef33c1
  $fFromIntegralWord16CLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CLong2
                   eta) -}
793d736e3e3e25c012605511bb57cd1f
  $fFromIntegralWord16CLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CLong)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
7c9894e2f2bdb03603ac9a45f00d723d
  $fFromIntegralWord16CLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CShort>_N)) -}
b08a0860436fc582b48507fcc56a5888
  $fFromIntegralWord16CShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CShort2
                   eta) -}
0ec725045e409963b2574459a495433f
  $fFromIntegralWord16CShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CShort)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
4926a80978e242b8472ec7d4a1d3d935
  $fFromIntegralWord16CShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CUInt>_N)) -}
d843a68a81ecde63885336772c045e7f
  $fFromIntegralWord16CUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CUInt2
                   eta) -}
f319c6896664dd216578acf2cd0a43d6
  $fFromIntegralWord16CUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CUInt)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
208490dfcd700dac7ad1050b790774d1
  $fFromIntegralWord16CUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CULLong>_N)) -}
5138830991cfe8bf8c60a6d3e1ad7a61
  $fFromIntegralWord16CULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CULLong2
                   eta) -}
fadbd9349ea17f9eb951b001faff4788
  $fFromIntegralWord16CULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CULLong)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
5e8e94dc47e8a6fbc62e17214932b878
  $fFromIntegralWord16CULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CULong>_N)) -}
9db6c2f1cdf1738697551cebc047bcf4
  $fFromIntegralWord16CULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CULong2
                   eta) -}
858a493a0d4faa3c3a842e2bac4dc19e
  $fFromIntegralWord16CULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CULong)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
7269fb7cef5ada6b891a1a7281795f89
  $fFromIntegralWord16CULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16CUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <Foreign.C.Types.CUShort>_N)) -}
32864f063260f1f7c409b92b8e740067
  $fFromIntegralWord16CUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CUShort2
                   eta) -}
0b84dc50a91cf1bf561313deafba622a
  $fFromIntegralWord16CUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> Foreign.C.Types.CUShort)
                      @ GHC.Word.Word16
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Word.Word16 -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
fed98f9b63431d155eb8e3fd8c14bb04
  $fFromIntegralWord16CUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Double ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Double_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Types.Double>_N)) -}
425bed8b5133377617ab9a8f5418226e
  $fFromIntegralWord16Double1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Double2
                   eta) -}
54165dcbb2a3ae482feff471eb832ff1
  $fFromIntegralWord16Double2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Types.Double)
                      @ GHC.Word.Word16
                      @ GHC.Types.Double
                      @~ <GHC.Word.Word16 -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
2f7371f9ce67c740ebb7c9422afe7fb4
  $fFromIntegralWord16Double_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Double1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Float ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Float_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Types.Float>_N)) -}
ccc021971b14fbe5dffbda8ed370b534
  $fFromIntegralWord16Float1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Float2
                   eta) -}
9edfe75af5201c73ec2643d7a8aa57be
  $fFromIntegralWord16Float2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Types.Float)
                      @ GHC.Word.Word16
                      @ GHC.Types.Float
                      @~ <GHC.Word.Word16 -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
fa6a50a240b04985de3e94b1952eaced
  $fFromIntegralWord16Float_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Float1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Int ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Types.Int>_N)) -}
dc453c080922e53f3ebaf7f17c72d62a
  $fFromIntegralWord16Int1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int2
                   eta) -}
269c36cf648652a14af44dc65c009e54
  $fFromIntegralWord16Int10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int11
                   eta) -}
7c67af5879f6b52d92bcbf098dced8f1
  $fFromIntegralWord16Int11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Int.Int8)
                      @ GHC.Word.Word16
                      @ GHC.Int.Int8
                      @~ <GHC.Word.Word16 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Int16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Int.Int16>_N)) -}
0a5cb4fc42c39ef1c63a902cd30a6006
  $fFromIntegralWord16Int16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
f48a70ba3cc29052d86bc780db4b314b
  $fFromIntegralWord16Int2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Types.Int)
                      @ GHC.Word.Word16
                      @ GHC.Types.Int
                      @~ <GHC.Word.Word16 -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
6260d39bfdbd2b5c9c2d9fd0d10aee70
  $fFromIntegralWord16Int3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Int32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Int.Int32>_N)) -}
5d2dc7784df9381ed84a066902ef9baf
  $fFromIntegralWord16Int32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
e2d9c0d1773f3f58018ee660794d0f33
  $fFromIntegralWord16Int4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Int.Int16)
                      @ GHC.Word.Word16
                      @ GHC.Int.Int16
                      @~ <GHC.Word.Word16 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
df1ba4a7a9dbe3a95c0df7c3c9d4803f
  $fFromIntegralWord16Int5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int6
                   eta) -}
00476aa9bddf361d2d6bf382b024c82b
  $fFromIntegralWord16Int6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Int.Int32)
                      @ GHC.Word.Word16
                      @ GHC.Int.Int32
                      @~ <GHC.Word.Word16 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Int64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Int.Int64>_N)) -}
e2aca503e22cb7532c0e7f5064a06ad4
  $fFromIntegralWord16Int64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
ded7d017c7bc23a95d49958da5578626
  $fFromIntegralWord16Int7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Int8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Int.Int8>_N)) -}
f52a8b84066dccf0be0e35071b2a6a94
  $fFromIntegralWord16Int8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
c2a15e93f9af141a9f6ab9bed71fdced
  $fFromIntegralWord16Int9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Int.Int64)
                      @ GHC.Word.Word16
                      @ GHC.Int.Int64
                      @~ <GHC.Word.Word16 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
22a800af2c30a721bdc4061d5861be62
  $fFromIntegralWord16Int_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Word ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Types.Word>_N)) -}
b06c53a43d8ba897e32c13b0aed04f5e
  $fFromIntegralWord16Word1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word2
                   eta) -}
9407589da10445f42dfda77d10efed8d
  $fFromIntegralWord16Word10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word11
                   eta) -}
fd53c99cbe0bc084aa85bfb567b7d470
  $fFromIntegralWord16Word11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Word.Word8)
                      @ GHC.Word.Word16
                      @ GHC.Word.Word8
                      @~ <GHC.Word.Word16 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Word16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Word.Word16>_N)) -}
8156d55941eceb1ebf663f634ca8cb45
  $fFromIntegralWord16Word16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
88afb5554350cdeec2ca344cd83057aa
  $fFromIntegralWord16Word2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Types.Word)
                      @ GHC.Word.Word16
                      @ GHC.Types.Word
                      @~ <GHC.Word.Word16 -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
f354d2e1ca2b75d9c767de65d9a41ccd
  $fFromIntegralWord16Word3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Word32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Word.Word32>_N)) -}
311bf45fc79d3e5ca68fd1057120dc34
  $fFromIntegralWord16Word32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
9e68b18afefba55b9645efd810a9226e
  $fFromIntegralWord16Word4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Word.Word16)
                      @ GHC.Word.Word16
                      @ GHC.Word.Word16
                      @~ <GHC.Word.Word16 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
6acf7e751fbdc97156c2d2879c4a4826
  $fFromIntegralWord16Word5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word6
                   eta) -}
84dfbb13cbb68f0e2a7b2126fcbbd122
  $fFromIntegralWord16Word6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Word.Word32)
                      @ GHC.Word.Word16
                      @ GHC.Word.Word32
                      @~ <GHC.Word.Word16 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Word64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Word.Word64>_N)) -}
03678b2715a45b09e20adc9003f88002
  $fFromIntegralWord16Word64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
c79707f3d08caf7c3fd65d5a584d9363
  $fFromIntegralWord16Word7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word16)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord16Word8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word16 GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word16>_N <GHC.Word.Word8>_N)) -}
8877e0341c00bcd771e0a43892eeec22
  $fFromIntegralWord16Word8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
8504957cebe846b416f3bd3cf105055f
  $fFromIntegralWord16Word9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word16 -> GHC.Word.Word64)
                      @ GHC.Word.Word16
                      @ GHC.Word.Word64
                      @~ <GHC.Word.Word16 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
ae1438bbb06ee7d9ff027bd4de6c9d7e
  $fFromIntegralWord16Word_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word16 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CDouble>_N)) -}
48fbf68c6090e4dc9e6faa088761f8dd
  $fFromIntegralWord32CDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CDouble2
                   eta) -}
f64e3fa410fae05acfd9632baa50f19b
  $fFromIntegralWord32CDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CDouble)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
b6d226211d3423692216026282c91ca2
  $fFromIntegralWord32CDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CFloat>_N)) -}
cd18e70f7acacd07e1250a570a067c92
  $fFromIntegralWord32CFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CFloat2
                   eta) -}
3310193a45910b82ea15faa1f8ddd0fd
  $fFromIntegralWord32CFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CFloat)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
d80c455c9fff66233055b01509702c25
  $fFromIntegralWord32CFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CInt>_N)) -}
da80fc8e6c31c397ff77a40fa5bc9f6a
  $fFromIntegralWord32CInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CInt2
                   eta) -}
8dffc7ed5053ae34a200dafe17b89bbd
  $fFromIntegralWord32CInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CInt)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
4ece3c1e25e7fb344e645dfe5c9112ad
  $fFromIntegralWord32CInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CLLong>_N)) -}
f02d444846ed2e93a01af503dc473482
  $fFromIntegralWord32CLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CLLong2
                   eta) -}
5c749b72e5beaa83a2ea518302d5cc1d
  $fFromIntegralWord32CLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CLLong)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
9d905a6e114453f4617825d2efdc7a69
  $fFromIntegralWord32CLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CLong>_N)) -}
bb13ccb48afc3d74f1013b815f315fbd
  $fFromIntegralWord32CLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CLong2
                   eta) -}
bddc326396a63cbb761e6c9029d69009
  $fFromIntegralWord32CLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CLong)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
b1aa16acc5e82fe7c7c32e2429c614f0
  $fFromIntegralWord32CLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CShort>_N)) -}
8672714ed3095fd23b4df766e9bb50fa
  $fFromIntegralWord32CShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CShort2
                   eta) -}
50c250f680b3575619691593384f04a2
  $fFromIntegralWord32CShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CShort)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
5a4392dbe613e51fd1b8cfd9196ea7e1
  $fFromIntegralWord32CShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CUInt>_N)) -}
10430a8be91333fe2f585bbc5d28d2d8
  $fFromIntegralWord32CUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CUInt2
                   eta) -}
991247a046432838749fd66acc02f9bc
  $fFromIntegralWord32CUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CUInt)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
dd5ef768ca8c67f7bf29f979c8a3ac1b
  $fFromIntegralWord32CUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CULLong>_N)) -}
6feeea2dbae3294b0ccc9a2ecd224ab6
  $fFromIntegralWord32CULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CULLong2
                   eta) -}
f6e309e3bf69af7f734b8b3cc7ccfdbe
  $fFromIntegralWord32CULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CULLong)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
649ed7107d4a892983fb9b4b1e450395
  $fFromIntegralWord32CULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CULong>_N)) -}
455a8207dc82b852f6ce27bb44b999a9
  $fFromIntegralWord32CULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CULong2
                   eta) -}
bc10ecc1b184a98efce15bf8369f5c80
  $fFromIntegralWord32CULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CULong)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
96d7d85e7f4658c21bbd2a597daf471f
  $fFromIntegralWord32CULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32CUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <Foreign.C.Types.CUShort>_N)) -}
df518102dd18830a8284fe5852e260d8
  $fFromIntegralWord32CUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CUShort2
                   eta) -}
552c60715e49cd1619a489b76b2dce7a
  $fFromIntegralWord32CUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> Foreign.C.Types.CUShort)
                      @ GHC.Word.Word32
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Word.Word32 -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
b66a42fa576abe78a1760d0966779df0
  $fFromIntegralWord32CUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Double ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Double_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Types.Double>_N)) -}
ed4dd7dbd4464363c65419203915b35d
  $fFromIntegralWord32Double1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Double2
                   eta) -}
c8601d4785a93e32241a0cf1e381ac82
  $fFromIntegralWord32Double2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Types.Double)
                      @ GHC.Word.Word32
                      @ GHC.Types.Double
                      @~ <GHC.Word.Word32 -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
a5eb669a0ae3c764ca7ba4a491ccfb44
  $fFromIntegralWord32Double_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Double1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Float ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Float_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Types.Float>_N)) -}
fcfc4400c82a3395f55dfecb963269df
  $fFromIntegralWord32Float1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Float2
                   eta) -}
092526741e7ecaddbaab2f9f25f764f5
  $fFromIntegralWord32Float2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Types.Float)
                      @ GHC.Word.Word32
                      @ GHC.Types.Float
                      @~ <GHC.Word.Word32 -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
457a2df641a94bcaeebfe855c98498e6
  $fFromIntegralWord32Float_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Float1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Int ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Types.Int>_N)) -}
2bfb43d6af3f9bb2d6d76318f2679b5e
  $fFromIntegralWord32Int1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int2
                   eta) -}
de6646541f20102ff878c8af272a31da
  $fFromIntegralWord32Int10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int11
                   eta) -}
eba8f0d61339fe0510b94fe7d97ab3a8
  $fFromIntegralWord32Int11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Int.Int8)
                      @ GHC.Word.Word32
                      @ GHC.Int.Int8
                      @~ <GHC.Word.Word32 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Int16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Int.Int16>_N)) -}
df0eeb5d99cc6b061e1a993659a13a98
  $fFromIntegralWord32Int16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
7343bf469fdce8142c643790b497a010
  $fFromIntegralWord32Int2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Types.Int)
                      @ GHC.Word.Word32
                      @ GHC.Types.Int
                      @~ <GHC.Word.Word32 -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
ba9c6d4d6800075c24144149a26fbf25
  $fFromIntegralWord32Int3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Int32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Int.Int32>_N)) -}
8634699c24a390855bc908c959578025
  $fFromIntegralWord32Int32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
42a3b40156d1019b9820de2b301d194d
  $fFromIntegralWord32Int4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Int.Int16)
                      @ GHC.Word.Word32
                      @ GHC.Int.Int16
                      @~ <GHC.Word.Word32 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
ff1e891c280e8b80a31898c89b0f8ceb
  $fFromIntegralWord32Int5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int6
                   eta) -}
7531ab8c031e21ba37590d1d47e70430
  $fFromIntegralWord32Int6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Int.Int32)
                      @ GHC.Word.Word32
                      @ GHC.Int.Int32
                      @~ <GHC.Word.Word32 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Int64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Int.Int64>_N)) -}
2235609efbd961220a98e163e33df3f4
  $fFromIntegralWord32Int64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
9c1f26cb8a3d642b4e79d9c381be694e
  $fFromIntegralWord32Int7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Int8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Int.Int8>_N)) -}
f9c6aa5bd2e6c1f91785da30ea52f6ab
  $fFromIntegralWord32Int8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
dd8ff3a58e1c5a3807fa3dad3711f9ac
  $fFromIntegralWord32Int9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Int.Int64)
                      @ GHC.Word.Word32
                      @ GHC.Int.Int64
                      @~ <GHC.Word.Word32 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
ea1513b7b280d3a529cb59c1b28faffb
  $fFromIntegralWord32Int_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Word ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Types.Word>_N)) -}
ebd820fa65ec485c4183d78ad42cb559
  $fFromIntegralWord32Word1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word2
                   eta) -}
562349904159beae3a05ef6ed2f6f3f4
  $fFromIntegralWord32Word10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word11
                   eta) -}
2439388d5efa7980a090e40b86b81bf1
  $fFromIntegralWord32Word11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Word.Word8)
                      @ GHC.Word.Word32
                      @ GHC.Word.Word8
                      @~ <GHC.Word.Word32 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Word16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Word.Word16>_N)) -}
a915d906ac5c21374103d0c814418431
  $fFromIntegralWord32Word16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
a3a00aacae3f065fd6045cea62a73824
  $fFromIntegralWord32Word2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Types.Word)
                      @ GHC.Word.Word32
                      @ GHC.Types.Word
                      @~ <GHC.Word.Word32 -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
1a44e173d802bc3e5d22480d817cd74d
  $fFromIntegralWord32Word3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Word32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Word.Word32>_N)) -}
4001f523721adb4a8dcec1ec09f15f3a
  $fFromIntegralWord32Word32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
efe97f269ef963cd8475829d20560d9f
  $fFromIntegralWord32Word4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Word.Word16)
                      @ GHC.Word.Word32
                      @ GHC.Word.Word16
                      @~ <GHC.Word.Word32 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
5263612eb3ee045ec7054e9e0a247ca3
  $fFromIntegralWord32Word5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word6
                   eta) -}
b74029a59f82945ddac3180b82f78396
  $fFromIntegralWord32Word6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Word.Word32)
                      @ GHC.Word.Word32
                      @ GHC.Word.Word32
                      @~ <GHC.Word.Word32 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Word64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Word.Word64>_N)) -}
e8672ddfb5ff587e6b463ff68694b632
  $fFromIntegralWord32Word64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
5f80504cf193a7416bb4543ca7dbc5bb
  $fFromIntegralWord32Word7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word32)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord32Word8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word32 GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word32>_N <GHC.Word.Word8>_N)) -}
a363f40e18363ca30ada4c4fae9e09de
  $fFromIntegralWord32Word8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
bda67e7b6636cc4113109cbf28019e07
  $fFromIntegralWord32Word9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word32 -> GHC.Word.Word64)
                      @ GHC.Word.Word32
                      @ GHC.Word.Word64
                      @~ <GHC.Word.Word32 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
24d8163015c84cd28434084034054456
  $fFromIntegralWord32Word_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word32 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CDouble>_N)) -}
797549d92f13c2c68f7d8925422f3687
  $fFromIntegralWord64CDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CDouble2
                   eta) -}
10da7d52dbaedfb55766eb5fce31ebb3
  $fFromIntegralWord64CDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CDouble)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
48a88cf9ab3e5c6c4ec31ca2c12505fa
  $fFromIntegralWord64CDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CFloat>_N)) -}
52ad2de16a12bcd10e606c680a9c3b19
  $fFromIntegralWord64CFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CFloat2
                   eta) -}
fca2db54b2162d02420cb700f73f14c8
  $fFromIntegralWord64CFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CFloat)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
c19cddb2d4c9f9ebb5e773dd87b815fa
  $fFromIntegralWord64CFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CInt>_N)) -}
1bb60304fd0e5ee05883fb9195d2a4f1
  $fFromIntegralWord64CInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CInt2
                   eta) -}
617c24b7a0f6e7f6dde7a2949d096265
  $fFromIntegralWord64CInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CInt)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
b501f2d413903f2513f243a59c81fe70
  $fFromIntegralWord64CInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CLLong>_N)) -}
111b53e9034c1722c7d2241e055d72cc
  $fFromIntegralWord64CLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CLLong2
                   eta) -}
9ac46a7a86ffd90f9e823b2d4fc3d182
  $fFromIntegralWord64CLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CLLong)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
5cda32c7f39de3f0e3e2000027cbf980
  $fFromIntegralWord64CLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CLong>_N)) -}
e315367ba776dfb33bcd032902656161
  $fFromIntegralWord64CLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CLong2
                   eta) -}
900f11bf2d20f228810cb8f4d58d8cc2
  $fFromIntegralWord64CLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CLong)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
554f3f1fe2e44b2d86f32124cfc24182
  $fFromIntegralWord64CLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CShort>_N)) -}
a567bfbff477c79d78e3f20540a7a050
  $fFromIntegralWord64CShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CShort2
                   eta) -}
0718a7b1d217db54d533143c6ee130af
  $fFromIntegralWord64CShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CShort)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
780856bc53dbdf2e2901b0129e0f21df
  $fFromIntegralWord64CShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CUInt>_N)) -}
4785bf909bfd48410a9dfde3fa6329b1
  $fFromIntegralWord64CUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CUInt2
                   eta) -}
dbfcf105ae0bb7c77c2359b5842dcc60
  $fFromIntegralWord64CUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CUInt)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
73b2af7b44b5f13bc3920366b173405c
  $fFromIntegralWord64CUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CULLong>_N)) -}
5f897a9571acb1cb6a1f272f7d862f59
  $fFromIntegralWord64CULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CULLong2
                   eta) -}
809c3ad3913a50228fea6673673ef1bf
  $fFromIntegralWord64CULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CULLong)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
3576dd8cc126cf441d45c395b7394192
  $fFromIntegralWord64CULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CULong>_N)) -}
a02d1dedff55e5a4fe25dd4465acbe67
  $fFromIntegralWord64CULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CULong2
                   eta) -}
180ecefa7cf56ee27da36d0627694d03
  $fFromIntegralWord64CULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CULong)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
25dfbf77973e62399f1d11e3d8bb593c
  $fFromIntegralWord64CULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64CUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <Foreign.C.Types.CUShort>_N)) -}
1f57ed83232139a8a1450aa0e36fce14
  $fFromIntegralWord64CUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CUShort2
                   eta) -}
ab2f76bdc034be46c70a811aad664253
  $fFromIntegralWord64CUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> Foreign.C.Types.CUShort)
                      @ GHC.Word.Word64
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Word.Word64 -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
b78e84f75934275121c4ee9fa2f012ed
  $fFromIntegralWord64CUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Double ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Double_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Types.Double>_N)) -}
ee1b07a8cf7a8ca48f683b996765ea27
  $fFromIntegralWord64Double1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Double2
                   eta) -}
18afdc78d00a3af26a9a30ab96b08fd0
  $fFromIntegralWord64Double2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Types.Double)
                      @ GHC.Word.Word64
                      @ GHC.Types.Double
                      @~ <GHC.Word.Word64 -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
eaeb93756d5dbf23bdfdb45bf422011d
  $fFromIntegralWord64Double_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Double1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Float ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Float_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Types.Float>_N)) -}
fe1b93edcdc4c2a063f4730b71ccf0bb
  $fFromIntegralWord64Float1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Float2
                   eta) -}
f6fd0108a663aec2346745f82a5332d8
  $fFromIntegralWord64Float2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Types.Float)
                      @ GHC.Word.Word64
                      @ GHC.Types.Float
                      @~ <GHC.Word.Word64 -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
c70b858ff950631e974f74f8096266aa
  $fFromIntegralWord64Float_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Float1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Int ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Types.Int>_N)) -}
553a3924143f64d50ffd01b1da7ecb17
  $fFromIntegralWord64Int1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int2
                   eta) -}
f1149cb14376e1c718608f97ac6f8788
  $fFromIntegralWord64Int10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int11
                   eta) -}
69f1fe46d6d2ec3d4d750f90e7ed79c1
  $fFromIntegralWord64Int11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Int.Int8)
                      @ GHC.Word.Word64
                      @ GHC.Int.Int8
                      @~ <GHC.Word.Word64 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Int16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Int.Int16>_N)) -}
2b07e8d5fb6fed5ab2ff1cd73c4a0cbf
  $fFromIntegralWord64Int16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
a1a763e186e8e58f24f1f51d6565672f
  $fFromIntegralWord64Int2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Types.Int)
                      @ GHC.Word.Word64
                      @ GHC.Types.Int
                      @~ <GHC.Word.Word64 -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
273c62da1d320d1c50203f39e01ab932
  $fFromIntegralWord64Int3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Int32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Int.Int32>_N)) -}
8274565310763f1c508a0b86cf7dbe04
  $fFromIntegralWord64Int32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
d05ddacbaad3a8975f2eb89f90583c48
  $fFromIntegralWord64Int4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Int.Int16)
                      @ GHC.Word.Word64
                      @ GHC.Int.Int16
                      @~ <GHC.Word.Word64 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
7355bda0daaea88f6ae2fc4f21ef13bf
  $fFromIntegralWord64Int5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int6
                   eta) -}
1f92a6298a8962940a8ce20c40fe1ddd
  $fFromIntegralWord64Int6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Int.Int32)
                      @ GHC.Word.Word64
                      @ GHC.Int.Int32
                      @~ <GHC.Word.Word64 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Int64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Int.Int64>_N)) -}
bfd0a549af4f19a6af019d4752b7695a
  $fFromIntegralWord64Int64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
8bbdfabdb192f7bae67f7334f8b61cad
  $fFromIntegralWord64Int7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Int8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Int.Int8>_N)) -}
7b3a69d0cae958ccd8e049d12c1608d3
  $fFromIntegralWord64Int8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
43b1136ef5f90b058a71d55bb3935b16
  $fFromIntegralWord64Int9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Int.Int64)
                      @ GHC.Word.Word64
                      @ GHC.Int.Int64
                      @~ <GHC.Word.Word64 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
f72b174d0e535b18d3ddaf78b54871e2
  $fFromIntegralWord64Int_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Word ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Types.Word>_N)) -}
19ac77dca085d32596abcc099232a074
  $fFromIntegralWord64Word1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word2
                   eta) -}
ba753f5fb8611665160c9ee43b457e46
  $fFromIntegralWord64Word10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word11
                   eta) -}
60d25ba5310087f5f38d21abc224dbf9
  $fFromIntegralWord64Word11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Word.Word8)
                      @ GHC.Word.Word64
                      @ GHC.Word.Word8
                      @~ <GHC.Word.Word64 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Word16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Word.Word16>_N)) -}
c66e63af8c0388bec475ed87db005641
  $fFromIntegralWord64Word16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
cfb8dcd965c22ed766f189df23712883
  $fFromIntegralWord64Word2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Types.Word)
                      @ GHC.Word.Word64
                      @ GHC.Types.Word
                      @~ <GHC.Word.Word64 -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
a49a1119fb6d518eb50b7e3c236439af
  $fFromIntegralWord64Word3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Word32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Word.Word32>_N)) -}
476f0455427d087626bc81bd45f0a6e3
  $fFromIntegralWord64Word32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
41cb24fe672fecf945617856fc0d538d
  $fFromIntegralWord64Word4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Word.Word16)
                      @ GHC.Word.Word64
                      @ GHC.Word.Word16
                      @~ <GHC.Word.Word64 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
4e17122f8d7b0f17663e1629654a2616
  $fFromIntegralWord64Word5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word6
                   eta) -}
8a5b27da1b6ee2df9a7201314d461018
  $fFromIntegralWord64Word6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Word.Word32)
                      @ GHC.Word.Word64
                      @ GHC.Word.Word32
                      @~ <GHC.Word.Word64 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Word64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Word.Word64>_N)) -}
97211934e2b083aa943b8b5fccc0b9ac
  $fFromIntegralWord64Word64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
5552bf064669c1c38ce9acc288dab96a
  $fFromIntegralWord64Word7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word64)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord64Word8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word64 GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word64>_N <GHC.Word.Word8>_N)) -}
967568d79b53def107d1af46acfed29b
  $fFromIntegralWord64Word8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
d8822a9b953a96c356e76b485ad5b263
  $fFromIntegralWord64Word9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word64 -> GHC.Word.Word64)
                      @ GHC.Word.Word64
                      @ GHC.Word.Word64
                      @~ <GHC.Word.Word64 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
c13632b3af2573cef510c08213091f53
  $fFromIntegralWord64Word_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word64 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral
                    GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CDouble>_N)) -}
99287fecfc233b9ebade1fa8140c67ff
  $fFromIntegralWord8CDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CDouble2
                   eta) -}
2c22cdb9cd1dcde14c0e875d6395dd8f
  $fFromIntegralWord8CDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CDouble)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
ad3a11fae178f39de45ebc25bed29749
  $fFromIntegralWord8CDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CFloat>_N)) -}
0474c0d8054b0e816b2aef750a29a6c5
  $fFromIntegralWord8CFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CFloat2
                   eta) -}
638bda5643bc06ed29b6e1a910a65f5e
  $fFromIntegralWord8CFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CFloat)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
d2e3e38ff48c2f891ec5babdb069b666
  $fFromIntegralWord8CFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CInt>_N)) -}
c59ca621b5ed8813fafb8c789038c12a
  $fFromIntegralWord8CInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CInt2
                   eta) -}
c2e7e74a208770baaa4041c8912c6648
  $fFromIntegralWord8CInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CInt)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
ba1ed9c72d8dce6d4f02154393af5226
  $fFromIntegralWord8CInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CLLong>_N)) -}
4cc163b0aa6cff14737594385c23bb07
  $fFromIntegralWord8CLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CLLong2
                   eta) -}
f38d97c9e1b10685f617fad9e31228da
  $fFromIntegralWord8CLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CLLong)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
9f787c6228f8253eda0209e8f6ce6457
  $fFromIntegralWord8CLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CLong>_N)) -}
82eb7448d324444272fcacc41aa39101
  $fFromIntegralWord8CLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CLong2
                   eta) -}
05f1b52f23ba6669618b5230aa61fa8d
  $fFromIntegralWord8CLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CLong)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
453e6fc4081135f8d28365d4f42752e5
  $fFromIntegralWord8CLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CShort>_N)) -}
d26d122c94220986fac219f13b70af6f
  $fFromIntegralWord8CShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CShort2
                   eta) -}
f3eef379e855b28b93f07f0908c16024
  $fFromIntegralWord8CShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CShort)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
33ce5114709006fed7eff0706cc35deb
  $fFromIntegralWord8CShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CUInt>_N)) -}
c1bf4047da0b0de4906967473f070109
  $fFromIntegralWord8CUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CUInt2
                   eta) -}
44f767c313d6afc1b15e8b1149cb25c3
  $fFromIntegralWord8CUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CUInt)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
e22095c2feae82635d9b9d62f9b10ceb
  $fFromIntegralWord8CUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CULLong>_N)) -}
051d4d412b6e79af202d5bf81e488fd1
  $fFromIntegralWord8CULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CULLong2
                   eta) -}
a50f6059f1cf6240104510dbdb0c6328
  $fFromIntegralWord8CULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CULLong)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
de59cb30b8c13bed752c9263e258370c
  $fFromIntegralWord8CULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CULong>_N)) -}
4777b861bb67ccc6bbf298d1af009b46
  $fFromIntegralWord8CULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CULong2
                   eta) -}
7ee9cd9044156b34054d37fd1d59fca0
  $fFromIntegralWord8CULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CULong)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
1b418b1eb8e9ed59f41ff37aeef524d0
  $fFromIntegralWord8CULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8CUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <Foreign.C.Types.CUShort>_N)) -}
ce87f12f773f468cd1e6842f0aaacd22
  $fFromIntegralWord8CUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CUShort2
                   eta) -}
57f0861d90955d3104c3762830d67391
  $fFromIntegralWord8CUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> Foreign.C.Types.CUShort)
                      @ GHC.Word.Word8
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Word.Word8 -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
b66b3276b1a8c228e8d0e981bcb54f04
  $fFromIntegralWord8CUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Double ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Double_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Types.Double>_N)) -}
7cb377e9fdb7c261ec08225ac47e6545
  $fFromIntegralWord8Double1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Double2
                   eta) -}
5dec047cbd2d19afe4e9eba1bb3ee407
  $fFromIntegralWord8Double2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Types.Double)
                      @ GHC.Word.Word8
                      @ GHC.Types.Double
                      @~ <GHC.Word.Word8 -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
6729b0e3223e1c85ac3c9cba08e6364b
  $fFromIntegralWord8Double_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Double1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Float ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Float_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Types.Float>_N)) -}
7322390b663f50ba49202332bcc2ff5a
  $fFromIntegralWord8Float1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Float2
                   eta) -}
6512e9a0ac2f7ba38999244199890a5f
  $fFromIntegralWord8Float2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Types.Float)
                      @ GHC.Word.Word8
                      @ GHC.Types.Float
                      @~ <GHC.Word.Word8 -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
e7acacb1b777078338e9b2f163794ce1
  $fFromIntegralWord8Float_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Float1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Int ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Types.Int>_N)) -}
e30607c85eb12c244531758aee9bce43
  $fFromIntegralWord8Int1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int2
                   eta) -}
e04fb297df8b0213e034986f98f1e8b9
  $fFromIntegralWord8Int10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int11
                   eta) -}
b9b536d1c109a50b71d5c491cf9cca81
  $fFromIntegralWord8Int11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Int.Int8)
                      @ GHC.Word.Word8
                      @ GHC.Int.Int8
                      @~ <GHC.Word.Word8 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Int16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Int.Int16>_N)) -}
fc44a71adf10c22c8092cf8d0422439b
  $fFromIntegralWord8Int16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
63f8e0b06f2298f1c3b9c574ea25f979
  $fFromIntegralWord8Int2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Types.Int)
                      @ GHC.Word.Word8
                      @ GHC.Types.Int
                      @~ <GHC.Word.Word8 -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
5eed11133415aed1c47d9bf525692db0
  $fFromIntegralWord8Int3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Int32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Int.Int32>_N)) -}
b094786aad913da81902b72a9ef5bf68
  $fFromIntegralWord8Int32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
46eef51576744c19c145785b3d28b0b0
  $fFromIntegralWord8Int4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Int.Int16)
                      @ GHC.Word.Word8
                      @ GHC.Int.Int16
                      @~ <GHC.Word.Word8 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
12b6abb2ca38de6e668d3520a705c916
  $fFromIntegralWord8Int5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int6
                   eta) -}
909bc6d0699db5b787978f0e1fae4d13
  $fFromIntegralWord8Int6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Int.Int32)
                      @ GHC.Word.Word8
                      @ GHC.Int.Int32
                      @~ <GHC.Word.Word8 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Int64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Int.Int64>_N)) -}
d290495518a9ba7d46ca6fcd191c5532
  $fFromIntegralWord8Int64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
671ab7738ce8479b71b33c414690d201
  $fFromIntegralWord8Int7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Int8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Int.Int8>_N)) -}
04c06e1827a4f2bcc6b57caa9955f059
  $fFromIntegralWord8Int8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
bbbdf9db44cb3be07778c5133e835412
  $fFromIntegralWord8Int9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Int.Int64)
                      @ GHC.Word.Word8
                      @ GHC.Int.Int64
                      @~ <GHC.Word.Word8 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
906516221dce3cfc6fb68c4577a24b97
  $fFromIntegralWord8Int_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Word ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Types.Word>_N)) -}
33e3d8731221f5fc22e5c463973606f0
  $fFromIntegralWord8Word1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word2
                   eta) -}
94d47df3ae7786946297df491311ef1c
  $fFromIntegralWord8Word10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word11
                   eta) -}
71ebd194d01fa779b33f908929dad105
  $fFromIntegralWord8Word11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Word.Word8)
                      @ GHC.Word.Word8
                      @ GHC.Word.Word8
                      @~ <GHC.Word.Word8 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Word16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Word.Word16>_N)) -}
b6fc5171fd917d749a348539a5dff174
  $fFromIntegralWord8Word16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
75eeac9045f5bed4b4a839cb52fd0769
  $fFromIntegralWord8Word2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Types.Word)
                      @ GHC.Word.Word8
                      @ GHC.Types.Word
                      @~ <GHC.Word.Word8 -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
e85ed3c3a366970e4cdccf3b1c66f798
  $fFromIntegralWord8Word3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Word32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Word.Word32>_N)) -}
6ac19681cb32baddf531c932602ca51f
  $fFromIntegralWord8Word32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
0f2e087942f92d8abc84790638c8c90b
  $fFromIntegralWord8Word4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Word.Word16)
                      @ GHC.Word.Word8
                      @ GHC.Word.Word16
                      @~ <GHC.Word.Word8 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
58f73aca9f42b8c91cdc0cfd41381ea5
  $fFromIntegralWord8Word5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word6
                   eta) -}
19ebe966dc2dadee6feb2a5d88c70613
  $fFromIntegralWord8Word6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Word.Word32)
                      @ GHC.Word.Word8
                      @ GHC.Word.Word32
                      @~ <GHC.Word.Word8 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Word64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Word.Word64>_N)) -}
a5bf5d97279bdffd4c622ed6fe28b13e
  $fFromIntegralWord8Word64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
326680998cdbcf27689680cabe0a4c06
  $fFromIntegralWord8Word7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Word.Word8)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWord8Word8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Word.Word8 GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Word.Word8>_N <GHC.Word.Word8>_N)) -}
e8de3b38b3fac3fb82557598d11cfbd2
  $fFromIntegralWord8Word8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
876f6125e014e26a6dc7b15f87a3db16
  $fFromIntegralWord8Word9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Word.Word8 -> GHC.Word.Word64)
                      @ GHC.Word.Word8
                      @ GHC.Word.Word64
                      @~ <GHC.Word.Word8 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
0d629c147600cd609f2ba557dedea270
  $fFromIntegralWord8Word_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8 =>
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CDouble
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CDouble>_N)) -}
08f255095902d101ba4f4fcd57ca1c6d
  $fFromIntegralWordCDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCDouble2
                   eta) -}
a7449ac36488dfb571878866ecb3ebb3
  $fFromIntegralWordCDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CDouble)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CDouble
                      @~ <GHC.Types.Word -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
95c2c0e9665df24cbffe79a56f94013f
  $fFromIntegralWordCDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CFloat
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CFloat>_N)) -}
5ec22715fa55634092bb8ee5a00a489c
  $fFromIntegralWordCFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCFloat2
                   eta) -}
89cadded594fedaf57add5dba8f2ba70
  $fFromIntegralWordCFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CFloat)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CFloat
                      @~ <GHC.Types.Word -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
0a28462780435f66f1783ee16be198ee
  $fFromIntegralWordCFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CInt>_N)) -}
a9e0d79d10e70d4093db35b3d2f7e5e2
  $fFromIntegralWordCInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCInt2
                   eta) -}
7f994e64d93652054501fc70bbe1e711
  $fFromIntegralWordCInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CInt)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CInt
                      @~ <GHC.Types.Word -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
8ca46f3eb16ead9d2402fed6994bf823
  $fFromIntegralWordCInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCLLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CLLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCLLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CLLong>_N)) -}
ec6942c5510bbd946eb9c31ca2bc533b
  $fFromIntegralWordCLLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCLLong2
                   eta) -}
885ad093c63b0578ba7411e7f827dce0
  $fFromIntegralWordCLLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CLLong)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CLLong
                      @~ <GHC.Types.Word -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
1675985ec09d4d4b5935fd4da05a5d15
  $fFromIntegralWordCLLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCLLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CLong>_N)) -}
15aa2f936cb2bb403f9b576491ea630b
  $fFromIntegralWordCLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCLong2
                   eta) -}
241fc5624016ce2805b3b38be0c3dd99
  $fFromIntegralWordCLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CLong)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CLong
                      @~ <GHC.Types.Word -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
9cdea54911ce83e4641f04894fd044a6
  $fFromIntegralWordCLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CShort>_N)) -}
2af7e1e7c21e9a1b32121c75168d44cb
  $fFromIntegralWordCShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCShort2
                   eta) -}
61240fb4fc60780bbc2f0607d5817c9a
  $fFromIntegralWordCShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CShort)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CShort
                      @~ <GHC.Types.Word -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
5ddad88ff6000c85bb57c556a32ce3f5
  $fFromIntegralWordCShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCUInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CUInt
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCUInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CUInt>_N)) -}
ae19504d9851bd772e20eec8c4682093
  $fFromIntegralWordCUInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCUInt2
                   eta) -}
e6f10c744776752b51ff7cff9902b81e
  $fFromIntegralWordCUInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CUInt)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CUInt
                      @~ <GHC.Types.Word -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
dd933211f102396251fb8f83b4359c61
  $fFromIntegralWordCUInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCUInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCULLong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CULLong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCULLong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CULLong>_N)) -}
730eade458e9967d13b3f305912e9341
  $fFromIntegralWordCULLong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCULLong2
                   eta) -}
dcfdcfb826a44bcaec24ec1b0ced6052
  $fFromIntegralWordCULLong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CULLong)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CULLong
                      @~ <GHC.Types.Word -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
145c349b3ddb003ea25dac0e1ebc58fe
  $fFromIntegralWordCULLong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCULLong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCULong ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CULong
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCULong_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CULong>_N)) -}
ed220751a6f4c9e11b4de871fc1e5c63
  $fFromIntegralWordCULong1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCULong2
                   eta) -}
002b673312593eef8f37f80b7fad22d3
  $fFromIntegralWordCULong2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CULong)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CULong
                      @~ <GHC.Types.Word -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
f75f472956b16354ab3e10c352d609d1
  $fFromIntegralWordCULong_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCULong1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordCUShort ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word Foreign.C.Types.CUShort
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCUShort_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <Foreign.C.Types.CUShort>_N)) -}
91b0e001ad467f5547181194f95875f4
  $fFromIntegralWordCUShort1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCUShort2
                   eta) -}
3506e83d6ae780b1885efd7e9c8bb7d5
  $fFromIntegralWordCUShort2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> Foreign.C.Types.CUShort)
                      @ GHC.Types.Word
                      @ Foreign.C.Types.CUShort
                      @~ <GHC.Types.Word -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
10cfeef9af7ce15bf7bfe25e61e02876
  $fFromIntegralWordCUShort_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCUShort1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordDouble ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Types.Double
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordDouble_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Types.Double>_N)) -}
5add7b576a1046e81709753b4e5a2418
  $fFromIntegralWordDouble1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordDouble2
                   eta) -}
f616c989ce944fcbe6f3d64da1cd1af1
  $fFromIntegralWordDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Types.Double)
                      @ GHC.Types.Word
                      @ GHC.Types.Double
                      @~ <GHC.Types.Word -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
fad853a5c4e6c8b4e0e47f5ea74ddc4c
  $fFromIntegralWordDouble_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordDouble1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordFloat ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Types.Float
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordFloat_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Types.Float>_N)) -}
c292eb9da7cf9ff1a18c8cd90e4aca71
  $fFromIntegralWordFloat1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordFloat2
                   eta) -}
b55700c33ac3dcf390c3e31fd82b4eb1
  $fFromIntegralWordFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Types.Float)
                      @ GHC.Types.Word
                      @ GHC.Types.Float
                      @~ <GHC.Types.Word -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
05bbff6bc4fe11df53c29c8ef33a3f38
  $fFromIntegralWordFloat_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordFloat1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordInt ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Types.Int
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Types.Int>_N)) -}
28ba2835f7e402556d4b083901452219
  $fFromIntegralWordInt1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt2
                   eta) -}
25185e98e8ee633c7e5e45114ff62e9d
  $fFromIntegralWordInt10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt11
                   eta) -}
62a83372eb4ec6e763c9c65615dfb4bb
  $fFromIntegralWordInt11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Int.Int8)
                      @ GHC.Types.Word
                      @ GHC.Int.Int8
                      @~ <GHC.Types.Word -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordInt16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Int.Int16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Int.Int16>_N)) -}
1f1633d52906bb12d60167cbd4c8caf5
  $fFromIntegralWordInt16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
da468c1f3944b94926354d792139f08a
  $fFromIntegralWordInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Types.Int)
                      @ GHC.Types.Word
                      @ GHC.Types.Int
                      @~ <GHC.Types.Word -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
03859fba23581d4d3e69994f5b9ce581
  $fFromIntegralWordInt3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordInt32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Int.Int32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Int.Int32>_N)) -}
e88f11b142f5d76272556367d97c22b7
  $fFromIntegralWordInt32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
5a7a63839226a0e1fbe193eb31e00798
  $fFromIntegralWordInt4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Int.Int16)
                      @ GHC.Types.Word
                      @ GHC.Int.Int16
                      @~ <GHC.Types.Word -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
d3d71fa6db15fffd1eb0e3cdd4a0637a
  $fFromIntegralWordInt5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt6
                   eta) -}
1f22c69f704bd64d01833c29a0ef2a8b
  $fFromIntegralWordInt6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Int.Int32)
                      @ GHC.Types.Word
                      @ GHC.Int.Int32
                      @~ <GHC.Types.Word -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordInt64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Int.Int64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Int.Int64>_N)) -}
c1b2bf5f0a811787e790715b86698798
  $fFromIntegralWordInt64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
d814689cc4cdfe184964018f06db41c6
  $fFromIntegralWordInt7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordInt8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Int.Int8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Int.Int8>_N)) -}
96ef54bbe22b11b73da5797d3e082885
  $fFromIntegralWordInt8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
1205263fe5bd004a97259bf1093c444a
  $fFromIntegralWordInt9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Int.Int64)
                      @ GHC.Types.Word
                      @ GHC.Int.Int64
                      @~ <GHC.Types.Word -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
5211baf5af74604597163251bfba02bc
  $fFromIntegralWordInt_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordWord ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Types.Word
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Types.Word>_N)) -}
ed4e026ebeae230d58d897804b9abd41
  $fFromIntegralWordWord1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord2
                   eta) -}
dd5fd47f1945f7afd059ee74445982dd
  $fFromIntegralWordWord10 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord11
                   eta) -}
1013a3aa82240205f45f2cb6dabb774b
  $fFromIntegralWordWord11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Word.Word8)
                      @ GHC.Types.Word
                      @ GHC.Word.Word8
                      @~ <GHC.Types.Word -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordWord16 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Word.Word16
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord16_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Word.Word16>_N)) -}
2f71803886bdd3462e0040e7e2b6f77e
  $fFromIntegralWordWord16_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord3
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
046104148a7d2ecc2e4c36d9a1388c2f
  $fFromIntegralWordWord2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Types.Word)
                      @ GHC.Types.Word
                      @ GHC.Types.Word
                      @~ <GHC.Types.Word -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
100f7738ca0476ed6cbbebf428ef58f1
  $fFromIntegralWordWord3 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord4
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordWord32 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Word.Word32
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord32_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Word.Word32>_N)) -}
9490aab7a0fa73afd19883edc6fc5a2c
  $fFromIntegralWordWord32_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord5
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
131f53088389a6df7a12d9b540ab98c1
  $fFromIntegralWordWord4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Word.Word16)
                      @ GHC.Types.Word
                      @ GHC.Word.Word16
                      @~ <GHC.Types.Word -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
2bdede97154246d2514160e01203e1d4
  $fFromIntegralWordWord5 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord6
                   eta) -}
4e2f6c5546ce16854fa425615044d5b5
  $fFromIntegralWordWord6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Word.Word32)
                      @ GHC.Types.Word
                      @ GHC.Word.Word32
                      @~ <GHC.Types.Word -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordWord64 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Word.Word64
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord64_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Word.Word64>_N)) -}
c6d0ebfa06035cbc44baa757b7a02c12
  $fFromIntegralWordWord64_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord7
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
679292fff03e9429fc57de9c69f96691
  $fFromIntegralWordWord7 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ($d(%,,%) :: Data.Array.Accelerate.Classes.Integral.Integral
                                  GHC.Types.Word)
                   (eta :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord9
                   eta) -}
a95a2a699889c53924901c0ef834b946
  $fFromIntegralWordWord8 ::
    Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
      GHC.Types.Word GHC.Word.Word8
  DFunId
  {- Arity: 2, Strictness: <L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord8_$cfromIntegral
                  `cast`
                (Sym (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                          <GHC.Types.Word>_N <GHC.Word.Word8>_N)) -}
8e807d216e15f37a3c99b24bb20d0023
  $fFromIntegralWordWord8_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord10
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
29b35b798049ed01632fa2b7111e3ecc
  $fFromIntegralWordWord9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimFromIntegral
                      @ (GHC.Types.Word -> GHC.Word.Word64)
                      @ GHC.Types.Word
                      @ GHC.Word.Word64
                      @~ <GHC.Types.Word -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
f08b8a77bc155a517cac86d3aadad9fe
  $fFromIntegralWordWord_$cfromIntegral ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord1
                  `cast`
                (<Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
f7130212137a8ef4df0c380530ca1a1c
  $tc'C:FromIntegral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6795971442600801003##
                   15108443361066311164##
                   Data.Array.Accelerate.Classes.FromIntegral.$trModule
                   Data.Array.Accelerate.Classes.FromIntegral.$tc'C:FromIntegral1) -}
086aa26f7f76e4e331f4366231b3e036
  $tc'C:FromIntegral1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:FromIntegral"#) -}
a0f1853c6a0fdf82a83b6cfc59b406af
  $tcFromIntegral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2749447671461215539##
                   9853524173866567546##
                   Data.Array.Accelerate.Classes.FromIntegral.$trModule
                   Data.Array.Accelerate.Classes.FromIntegral.$tcFromIntegral1) -}
475ff96aba8845aedace41fd3c525654
  $tcFromIntegral1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FromIntegral"#) -}
b0dc082407b1af5db0214fe293d13b4c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Classes.FromIntegral.$trModule2
                   Data.Array.Accelerate.Classes.FromIntegral.$trModule1) -}
e5bb2d22ff02b5ef6ac5821ef269b31e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Classes.FromIntegral"#) -}
0b9f4587d15c0df4736563c8176d6bbe
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
a95a2a699889c53924901c0ef834b946
  class FromIntegral a b where
    fromIntegral :: Data.Array.Accelerate.Classes.Integral.Integral
                      a =>
                    Data.Array.Accelerate.Smart.Exp a
                    -> Data.Array.Accelerate.Smart.Exp b
    {-# MINIMAL fromIntegral #-}
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CInt,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCIntWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLLong,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLLongWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CLong,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCLongWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CShort,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCShortWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUInt,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUIntWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULLong,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULLongWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CULong,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCULongWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [Foreign.C.Types.CUShort,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralCUShortWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16CUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Double
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Float
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Int8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int16,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt16Word8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32CUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Double
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Float
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Int8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int32,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt32Word8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64CUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Double
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Float
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Int8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int64,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt64Word8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8CUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Double
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Float
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Int8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Int.Int8,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralInt8Word8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Int,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralIntWord8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16CUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Double
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Float
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Int8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word16,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord16Word8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32CUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Double
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Float
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Int8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word32,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord32Word8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64CUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Double
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Float
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Int8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word64,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord64Word8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8CUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Double
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Float
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Int8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Word.Word8,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWord8Word8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCLLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCUInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCULLong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCULong
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordCUShort
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Types.Double]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordDouble
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Types.Float]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordFloat
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Types.Int]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordInt8
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Types.Word]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord16
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord32
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord64
instance Data.Array.Accelerate.Classes.FromIntegral.FromIntegral [GHC.Types.Word,
                                                                  GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.FromIntegral.$fFromIntegralWordWord8
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

