
==================== FINAL INTERFACE ====================
2017-08-29 05:27:14.912387 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.AST 8002
  interface hash: f8bbabc1eb720da1a53fc97d65cfb423
  ABI hash: 4907563d36aadcb5fe024fe0eaf42ffa
  export-list hash: 14f3cf8c02b472222e546556891c5be1
  orphan hash: ae40f07ebdfb83325b102f306f2742cf
  flag hash: a2e3ffa7ddefb597f4c449c6327e5800
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Array.Accelerate.AST.idxToInt
  Data.Array.Accelerate.AST.liftArrays
  Data.Array.Accelerate.AST.liftConst
  Data.Array.Accelerate.AST.liftIdx
  Data.Array.Accelerate.AST.liftPreOpenAcc
  Data.Array.Accelerate.AST.liftPreOpenAfun
  Data.Array.Accelerate.AST.liftPreOpenExp
  Data.Array.Accelerate.AST.liftPreOpenFun
  Data.Array.Accelerate.AST.liftPrimConst
  Data.Array.Accelerate.AST.liftPrimFun
  Data.Array.Accelerate.AST.liftSliceIndex
  Data.Array.Accelerate.AST.liftTupleIdx
  Data.Array.Accelerate.AST.prj
  Data.Array.Accelerate.AST.prjElt
  Data.Array.Accelerate.AST.rnfPreOpenAcc
  Data.Array.Accelerate.AST.rnfPreOpenAfun
  Data.Array.Accelerate.AST.rnfPreOpenExp
  Data.Array.Accelerate.AST.rnfPreOpenFun
  Data.Array.Accelerate.AST.showPreAccOp
  Data.Array.Accelerate.AST.showPreExpOp
  Data.Array.Accelerate.AST.tupleIdxToInt
  Data.Array.Accelerate.AST.Acc
  Data.Array.Accelerate.AST.Afun
  Data.Array.Accelerate.AST.Boundary
  Data.Array.Accelerate.AST.Exp
  Data.Array.Accelerate.AST.Fun
  Data.Array.Accelerate.AST.Idx{Data.Array.Accelerate.AST.SuccIdx Data.Array.Accelerate.AST.ZeroIdx}
  Data.Array.Accelerate.AST.LiftAcc
  Data.Array.Accelerate.AST.NFDataAcc
  Data.Array.Accelerate.AST.OpenAcc{Data.Array.Accelerate.AST.OpenAcc}
  Data.Array.Accelerate.AST.OpenAfun
  Data.Array.Accelerate.AST.OpenExp
  Data.Array.Accelerate.AST.OpenFun
  Data.Array.Accelerate.AST.PreAfun
  Data.Array.Accelerate.AST.PreBoundary{Data.Array.Accelerate.AST.Clamp Data.Array.Accelerate.AST.Constant Data.Array.Accelerate.AST.Function Data.Array.Accelerate.AST.Mirror Data.Array.Accelerate.AST.Wrap}
  Data.Array.Accelerate.AST.PreExp
  Data.Array.Accelerate.AST.PreFun
  Data.Array.Accelerate.AST.PreOpenAcc{Data.Array.Accelerate.AST.Acond Data.Array.Accelerate.AST.Aforeign Data.Array.Accelerate.AST.Alet Data.Array.Accelerate.AST.Apply Data.Array.Accelerate.AST.Aprj Data.Array.Accelerate.AST.Atuple Data.Array.Accelerate.AST.Avar Data.Array.Accelerate.AST.Awhile Data.Array.Accelerate.AST.Backpermute Data.Array.Accelerate.AST.Fold Data.Array.Accelerate.AST.Fold1 Data.Array.Accelerate.AST.Fold1Seg Data.Array.Accelerate.AST.FoldSeg Data.Array.Accelerate.AST.Generate Data.Array.Accelerate.AST.Map Data.Array.Accelerate.AST.Permute Data.Array.Accelerate.AST.Replicate Data.Array.Accelerate.AST.Reshape Data.Array.Accelerate.AST.Scanl Data.Array.Accelerate.AST.Scanl' Data.Array.Accelerate.AST.Scanl1 Data.Array.Accelerate.AST.Scanr Data.Array.Accelerate.AST.Scanr' Data.Array.Accelerate.AST.Scanr1 Data.Array.Accelerate.AST.Slice Data.Array.Accelerate.AST.Stencil Data.Array.Accelerate.AST.Stencil2 Data.Array.Accelerate.AST.Transform Data.Array.Accelerate.AST.Unit Data.Array.Accelerate.AST.Use Data.Array.Accelerate.AST.ZipWith}
  Data.Array.Accelerate.AST.PreOpenAfun{Data.Array.Accelerate.AST.Abody Data.Array.Accelerate.AST.Alam}
  Data.Array.Accelerate.AST.PreOpenExp{Data.Array.Accelerate.AST.Cond Data.Array.Accelerate.AST.Const Data.Array.Accelerate.AST.Foreign Data.Array.Accelerate.AST.FromIndex Data.Array.Accelerate.AST.Index Data.Array.Accelerate.AST.IndexAny Data.Array.Accelerate.AST.IndexCons Data.Array.Accelerate.AST.IndexFull Data.Array.Accelerate.AST.IndexHead Data.Array.Accelerate.AST.IndexNil Data.Array.Accelerate.AST.IndexSlice Data.Array.Accelerate.AST.IndexTail Data.Array.Accelerate.AST.Intersect Data.Array.Accelerate.AST.Let Data.Array.Accelerate.AST.LinearIndex Data.Array.Accelerate.AST.PrimApp Data.Array.Accelerate.AST.PrimConst Data.Array.Accelerate.AST.Prj Data.Array.Accelerate.AST.Shape Data.Array.Accelerate.AST.ShapeSize Data.Array.Accelerate.AST.ToIndex Data.Array.Accelerate.AST.Tuple Data.Array.Accelerate.AST.Union Data.Array.Accelerate.AST.Var Data.Array.Accelerate.AST.While}
  Data.Array.Accelerate.AST.PreOpenFun{Data.Array.Accelerate.AST.Body Data.Array.Accelerate.AST.Lam}
  Data.Array.Accelerate.AST.PrimConst{Data.Array.Accelerate.AST.PrimMaxBound Data.Array.Accelerate.AST.PrimMinBound Data.Array.Accelerate.AST.PrimPi}
  Data.Array.Accelerate.AST.PrimFun{Data.Array.Accelerate.AST.PrimAbs Data.Array.Accelerate.AST.PrimAcos Data.Array.Accelerate.AST.PrimAcosh Data.Array.Accelerate.AST.PrimAdd Data.Array.Accelerate.AST.PrimAsin Data.Array.Accelerate.AST.PrimAsinh Data.Array.Accelerate.AST.PrimAtan Data.Array.Accelerate.AST.PrimAtan2 Data.Array.Accelerate.AST.PrimAtanh Data.Array.Accelerate.AST.PrimBAnd Data.Array.Accelerate.AST.PrimBNot Data.Array.Accelerate.AST.PrimBOr Data.Array.Accelerate.AST.PrimBRotateL Data.Array.Accelerate.AST.PrimBRotateR Data.Array.Accelerate.AST.PrimBShiftL Data.Array.Accelerate.AST.PrimBShiftR Data.Array.Accelerate.AST.PrimBXor Data.Array.Accelerate.AST.PrimBoolToInt Data.Array.Accelerate.AST.PrimCeiling Data.Array.Accelerate.AST.PrimChr Data.Array.Accelerate.AST.PrimCoerce Data.Array.Accelerate.AST.PrimCos Data.Array.Accelerate.AST.PrimCosh Data.Array.Accelerate.AST.PrimCountLeadingZeros Data.Array.Accelerate.AST.PrimCountTrailingZeros Data.Array.Accelerate.AST.PrimDivMod Data.Array.Accelerate.AST.PrimEq Data.Array.Accelerate.AST.PrimExpFloating Data.Array.Accelerate.AST.PrimFDiv Data.Array.Accelerate.AST.PrimFPow Data.Array.Accelerate.AST.PrimFloor Data.Array.Accelerate.AST.PrimFromIntegral Data.Array.Accelerate.AST.PrimGt Data.Array.Accelerate.AST.PrimGtEq Data.Array.Accelerate.AST.PrimIDiv Data.Array.Accelerate.AST.PrimIsInfinite Data.Array.Accelerate.AST.PrimIsNaN Data.Array.Accelerate.AST.PrimLAnd Data.Array.Accelerate.AST.PrimLNot Data.Array.Accelerate.AST.PrimLOr Data.Array.Accelerate.AST.PrimLog Data.Array.Accelerate.AST.PrimLogBase Data.Array.Accelerate.AST.PrimLt Data.Array.Accelerate.AST.PrimLtEq Data.Array.Accelerate.AST.PrimMax Data.Array.Accelerate.AST.PrimMin Data.Array.Accelerate.AST.PrimMod Data.Array.Accelerate.AST.PrimMul Data.Array.Accelerate.AST.PrimNEq Data.Array.Accelerate.AST.PrimNeg Data.Array.Accelerate.AST.PrimOrd Data.Array.Accelerate.AST.PrimPopCount Data.Array.Accelerate.AST.PrimQuot Data.Array.Accelerate.AST.PrimQuotRem Data.Array.Accelerate.AST.PrimRecip Data.Array.Accelerate.AST.PrimRem Data.Array.Accelerate.AST.PrimRound Data.Array.Accelerate.AST.PrimSig Data.Array.Accelerate.AST.PrimSin Data.Array.Accelerate.AST.PrimSinh Data.Array.Accelerate.AST.PrimSqrt Data.Array.Accelerate.AST.PrimSub Data.Array.Accelerate.AST.PrimTan Data.Array.Accelerate.AST.PrimTanh Data.Array.Accelerate.AST.PrimToFloating Data.Array.Accelerate.AST.PrimTruncate}
  Data.Array.Accelerate.AST.Stencil{Data.Array.Accelerate.AST.stencil}
  Data.Array.Accelerate.AST.StencilR{Data.Array.Accelerate.AST.StencilRtup3 Data.Array.Accelerate.AST.StencilRtup5 Data.Array.Accelerate.AST.StencilRtup7 Data.Array.Accelerate.AST.StencilRtup9 Data.Array.Accelerate.AST.StencilRunit3 Data.Array.Accelerate.AST.StencilRunit5 Data.Array.Accelerate.AST.StencilRunit7 Data.Array.Accelerate.AST.StencilRunit9}
  Data.Array.Accelerate.AST.Val{Data.Array.Accelerate.AST.Empty Data.Array.Accelerate.AST.Push}
  Data.Array.Accelerate.AST.ValElt{Data.Array.Accelerate.AST.EmptyElt Data.Array.Accelerate.AST.PushElt}
module dependencies: Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Lifetime Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  Data.Array.Accelerate.Array.Data 0f7788ba6235b9caff0f10d41744f81c
  exports: 2e401fd3c8bac4bea058169f3641bb3b
  AD_Bool 7ffaec16b24b1ff9d43a3359046a9a00
  AD_CChar 92dd07545ae1dcdf359ecbe34a806119
  AD_CDouble 716ec815a6012559f9395eab56963a5f
  AD_CFloat f2eab636bdc6cdaf119dcfd164e65975
  AD_CInt 036b3e72a6060e8f0ea752444f0cfc6a
  AD_CLLong e2381a0d64ff0c48b098195d51446042
  AD_CLong 7307d3f5dceef439285b4af4fe1e3639
  AD_CSChar 572fae3d3e2d2f2f88a108df5628c9ea
  AD_CShort 88d99a95ee31a0f333cc09c75268e2cc
  AD_CUChar c16a52040ea9259f2a43ca82bbb76761
  AD_CUInt 9b5b3735a7ba1de785b18236e3e24421
  AD_CULLong dcbf356e07c768fce74748b66f0d7001
  AD_CULong 604907820f53d54b3c978d017eef7af4
  AD_CUShort 45a6e1b256eb9f0970d4ebaa87873b13
  AD_Char ea14a42ad517382a17ae786c6bb80062
  AD_Double eade1c7a682bf1ae5979aae82b131749
  AD_Float cfd9f6f89c261d51c38d820c607e338e
  AD_Int f7a27541803f224f18617b47e19657ce
  AD_Int16 bfdb18a21792c2c87e3f30c860f9094f
  AD_Int32 2ab67ef30747cba891ef1176fd3087b5
  AD_Int64 69764889d805c447c2715c55bc088030
  AD_Int8 96db1aa6e36614005360c94313ceb800
  AD_Pair 744bfd6434140a02d86db367b8fa36a3
  AD_Unit 3d98fc903b8b9fcfd211c5897080a109
  AD_Word e41aade05115521e7c269a9706a11a01
  AD_Word16 c0245e3e7f4da709edd6d582e134e05a
  AD_Word32 f9bb1beed35b7682db542142534827ce
  AD_Word64 eba48558a5841b20b23683e18ec3aa40
  AD_Word8 97b94fcf1999a96339827a429994eb66
  ArrayData 251ac8cc288dc0eb1e92b71f08b6e16e
  ArrayElt ff45a629a63c423d76148392bf0a84a4
  ArrayEltR ff45a629a63c423d76148392bf0a84a4
  ArrayEltRbool 59a7e3fcd10ac21348c994fba99befba
  ArrayEltRcchar 5b6a232646b69c449a8d3811386c5616
  ArrayEltRcdouble d114f59b1ca4c8326dc6c121e7e4ea28
  ArrayEltRcfloat 662c0ac72a33762f322b68378f98c2ce
  ArrayEltRchar 20249e70beed5e402bb60b8190ccb4d6
  ArrayEltRcint 63e2c96c9a239248e0237312d39125ef
  ArrayEltRcllong 5694830131405ad01bb4e3455f07c50c
  ArrayEltRclong a003220115f023943dd4522b4d424d4d
  ArrayEltRcschar af6ddba356e6b1e38d237fd1d8898fff
  ArrayEltRcshort c29968a7eb57c7c96dd82d1a5669e1fd
  ArrayEltRcuchar 9836c0dd4f7d2a8c95125105c719afbe
  ArrayEltRcuint f722561cab26cbe036cd4555c24a64d3
  ArrayEltRcullong bdaabfbb399d6a689ad6b4e0f0480ac2
  ArrayEltRculong 9555d145e4e0f9330dfbd63a5004839c
  ArrayEltRcushort 8928af3a323cac664903316621d99940
  ArrayEltRdouble 88c0c19adba8cf9b189e95d55720059c
  ArrayEltRfloat cc0d4700fcbe7137c8f49eb0fd7a288a
  ArrayEltRint cf973a872d678e7138e249922afb4198
  ArrayEltRint16 94f4d0a362d363b2491591b84941fa3c
  ArrayEltRint32 4f30d6c98dfebf2f3ff7230de68c88d6
  ArrayEltRint64 c75d076f93f5e3146a02eb5c72a575f0
  ArrayEltRint8 215e4a004f3e0ef088aa1b0699233fd8
  ArrayEltRpair f765443308f077a63876c8b52cd9f09b
  ArrayEltRunit 0f185d40d687e942a8f850ef1919cd00
  ArrayEltRword 5d08d76f0c16b0cb174190f7edc54056
  ArrayEltRword16 455c6f781c1aff31846b0d37e7d3b475
  ArrayEltRword32 85a7864a4a6042fd90581a8fb392b0f6
  ArrayEltRword64 74c00217b24e3c583be24eaf39d950c6
  ArrayEltRword8 afcfdd441f6fd4149bcb2113192b774b
  arrayElt e29253eddc1bb846f1e15aba41b0967e
import  -/  Data.Array.Accelerate.Array.Representation 7ecc085451773e8538fbcc949c8f13b8
  exports: 572b3ca30546aa8fe21350a43e265cdd
  SliceAll 41d59e71823102a8b9c9b818d9efda7c
  SliceFixed 3cce896383a0dafcfced9cfc6bcd5f28
  SliceIndex 23dde5ac3819531720383c4ce52892fc
  SliceNil 9655aea358522d9498a948e92c236d3f
  size 84a4d0e8e6d55188a3525c577ff3b863
import  -/  Data.Array.Accelerate.Array.Sugar 1095a84a969562bd64b7800341e0d23c
  exports: a6dd551b39ab2a3a217fc8c2a6979cd5
  :. 78f23e81404aaf1e43268a71a575425c
  Any a8f24f56c7b98958c2a33099c58c097d
  ArrRepr 48c28c524980b12342608b2cad31d1b9
  Array 39e81388e8157c36ce0f8d403ca58e72
  Array 78f23e81404aaf1e43268a71a575425c
  Arrays 3cc6db7d6b3c36ee0c840e1566f75d38
  ArraysR 1eac944ac7c8e073edb268e364d17067
  ArraysRarray 7151e2c7198fa93142e66e2d2e06532e
  ArraysRpair 4a39ee401d2432acb13acbb83cb9df9f
  ArraysRunit 3606c7a420b27d30646af778b2e4270e
  Atuple 6feaa0161ffad15a746afb867f21f70b
  DIM1 78f23e81404aaf1e43268a71a575425c
  Elt 78f23e81404aaf1e43268a71a575425c
  EltRepr 78f23e81404aaf1e43268a71a575425c
  Foreign 2d363443f4f8396630ebdd68ab1f2543
  IsAtuple 3cc6db7d6b3c36ee0c840e1566f75d38
  IsTuple 796d7a33c07027c169e95b6b89927734
  NilAtup cc36880f178a7e9e125505f43c8172e2
  NilTup 36796631cb3a95a68e6a4dde7e7b2bbe
  Scalar 78f23e81404aaf1e43268a71a575425c
  Segments 1aaba37901236c62a5f4ce21960ed8e9
  Shape 78f23e81404aaf1e43268a71a575425c
  Slice 78f23e81404aaf1e43268a71a575425c
  SnocAtup 8508890a48fc19a3130443094eda67f2
  SnocTup ef3a739bcf04e48a53d49112dce542ea
  Tuple 878418f2d4c18f6518d438b74451ef4e
  TupleRepr 8aa32b8ecd758273647e9e2e97033eb7
  Z cd0941398cbcdba80e0ec7bd84e77596
  arrays 8f280417dcca648029fd19ae6c13f4f7
  eltType 21a580fd17202e5faf93897dd670e4dd
  fromArr a02fba7e549192bcfaec3707ce480284
  liftForeign 729f978684f11aae5064420b09a41ae0
  strForeign d090b4e5321778b152816c711bc1cec0
  toArr d5ae4611e31ffb5ade4a8fc2fbb51317
  toElt fb51c826f81999ac82f2cc2c37722ff3
  toList 78f23e81404aaf1e43268a71a575425c
import  -/  Data.Array.Accelerate.Array.Unique 90e2b2f850959b7fbd4fd9b5b72b1848
  exports: 1216d67c5ec81a0e89fcee38d45cba1e
  UniqueArray f0af8e3da78e0824d4c0a6abff37a9bb
  newUniqueArray c21c90a405a9a7f6ee0b911689c6806c
  unsafeUniqueArrayPtr e316e2326e3dd4edb7973ca7252c09fe
import  -/  Data.Array.Accelerate.Product 8b6346e847887a013338cfe4431f2f5a
  exports: aebe828f4ca2c96d5390ff50126a2bd3
  SuccTupIdx 0bc8a098c8f2d27bf7ec36e6968e021b
  TupleIdx 3dd7384d0a4490c82730ecfcb4d16f06
  ZeroTupIdx 807a291e8a84844e2c5f3d7ffa83d357
import  -/  Data.Array.Accelerate.Type a1c7885f4a79193eaa1f192a9acbec78
  exports: 7aad7ca015788892b1349ebab929b71f
  BoundedType 587e226fabbdef28c976ac0ac487e117
  FloatingDict 8a9774adb9d91a2e96df68ba713376aa
  FloatingNumType a1c94d3214352fd49597cc00d288ab27
  FloatingType a8fbaf1931593cc4a29598dedb323812
  IntegralBoundedType 945ccbcd09b785fc89c99d2d179a8a2b
  IntegralDict 058e95054b258639c9f1a5f924082f0f
  IntegralNumType 288d27e82ebde26a64dae558c6cba53f
  IntegralType 0b35b82481c40d13579644883a8a096c
  IsIntegral b2c4f7b6108c37809735ca127f59a1fe
  NonNumBoundedType 10600870e0faf27aea4a62e0097d2097
  NonNumDict f0ca47a632293eff9e2eb9a523136610
  NonNumScalarType 3b519df15b732f21c2cd482151d11b85
  NonNumType a6fb98a8e4afd252d3e51393643910ab
  NumScalarType 6acc6941d3123de00103f9c583fd6ce2
  NumType 13909a3ca52b1a41105a7d98e1d63baf
  PairTuple b47308804394be7e1f34db7591c0a9bf
  ScalarType ab6372a7ff8e599731c2fa5da97173de
  SingleTuple 02c34fbce3b33e7b428725bd42978f57
  TupleType 80f35ed30c42e69f416a3f4776b90673
  TypeBool 1b5ea3ae1827b1ef21ecbb8f474a1d56
  TypeCChar b1d147759344e76ee937e689d2e886e2
  TypeCDouble 354d58256cc46834e12f964088ed0960
  TypeCFloat 7b1c042cc409ec6e7022607032be156f
  TypeCInt b6349458bf73f9e04a963fba43c8a4d6
  TypeCLLong 33b03515a1a093672a02bc779cfa60f8
  TypeCLong 9bd106819d4d4586b15989faab06ad81
  TypeCSChar 84e04b35be2655562de5046a457fb636
  TypeCShort 905c217b42ce4961bbe5770e8a51a6a6
  TypeCUChar 8d567221db005cb16e6b5fc57fd6a803
  TypeCUInt df97b3c962975fceb1050e11551f9921
  TypeCULLong 8bb25863be8dca3f1096f5f470ff7b2d
  TypeCULong ab27c5dbc4568a247fbca1a1e6da3774
  TypeCUShort dcea2f64ab2a5965655f1ce4a40ef199
  TypeChar 70e41c6f9520c8dd4579be4a5a2b2cf1
  TypeDouble 90e32ac1853c492580ab47e097ca621c
  TypeFloat f3c629656bc749ad5656800c1a03ad75
  TypeInt eebcf3c3db4634ed209d6f68b06877dc
  TypeInt16 3a78f4eaa4284e8719bbc7be8da476c2
  TypeInt32 d1351c98fe8fcc82aff8a942258b2c12
  TypeInt64 500b8b4cc6a97c5fc614c61d863fc564
  TypeInt8 bf1a53d8abc4a8ca480159039ee69da1
  TypeWord 5359dd23681f476fe936c71fd3f8598c
  TypeWord16 afa669343400204f262f57ed078412a9
  TypeWord32 f9fe9175129161c6ba7cb696d1a965cb
  TypeWord64 cf469b63ffd5668e82cbcf284388ee45
  TypeWord8 ca821325ecab9fadd2e3041f41f21003
  UnitTuple eae520607dd29fabf0b4e6abfa8934ce
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:Data.Typeable.Internal 0e9bdefa4325a0112d8e73b5e1e1f85d
import  -/  base-4.9.1.0:Foreign.ForeignPtr a57f95ad34cceecd3d53cb6caf640c90
import  -/  base-4.9.1.0:Foreign.Marshal 579ac8972d0a4fda781ca1fbdb25505c
import  -/  base-4.9.1.0:Foreign.Marshal.Array 63114b8be90ae825866d45b38d8798ce
import  -/  base-4.9.1.0:Foreign.Ptr 436587875917047a95f3be0fc1891fc4
import  -/  base-4.9.1.0:Foreign.Storable 085c8d7f42ceec1dbb4e818f06339b9d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.ForeignPtr 20e761047d2a09f17f566a747b24664a
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  deepseq-1.4.2.0@deepseq-1.4.2.0:Control.DeepSeq 3b9ddb93b8ec16cf9a98d6096b46c390
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH d856a1f9d606be57026da48a46c8b0a9
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH.Lib 715cf040319ba19bc69da4853519bde7
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH.Syntax f73a6f51a55e744c097972689232ddf4
addDependentFile "/home/pwoh/.stack/programs/x86_64-linux-dkd1ce2ff9c9560b648268df668d177711/ghc-8.0.2/lib/ghc-8.0.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux-dkd1ce2ff9c9560b648268df668d177711/Cabal-1.24.2.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
d85164a68dcedbc8a54813dd240745cc
  $fNFDataOpenAcc ::
    Control.DeepSeq.NFData (Data.Array.Accelerate.AST.OpenAcc aenv t)
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.AST.rnfOpenAcc
                  `cast`
                (forall (aenv :: <*>_N) (t :: <*>_N).
                 Sym (Control.DeepSeq.N:NFData[0]
                          <Data.Array.Accelerate.AST.OpenAcc aenv t>_N)) -}
d85164a68dcedbc8a54813dd240745cc
  $fNFDataPreOpenAfun ::
    Control.DeepSeq.NFData (Data.Array.Accelerate.AST.OpenAfun aenv f)
  DFunId
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.AST.$fNFDataPreOpenAfun_$crnf
                  `cast`
                (forall (aenv :: <*>_N) (f :: <*>_N).
                 Sym (Control.DeepSeq.N:NFData[0]
                          <Data.Array.Accelerate.AST.OpenAfun aenv f>_N)) -}
d85164a68dcedbc8a54813dd240745cc
  $fNFDataPreOpenAfun_$crnf ::
    Data.Array.Accelerate.AST.OpenAfun aenv f -> ()
  {- Arity: 1,
     Unfolding: (\ @ aenv @ f ->
                 Data.Array.Accelerate.AST.rnfPreOpenAfun
                   @ Data.Array.Accelerate.AST.OpenAcc
                   @ aenv
                   @ f
                   Data.Array.Accelerate.AST.rnfOpenAcc) -}
d85164a68dcedbc8a54813dd240745cc
  $fNFDataPreOpenExp ::
    Control.DeepSeq.NFData
      (Data.Array.Accelerate.AST.OpenExp env aenv t)
  DFunId
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.AST.$fNFDataPreOpenExp_$crnf
                  `cast`
                (forall (env :: <*>_N) (aenv :: <*>_N) (t :: <*>_N).
                 Sym (Control.DeepSeq.N:NFData[0]
                          <Data.Array.Accelerate.AST.OpenExp env aenv t>_N)) -}
d85164a68dcedbc8a54813dd240745cc
  $fNFDataPreOpenExp_$crnf ::
    Data.Array.Accelerate.AST.OpenExp env aenv t -> ()
  {- Arity: 1,
     Unfolding: (\ @ env @ aenv @ t ->
                 Data.Array.Accelerate.AST.rnfPreOpenExp
                   @ Data.Array.Accelerate.AST.OpenAcc
                   @ env
                   @ aenv
                   @ t
                   Data.Array.Accelerate.AST.rnfOpenAcc) -}
d85164a68dcedbc8a54813dd240745cc
  $fNFDataPreOpenFun ::
    Control.DeepSeq.NFData
      (Data.Array.Accelerate.AST.OpenFun env aenv t)
  DFunId
  {- Arity: 1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.AST.$fNFDataPreOpenFun_$crnf
                  `cast`
                (forall (env :: <*>_N) (aenv :: <*>_N) (t :: <*>_N).
                 Sym (Control.DeepSeq.N:NFData[0]
                          <Data.Array.Accelerate.AST.OpenFun env aenv t>_N)) -}
d85164a68dcedbc8a54813dd240745cc
  $fNFDataPreOpenFun_$crnf ::
    Data.Array.Accelerate.AST.OpenFun env aenv t -> ()
  {- Arity: 1,
     Unfolding: (\ @ env @ aenv @ t ->
                 Data.Array.Accelerate.AST.rnfPreOpenFun
                   @ Data.Array.Accelerate.AST.OpenAcc
                   @ env
                   @ aenv
                   @ t
                   Data.Array.Accelerate.AST.rnfOpenAcc) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,) ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) =>
    Data.Array.Accelerate.AST.Stencil
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
      a
      (row1, row2, row3)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(U,U,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ sh
                      @ a
                      @ row1
                      @ row2
                      @ row3
                      ($dStencil :: Data.Array.Accelerate.AST.Stencil
                                      (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                      a
                                      row1)
                      ($dStencil1 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row2)
                      ($dStencil2 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row3).
                  @ ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  @ a
                  @ (row1, row2, row3)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,)_$cp1Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     $dStencil
                     $dStencil1
                     $dStencil2)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,)_$cp2Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     $dStencil
                     $dStencil1
                     $dStencil2)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,)_$cp3Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     $dStencil
                     $dStencil1
                     $dStencil2)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,)_$cp4Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     $dStencil
                     $dStencil1
                     $dStencil2)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,)_$cstencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     $dStencil
                     $dStencil1
                     $dStencil2) -}
e605f62f4ff9750195347f57d1ca5f20
  $fStencil:.a(,,)1 ::
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Array.Accelerate.Product.ProdRepr (row1, row2, row3)
    -> (row1, row2, row3)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ row1
                   @ row2
                   @ row3
                   @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                   (ds :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                   (ds1 :: Data.Array.Accelerate.Product.ProdRepr
                             (row1, row2, row3)) ->
                 case ds1
                        `cast`
                      (Trans
                           (Sub (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                     <row3>_N <row2>_N <row1>_N))
                           ((,)
                              (Sub (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                        <row2>_N <row1>_N))
                              <row3>_R)_R) of wild { (,) ds2 c1 ->
                 case ds2 of wild1 { (,) ds3 b1 ->
                 case ds3 of wild2 { (,) ds4 a1 ->
                 case ds4 of wild3 { () -> (a1, b1, c1) } } } }) -}
0c94dc642e2c10d45684e53b2c03fe46
  $fStencil:.a(,,)2 ::
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> (row1, row2, row3)
    -> Data.Array.Accelerate.Product.ProdRepr (row1, row2, row3)
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ row1
                   @ row2
                   @ row3
                   @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                   (ds :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                   (ds1 :: (row1, row2, row3)) ->
                 case ds1 of wild { (,,) a1 b1 c1 ->
                 (((GHC.Tuple.(), a1), b1), c1)
                   `cast`
                 (Trans
                      ((,)
                         (Sub (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                        <row2>_N <row1>_N)))
                         <row3>_R)_R
                      (Sub (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                     <row3>_N <row2>_N <row1>_N)))) }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,)_$cp1Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) =>
    Data.Array.Accelerate.Array.Sugar.Shape
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Arity: 3,
     Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   ($dStencil :: Data.Array.Accelerate.AST.Stencil
                                   (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   ($dStencil1 :: Data.Array.Accelerate.AST.Stencil
                                    (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   ($dStencil2 :: Data.Array.Accelerate.AST.Stencil
                                    (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                    a
                                    row3) ->
                 let {
                   $dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row3
                       $dStencil2
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row2
                       $dStencil1
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox5 { DEFAULT ->
                 let {
                   $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row1
                       $dStencil
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox6 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox7 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox8 { DEFAULT ->
                 Data.Array.Accelerate.Array.Sugar.$fShape:.
                   @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   $dShape2 } } } } } } } } }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,)_$cp2Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) =>
    Data.Array.Accelerate.Array.Sugar.Elt a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SSLLL),U(1*U,1*U,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   ($dStencil :: Data.Array.Accelerate.AST.Stencil
                                   (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   ($dStencil1 :: Data.Array.Accelerate.AST.Stencil
                                    (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   ($dStencil2 :: Data.Array.Accelerate.AST.Stencil
                                    (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                    a
                                    row3) ->
                 let {
                   $dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row3
                       $dStencil2
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row2
                       $dStencil1
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox5 { DEFAULT ->
                 let {
                   $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row1
                       $dStencil
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox6 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox7 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox8 { DEFAULT ->
                 Data.Array.Accelerate.AST.$p2Stencil
                   @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   @ a
                   @ row1
                   $dStencil } } } } } } } } }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,)_$cp3Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) =>
    Data.Array.Accelerate.Array.Sugar.IsTuple (row1, row2, row3)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) ->
                 case Data.Array.Accelerate.AST.$w$cp3Stencil
                        @ sh
                        @ a
                        @ row1
                        @ row2
                        @ row3
                        w
                        w1
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Product.C:IsProduct
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ (row1, row2, row3)
                   ww1
                   ww2
                   ww3 }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,)_$cp4Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) =>
    Data.Array.Accelerate.Array.Sugar.Elt (row1, row2, row3)
  {- Arity: 3,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) ->
                 case Data.Array.Accelerate.AST.$w$cp4Stencil
                        @ sh
                        @ a
                        @ row1
                        @ row2
                        @ row3
                        w
                        w1
                        w2 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww8 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (row1, row2, row3)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww8 }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,)_$cstencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) =>
    Data.Array.Accelerate.AST.StencilR
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
      a
      (row1, row2, row3)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,1*U,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   ($dStencil :: Data.Array.Accelerate.AST.Stencil
                                   (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   ($dStencil1 :: Data.Array.Accelerate.AST.Stencil
                                    (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   ($dStencil2 :: Data.Array.Accelerate.AST.Stencil
                                    (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                    a
                                    row3) ->
                 let {
                   $dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row3
                       $dStencil2
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row2
                       $dStencil1
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox5 { DEFAULT ->
                 let {
                   $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row1
                       $dStencil
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox6 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox7 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox8 { DEFAULT ->
                 Data.Array.Accelerate.AST.StencilRtup3
                   @ ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   @ a
                   @ (row1, row2, row3)
                   @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   @ row1
                   @ row2
                   @ row3
                   @~ <(sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N
                   @~ <(row1, row2, row3)>_N
                   $dShape2
                   (Data.Array.Accelerate.AST.$p2Stencil
                      @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                      @ a
                      @ row1
                      $dStencil)
                   (Data.Array.Accelerate.AST.stencil
                      @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                      @ a
                      @ row1
                      $dStencil)
                   (Data.Array.Accelerate.AST.stencil
                      @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                      @ a
                      @ row2
                      $dStencil1)
                   (Data.Array.Accelerate.AST.stencil
                      @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                      @ a
                      @ row3
                      $dStencil2) } } } } } } } } }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,) ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) =>
    Data.Array.Accelerate.AST.Stencil
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
      a
      (row1, row2, row3, row4, row5)
  DFunId
  {- Arity: 5,
     Strictness: <L,U(U,U,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ sh
                      @ a
                      @ row1
                      @ row2
                      @ row3
                      @ row4
                      @ row5
                      ($dStencil :: Data.Array.Accelerate.AST.Stencil
                                      (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                      a
                                      row1)
                      ($dStencil1 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row2)
                      ($dStencil2 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row3)
                      ($dStencil3 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row4)
                      ($dStencil4 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row5).
                  @ ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  @ a
                  @ (row1, row2, row3, row4, row5)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,)_$cp1Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,)_$cp2Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,)_$cp3Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,)_$cp4Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,)_$cstencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,)_$cp1Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) =>
    Data.Array.Accelerate.Array.Sugar.Shape
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Arity: 5,
     Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,)_$cp2Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) =>
    Data.Array.Accelerate.Array.Sugar.Elt a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SSLLL),U(1*U,1*U,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,)_$cp3Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) =>
    Data.Array.Accelerate.Array.Sugar.IsTuple
      (row1, row2, row3, row4, row5)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   @ row4
                   @ row5
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3)
                   (w3 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4)
                   (w4 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) ->
                 case Data.Array.Accelerate.AST.$w$cp3Stencil1
                        @ sh
                        @ a
                        @ row1
                        @ row2
                        @ row3
                        @ row4
                        @ row5
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Product.C:IsProduct
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ (row1, row2, row3, row4, row5)
                   ww1
                   ww2
                   ww3 }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,)_$cp4Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (row1, row2, row3, row4, row5)
  {- Arity: 5,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   @ row4
                   @ row5
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3)
                   (w3 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4)
                   (w4 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) ->
                 case Data.Array.Accelerate.AST.$w$cp4Stencil1
                        @ sh
                        @ a
                        @ row1
                        @ row2
                        @ row3
                        @ row4
                        @ row5
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww8 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (row1, row2, row3, row4, row5)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww8 }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,)_$cstencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) =>
    Data.Array.Accelerate.AST.StencilR
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
      a
      (row1, row2, row3, row4, row5)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,1*U,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,) ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) =>
    Data.Array.Accelerate.AST.Stencil
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
      a
      (row1, row2, row3, row4, row5, row6, row7)
  DFunId
  {- Arity: 7,
     Strictness: <L,U(U,U,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ sh
                      @ a
                      @ row1
                      @ row2
                      @ row3
                      @ row4
                      @ row5
                      @ row6
                      @ row7
                      ($dStencil :: Data.Array.Accelerate.AST.Stencil
                                      (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                      a
                                      row1)
                      ($dStencil1 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row2)
                      ($dStencil2 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row3)
                      ($dStencil3 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row4)
                      ($dStencil4 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row5)
                      ($dStencil5 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row6)
                      ($dStencil6 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row7).
                  @ ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  @ a
                  @ (row1, row2, row3, row4, row5, row6, row7)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,)_$cp1Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,)_$cp2Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,)_$cp3Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,)_$cp4Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,)_$cstencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,)_$cp1Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) =>
    Data.Array.Accelerate.Array.Sugar.Shape
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Arity: 7,
     Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,)_$cp2Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) =>
    Data.Array.Accelerate.Array.Sugar.Elt a
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(SSLLL),U(1*U,1*U,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,)_$cp3Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) =>
    Data.Array.Accelerate.Array.Sugar.IsTuple
      (row1, row2, row3, row4, row5, row6, row7)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   @ row4
                   @ row5
                   @ row6
                   @ row7
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3)
                   (w3 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4)
                   (w4 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5)
                   (w5 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6)
                   (w6 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) ->
                 case Data.Array.Accelerate.AST.$w$cp3Stencil2
                        @ sh
                        @ a
                        @ row1
                        @ row2
                        @ row3
                        @ row4
                        @ row5
                        @ row6
                        @ row7
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Product.C:IsProduct
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ (row1, row2, row3, row4, row5, row6, row7)
                   ww1
                   ww2
                   ww3 }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,)_$cp4Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (row1, row2, row3, row4, row5, row6, row7)
  {- Arity: 7,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   @ row4
                   @ row5
                   @ row6
                   @ row7
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3)
                   (w3 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4)
                   (w4 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5)
                   (w5 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6)
                   (w6 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) ->
                 case Data.Array.Accelerate.AST.$w$cp4Stencil2
                        @ sh
                        @ a
                        @ row1
                        @ row2
                        @ row3
                        @ row4
                        @ row5
                        @ row6
                        @ row7
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww8 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (row1, row2, row3, row4, row5, row6, row7)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww8 }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,)_$cstencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) =>
    Data.Array.Accelerate.AST.StencilR
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
      a
      (row1, row2, row3, row4, row5, row6, row7)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,1*U,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,,,) ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) =>
    Data.Array.Accelerate.AST.Stencil
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
      a
      (row1, row2, row3, row4, row5, row6, row7, row8, row9)
  DFunId
  {- Arity: 9,
     Strictness: <L,U(U,U,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)><L,U(U,A,A,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ sh
                      @ a
                      @ row1
                      @ row2
                      @ row3
                      @ row4
                      @ row5
                      @ row6
                      @ row7
                      @ row8
                      @ row9
                      ($dStencil :: Data.Array.Accelerate.AST.Stencil
                                      (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                      a
                                      row1)
                      ($dStencil1 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row2)
                      ($dStencil2 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row3)
                      ($dStencil3 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row4)
                      ($dStencil4 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row5)
                      ($dStencil5 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row6)
                      ($dStencil6 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row7)
                      ($dStencil7 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row8)
                      ($dStencil8 :: Data.Array.Accelerate.AST.Stencil
                                       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                       a
                                       row9).
                  @ ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  @ a
                  @ (row1, row2, row3, row4, row5, row6, row7, row8, row9)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,,,)_$cp1Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     @ row8
                     @ row9
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6
                     $dStencil7
                     $dStencil8)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,,,)_$cp2Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     @ row8
                     @ row9
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6
                     $dStencil7
                     $dStencil8)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,,,)_$cp3Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     @ row8
                     @ row9
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6
                     $dStencil7
                     $dStencil8)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,,,)_$cp4Stencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     @ row8
                     @ row9
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6
                     $dStencil7
                     $dStencil8)
                  (Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,,,)_$cstencil
                     @ sh
                     @ a
                     @ row1
                     @ row2
                     @ row3
                     @ row4
                     @ row5
                     @ row6
                     @ row7
                     @ row8
                     @ row9
                     $dStencil
                     $dStencil1
                     $dStencil2
                     $dStencil3
                     $dStencil4
                     $dStencil5
                     $dStencil6
                     $dStencil7
                     $dStencil8) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,,,)_$cp1Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) =>
    Data.Array.Accelerate.Array.Sugar.Shape
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Arity: 9,
     Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,,,)_$cp2Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) =>
    Data.Array.Accelerate.Array.Sugar.Elt a
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S(SSLLL),U(1*U,1*U,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)><S(SLLLL),1*U(1*U,A,A,A,A)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,,,)_$cp3Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) =>
    Data.Array.Accelerate.Array.Sugar.IsTuple
      (row1, row2, row3, row4, row5, row6, row7, row8, row9)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (9, True, False)
                (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   @ row4
                   @ row5
                   @ row6
                   @ row7
                   @ row8
                   @ row9
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3)
                   (w3 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4)
                   (w4 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5)
                   (w5 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6)
                   (w6 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7)
                   (w7 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8)
                   (w8 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) ->
                 case Data.Array.Accelerate.AST.$w$cp3Stencil3
                        @ sh
                        @ a
                        @ row1
                        @ row2
                        @ row3
                        @ row4
                        @ row5
                        @ row6
                        @ row7
                        @ row8
                        @ row9
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Product.C:IsProduct
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ (row1, row2, row3, row4, row5, row6, row7, row8, row9)
                   ww1
                   ww2
                   ww3 }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,,,)_$cp4Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (row1, row2, row3, row4, row5, row6, row7, row8, row9)
  {- Arity: 9,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (9, True, False)
                (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   @ row4
                   @ row5
                   @ row6
                   @ row7
                   @ row8
                   @ row9
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3)
                   (w3 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4)
                   (w4 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5)
                   (w5 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6)
                   (w6 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7)
                   (w7 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8)
                   (w8 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) ->
                 case Data.Array.Accelerate.AST.$w$cp4Stencil3
                        @ sh
                        @ a
                        @ row1
                        @ row2
                        @ row3
                        @ row4
                        @ row5
                        @ row6
                        @ row7
                        @ row8
                        @ row9
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww8 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (row1, row2, row3, row4, row5, row6, row7, row8, row9)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww8 }) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.a(,,,,,,,,)_$cstencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) =>
    Data.Array.Accelerate.AST.StencilR
      ((sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
      a
      (row1, row2, row3, row4, row5, row6, row7, row8, row9)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,1*U,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)><S(SLLLL),U(1*U,A,A,A,1*U)> -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.e(,,) ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.AST.Stencil
      Data.Array.Accelerate.Array.Sugar.DIM1 e (e, e, e)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e).
                  @ Data.Array.Accelerate.Array.Sugar.DIM1
                  @ e
                  @ (e, e, e)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp1Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp2Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp3Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp4Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$WStencilRunit3 @ e $dElt) -}
2fc778cdd3a54c142137797969922071
  $fStencil:.e(,,)_$cp1Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.Shape
      Data.Array.Accelerate.Array.Sugar.DIM1
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ e ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 Data.Array.Accelerate.AST.$fStencil:.e(,,)_$s$fShape:.) -}
4b6b2f3f35cbf3338b27f942b6743c1b
  $fStencil:.e(,,)_$cp2Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.Elt e
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ e ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 $dElt) -}
b7946bdd8fe1b3d5e9e368d22d0fdee3
  $fStencil:.e(,,)_$cp3Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.IsTuple (e, e, e)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ e ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 Data.Array.Accelerate.Product.$fIsProductcst(,,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ e
                   @ e
                   @ e
                   $dElt
                   $dElt
                   $dElt) -}
67878e2b281710fefb238a3e0793eb92
  $fStencil:.e(,,)_$cp4Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.Elt (e, e, e)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),C(U),C(U),U(U,U,U,U,U,U,U,U,U),C(U),C(U),C(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ e ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                   @ e
                   @ e
                   @ e
                   $dElt
                   $dElt
                   $dElt) -}
142673c728509886eec432ca86ac24fc
  $fStencil:.e(,,)_$s$fShape:. ::
    Data.Array.Accelerate.Array.Sugar.Shape
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp1Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp2Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp3Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp4Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp5Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp6Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$crank
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  Data.Array.Accelerate.Array.Sugar.$fShape:._$s$csize
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cempty
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cignore
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cintersect
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cunion
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$ctoIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cfromIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$citer
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$citer1
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$crangeToShape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cshapeToRange
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cshapeToList
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$clistToShape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csliceAnyIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csliceNoneIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.e(,,,,) ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.AST.Stencil
      Data.Array.Accelerate.Array.Sugar.DIM1 e (e, e, e, e, e)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e).
                  @ Data.Array.Accelerate.Array.Sugar.DIM1
                  @ e
                  @ (e, e, e, e, e)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp1Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp2Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,,,)_$cp3Stencil
                     @ e
                     $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,,,)_$cp4Stencil
                     @ e
                     $dElt)
                  (Data.Array.Accelerate.AST.$WStencilRunit5 @ e $dElt) -}
6bc647462f919661ae1a886206d46149
  $fStencil:.e(,,,,)_$cp3Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.IsTuple (e, e, e, e, e)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ e ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 Data.Array.Accelerate.Product.$fIsProductcst(,,,,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ e
                   @ e
                   @ e
                   @ e
                   @ e
                   $dElt
                   $dElt
                   $dElt
                   $dElt
                   $dElt) -}
0f3571d765b19a9467156ca1a009d52c
  $fStencil:.e(,,,,)_$cp4Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.Elt (e, e, e, e, e)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),C(U),C(U),U(U,U,U,U,U,U,U,U,U),C(U),C(U),C(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ e ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 Data.Array.Accelerate.Array.Sugar.$fElt(,,,,)
                   @ e
                   @ e
                   @ e
                   @ e
                   @ e
                   $dElt
                   $dElt
                   $dElt
                   $dElt
                   $dElt) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.e(,,,,,,) ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.AST.Stencil
      Data.Array.Accelerate.Array.Sugar.DIM1 e (e, e, e, e, e, e, e)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e).
                  @ Data.Array.Accelerate.Array.Sugar.DIM1
                  @ e
                  @ (e, e, e, e, e, e, e)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp1Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp2Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,,,,,)_$cp3Stencil
                     @ e
                     $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,,,,,)_$cp4Stencil
                     @ e
                     $dElt)
                  (Data.Array.Accelerate.AST.$WStencilRunit7 @ e $dElt) -}
5eb8ade2c88927bbe3faf6f0fe5c6e79
  $fStencil:.e(,,,,,,)_$cp3Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.IsTuple (e, e, e, e, e, e, e)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ e ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 Data.Array.Accelerate.Product.$fIsProductcst(,,,,,,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ e
                   @ e
                   @ e
                   @ e
                   @ e
                   @ e
                   @ e
                   $dElt
                   $dElt
                   $dElt
                   $dElt
                   $dElt
                   $dElt
                   $dElt) -}
874e402a4150e3e58995cc562c822c8a
  $fStencil:.e(,,,,,,)_$cp4Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.Elt (e, e, e, e, e, e, e)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),C(U),C(U),U(U,U,U,U,U,U,U,U,U),C(U),C(U),C(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ e ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,)
                   @ e
                   @ e
                   @ e
                   @ e
                   @ e
                   @ e
                   @ e
                   $dElt
                   $dElt
                   $dElt
                   $dElt
                   $dElt
                   $dElt
                   $dElt) -}
de90111747605bd959f975fe4292a7e7
  $fStencil:.e(,,,,,,,,) ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.AST.Stencil
      Data.Array.Accelerate.Array.Sugar.DIM1
      e
      (e, e, e, e, e, e, e, e, e)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ e
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e).
                  @ Data.Array.Accelerate.Array.Sugar.DIM1
                  @ e
                  @ (e, e, e, e, e, e, e, e, e)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp1Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,)_$cp2Stencil @ e $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,,,,,,,)_$cp3Stencil
                     @ e
                     $dElt)
                  (Data.Array.Accelerate.AST.$fStencil:.e(,,,,,,,,)_$cp4Stencil
                     @ e
                     $dElt)
                  (Data.Array.Accelerate.AST.$WStencilRunit9 @ e $dElt) -}
3042abf3f542a7cd68ade057e9b6bfb9
  $fStencil:.e(,,,,,,,,)_$cp3Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.IsTuple
      (e, e, e, e, e, e, e, e, e)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ e (w :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 case Data.Array.Accelerate.AST.$w$cp3Stencil4
                        @ e
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Product.C:IsProduct
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ (e, e, e, e, e, e, e, e, e)
                   ww1
                   ww2
                   ww3 }) -}
a9abae63ef1934d74dadba6fbb06b5e7
  $fStencil:.e(,,,,,,,,)_$cp4Stencil ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Array.Sugar.Elt (e, e, e, e, e, e, e, e, e)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),C(U),C(U),U(U,U,U,U,U,U,U,U,U),C(U),C(U),C(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ e (w :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 case Data.Array.Accelerate.AST.$w$cp4Stencil4
                        @ e
                        w of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww8 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (e, e, e, e, e, e, e, e, e)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww8 }) -}
fab76c1d34886ab85efc758a493f17af
  $stypeRep#2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.AST.$stypeRep#3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Array.Accelerate.Array.Sugar.$tcArray
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
592bc365bdf3cfd6b383b9cf8e43ba84
  $stypeRep#3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   15503067570392668097##
                   1099276473081943541##) -}
10ae925d59672f0d3483e9dd2e874a2e
  $tc'Abody :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11370070257155631812##
                   6529339575018086887##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Abody1) -}
9bd6f98854a68a665d2d8dc17779ef49
  $tc'Abody1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Abody"#) -}
bfed61f3051ad3eac415d47b8a91e374
  $tc'Acond :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3778723389045569310##
                   7699768632258519554##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Acond1) -}
997f6310dcdf1efb4a5a01c9dc6bc6c1
  $tc'Acond1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Acond"#) -}
75a1ef78c3d1f78c6f64c1f5098c8eb5
  $tc'Aforeign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3066408746273351546##
                   9195559158784770770##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Aforeign1) -}
e9282aecacd9eac3fcb2df667ef96c48
  $tc'Aforeign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Aforeign"#) -}
dfbcf96ac9ba7e035a718df52d4ebaec
  $tc'Alam :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7720624080221522160##
                   11709430901071272218##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Alam1) -}
d6cf7adee01eed540083270a362430ba
  $tc'Alam1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Alam"#) -}
c7934dd5302a20035c6ba6ee4bb8f445
  $tc'Alet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15098964613165024787##
                   10420468390106277437##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Alet1) -}
93ab7ff3db77f949cb0df42ca718952e
  $tc'Alet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Alet"#) -}
0e8c20425c46d9cab2b35370c5e00c7d
  $tc'Apply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4573363813995210376##
                   15050085958493575364##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Apply1) -}
6753bb35b68b0ca9c9f492baaddc282f
  $tc'Apply1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Apply"#) -}
f49c04a7567c2c78263a8f889f852eaf
  $tc'Aprj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7387982937896888200##
                   9937363767522840428##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Aprj1) -}
4c9ca55fdc0edbfd7a796388582c9ec7
  $tc'Aprj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Aprj"#) -}
2e77148b9cdbfe65b362161e21b12214
  $tc'Atuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   194387127629412967##
                   3180536086950486272##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Atuple1) -}
751db43dc3355a1d155caac8f60a9262
  $tc'Atuple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Atuple"#) -}
4d14604714e8453828819fcd923b84fa
  $tc'Avar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13987400242780608606##
                   405648518841915393##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Avar1) -}
8c53a2323453f75b7afe5188013cec41
  $tc'Avar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Avar"#) -}
d4892b7a1200aab97d5e6ac005027499
  $tc'Awhile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1738914935497474338##
                   10143915792079693874##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Awhile1) -}
43a62da85e1349bdc7e99bf8d597cc34
  $tc'Awhile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Awhile"#) -}
9136ad74e055fa01f1c1fed379f9091d
  $tc'Backpermute :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6703951201688784696##
                   7801049973238966843##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Backpermute1) -}
8c299d54cb0ffd3d1bdc38193e17d317
  $tc'Backpermute1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Backpermute"#) -}
04805c34bb07c7496af6ced27f378e76
  $tc'Body :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14613736868948876282##
                   8988632272066740999##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Body1) -}
c31c67d508c7f0a8673b4ca04107ef55
  $tc'Body1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Body"#) -}
8668b39263b72ee5005f7436e3d00bfe
  $tc'C:Stencil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12187265172127711545##
                   16716984085526251889##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'C:Stencil1) -}
0eeac3c2a3ff2b83bf7e3348e635f8d8
  $tc'C:Stencil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Stencil"#) -}
d862da78a941915d1f38632707b82e81
  $tc'Clamp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14511630335854834479##
                   17569905644660547104##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Clamp1) -}
0862d1b9faf5baca621c52a27a5eb613
  $tc'Clamp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Clamp"#) -}
4ec35704b032b065a31205f9161bd56e
  $tc'Cond :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16550463656788652898##
                   7423656668913892893##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Cond1) -}
938cdf3bdee61532bfac33b530d4d3b5
  $tc'Cond1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cond"#) -}
79046023e198c14643fa70d00d5ca857
  $tc'Const :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6992481668103307470##
                   599456935939351289##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Const1) -}
56dbaacb0e8fdedb380e6b82282abf55
  $tc'Const1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Const"#) -}
960783fafe54b81a99edc8ff6aee8bb7
  $tc'Constant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9175323855012531197##
                   12351338986500215200##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Constant1) -}
3530e4822e608c1eb53cb668d955f324
  $tc'Constant1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Constant"#) -}
529e9033347554458e5df846b53b081f
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   875807372583225730##
                   16953242847731074576##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Empty1) -}
9ba2fdb548281766dd6f0f476127fd11
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
bc39a519dbec21e001ff14da14b93ebc
  $tc'EmptyElt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17828070910019742424##
                   5755397319155985441##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'EmptyElt1) -}
bd387ed44e12e756ec9051d38e12bfa4
  $tc'EmptyElt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EmptyElt"#) -}
86f207909bc8e0a8365b71a63af60489
  $tc'Fold :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5018550775590927746##
                   10043200530398949018##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Fold2) -}
555a666378645e429fda5c732a5973e0
  $tc'Fold1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10522152204716520679##
                   2448539885293940645##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Fold3) -}
96ca953206c787a95c0612d626a9aebe
  $tc'Fold1Seg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17585313837977165345##
                   12354382962035958019##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Fold1Seg1) -}
d9aead4a76c2eab24cd3994f8e4581c9
  $tc'Fold1Seg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fold1Seg"#) -}
ff9605fc2cee61a28a0f76bed59b020f
  $tc'Fold2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fold"#) -}
bd73f7f3e94a395f01783330c3c8e087
  $tc'Fold3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Fold1"#) -}
3bc7c6b123120623b63db0ee537415c2
  $tc'FoldSeg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15250360064855668973##
                   18383984826269554417##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'FoldSeg1) -}
ddbfcdb0b097c1db8cccee6294cd4b80
  $tc'FoldSeg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FoldSeg"#) -}
d9688027514eb7fa3fb63e81dc7fe53d
  $tc'Foreign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8952652250003341030##
                   11329511532197860539##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Foreign1) -}
61537aac5ee9e17264cd8acebf32407e
  $tc'Foreign1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Foreign"#) -}
4a4a421e3c041dcd1050ae118d65ee4d
  $tc'FromIndex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14957942226301444099##
                   14266749813726302370##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'FromIndex1) -}
e394914af6d75c445231bf6b749d6210
  $tc'FromIndex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FromIndex"#) -}
cdafa4d7c9884d59d3456716b0eb34eb
  $tc'Function :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11199174097444859968##
                   17338399820498622689##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Function1) -}
15fee922dc93e7ccbb1b95653e3f647e
  $tc'Function1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Function"#) -}
e543f2b3f477d0e4b8e5fd37bb0e0d7a
  $tc'Generate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8837128376544781357##
                   115609487776694459##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Generate1) -}
385306dbd61e94722d0edd621394dd25
  $tc'Generate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Generate"#) -}
4791d9b0c2b4956cbefd3a2c8c47439a
  $tc'Index :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16848857388097789588##
                   195417191693699989##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Index1) -}
1fd30f10f02fdec0e381b9aa7b4496b9
  $tc'Index1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Index"#) -}
98265fb5062defd869f231c4ee60f085
  $tc'IndexAny :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8650628819352815732##
                   8420570932337839919##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'IndexAny1) -}
96e50b13beaa5589fa041a1d2f33aec1
  $tc'IndexAny1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IndexAny"#) -}
cbbc99f6c79ccaa578270555b9163647
  $tc'IndexCons :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18321001007495542759##
                   2326996999133462403##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'IndexCons1) -}
46e244013d8d2c13ab17e0bcd7c84869
  $tc'IndexCons1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IndexCons"#) -}
cffc8b374a6cfc9c39aff1976c7e9721
  $tc'IndexFull :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18007398937351359174##
                   68906671373467547##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'IndexFull1) -}
f219921a0e73231d8b8c150148414862
  $tc'IndexFull1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IndexFull"#) -}
f2377079f01390d62b9301ea8a99b8c1
  $tc'IndexHead :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4424921207945467978##
                   18082728266718569997##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'IndexHead1) -}
45c2a26dc486ac89f4b7d851d5af7c2b
  $tc'IndexHead1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IndexHead"#) -}
119ea1f70b30b3bce88690037600786b
  $tc'IndexNil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11812597704170017346##
                   4962379713046605635##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'IndexNil1) -}
3d03e23064d7c78ac6dcc192f7e7f77b
  $tc'IndexNil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IndexNil"#) -}
4cb0a3f02c3af8aaaedb259100271d78
  $tc'IndexSlice :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   63355068246741058##
                   6698971331316765425##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'IndexSlice1) -}
a2a4f061ba18f08cc04e83ae92f1e04b
  $tc'IndexSlice1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IndexSlice"#) -}
1360da145c1c7c9b44ab57ebb32890a6
  $tc'IndexTail :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6331095366235186291##
                   16350093556516931893##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'IndexTail1) -}
60a021a0eaeb7f43592af07de98a9f62
  $tc'IndexTail1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IndexTail"#) -}
9bef87b242e6c5a36f4c30f1388c662c
  $tc'Intersect :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9406645011190665131##
                   14037968866997064850##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Intersect1) -}
23c3a77c91352c7df7351d3089befe1f
  $tc'Intersect1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Intersect"#) -}
ea2d8cc43ddd2dae3bf383737328eac3
  $tc'Lam :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5374524039797946702##
                   11317662330642617622##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Lam1) -}
254bcec8495ef5e4515b0662a3268a5b
  $tc'Lam1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Lam"#) -}
c29678223a40ae7c81a57ad3e26c687f
  $tc'Let :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2548197226988363165##
                   16990050783096918550##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Let1) -}
6854dccdfd5194d57c9b8122ca49b8a4
  $tc'Let1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Let"#) -}
5a11ae819c1a72b00016bf7d830110b9
  $tc'LinearIndex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9421092688164049991##
                   3540127880710447645##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'LinearIndex1) -}
8b33f1c700ccca95968891b41d69276c
  $tc'LinearIndex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LinearIndex"#) -}
06f4eee0d950378cf597cc8521f46f67
  $tc'Map :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14469509832073852630##
                   16106477134368050551##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Map1) -}
6fe93951418d9e0db98dbeffd59e5f7e
  $tc'Map1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Map"#) -}
dd6e2198ef0fb35c0238d913a45e6aab
  $tc'Mirror :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6244629068309030858##
                   12730866560477516050##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Mirror1) -}
5a7f1ffe32ee23893029dc57fc5b0295
  $tc'Mirror1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Mirror"#) -}
3475125f24c6d451e214c505b2db0885
  $tc'OpenAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4262634298704541896##
                   17884528684387654422##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'OpenAcc1) -}
957a63751dfed2801c0201e40322cd0a
  $tc'OpenAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OpenAcc"#) -}
2d9485e7af5eb45ef4aa7dfaa8136710
  $tc'Permute :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16516909064911280002##
                   17108169811062476248##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Permute1) -}
bbf419179c80b1a5723b8c2419c824bb
  $tc'Permute1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Permute"#) -}
99e413c19cf489740cea8c82a7fbeed3
  $tc'PrimAbs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7959834418589314575##
                   793702021893466990##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAbs1) -}
9759f8bf0048597914836885c4a39aa9
  $tc'PrimAbs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAbs"#) -}
c8837c111aa42a008a84735fb4de0723
  $tc'PrimAcos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9014743293916820827##
                   2659332340289988825##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAcos1) -}
dad1db376c73015ae92e57dbe1c882fd
  $tc'PrimAcos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAcos"#) -}
879eab7f7303e721d935f2eb8083bd13
  $tc'PrimAcosh :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9837754111810777140##
                   4525065365067764645##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAcosh1) -}
dc2fa08c734eb34df367e599ac0245ed
  $tc'PrimAcosh1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAcosh"#) -}
92cc97f9772692db00c12721a5fefd0d
  $tc'PrimAdd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   202327741237958021##
                   18102118276293734963##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAdd1) -}
ae82f498f2eb44f45c984e16fb3adf8f
  $tc'PrimAdd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAdd"#) -}
8474cd45b0f2443982998e6f2d431b92
  $tc'PrimApp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14771847603148992388##
                   11793865207823639720##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimApp1) -}
56315f8944791f63d83c11fd4b2a747e
  $tc'PrimApp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimApp"#) -}
a9c00228bc6121984973628ec10dd319
  $tc'PrimAsin :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17965858495311075774##
                   3013634477693964367##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAsin1) -}
df8210d529bd09fa9fcba30918d69af1
  $tc'PrimAsin1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAsin"#) -}
6ac0da8b9f1b1d51067929849c1a7d5f
  $tc'PrimAsinh :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11005784965787543651##
                   2172498931001561723##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAsinh1) -}
01631bf96b23ba235d271a707be25d7c
  $tc'PrimAsinh1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAsinh"#) -}
e375e9459026ce490ac1ddedebe224e0
  $tc'PrimAtan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15650986233255558737##
                   14779712675734732754##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAtan1) -}
899a0e01b33ba282a9732d75ed6ee16a
  $tc'PrimAtan1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAtan"#) -}
4f083a538553d014d9b7ee71d86fbfc4
  $tc'PrimAtan2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1688277301001811077##
                   816820180200383914##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAtan3) -}
bf4887fc5f93d64fcfa43859c1eb5a95
  $tc'PrimAtan3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAtan2"#) -}
6024730ed32439e3355f018cd6fcf7e7
  $tc'PrimAtanh :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11631480714888936227##
                   13378361965514422375##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimAtanh1) -}
c76f6968c5cdc3664b8fd22b4c4ce080
  $tc'PrimAtanh1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimAtanh"#) -}
3c21d25abb16e2bebcf7cacd2e6a06a2
  $tc'PrimBAnd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3874131017089445334##
                   5285830583153440892##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBAnd1) -}
cdbc2e2991b21d9bb4a1ad9d9c77b103
  $tc'PrimBAnd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBAnd"#) -}
498c055e0f42ec1d46d6f6fcd474221b
  $tc'PrimBNot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8052456005688628677##
                   7333496374947023202##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBNot1) -}
41b6094bb4c53f6a309d4d8548e4a8b6
  $tc'PrimBNot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBNot"#) -}
58764df74e9fb529760892d54bcbc72d
  $tc'PrimBOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17826817041696904141##
                   12545615004925362088##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBOr1) -}
f2e496ac55994d640de32664cf2338eb
  $tc'PrimBOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBOr"#) -}
6f5a12908a0c8b5984881f496744003b
  $tc'PrimBRotateL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3412424974979951661##
                   12380297755353549974##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBRotateL1) -}
eeb3fe7bb64c14e3cdef5878bb3c1022
  $tc'PrimBRotateL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBRotateL"#) -}
af601a8f29ca18effb85e10022b738da
  $tc'PrimBRotateR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10076885824707554120##
                   3732132983851624173##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBRotateR1) -}
18f487bd19b609180ec037f262687a7d
  $tc'PrimBRotateR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBRotateR"#) -}
38f8909ee1096831f1717d5f5f1f8be3
  $tc'PrimBShiftL :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13053874582876884760##
                   16312989977496623569##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBShiftL1) -}
0131d625aab5b68fcc09bae4cfb07a04
  $tc'PrimBShiftL1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBShiftL"#) -}
5723b99d1e078733ad45db1d76dea8c9
  $tc'PrimBShiftR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15524338131891147119##
                   4332942571321313287##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBShiftR1) -}
f9be07e6a3ba1d55844e87c589bb35dc
  $tc'PrimBShiftR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBShiftR"#) -}
401b4a1dbca98b8a16f7b58f5af06a16
  $tc'PrimBXor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9697672574995848155##
                   10681127930253864918##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBXor1) -}
262f8725108aeceb26c1f49363747e4a
  $tc'PrimBXor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBXor"#) -}
ec3f4a02cccaa0bf89571b1666112c46
  $tc'PrimBoolToInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11862456740753509411##
                   18203897034812891533##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimBoolToInt1) -}
784600112c497f0db4584661a12b7140
  $tc'PrimBoolToInt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimBoolToInt"#) -}
7450f857aabbc76adf77074d69b51e60
  $tc'PrimCeiling :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7504262385815655838##
                   13300132500243041138##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimCeiling1) -}
b439d24752caedacf700d5297eef8356
  $tc'PrimCeiling1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimCeiling"#) -}
b24340357fd1af86145ee30cb7aa5a18
  $tc'PrimChr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16745006116664599447##
                   2703240015300491257##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimChr1) -}
b814fa1932e7bf8d8a6551db79777b93
  $tc'PrimChr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimChr"#) -}
a91b6d87f0b30ec09d5b001050e92a15
  $tc'PrimCoerce :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7403772386067035895##
                   8796781459574438344##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimCoerce1) -}
cd13b230830a9afb5b82943bb3841780
  $tc'PrimCoerce1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimCoerce"#) -}
c15dcd185c9e58f3b46d2653df31c7c3
  $tc'PrimConst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15904669128775834150##
                   1980608024880077639##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimConst1) -}
8132e746e847f28d3b1e21186dc4577b
  $tc'PrimConst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimConst"#) -}
3639e84a0d7f5de80abe08e460392cd0
  $tc'PrimCos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8210689892618250015##
                   5009962319960887486##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimCos1) -}
4563abae163bee7e110eea1c6df9d6ce
  $tc'PrimCos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimCos"#) -}
d22b6f05e849d3dfc225b4dfce4cd247
  $tc'PrimCosh :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16325249330365209652##
                   3341645290173961713##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimCosh1) -}
4f912c2eb98e5ad58fcea33f258effc1
  $tc'PrimCosh1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimCosh"#) -}
a7e4c9aaf94bf4ca0311ab33e922c2a4
  $tc'PrimCountLeadingZeros :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16744676268184515268##
                   8976570651092600966##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimCountLeadingZeros1) -}
7d6f89fb4bb29d4a79d39cd5b5cb45ae
  $tc'PrimCountLeadingZeros1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimCountLeadingZeros"#) -}
c04ef83b4d3ed1a64ac5bef621e5c638
  $tc'PrimCountTrailingZeros :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5535925880398760018##
                   16731684425498920258##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimCountTrailingZeros1) -}
872bcbeba111c5535caf7a8f548cfcce
  $tc'PrimCountTrailingZeros1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimCountTrailingZeros"#) -}
55d40167eb055f4f20e231ec7b330a19
  $tc'PrimDivMod :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17745975010510799116##
                   6549904934717114597##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimDivMod1) -}
412aea341c02704feef0730e6b2ae0ca
  $tc'PrimDivMod1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimDivMod"#) -}
ba7dbff3e8276ccdad0b21a3277d4721
  $tc'PrimEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8528342526155131198##
                   9177972347660047957##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimEq1) -}
405baaeda16d003027288ab9bc6fdc09
  $tc'PrimEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimEq"#) -}
1c4f2dcee4a3fd66d6ef76dd89351d3f
  $tc'PrimExpFloating :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11896964968145552566##
                   9713431212764263092##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimExpFloating1) -}
60a002820e6b60004338052368bbc045
  $tc'PrimExpFloating1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimExpFloating"#) -}
1ab2dd8c9126cd8b53442d9156ce7c8a
  $tc'PrimFDiv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   866243414869553782##
                   7549189920174484424##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimFDiv1) -}
9c5881f3968ba15def8f4a10ac7c33e4
  $tc'PrimFDiv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimFDiv"#) -}
08e70a8d98a139ca37f56a8838d00466
  $tc'PrimFPow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10972732913447260336##
                   5754282986901087923##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimFPow1) -}
4d175a5c607187e6b5262500646a816d
  $tc'PrimFPow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimFPow"#) -}
b4c1cc5da7504219953852633bb321b4
  $tc'PrimFloor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17623244531305238489##
                   4607183146400961768##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimFloor1) -}
8d7ab868f38ce534a9f8529722aa443c
  $tc'PrimFloor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimFloor"#) -}
5a0702d9548e9ebd11b2ce1ad9e83488
  $tc'PrimFromIntegral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6905319565125158561##
                   18175901457453860690##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimFromIntegral1) -}
f040a2f23a0894e65e7ec5764e66b2f4
  $tc'PrimFromIntegral1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimFromIntegral"#) -}
02f82b0e26d0a75efd23b86035b372db
  $tc'PrimGt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   628302041765296360##
                   17058679965398078893##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimGt1) -}
6a5596c07c3ec2f055fcd158ea32396a
  $tc'PrimGt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimGt"#) -}
b92df69e626c21fbf8f44b6753a45d6f
  $tc'PrimGtEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16979445865322740099##
                   16407982486081844146##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimGtEq1) -}
4956bd39044c6c1c1463746f4b203c7b
  $tc'PrimGtEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimGtEq"#) -}
836337ef0efd0d5f66c90ef70976f7ab
  $tc'PrimIDiv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11836038571151132072##
                   6139655846274298782##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimIDiv1) -}
702c82ec0758b7d92cdc984e5183ed50
  $tc'PrimIDiv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimIDiv"#) -}
9698cc6b98569a370c24f9393009d10e
  $tc'PrimIsInfinite :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9422353602330986532##
                   8341224329378714991##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimIsInfinite1) -}
a15b6f3326561993b5b41ddcf0944962
  $tc'PrimIsInfinite1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimIsInfinite"#) -}
8e0435c01bc5cc311ccaf45b36c8e8cb
  $tc'PrimIsNaN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10675296373085977946##
                   16042326945047123976##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimIsNaN1) -}
eaa5e8104668c4614ce99a5a71469e17
  $tc'PrimIsNaN1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimIsNaN"#) -}
ca329df6d36eeb14b3346100b079125f
  $tc'PrimLAnd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1939567234620748175##
                   15611694529656276743##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimLAnd1) -}
e8dafb50b54e3dd609db7e2ace9ed66c
  $tc'PrimLAnd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimLAnd"#) -}
2ae8b1f067508e80347c213cc3a284c3
  $tc'PrimLNot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9588597077515239120##
                   8254689737895913042##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimLNot1) -}
903a098532dfc24589032e792188f530
  $tc'PrimLNot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimLNot"#) -}
2ad1bc42dc3cd3bf79fcbba191f31468
  $tc'PrimLOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14389888195946796456##
                   3798774371216916436##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimLOr1) -}
c0bed6c25f1f7c97c9610dd50bd168af
  $tc'PrimLOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimLOr"#) -}
143864ecd835f1063830538432b9f102
  $tc'PrimLog :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9486146930962490401##
                   5182764878986309756##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimLog1) -}
781a1abed7f4195d45a54b406d8353ea
  $tc'PrimLog1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimLog"#) -}
27a6f83066b33e8bf5cf08b7c5d134aa
  $tc'PrimLogBase :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   128811103603304070##
                   415250216600121761##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimLogBase1) -}
4c993d8458aee95d049d15f461c53743
  $tc'PrimLogBase1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimLogBase"#) -}
5299c5e8d794f8febc1848ff13fa6817
  $tc'PrimLt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8208666853500946197##
                   17674497991204653187##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimLt1) -}
e6f20404e0c4aa84168e6a75a6f9336d
  $tc'PrimLt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimLt"#) -}
92b40e0c9684338fbadcc302dd9e770c
  $tc'PrimLtEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4102219087734003828##
                   10813952185063372484##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimLtEq1) -}
7b8c083092016979ff879f33cd2ed627
  $tc'PrimLtEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimLtEq"#) -}
196e4f74faf32e5b84d830588b4c4cef
  $tc'PrimMax :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15864681230823810799##
                   7050800911355851790##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimMax1) -}
08dfb6f2d3cf4daa8a479615e2af1474
  $tc'PrimMax1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimMax"#) -}
8c5b4321d7a6fe491adec5f6f9ebbc80
  $tc'PrimMaxBound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1923547221289270891##
                   17049718707869739441##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimMaxBound1) -}
618ee4c863fb78ca0170046ea12a2b0b
  $tc'PrimMaxBound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimMaxBound"#) -}
726518cd4e3c81d781a1a33896a0d592
  $tc'PrimMin :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12589132478078844116##
                   14422537557328563569##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimMin1) -}
bd3c46e6aebad16aa3be8339697af689
  $tc'PrimMin1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimMin"#) -}
97518cbb3d6b8438b724fa40de028e51
  $tc'PrimMinBound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   23805489056801781##
                   17252566936343228955##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimMinBound1) -}
47666c5acd2318aa7ef339037433c7d8
  $tc'PrimMinBound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimMinBound"#) -}
f639098c7e77b33f3b789bdc25de9202
  $tc'PrimMod :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10858175537920395913##
                   14585824003979967802##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimMod1) -}
5395371f87cd96f41bf37dd9a2357775
  $tc'PrimMod1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimMod"#) -}
ae9d0b419797c475e26f79b49c23e916
  $tc'PrimMul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15991038480524951947##
                   3713108513255509270##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimMul1) -}
90e95ccb337efec09b501e099b4edb06
  $tc'PrimMul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimMul"#) -}
22df49ec86cf82306907a4e5afa84d55
  $tc'PrimNEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3458882843455711091##
                   16993631002846206355##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimNEq1) -}
c1edafcf32f7576213203d5f3a79a39a
  $tc'PrimNEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimNEq"#) -}
0e3f521bb079a9040adfe6ce5ef03fca
  $tc'PrimNeg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6505528140784294701##
                   13824243222772019288##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimNeg1) -}
3b1b53d1157407ffbc4adf7336dc038f
  $tc'PrimNeg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimNeg"#) -}
87be60cdbef9941ac465f7382cc68018
  $tc'PrimOrd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5975821864456989659##
                   14755769643142012546##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimOrd1) -}
1225dbd6ce7f5f0b67ea079535df55e9
  $tc'PrimOrd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimOrd"#) -}
87ac3b93ab750af9dd168d615bace8f7
  $tc'PrimPi :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   907193635647955798##
                   9971846411811000971##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimPi1) -}
363d035499e58ce9339fa4a716a1fea8
  $tc'PrimPi1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimPi"#) -}
4951cfe777d1cc04272b9c1b1b69015e
  $tc'PrimPopCount :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9973388593736741212##
                   12235257901049305451##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimPopCount1) -}
7e916d95b4e6d475ef299e53a48022f3
  $tc'PrimPopCount1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimPopCount"#) -}
5b8f7de90c31fa77cca54ab0b763d5b4
  $tc'PrimQuot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7468719692906758969##
                   15045050982785500488##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimQuot1) -}
725580e7cf197cd1a80fbfc79850edce
  $tc'PrimQuot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimQuot"#) -}
e83423df066a4017d2b48c64d6ce6705
  $tc'PrimQuotRem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1404306359062635773##
                   13972515957317651488##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimQuotRem1) -}
1a50ebdbe2405eeb04f7f3b35a32bd8f
  $tc'PrimQuotRem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimQuotRem"#) -}
3e7e306763c12dff8e41fdc5acde576d
  $tc'PrimRecip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17196125593742702853##
                   12814266255925122536##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimRecip1) -}
8f9f7ad3a845064cb47109113947c5e8
  $tc'PrimRecip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimRecip"#) -}
5ad74fa85ffdcfc26ebfc07dabccb279
  $tc'PrimRem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6006464406859812789##
                   2115229896156351419##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimRem1) -}
175be62140667d64bfd1854a34c3f440
  $tc'PrimRem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimRem"#) -}
45c19c55da6d3e24d59c52a26437cf4c
  $tc'PrimRound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16954056825712879961##
                   7162515264236046937##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimRound1) -}
c1ec51591f619f4977df7c6feac9a584
  $tc'PrimRound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimRound"#) -}
bdb10beac37a0a65680026250a8b94ad
  $tc'PrimSig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13365427976025948188##
                   4965929464882917776##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimSig1) -}
e434654b3ad6d57e43bc1370cca87257
  $tc'PrimSig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimSig"#) -}
c8a3339f3df16c0aa2db72b3d4f1834f
  $tc'PrimSin :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   511907739195365798##
                   14507578770078280718##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimSin1) -}
907b27f23b97bb54aad1d02706c12796
  $tc'PrimSin1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimSin"#) -}
f5c6d22013f879c55180431d89961994
  $tc'PrimSinh :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18237525430909195488##
                   1670410260971176027##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimSinh1) -}
c1dc2f66045cfa7a574613dfde7b2905
  $tc'PrimSinh1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimSinh"#) -}
82e88c8fe287672bad246bc00f9b5544
  $tc'PrimSqrt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6735386768033721189##
                   4126003206271082719##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimSqrt1) -}
edcc95597d0921f37083e5e95c445ff0
  $tc'PrimSqrt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimSqrt"#) -}
85f74a911eade3cac6d4adaa4bf969f5
  $tc'PrimSub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18354810302512104726##
                   9102258200930190994##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimSub1) -}
27128baaefbbe7da8472b35387f341c4
  $tc'PrimSub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimSub"#) -}
8ba7e97673d00d016d8b4ae0544a1ba9
  $tc'PrimTan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11970062146140136086##
                   15405456960974187105##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimTan1) -}
8ce9fc316ee4bb5db215a94a0d518250
  $tc'PrimTan1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimTan"#) -}
c01496930ab2c34380ab6dc3fcb17b2a
  $tc'PrimTanh :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4288691220454650810##
                   13985893223393496069##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimTanh1) -}
9a81794cf0b411d6069f88c2c8ebb252
  $tc'PrimTanh1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimTanh"#) -}
f366a9850a87f11c53a2495f48b3ca7d
  $tc'PrimToFloating :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5113825162630559287##
                   4262629925611658167##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimToFloating1) -}
6219fcac1c6975bdc6bf02b5530ebe5c
  $tc'PrimToFloating1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimToFloating"#) -}
16516856af07673e89e4049b08e9d692
  $tc'PrimTruncate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   758775339420402313##
                   7336962488525185835##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PrimTruncate1) -}
65943ad6b9b8c8212198ffc2afb59d47
  $tc'PrimTruncate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PrimTruncate"#) -}
eaa99b3eab7c3a0adf7e767f434129c7
  $tc'Prj :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17291082561601544648##
                   2222328190212478283##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Prj1) -}
42e57c5ad9a232ac1de38c8693953cc5
  $tc'Prj1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Prj"#) -}
0308cf0c23e1490f546ffd7c1dd0b8f8
  $tc'Push :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4389534664482703342##
                   3175695676061533402##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Push1) -}
f016270394eede7996eacc7a99040cfe
  $tc'Push1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Push"#) -}
692ba1d36a12a20f59c82508181638f0
  $tc'PushElt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6958340840367421253##
                   15589526772138612316##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'PushElt1) -}
68de7e525e5c1ab256ff66d830a2bec5
  $tc'PushElt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PushElt"#) -}
b33ffe6993e2e3defe6669e25033b92d
  $tc'Replicate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   235855559644430598##
                   4936181265962237163##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Replicate1) -}
68933bc67628f2912aa744de5f532ab1
  $tc'Replicate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Replicate"#) -}
b56638268d419080b6ed61b992bd9228
  $tc'Reshape :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16764122328847079973##
                   6637781382841529715##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Reshape1) -}
3851330efa7a7897194a1a03c73b8020
  $tc'Reshape1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Reshape"#) -}
099a3d9007d2e54c6d2144fda77e8cc1
  $tc'Scanl :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   219308345249381422##
                   18245921305273164256##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Scanl2) -}
a21ffc67ae7764ed1a401a84af2fce58
  $tc'Scanl' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7475379225452219081##
                   1420501795847508510##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Scanl'1) -}
f68f5667a3c981b694af02dc23779cc6
  $tc'Scanl'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scanl'"#) -}
a42d4f48da0006bac9ba58ca799b00ba
  $tc'Scanl1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2442400620810306798##
                   2746209809031086682##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Scanl3) -}
728d08e3201bbe8bd642e168264f0e6a
  $tc'Scanl2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scanl"#) -}
5364ae9988ca7c26ffa31318319f5e01
  $tc'Scanl3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scanl1"#) -}
b1575d28e5fd6fa2072e6a4586462743
  $tc'Scanr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11263697283726819612##
                   16987808545767163635##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Scanr2) -}
0e215aae012266bd4a6f08b80e586805
  $tc'Scanr' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12786536202167487336##
                   4824361889635937950##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Scanr'1) -}
ca9e5119779d2c9ed6b3bd27dbb3bac5
  $tc'Scanr'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scanr'"#) -}
b52479fdd36a73990ee2b9ef91b99fef
  $tc'Scanr1 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5365156168628729666##
                   10246591634149361067##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Scanr3) -}
a15db516065c662261c2369ded3c8b5e
  $tc'Scanr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scanr"#) -}
dbed8f1c4a743e16a9e53ad870818bd7
  $tc'Scanr3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Scanr1"#) -}
097d46e7e2f871c99cb4b546307f7ca3
  $tc'Shape :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18192086523454098786##
                   17191397302095564690##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Shape1) -}
51e8fa6a149877352e5cf3ab91c15c34
  $tc'Shape1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Shape"#) -}
d59c658662e83dcded2e2e205bf7bf6c
  $tc'ShapeSize :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15172587990291862788##
                   9168341450467833170##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'ShapeSize1) -}
737e078cda8a412ba723e017252b3dc5
  $tc'ShapeSize1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ShapeSize"#) -}
9f3bf403659aba1e0c04204a4df8cef6
  $tc'Slice :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13819099793178204235##
                   3810878558879817774##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Slice1) -}
9dc243989daeec296ba023dbe916814e
  $tc'Slice1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Slice"#) -}
13fed143b407bdc4741c434c1e95941d
  $tc'Stencil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8127835517913851973##
                   12404335925710772483##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Stencil1) -}
85a16aac8decb8f281b7183f6de9f522
  $tc'Stencil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Stencil"#) -}
f507fd3f4b6f1fa40dd51496e0581ab5
  $tc'Stencil2 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15035956644033145855##
                   4650082313046702673##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Stencil3) -}
1e3a4ce5ce07f2d0badd736c4f920ff7
  $tc'Stencil3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Stencil2"#) -}
cb382ea7b26124d4cc22be0da3943002
  $tc'StencilRtup1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StencilRtup3"#) -}
b0682d1ac9c864b0ea697592f1e9f626
  $tc'StencilRtup2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StencilRtup5"#) -}
d35d21239eaf5b15d27f6ee2feed9f85
  $tc'StencilRtup3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13655266764469995667##
                   1444352346990256829##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'StencilRtup1) -}
9751063ad634c797c8fdca76be7b0c22
  $tc'StencilRtup4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StencilRtup7"#) -}
395ec4248e444dc14796acd0b95897a0
  $tc'StencilRtup5 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15810675171918070425##
                   886305621140241428##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'StencilRtup2) -}
04b4d381bf4f1a3bafdaa034076ca9fe
  $tc'StencilRtup6 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StencilRtup9"#) -}
9baf619f89b79a1f387ca93458a140d2
  $tc'StencilRtup7 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11628849450185740811##
                   8898659978097134646##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'StencilRtup4) -}
6f0c448c2255b307579ded43a012560c
  $tc'StencilRtup9 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12758082149467374118##
                   16288407673683421058##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'StencilRtup6) -}
19c49f3e74bb3dcf900a04bbb0217c06
  $tc'StencilRunit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StencilRunit3"#) -}
bb50409378257863e23ed60fb39273af
  $tc'StencilRunit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StencilRunit5"#) -}
bdd531dc4fc34485b03e2430708443ca
  $tc'StencilRunit3 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13057345144715564201##
                   7070733567288942705##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'StencilRunit1) -}
38c02c421f0b7e63fb7881eeaf01b600
  $tc'StencilRunit4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StencilRunit7"#) -}
1835354b987de5f34ad5d8c919bcbd3f
  $tc'StencilRunit5 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13363521397546142718##
                   9626375506596984965##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'StencilRunit2) -}
81991bdea9cdc4995b8742e0f7ebc552
  $tc'StencilRunit6 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StencilRunit9"#) -}
77791c30718d8b1cda68a628c5e1ac56
  $tc'StencilRunit7 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15452391648870679494##
                   13865746588802616929##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'StencilRunit4) -}
899e08f9a89e52dc804eb96ac1241c6c
  $tc'StencilRunit9 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   872606152838047008##
                   9801040060744096121##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'StencilRunit6) -}
e09b8c899f16aa43a275ad2c921ebd78
  $tc'SuccIdx :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14098560767256820781##
                   16393033606031168118##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'SuccIdx1) -}
6ed093ab3d757aaa86cab481ad8cd7bb
  $tc'SuccIdx1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SuccIdx"#) -}
0e3a01724c1377c8a931ee0e536ea239
  $tc'ToIndex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13180952519765013404##
                   12423101174893897660##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'ToIndex1) -}
256ede8fa42fc0931faa31faf0ad28f4
  $tc'ToIndex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ToIndex"#) -}
e7175231f91a491eb542a390cb8cb10d
  $tc'Transform :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3998458438795715615##
                   12506056551341264061##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Transform1) -}
d5096c9df22df16e0123acdbc87848d1
  $tc'Transform1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Transform"#) -}
f69b750eebdd50d72acb89d5567292da
  $tc'Tuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17505656633321785847##
                   4619875127948365929##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Tuple1) -}
054d1457d51bce3db9123b61409f883d
  $tc'Tuple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tuple"#) -}
4b45752763db706873c288be39c20a21
  $tc'Union :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17962902560889252253##
                   17712627626381125457##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Union1) -}
de6c718fd0d161970f6d4eec5bc7c3e4
  $tc'Union1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Union"#) -}
f19ec94070a37bd6dd6194b687333408
  $tc'Unit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9357323258580683307##
                   17022614536898915275##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Unit1) -}
41882b2fd4cc1fb8ba9021a2273ce220
  $tc'Unit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Unit"#) -}
7f2d33ada190c40c7dbb9bee50285d67
  $tc'Use :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1472410256659939732##
                   10871753096363370864##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Use1) -}
cb1f36ecbf40fd2a6f2b8d840f75aafd
  $tc'Use1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Use"#) -}
b4523139f4a2350dc7f1ae49bb8795ec
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6209776993170996794##
                   5887722896402533522##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Var1) -}
3a4fadfd199adfaabcf7108b86b72ef3
  $tc'Var1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Var"#) -}
839a4e3ef9ec0853924c35794ba3bc86
  $tc'While :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2306844772333533136##
                   325368229789189752##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'While1) -}
eee8e6a37542f37afefbb4042e1ab480
  $tc'While1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'While"#) -}
b7c567e04e22a1819c084bdf235bada3
  $tc'Wrap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13957134145481745411##
                   4990037427642300567##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'Wrap1) -}
ae029ded8f6ead2f4e369224a3c616af
  $tc'Wrap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Wrap"#) -}
31a93fba6ea284234408e6bb66d09879
  $tc'ZeroIdx :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17022506902184585602##
                   10022015883412969956##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'ZeroIdx1) -}
8212944c2acb5f072c03bfd3c42417b1
  $tc'ZeroIdx1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ZeroIdx"#) -}
954e5405cfa5f3cc8f0ab3492bc5fe4e
  $tc'ZipWith :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17056487222304600289##
                   1812272959820828728##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tc'ZipWith1) -}
0b4c520bffb8aee96b6c294b38c9696b
  $tc'ZipWith1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ZipWith"#) -}
8ae60bba4b0afd9c09c35349917d0905
  $tcIdx :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5512128021604424132##
                   5439531104401984688##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcIdx1) -}
b94fc00fd4d1fa742e0e2ee879231f11
  $tcIdx1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Idx"#) -}
b077d261261afc3a94b7ba646128ceb8
  $tcOpenAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11025594384171714813##
                   7454260429541737770##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcOpenAcc1) -}
bdeaeb8be772c8bb3e96a1e0430fed34
  $tcOpenAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "OpenAcc"#) -}
d8fcc3bcce7b8bf9f84f5c411ce57110
  $tcPreBoundary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3781014328345766733##
                   14677548588685542475##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcPreBoundary1) -}
6681ec20c4e15bbf42b1004867d4baeb
  $tcPreBoundary1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PreBoundary"#) -}
779bcfdd6863890fa92a88dd447e32a2
  $tcPreOpenAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5132647998726270194##
                   13305571790302019138##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcPreOpenAcc1) -}
f6197c1cf04f669397dee4664fa25b71
  $tcPreOpenAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PreOpenAcc"#) -}
17d6812f1eaa45267946336380574e3e
  $tcPreOpenAfun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   621349200657645079##
                   2115793648941349454##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcPreOpenAfun1) -}
9de75e917aa65cb6d0d2954347221e9a
  $tcPreOpenAfun1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PreOpenAfun"#) -}
94cfd81c9efdcf75024bac5e26ba0b0b
  $tcPreOpenExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10585806367245135936##
                   12761784330413383775##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcPreOpenExp1) -}
f523c03a111d70500a04b533920fa623
  $tcPreOpenExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PreOpenExp"#) -}
356e8856bbdbd5c433a8bd78de642ca2
  $tcPreOpenFun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   621012532522225068##
                   16202614859771316244##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcPreOpenFun1) -}
0fdf23e175c6f487876690802c31c1cf
  $tcPreOpenFun1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PreOpenFun"#) -}
157a3517954a54faff73db1eeeeebf58
  $tcPrimConst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17582042613495460872##
                   16083778228664843893##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcPrimConst1) -}
be8e14976997a6fc6104a35d22aa9f91
  $tcPrimConst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PrimConst"#) -}
85b60f8748a89b3b37f7fbb29aab5fe1
  $tcPrimFun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16215510487887272103##
                   10446264392913224532##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcPrimFun1) -}
6bf686f9722f161f3e35b48ee74cea1d
  $tcPrimFun1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PrimFun"#) -}
88f2b6f08cd8f32ebae9c68ddce88827
  $tcStencil :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3104288088304250844##
                   6034028886217066969##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcStencil1) -}
1e6b3f038a39b6ef4cf3532a2feaebd1
  $tcStencil1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Stencil"#) -}
f2fc00c345731fee36fa8421376181e6
  $tcStencilR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14505938358864166019##
                   16206125384338752294##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcStencilR1) -}
23f1b7d9f98a964643dae968c2e4e5da
  $tcStencilR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StencilR"#) -}
9de326562fb17bbeff8d76a548486c04
  $tcVal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2277663979923815313##
                   17899546265636967010##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcVal1) -}
6cf7721bcd5407a64ba837c95f1fc570
  $tcVal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Val"#) -}
f49c4f229e739e20537730b09ba7cc2e
  $tcValElt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   750419732944949899##
                   15332062021711483029##
                   Data.Array.Accelerate.AST.$trModule
                   Data.Array.Accelerate.AST.$tcValElt1) -}
8a741cec7148d36bac4e9b6cbcaa83c8
  $tcValElt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ValElt"#) -}
607a80d31d68754cf25a47f0cb64d9b6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.AST.$trModule2
                   Data.Array.Accelerate.AST.$trModule1) -}
377575fc4a5b67f79396000724bd73d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.Array.Accelerate.AST"#) -}
711aa88231684f8a58d1698a865d33a0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
de90111747605bd959f975fe4292a7e7
  $w$cp3Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) =>
    (# forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (row1, row2, row3)
       -> Data.Array.Accelerate.Product.ProdRepr (row1, row2, row3),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> Data.Array.Accelerate.Product.ProdRepr (row1, row2, row3)
       -> (row1, row2, row3),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (row1, row2, row3)
       -> Data.Array.Accelerate.Product.ProdR
            Data.Array.Accelerate.Array.Sugar.Elt
            (Data.Array.Accelerate.Product.ProdRepr (row1, row2, row3)) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)>,
     Inline: [0],
     Unfolding: (\ @ sh
                   @ a
                   @ row1
                   @ row2
                   @ row3
                   (w :: Data.Array.Accelerate.AST.Stencil
                           (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1)
                   (w1 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2)
                   (w2 :: Data.Array.Accelerate.AST.Stencil
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) ->
                 let {
                   $dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row3
                       w2
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row2
                       w1
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox5 { DEFAULT ->
                 let {
                   $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.AST.$p1Stencil
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       @ row1
                       w
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox6 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <sh
                                                                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N) of cobox7 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox8 { DEFAULT ->
                 (# Data.Array.Accelerate.AST.$fStencil:.a(,,)2
                      @ row1
                      @ row2
                      @ row3,
                    Data.Array.Accelerate.AST.$fStencil:.a(,,)1 @ row1 @ row2 @ row3,
                    let {
                      irred2 :: Data.Array.Accelerate.Array.Sugar.Elt row3
                      = Data.Array.Accelerate.AST.$p4Stencil
                          @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                          @ a
                          @ row3
                          w2
                    } in
                    let {
                      irred1 :: Data.Array.Accelerate.Array.Sugar.Elt row2
                      = Data.Array.Accelerate.AST.$p4Stencil
                          @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                          @ a
                          @ row2
                          w1
                    } in
                    let {
                      irred :: Data.Array.Accelerate.Array.Sugar.Elt row1
                      = Data.Array.Accelerate.AST.$p4Stencil
                          @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                          @ a
                          @ row1
                          w
                    } in
                    let {
                      lvl588 :: Data.Array.Accelerate.Product.ProdR
                                  Data.Array.Accelerate.Array.Sugar.Elt ((), row1)
                      = Data.Array.Accelerate.Product.ProdRsnoc
                          @ Data.Array.Accelerate.Array.Sugar.Elt
                          @ ((), row1)
                          @ row1
                          @ ()
                          @~ <((), row1)>_N
                          irred
                          (Data.Array.Accelerate.Product.$WProdRunit
                             @ Data.Array.Accelerate.Array.Sugar.Elt)
                    } in
                    let {
                      lvl589 :: Data.Array.Accelerate.Product.ProdR
                                  Data.Array.Accelerate.Array.Sugar.Elt (((), row1), row2)
                      = Data.Array.Accelerate.Product.ProdRsnoc
                          @ Data.Array.Accelerate.Array.Sugar.Elt
                          @ (((), row1), row2)
                          @ row2
                          @ ((), row1)
                          @~ <(((), row1), row2)>_N
                          irred1
                          lvl588
                    } in
                    let {
                      lvl590 :: Data.Array.Accelerate.Product.ProdR
                                  Data.Array.Accelerate.Array.Sugar.Elt ((((), row1), row2), row3)
                      = Data.Array.Accelerate.Product.ProdRsnoc
                          @ Data.Array.Accelerate.Array.Sugar.Elt
                          @ ((((), row1), row2), row3)
                          @ row3
                          @ (((), row1), row2)
                          @~ <((((), row1), row2), row3)>_N
                          irred2
                          lvl589
                    } in
                    (\ @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                       (p :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                       (ds :: (row1, row2, row3)) ->
                     lvl590)
                      `cast`
                    (forall (proxy :: <(* -> GHC.Types.Constraint) -> *>_N).
                     <proxy Data.Array.Accelerate.Array.Sugar.Elt>_R
                     ->_R <(row1, row2, row3)>_R
                     ->_R (Data.Array.Accelerate.Product.ProdR
                             <Data.Array.Accelerate.Array.Sugar.Elt>_R
                             (Trans
                                  ((,)
                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                               <row2>_N <row1>_N))
                                     <row3>_N)_N
                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                            <row3>_N
                                            <row2>_N
                                            <row1>_N))))_R) #) } } } } } } } } }) -}
de90111747605bd959f975fe4292a7e7
  $w$cp3Stencil1 ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) =>
    (# forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (row1, row2, row3, row4, row5)
       -> Data.Array.Accelerate.Product.ProdRepr
            (row1, row2, row3, row4, row5),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> Data.Array.Accelerate.Product.ProdRepr
            (row1, row2, row3, row4, row5)
       -> (row1, row2, row3, row4, row5),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (row1, row2, row3, row4, row5)
       -> Data.Array.Accelerate.Product.ProdR
            Data.Array.Accelerate.Array.Sugar.Elt
            (Data.Array.Accelerate.Product.ProdRepr
               (row1, row2, row3, row4, row5)) #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)>,
     Inline: [0] -}
de90111747605bd959f975fe4292a7e7
  $w$cp3Stencil2 ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) =>
    (# forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (row1, row2, row3, row4, row5, row6, row7)
       -> Data.Array.Accelerate.Product.ProdRepr
            (row1, row2, row3, row4, row5, row6, row7),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> Data.Array.Accelerate.Product.ProdRepr
            (row1, row2, row3, row4, row5, row6, row7)
       -> (row1, row2, row3, row4, row5, row6, row7),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (row1, row2, row3, row4, row5, row6, row7)
       -> Data.Array.Accelerate.Product.ProdR
            Data.Array.Accelerate.Array.Sugar.Elt
            (Data.Array.Accelerate.Product.ProdRepr
               (row1, row2, row3, row4, row5, row6, row7)) #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)>,
     Inline: [0] -}
de90111747605bd959f975fe4292a7e7
  $w$cp3Stencil3 ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) =>
    (# forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (row1, row2, row3, row4, row5, row6, row7, row8, row9)
       -> Data.Array.Accelerate.Product.ProdRepr
            (row1, row2, row3, row4, row5, row6, row7, row8, row9),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> Data.Array.Accelerate.Product.ProdRepr
            (row1, row2, row3, row4, row5, row6, row7, row8, row9)
       -> (row1, row2, row3, row4, row5, row6, row7, row8, row9),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (row1, row2, row3, row4, row5, row6, row7, row8, row9)
       -> Data.Array.Accelerate.Product.ProdR
            Data.Array.Accelerate.Array.Sugar.Elt
            (Data.Array.Accelerate.Product.ProdRepr
               (row1, row2, row3, row4, row5, row6, row7, row8, row9)) #)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)><S(SLLLL),U(1*U,A,A,1*U,A)>,
     Inline: [0] -}
aa5f4f137e467636759f42126138de5c
  $w$cp3Stencil4 ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    (# forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (e, e, e, e, e, e, e, e, e)
       -> Data.Array.Accelerate.Product.ProdRepr
            (e, e, e, e, e, e, e, e, e),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> Data.Array.Accelerate.Product.ProdRepr
            (e, e, e, e, e, e, e, e, e)
       -> (e, e, e, e, e, e, e, e, e),
       forall (proxy :: (* -> GHC.Types.Constraint) -> *).
       proxy Data.Array.Accelerate.Array.Sugar.Elt
       -> (e, e, e, e, e, e, e, e, e)
       -> Data.Array.Accelerate.Product.ProdR
            Data.Array.Accelerate.Array.Sugar.Elt
            (Data.Array.Accelerate.Product.ProdRepr
               (e, e, e, e, e, e, e, e, e)) #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ @ e (w :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 (# Data.Array.Accelerate.Product.$fIsProductcst(,,,,,,,,)_$cfromProd
                      @ Data.Array.Accelerate.Array.Sugar.Elt
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w,
                    Data.Array.Accelerate.Product.$fIsProductcst(,,,,,,,,)_$ctoProd
                      @ Data.Array.Accelerate.Array.Sugar.Elt
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w,
                    (Data.Array.Accelerate.Product.$fIsProductcst(,,,,,,,,)1
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       w
                       w
                       w
                       w
                       w
                       w
                       w
                       w
                       w)
                      `cast`
                    (forall (proxy :: <(* -> GHC.Types.Constraint) -> *>_N).
                     <proxy Data.Array.Accelerate.Array.Sugar.Elt>_R
                     ->_R <(e, e, e, e, e, e, e, e, e)>_R
                     ->_R (Data.Array.Accelerate.Product.ProdR
                             <Data.Array.Accelerate.Array.Sugar.Elt>_R
                             (Trans
                                  ((,)
                                     (Trans
                                          ((,)
                                             (Trans
                                                  ((,)
                                                     (Trans
                                                          ((,)
                                                             (Trans
                                                                  ((,)
                                                                     (Trans
                                                                          ((,)
                                                                             (Trans
                                                                                  ((,)
                                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                               <e>_N
                                                                                               <e>_N))
                                                                                     <e>_N)_N
                                                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                            <e>_N
                                                                                            <e>_N
                                                                                            <e>_N)))
                                                                             <e>_N)_N
                                                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                    <e>_N
                                                                                    <e>_N
                                                                                    <e>_N
                                                                                    <e>_N)))
                                                                     <e>_N)_N
                                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                            <e>_N
                                                                            <e>_N
                                                                            <e>_N
                                                                            <e>_N
                                                                            <e>_N)))
                                                             <e>_N)_N
                                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,,)[0]
                                                                    <e>_N
                                                                    <e>_N
                                                                    <e>_N
                                                                    <e>_N
                                                                    <e>_N
                                                                    <e>_N)))
                                                     <e>_N)_N
                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,,,)[0]
                                                            <e>_N
                                                            <e>_N
                                                            <e>_N
                                                            <e>_N
                                                            <e>_N
                                                            <e>_N
                                                            <e>_N)))
                                             <e>_N)_N
                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,,,,)[0]
                                                    <e>_N
                                                    <e>_N
                                                    <e>_N
                                                    <e>_N
                                                    <e>_N
                                                    <e>_N
                                                    <e>_N
                                                    <e>_N)))
                                     <e>_N)_N
                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,,,,,)[0]
                                            <e>_N
                                            <e>_N
                                            <e>_N
                                            <e>_N
                                            <e>_N
                                            <e>_N
                                            <e>_N
                                            <e>_N
                                            <e>_N))))_R) #)) -}
de90111747605bd959f975fe4292a7e7
  $w$cp4Stencil ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3) =>
    (# GHC.Show.Show (row1, row2, row3),
       Data.Typeable.Internal.Typeable (row1, row2, row3),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr (row1, row2, row3)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr (row1, row2, row3)),
       (row1, row2, row3)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr (row1, row2, row3)),
       (row1, row2, row3)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr (row1, row2, row3),
       Data.Array.Accelerate.Array.Sugar.EltRepr (row1, row2, row3)
       -> (row1, row2, row3) #)
  {- Arity: 3,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)>,
     Inline: [0] -}
de90111747605bd959f975fe4292a7e7
  $w$cp4Stencil1 ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5) =>
    (# GHC.Show.Show (row1, row2, row3, row4, row5),
       Data.Typeable.Internal.Typeable (row1, row2, row3, row4, row5),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5)),
       (row1, row2, row3, row4, row5)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (row1, row2, row3, row4, row5)),
       (row1, row2, row3, row4, row5)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (row1, row2, row3, row4, row5)
       -> (row1, row2, row3, row4, row5) #)
  {- Arity: 5,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)>,
     Inline: [0] -}
de90111747605bd959f975fe4292a7e7
  $w$cp4Stencil2 ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7) =>
    (# GHC.Show.Show (row1, row2, row3, row4, row5, row6, row7),
       Data.Typeable.Internal.Typeable
         (row1, row2, row3, row4, row5, row6, row7),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5, row6, row7)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5, row6, row7)),
       (row1, row2, row3, row4, row5, row6, row7)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (row1, row2, row3, row4, row5, row6, row7)),
       (row1, row2, row3, row4, row5, row6, row7)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5, row6, row7),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (row1, row2, row3, row4, row5, row6, row7)
       -> (row1, row2, row3, row4, row5, row6, row7) #)
  {- Arity: 7,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)>,
     Inline: [0] -}
de90111747605bd959f975fe4292a7e7
  $w$cp4Stencil3 ::
    (Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row1,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row2,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row3,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row4,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row5,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row6,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row7,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row8,
     Data.Array.Accelerate.AST.Stencil
       (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a row9) =>
    (# GHC.Show.Show
         (row1, row2, row3, row4, row5, row6, row7, row8, row9),
       Data.Typeable.Internal.Typeable
         (row1, row2, row3, row4, row5, row6, row7, row8, row9),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5, row6, row7, row8, row9)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5, row6, row7, row8, row9)),
       (row1, row2, row3, row4, row5, row6, row7, row8, row9)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (row1, row2, row3, row4, row5, row6, row7, row8, row9)),
       (row1, row2, row3, row4, row5, row6, row7, row8, row9)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (row1, row2, row3, row4, row5, row6, row7, row8, row9),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (row1, row2, row3, row4, row5, row6, row7, row8, row9)
       -> (row1, row2, row3, row4, row5, row6, row7, row8, row9) #)
  {- Arity: 9,
     Strictness: <S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)><S(SLLLL),U(1*U,A,A,1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A)>,
     Inline: [0] -}
446b0aff7fbd3129b42902149a597b86
  $w$cp4Stencil4 ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    (# GHC.Show.Show (e, e, e, e, e, e, e, e, e),
       Data.Typeable.Internal.Typeable (e, e, e, e, e, e, e, e, e),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (e, e, e, e, e, e, e, e, e)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (e, e, e, e, e, e, e, e, e)),
       (e, e, e, e, e, e, e, e, e)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (e, e, e, e, e, e, e, e, e)),
       (e, e, e, e, e, e, e, e, e)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (e, e, e, e, e, e, e, e, e),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (e, e, e, e, e, e, e, e, e)
       -> (e, e, e, e, e, e, e, e, e) #)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A,A),C(U),C(U),U(U,U,U,U,U,U,U,U,U),C(U),C(U),C(U))>,
     Inline: [0],
     Unfolding: (\ @ e (w :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 (# Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,,)_$cp1Elt
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w,
                    Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,,)_$cp2Elt
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w,
                    Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,,)_$cp3Elt
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w,
                    (Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,,)2
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       @ e
                       w
                       w
                       w
                       w
                       w
                       w
                       w
                       w
                       w)
                      `cast`
                    (Data.Array.Accelerate.Array.Data.ArrayElt
                       (Trans
                            ((,)
                               (Trans
                                    ((,)
                                       (Trans
                                            ((,)
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Trans
                                                                    ((,)
                                                                       (Trans
                                                                            ((,)
                                                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                         <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                            e>_N
                                                                                         <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                            e>_N))
                                                                               <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                  e>_N)_N
                                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                         e>_N
                                                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                         e>_N
                                                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                         e>_N)))
                                                                       <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                          e>_N)_N
                                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                 e>_N
                                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                 e>_N
                                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                 e>_N
                                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                                 e>_N)))
                                                               <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                  e>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                         e>_N
                                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                         e>_N
                                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                         e>_N
                                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                         e>_N
                                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                         e>_N)))
                                                       <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                          e>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,,)[0]
                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                 e>_N
                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                 e>_N
                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                 e>_N
                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                 e>_N
                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                 e>_N
                                                              <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                                 e>_N)))
                                               <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N)_N
                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,,,)[0]
                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                         e>_N
                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                         e>_N
                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                         e>_N
                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                         e>_N
                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                         e>_N
                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                         e>_N
                                                      <Data.Array.Accelerate.Array.Sugar.EltRepr
                                                         e>_N)))
                                       <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N)_N
                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,,,,)[0]
                                              <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                              <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                              <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                              <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                              <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                              <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                              <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                              <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N)))
                               <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N)_N
                            (Trans
                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,,,,,)[0]
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N
                                           <Data.Array.Accelerate.Array.Sugar.EltRepr e>_N))
                                 (Sym (Data.Array.Accelerate.Array.Sugar.D:R:EltRepr(,,,,,,,,)[0]
                                           <e>_N
                                           <e>_N
                                           <e>_N
                                           <e>_N
                                           <e>_N
                                           <e>_N
                                           <e>_N
                                           <e>_N
                                           <e>_N)))))_R,
                    Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,,)_$celtType
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w,
                    Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,,)_$cfromElt
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w,
                    Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,,)_$ctoElt
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      @ e
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w
                      w #)) -}
1d63f6245a48bdf8e89faa80c68eb6e5
  $widxToInt :: Data.Array.Accelerate.AST.Idx env t -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
09dc2030f94bffd4816973d2b9dd4377
  $wtupleIdxToInt ::
    Data.Array.Accelerate.Product.TupleIdx tup e -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
a01eea241a2bac92d453216e0d79448e
  type Acc = Data.Array.Accelerate.AST.OpenAcc () :: * -> *
30d1ccfa7d785b48f1fe2113bd7841b4
  type Afun = Data.Array.Accelerate.AST.OpenAfun () :: * -> *
710a652edeea6147a461e884a9d7e24b
  type Boundary =
    Data.Array.Accelerate.AST.PreBoundary
      Data.Array.Accelerate.AST.OpenAcc
    :: * -> * -> *
193cbb0e6397a8830bfefbb64f224369
  type Exp = Data.Array.Accelerate.AST.OpenExp () :: * -> * -> *
55ceff312de354690e32ea06e9f15707
  type Fun = Data.Array.Accelerate.AST.OpenFun () :: * -> * -> *
9e7661ad7cc1bdaa299ff04fb99275fb
  type role Idx nominal nominal
  data Idx env t where
    ZeroIdx :: Idx (env1, t) t
    SuccIdx :: (Data.Array.Accelerate.AST.Idx env1 t)
               -> Idx (env1, s) t
2d905ef29a37e7cb2907166ec5f6b288
  type LiftAcc (acc :: * -> * -> *) =
    forall aenv a.
    acc aenv a
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp (acc aenv a))
3ce328e7fb4d29ff4e396e63ce02cd99
  type NFDataAcc (acc :: * -> * -> *) =
    forall aenv t. acc aenv t -> ()
d85164a68dcedbc8a54813dd240745cc
  type role OpenAcc nominal nominal
  newtype OpenAcc aenv t
    = OpenAcc (Data.Array.Accelerate.AST.PreOpenAcc
                 Data.Array.Accelerate.AST.OpenAcc aenv t)
    RecFlag: Recursive
d85164a68dcedbc8a54813dd240745cc
  type OpenAfun =
    Data.Array.Accelerate.AST.PreOpenAfun
      Data.Array.Accelerate.AST.OpenAcc
    :: * -> * -> *
d85164a68dcedbc8a54813dd240745cc
  type OpenExp =
    Data.Array.Accelerate.AST.PreOpenExp
      Data.Array.Accelerate.AST.OpenAcc
    :: * -> * -> * -> *
d85164a68dcedbc8a54813dd240745cc
  type OpenFun =
    Data.Array.Accelerate.AST.PreOpenFun
      Data.Array.Accelerate.AST.OpenAcc
    :: * -> * -> * -> *
1322abd0ad50601c8516813c0173e99d
  type PreAfun (acc :: * -> * -> *) =
    Data.Array.Accelerate.AST.PreOpenAfun acc () :: * -> *
f77d583ab18e537cb481471882c136a8
  type role PreBoundary representational nominal nominal
  data PreBoundary (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   aenv
                   t where
    Clamp :: PreBoundary acc aenv t
    Mirror :: PreBoundary acc aenv t
    Wrap :: PreBoundary acc aenv t
    Constant :: Data.Array.Accelerate.Array.Sugar.Elt e =>
                (Data.Array.Accelerate.Array.Sugar.EltRepr e)
                -> PreBoundary acc
                               aenv
                               (Data.Array.Accelerate.Array.Sugar.Array sh e)
    Function :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                 Data.Array.Accelerate.Array.Sugar.Elt e) =>
                (Data.Array.Accelerate.AST.PreFun acc aenv (sh -> e))
                -> PreBoundary acc
                               aenv
                               (Data.Array.Accelerate.Array.Sugar.Array sh e)
e5bbd637882b51cd1da6e290359325bf
  type PreExp (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) =
    Data.Array.Accelerate.AST.PreOpenExp acc () :: * -> * -> *
d3bf8e354493ff12972ab24a46d8ebad
  type PreFun (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*) =
    Data.Array.Accelerate.AST.PreOpenFun acc () :: * -> * -> *
1c6afba98b6c67e35689096ef2f6efe3
  type role PreOpenAcc representational nominal nominal
  data PreOpenAcc (acc :: * -> * -> *) aenv a where
    Alet :: (Data.Array.Accelerate.Array.Sugar.Arrays bndArrs,
             Data.Array.Accelerate.Array.Sugar.Arrays a) =>
            (acc aenv bndArrs) -> (acc (aenv, bndArrs) a)
            -> PreOpenAcc acc aenv a
    Avar :: Data.Array.Accelerate.Array.Sugar.Arrays a =>
            (Data.Array.Accelerate.AST.Idx aenv a) -> PreOpenAcc acc aenv a
    Atuple :: (Data.Array.Accelerate.Array.Sugar.Arrays a,
               Data.Array.Accelerate.Array.Sugar.IsAtuple a) =>
              (Data.Array.Accelerate.Array.Sugar.Atuple
                 (acc aenv) (Data.Array.Accelerate.Array.Sugar.TupleRepr a))
              -> PreOpenAcc acc aenv a
    Aprj :: (Data.Array.Accelerate.Array.Sugar.Arrays arrs,
             Data.Array.Accelerate.Array.Sugar.IsAtuple arrs,
             Data.Array.Accelerate.Array.Sugar.Arrays a) =>
            (Data.Array.Accelerate.Product.TupleIdx
               (Data.Array.Accelerate.Array.Sugar.TupleRepr arrs) a)
            -> (acc aenv arrs) -> PreOpenAcc acc aenv a
    Apply :: (Data.Array.Accelerate.Array.Sugar.Arrays arrs1,
              Data.Array.Accelerate.Array.Sugar.Arrays a) =>
             (Data.Array.Accelerate.AST.PreOpenAfun acc aenv (arrs1 -> a))
             -> (acc aenv arrs1) -> PreOpenAcc acc aenv a
    Aforeign :: (Data.Array.Accelerate.Array.Sugar.Arrays as,
                 Data.Array.Accelerate.Array.Sugar.Arrays a,
                 Data.Array.Accelerate.Array.Sugar.Foreign asm) =>
                (asm (as -> a))
                -> (Data.Array.Accelerate.AST.PreAfun acc (as -> a))
                -> (acc aenv as) -> PreOpenAcc acc aenv a
    Acond :: Data.Array.Accelerate.Array.Sugar.Arrays a =>
             (Data.Array.Accelerate.AST.PreExp acc aenv GHC.Types.Bool)
             -> (acc aenv a) -> (acc aenv a) -> PreOpenAcc acc aenv a
    Awhile :: Data.Array.Accelerate.Array.Sugar.Arrays a =>
              (Data.Array.Accelerate.AST.PreOpenAfun
                 acc
                 aenv
                 (a -> Data.Array.Accelerate.Array.Sugar.Scalar GHC.Types.Bool))
              -> (Data.Array.Accelerate.AST.PreOpenAfun acc aenv (a -> a))
              -> (acc aenv a) -> PreOpenAcc acc aenv a
    Use :: Data.Array.Accelerate.Array.Sugar.Arrays a =>
           (Data.Array.Accelerate.Array.Sugar.ArrRepr a)
           -> PreOpenAcc acc aenv a
    Unit :: Data.Array.Accelerate.Array.Sugar.Elt e =>
            (Data.Array.Accelerate.AST.PreExp acc aenv e)
            -> PreOpenAcc acc
                          aenv
                          (Data.Array.Accelerate.Array.Sugar.Array
                             Data.Array.Accelerate.Array.Sugar.DIM0 e)
    Reshape :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                Data.Array.Accelerate.Array.Sugar.Shape sh',
                Data.Array.Accelerate.Array.Sugar.Elt e) =>
               (Data.Array.Accelerate.AST.PreExp acc aenv sh)
               -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh' e))
               -> PreOpenAcc acc
                             aenv
                             (Data.Array.Accelerate.Array.Sugar.Array sh e)
    Generate :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                 Data.Array.Accelerate.Array.Sugar.Elt e) =>
                (Data.Array.Accelerate.AST.PreExp acc aenv sh)
                -> (Data.Array.Accelerate.AST.PreFun acc aenv (sh -> e))
                -> PreOpenAcc acc
                              aenv
                              (Data.Array.Accelerate.Array.Sugar.Array sh e)
    Transform :: (Data.Array.Accelerate.Array.Sugar.Elt a1,
                  Data.Array.Accelerate.Array.Sugar.Elt b,
                  Data.Array.Accelerate.Array.Sugar.Shape sh,
                  Data.Array.Accelerate.Array.Sugar.Shape sh') =>
                 (Data.Array.Accelerate.AST.PreExp acc aenv sh')
                 -> (Data.Array.Accelerate.AST.PreFun acc aenv (sh' -> sh))
                 -> (Data.Array.Accelerate.AST.PreFun acc aenv (a1 -> b))
                 -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh a1))
                 -> PreOpenAcc acc
                               aenv
                               (Data.Array.Accelerate.Array.Sugar.Array sh' b)
    Replicate :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                  Data.Array.Accelerate.Array.Sugar.Shape sl,
                  Data.Array.Accelerate.Array.Sugar.Elt slix,
                  Data.Array.Accelerate.Array.Sugar.Elt e) =>
                 (Data.Array.Accelerate.Array.Representation.SliceIndex
                    (Data.Array.Accelerate.Array.Sugar.EltRepr slix)
                    (Data.Array.Accelerate.Array.Sugar.EltRepr sl)
                    co
                    (Data.Array.Accelerate.Array.Sugar.EltRepr sh))
                 -> (Data.Array.Accelerate.AST.PreExp acc aenv slix)
                 -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sl e))
                 -> PreOpenAcc acc
                               aenv
                               (Data.Array.Accelerate.Array.Sugar.Array sh e)
    Slice :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
              Data.Array.Accelerate.Array.Sugar.Shape sl,
              Data.Array.Accelerate.Array.Sugar.Elt slix,
              Data.Array.Accelerate.Array.Sugar.Elt e) =>
             (Data.Array.Accelerate.Array.Representation.SliceIndex
                (Data.Array.Accelerate.Array.Sugar.EltRepr slix)
                (Data.Array.Accelerate.Array.Sugar.EltRepr sl)
                co
                (Data.Array.Accelerate.Array.Sugar.EltRepr sh))
             -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh e))
             -> (Data.Array.Accelerate.AST.PreExp acc aenv slix)
             -> PreOpenAcc acc
                           aenv
                           (Data.Array.Accelerate.Array.Sugar.Array sl e)
    Map :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
            Data.Array.Accelerate.Array.Sugar.Elt e,
            Data.Array.Accelerate.Array.Sugar.Elt e') =>
           (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e'))
           -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh e))
           -> PreOpenAcc acc
                         aenv
                         (Data.Array.Accelerate.Array.Sugar.Array sh e')
    ZipWith :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                Data.Array.Accelerate.Array.Sugar.Elt e1,
                Data.Array.Accelerate.Array.Sugar.Elt e2,
                Data.Array.Accelerate.Array.Sugar.Elt e3) =>
               (Data.Array.Accelerate.AST.PreFun acc aenv (e1 -> e2 -> e3))
               -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh e1))
               -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh e2))
               -> PreOpenAcc acc
                             aenv
                             (Data.Array.Accelerate.Array.Sugar.Array sh e3)
    Fold :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
             Data.Array.Accelerate.Array.Sugar.Elt e) =>
            (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
            -> (Data.Array.Accelerate.AST.PreExp acc aenv e)
            -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
            -> PreOpenAcc acc
                          aenv
                          (Data.Array.Accelerate.Array.Sugar.Array sh e)
    Fold1 :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
              Data.Array.Accelerate.Array.Sugar.Elt e) =>
             (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
             -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
             -> PreOpenAcc acc
                           aenv
                           (Data.Array.Accelerate.Array.Sugar.Array sh e)
    FoldSeg :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                Data.Array.Accelerate.Array.Sugar.Elt e,
                Data.Array.Accelerate.Array.Sugar.Elt i,
                Data.Array.Accelerate.Type.IsIntegral i) =>
               (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
               -> (Data.Array.Accelerate.AST.PreExp acc aenv e)
               -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                               (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
               -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Segments i))
               -> PreOpenAcc acc
                             aenv
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    Fold1Seg :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                 Data.Array.Accelerate.Array.Sugar.Elt e,
                 Data.Array.Accelerate.Array.Sugar.Elt i,
                 Data.Array.Accelerate.Type.IsIntegral i) =>
                (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
                -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
                -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Segments i))
                -> PreOpenAcc acc
                              aenv
                              (Data.Array.Accelerate.Array.Sugar.Array
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    Scanl :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
              Data.Array.Accelerate.Array.Sugar.Elt e) =>
             (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
             -> (Data.Array.Accelerate.AST.PreExp acc aenv e)
             -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
             -> PreOpenAcc acc
                           aenv
                           (Data.Array.Accelerate.Array.Sugar.Array
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    Scanl' :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
               Data.Array.Accelerate.Array.Sugar.Elt e) =>
              (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
              -> (Data.Array.Accelerate.AST.PreExp acc aenv e)
              -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
              -> PreOpenAcc acc
                            aenv
                            (Data.Array.Accelerate.Array.Sugar.Array
                               (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e,
                             Data.Array.Accelerate.Array.Sugar.Array sh e)
    Scanl1 :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
               Data.Array.Accelerate.Array.Sugar.Elt e) =>
              (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
              -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
              -> PreOpenAcc acc
                            aenv
                            (Data.Array.Accelerate.Array.Sugar.Array
                               (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    Scanr :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
              Data.Array.Accelerate.Array.Sugar.Elt e) =>
             (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
             -> (Data.Array.Accelerate.AST.PreExp acc aenv e)
             -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
             -> PreOpenAcc acc
                           aenv
                           (Data.Array.Accelerate.Array.Sugar.Array
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    Scanr' :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
               Data.Array.Accelerate.Array.Sugar.Elt e) =>
              (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
              -> (Data.Array.Accelerate.AST.PreExp acc aenv e)
              -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
              -> PreOpenAcc acc
                            aenv
                            (Data.Array.Accelerate.Array.Sugar.Array
                               (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e,
                             Data.Array.Accelerate.Array.Sugar.Array sh e)
    Scanr1 :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
               Data.Array.Accelerate.Array.Sugar.Elt e) =>
              (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
              -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e))
              -> PreOpenAcc acc
                            aenv
                            (Data.Array.Accelerate.Array.Sugar.Array
                               (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    Permute :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                Data.Array.Accelerate.Array.Sugar.Shape sh',
                Data.Array.Accelerate.Array.Sugar.Elt e) =>
               (Data.Array.Accelerate.AST.PreFun acc aenv (e -> e -> e))
               -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh' e))
               -> (Data.Array.Accelerate.AST.PreFun acc aenv (sh -> sh'))
               -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh e))
               -> PreOpenAcc acc
                             aenv
                             (Data.Array.Accelerate.Array.Sugar.Array sh' e)
    Backpermute :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                    Data.Array.Accelerate.Array.Sugar.Shape sh',
                    Data.Array.Accelerate.Array.Sugar.Elt e) =>
                   (Data.Array.Accelerate.AST.PreExp acc aenv sh')
                   -> (Data.Array.Accelerate.AST.PreFun acc aenv (sh' -> sh))
                   -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh e))
                   -> PreOpenAcc acc
                                 aenv
                                 (Data.Array.Accelerate.Array.Sugar.Array sh' e)
    Stencil :: (Data.Array.Accelerate.Array.Sugar.Elt e,
                Data.Array.Accelerate.Array.Sugar.Elt e',
                Data.Array.Accelerate.AST.Stencil sh e stencil) =>
               (Data.Array.Accelerate.AST.PreFun acc aenv (stencil -> e'))
               -> (Data.Array.Accelerate.AST.PreBoundary
                     acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh e))
               -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh e))
               -> PreOpenAcc acc
                             aenv
                             (Data.Array.Accelerate.Array.Sugar.Array sh e')
    Stencil2 :: (Data.Array.Accelerate.Array.Sugar.Elt a1,
                 Data.Array.Accelerate.Array.Sugar.Elt b,
                 Data.Array.Accelerate.Array.Sugar.Elt c,
                 Data.Array.Accelerate.AST.Stencil sh a1 stencil1,
                 Data.Array.Accelerate.AST.Stencil sh b stencil2) =>
                (Data.Array.Accelerate.AST.PreFun
                   acc aenv (stencil1 -> stencil2 -> c))
                -> (Data.Array.Accelerate.AST.PreBoundary
                      acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh a1))
                -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh a1))
                -> (Data.Array.Accelerate.AST.PreBoundary
                      acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh b))
                -> (acc aenv (Data.Array.Accelerate.Array.Sugar.Array sh b))
                -> PreOpenAcc acc
                              aenv
                              (Data.Array.Accelerate.Array.Sugar.Array sh c)
2e727f8d346dd6a6266c06baf474000a
  type role PreOpenAfun representational nominal nominal
  data PreOpenAfun (acc :: * -> * -> *) aenv t where
    Abody :: Data.Array.Accelerate.Array.Sugar.Arrays t =>
             (acc aenv t) -> PreOpenAfun acc aenv t
    Alam :: Data.Array.Accelerate.Array.Sugar.Arrays a =>
            (Data.Array.Accelerate.AST.PreOpenAfun acc (aenv, a) t1)
            -> PreOpenAfun acc aenv (a -> t1)
d3bf8e354493ff12972ab24a46d8ebad
  type role PreOpenExp representational nominal nominal nominal
  data PreOpenExp (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                  env
                  aenv
                  t where
    Let :: (Data.Array.Accelerate.Array.Sugar.Elt bnd_t,
            Data.Array.Accelerate.Array.Sugar.Elt t) =>
           (Data.Array.Accelerate.AST.PreOpenExp acc env aenv bnd_t)
           -> (Data.Array.Accelerate.AST.PreOpenExp acc (env, bnd_t) aenv t)
           -> PreOpenExp acc env aenv t
    Var :: Data.Array.Accelerate.Array.Sugar.Elt t =>
           (Data.Array.Accelerate.AST.Idx env t) -> PreOpenExp acc env aenv t
    Foreign :: (Data.Array.Accelerate.Array.Sugar.Foreign asm,
                Data.Array.Accelerate.Array.Sugar.Elt x,
                Data.Array.Accelerate.Array.Sugar.Elt t) =>
               (asm (x -> t))
               -> (Data.Array.Accelerate.AST.PreFun acc () (x -> t))
               -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv x)
               -> PreOpenExp acc env aenv t
    Const :: Data.Array.Accelerate.Array.Sugar.Elt t =>
             (Data.Array.Accelerate.Array.Sugar.EltRepr t)
             -> PreOpenExp acc env aenv t
    Tuple :: (Data.Array.Accelerate.Array.Sugar.Elt t,
              Data.Array.Accelerate.Array.Sugar.IsTuple t) =>
             (Data.Array.Accelerate.Array.Sugar.Tuple
                (Data.Array.Accelerate.AST.PreOpenExp acc env aenv)
                (Data.Array.Accelerate.Array.Sugar.TupleRepr t))
             -> PreOpenExp acc env aenv t
    Prj :: (Data.Array.Accelerate.Array.Sugar.Elt t1,
            Data.Array.Accelerate.Array.Sugar.IsTuple t1,
            Data.Array.Accelerate.Array.Sugar.Elt t) =>
           (Data.Array.Accelerate.Product.TupleIdx
              (Data.Array.Accelerate.Array.Sugar.TupleRepr t1) t)
           -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t1)
           -> PreOpenExp acc env aenv t
    IndexNil :: PreOpenExp acc
                           env
                           aenv
                           Data.Array.Accelerate.Array.Sugar.Z
    IndexCons :: (Data.Array.Accelerate.Array.Sugar.Slice sl,
                  Data.Array.Accelerate.Array.Sugar.Elt a) =>
                 (Data.Array.Accelerate.AST.PreOpenExp acc env aenv sl)
                 -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv a)
                 -> PreOpenExp acc
                               env
                               aenv
                               (sl Data.Array.Accelerate.Array.Sugar.:. a)
    IndexHead :: (Data.Array.Accelerate.Array.Sugar.Slice sl,
                  Data.Array.Accelerate.Array.Sugar.Elt t) =>
                 (Data.Array.Accelerate.AST.PreOpenExp
                    acc env aenv (sl Data.Array.Accelerate.Array.Sugar.:. t))
                 -> PreOpenExp acc env aenv t
    IndexTail :: (Data.Array.Accelerate.Array.Sugar.Slice t,
                  Data.Array.Accelerate.Array.Sugar.Elt a) =>
                 (Data.Array.Accelerate.AST.PreOpenExp
                    acc env aenv (t Data.Array.Accelerate.Array.Sugar.:. a))
                 -> PreOpenExp acc env aenv t
    IndexAny :: Data.Array.Accelerate.Array.Sugar.Shape sh =>
                PreOpenExp acc env aenv (Data.Array.Accelerate.Array.Sugar.Any sh)
    IndexSlice :: (Data.Array.Accelerate.Array.Sugar.Shape sh,
                   Data.Array.Accelerate.Array.Sugar.Shape t,
                   Data.Array.Accelerate.Array.Sugar.Elt slix) =>
                  (Data.Array.Accelerate.Array.Representation.SliceIndex
                     (Data.Array.Accelerate.Array.Sugar.EltRepr slix)
                     (Data.Array.Accelerate.Array.Sugar.EltRepr t)
                     co
                     (Data.Array.Accelerate.Array.Sugar.EltRepr sh))
                  -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv slix)
                  -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv sh)
                  -> PreOpenExp acc env aenv t
    IndexFull :: (Data.Array.Accelerate.Array.Sugar.Shape t,
                  Data.Array.Accelerate.Array.Sugar.Shape sl,
                  Data.Array.Accelerate.Array.Sugar.Elt slix) =>
                 (Data.Array.Accelerate.Array.Representation.SliceIndex
                    (Data.Array.Accelerate.Array.Sugar.EltRepr slix)
                    (Data.Array.Accelerate.Array.Sugar.EltRepr sl)
                    co
                    (Data.Array.Accelerate.Array.Sugar.EltRepr t))
                 -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv slix)
                 -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv sl)
                 -> PreOpenExp acc env aenv t
    ToIndex :: Data.Array.Accelerate.Array.Sugar.Shape sh =>
               (Data.Array.Accelerate.AST.PreOpenExp acc env aenv sh)
               -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv sh)
               -> PreOpenExp acc env aenv GHC.Types.Int
    FromIndex :: Data.Array.Accelerate.Array.Sugar.Shape t =>
                 (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
                 -> (Data.Array.Accelerate.AST.PreOpenExp
                       acc env aenv GHC.Types.Int)
                 -> PreOpenExp acc env aenv t
    Cond :: Data.Array.Accelerate.Array.Sugar.Elt t =>
            (Data.Array.Accelerate.AST.PreOpenExp acc env aenv GHC.Types.Bool)
            -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
            -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
            -> PreOpenExp acc env aenv t
    While :: Data.Array.Accelerate.Array.Sugar.Elt t =>
             (Data.Array.Accelerate.AST.PreOpenFun
                acc env aenv (t -> GHC.Types.Bool))
             -> (Data.Array.Accelerate.AST.PreOpenFun acc env aenv (t -> t))
             -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
             -> PreOpenExp acc env aenv t
    PrimConst :: Data.Array.Accelerate.Array.Sugar.Elt t =>
                 (Data.Array.Accelerate.AST.PrimConst t)
                 -> PreOpenExp acc env aenv t
    PrimApp :: (Data.Array.Accelerate.Array.Sugar.Elt a,
                Data.Array.Accelerate.Array.Sugar.Elt t) =>
               (Data.Array.Accelerate.AST.PrimFun (a -> t))
               -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv a)
               -> PreOpenExp acc env aenv t
    Index :: (Data.Array.Accelerate.Array.Sugar.Shape dim,
              Data.Array.Accelerate.Array.Sugar.Elt t) =>
             (acc aenv (Data.Array.Accelerate.Array.Sugar.Array dim t))
             -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv dim)
             -> PreOpenExp acc env aenv t
    LinearIndex :: (Data.Array.Accelerate.Array.Sugar.Shape dim,
                    Data.Array.Accelerate.Array.Sugar.Elt t) =>
                   (acc aenv (Data.Array.Accelerate.Array.Sugar.Array dim t))
                   -> (Data.Array.Accelerate.AST.PreOpenExp
                         acc env aenv GHC.Types.Int)
                   -> PreOpenExp acc env aenv t
    Shape :: (Data.Array.Accelerate.Array.Sugar.Shape t,
              Data.Array.Accelerate.Array.Sugar.Elt e) =>
             (acc aenv (Data.Array.Accelerate.Array.Sugar.Array t e))
             -> PreOpenExp acc env aenv t
    ShapeSize :: Data.Array.Accelerate.Array.Sugar.Shape dim =>
                 (Data.Array.Accelerate.AST.PreOpenExp acc env aenv dim)
                 -> PreOpenExp acc env aenv GHC.Types.Int
    Intersect :: Data.Array.Accelerate.Array.Sugar.Shape t =>
                 (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
                 -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
                 -> PreOpenExp acc env aenv t
    Union :: Data.Array.Accelerate.Array.Sugar.Shape t =>
             (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
             -> (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
             -> PreOpenExp acc env aenv t
d3bf8e354493ff12972ab24a46d8ebad
  type role PreOpenFun representational nominal nominal nominal
  data PreOpenFun (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                  env
                  aenv
                  t where
    Body :: Data.Array.Accelerate.Array.Sugar.Elt t =>
            (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
            -> PreOpenFun acc env aenv t
    Lam :: Data.Array.Accelerate.Array.Sugar.Elt a =>
           (Data.Array.Accelerate.AST.PreOpenFun acc (env, a) aenv t1)
           -> PreOpenFun acc env aenv (a -> t1)
5c318a616985d1340937fa9acc4a60ed
  type role PrimConst nominal
  data PrimConst ty where
    PrimMinBound :: (Data.Array.Accelerate.Type.BoundedType ty)
                    -> PrimConst ty
    PrimMaxBound :: (Data.Array.Accelerate.Type.BoundedType ty)
                    -> PrimConst ty
    PrimPi :: (Data.Array.Accelerate.Type.FloatingType ty)
              -> PrimConst ty
66016ad2b3472f117aa67ab3504b9f9e
  type role PrimFun nominal
  data PrimFun sig where
    PrimAdd :: (Data.Array.Accelerate.Type.NumType a)
               -> PrimFun ((a, a) -> a)
    PrimSub :: (Data.Array.Accelerate.Type.NumType a)
               -> PrimFun ((a, a) -> a)
    PrimMul :: (Data.Array.Accelerate.Type.NumType a)
               -> PrimFun ((a, a) -> a)
    PrimNeg :: (Data.Array.Accelerate.Type.NumType a)
               -> PrimFun (a -> a)
    PrimAbs :: (Data.Array.Accelerate.Type.NumType a)
               -> PrimFun (a -> a)
    PrimSig :: (Data.Array.Accelerate.Type.NumType a)
               -> PrimFun (a -> a)
    PrimQuot :: (Data.Array.Accelerate.Type.IntegralType a)
                -> PrimFun ((a, a) -> a)
    PrimRem :: (Data.Array.Accelerate.Type.IntegralType a)
               -> PrimFun ((a, a) -> a)
    PrimQuotRem :: (Data.Array.Accelerate.Type.IntegralType a)
                   -> PrimFun ((a, a) -> (a, a))
    PrimIDiv :: (Data.Array.Accelerate.Type.IntegralType a)
                -> PrimFun ((a, a) -> a)
    PrimMod :: (Data.Array.Accelerate.Type.IntegralType a)
               -> PrimFun ((a, a) -> a)
    PrimDivMod :: (Data.Array.Accelerate.Type.IntegralType a)
                  -> PrimFun ((a, a) -> (a, a))
    PrimBAnd :: (Data.Array.Accelerate.Type.IntegralType a)
                -> PrimFun ((a, a) -> a)
    PrimBOr :: (Data.Array.Accelerate.Type.IntegralType a)
               -> PrimFun ((a, a) -> a)
    PrimBXor :: (Data.Array.Accelerate.Type.IntegralType a)
                -> PrimFun ((a, a) -> a)
    PrimBNot :: (Data.Array.Accelerate.Type.IntegralType a)
                -> PrimFun (a -> a)
    PrimBShiftL :: (Data.Array.Accelerate.Type.IntegralType a)
                   -> PrimFun ((a, GHC.Types.Int) -> a)
    PrimBShiftR :: (Data.Array.Accelerate.Type.IntegralType a)
                   -> PrimFun ((a, GHC.Types.Int) -> a)
    PrimBRotateL :: (Data.Array.Accelerate.Type.IntegralType a)
                    -> PrimFun ((a, GHC.Types.Int) -> a)
    PrimBRotateR :: (Data.Array.Accelerate.Type.IntegralType a)
                    -> PrimFun ((a, GHC.Types.Int) -> a)
    PrimPopCount :: (Data.Array.Accelerate.Type.IntegralType a)
                    -> PrimFun (a -> GHC.Types.Int)
    PrimCountLeadingZeros :: (Data.Array.Accelerate.Type.IntegralType
                                a)
                             -> PrimFun (a -> GHC.Types.Int)
    PrimCountTrailingZeros :: (Data.Array.Accelerate.Type.IntegralType
                                 a)
                              -> PrimFun (a -> GHC.Types.Int)
    PrimFDiv :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun ((a, a) -> a)
    PrimRecip :: (Data.Array.Accelerate.Type.FloatingType a)
                 -> PrimFun (a -> a)
    PrimSin :: (Data.Array.Accelerate.Type.FloatingType a)
               -> PrimFun (a -> a)
    PrimCos :: (Data.Array.Accelerate.Type.FloatingType a)
               -> PrimFun (a -> a)
    PrimTan :: (Data.Array.Accelerate.Type.FloatingType a)
               -> PrimFun (a -> a)
    PrimAsin :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun (a -> a)
    PrimAcos :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun (a -> a)
    PrimAtan :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun (a -> a)
    PrimSinh :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun (a -> a)
    PrimCosh :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun (a -> a)
    PrimTanh :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun (a -> a)
    PrimAsinh :: (Data.Array.Accelerate.Type.FloatingType a)
                 -> PrimFun (a -> a)
    PrimAcosh :: (Data.Array.Accelerate.Type.FloatingType a)
                 -> PrimFun (a -> a)
    PrimAtanh :: (Data.Array.Accelerate.Type.FloatingType a)
                 -> PrimFun (a -> a)
    PrimExpFloating :: (Data.Array.Accelerate.Type.FloatingType a)
                       -> PrimFun (a -> a)
    PrimSqrt :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun (a -> a)
    PrimLog :: (Data.Array.Accelerate.Type.FloatingType a)
               -> PrimFun (a -> a)
    PrimFPow :: (Data.Array.Accelerate.Type.FloatingType a)
                -> PrimFun ((a, a) -> a)
    PrimLogBase :: (Data.Array.Accelerate.Type.FloatingType a)
                   -> PrimFun ((a, a) -> a)
    PrimTruncate :: (Data.Array.Accelerate.Type.FloatingType a)
                    -> (Data.Array.Accelerate.Type.IntegralType b) -> PrimFun (a -> b)
    PrimRound :: (Data.Array.Accelerate.Type.FloatingType a)
                 -> (Data.Array.Accelerate.Type.IntegralType b) -> PrimFun (a -> b)
    PrimFloor :: (Data.Array.Accelerate.Type.FloatingType a)
                 -> (Data.Array.Accelerate.Type.IntegralType b) -> PrimFun (a -> b)
    PrimCeiling :: (Data.Array.Accelerate.Type.FloatingType a)
                   -> (Data.Array.Accelerate.Type.IntegralType b) -> PrimFun (a -> b)
    PrimAtan2 :: (Data.Array.Accelerate.Type.FloatingType a)
                 -> PrimFun ((a, a) -> a)
    PrimIsNaN :: (Data.Array.Accelerate.Type.FloatingType a)
                 -> PrimFun (a -> GHC.Types.Bool)
    PrimIsInfinite :: (Data.Array.Accelerate.Type.FloatingType a)
                      -> PrimFun (a -> GHC.Types.Bool)
    PrimLt :: (Data.Array.Accelerate.Type.ScalarType a)
              -> PrimFun ((a, a) -> GHC.Types.Bool)
    PrimGt :: (Data.Array.Accelerate.Type.ScalarType a)
              -> PrimFun ((a, a) -> GHC.Types.Bool)
    PrimLtEq :: (Data.Array.Accelerate.Type.ScalarType a)
                -> PrimFun ((a, a) -> GHC.Types.Bool)
    PrimGtEq :: (Data.Array.Accelerate.Type.ScalarType a)
                -> PrimFun ((a, a) -> GHC.Types.Bool)
    PrimEq :: (Data.Array.Accelerate.Type.ScalarType a)
              -> PrimFun ((a, a) -> GHC.Types.Bool)
    PrimNEq :: (Data.Array.Accelerate.Type.ScalarType a)
               -> PrimFun ((a, a) -> GHC.Types.Bool)
    PrimMax :: (Data.Array.Accelerate.Type.ScalarType a)
               -> PrimFun ((a, a) -> a)
    PrimMin :: (Data.Array.Accelerate.Type.ScalarType a)
               -> PrimFun ((a, a) -> a)
    PrimLAnd :: PrimFun ((GHC.Types.Bool, GHC.Types.Bool)
                         -> GHC.Types.Bool)
    PrimLOr :: PrimFun ((GHC.Types.Bool, GHC.Types.Bool)
                        -> GHC.Types.Bool)
    PrimLNot :: PrimFun (GHC.Types.Bool -> GHC.Types.Bool)
    PrimOrd :: PrimFun (GHC.Types.Char -> GHC.Types.Int)
    PrimChr :: PrimFun (GHC.Types.Int -> GHC.Types.Char)
    PrimBoolToInt :: PrimFun (GHC.Types.Bool -> GHC.Types.Int)
    PrimFromIntegral :: (Data.Array.Accelerate.Type.IntegralType a)
                        -> (Data.Array.Accelerate.Type.NumType b) -> PrimFun (a -> b)
    PrimToFloating :: (Data.Array.Accelerate.Type.NumType a)
                      -> (Data.Array.Accelerate.Type.FloatingType b) -> PrimFun (a -> b)
    PrimCoerce :: (Data.Array.Accelerate.Type.ScalarType a)
                  -> (Data.Array.Accelerate.Type.ScalarType b) -> PrimFun (a -> b)
de90111747605bd959f975fe4292a7e7
  class (Data.Array.Accelerate.Array.Sugar.Shape sh,
         Data.Array.Accelerate.Array.Sugar.Elt e,
         Data.Array.Accelerate.Array.Sugar.IsTuple stencil,
         Data.Array.Accelerate.Array.Sugar.Elt stencil) =>
        Stencil sh e stencil where
    stencil :: Data.Array.Accelerate.AST.StencilR sh e stencil
    {-# MINIMAL stencil #-}
737d780221c2db7801f815b050dbdfdb
  type role StencilR nominal nominal nominal
  data StencilR sh e pat where
    StencilRunit3 :: Data.Array.Accelerate.Array.Sugar.Elt e =>
                     StencilR (Data.Array.Accelerate.Array.Sugar.DIM0
                               Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                              e
                              (e, e, e)
    StencilRunit5 :: Data.Array.Accelerate.Array.Sugar.Elt e =>
                     StencilR (Data.Array.Accelerate.Array.Sugar.DIM0
                               Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                              e
                              (e, e, e, e, e)
    StencilRunit7 :: Data.Array.Accelerate.Array.Sugar.Elt e =>
                     StencilR (Data.Array.Accelerate.Array.Sugar.DIM0
                               Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                              e
                              (e, e, e, e, e, e, e)
    StencilRunit9 :: Data.Array.Accelerate.Array.Sugar.Elt e =>
                     StencilR (Data.Array.Accelerate.Array.Sugar.DIM0
                               Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                              e
                              (e, e, e, e, e, e, e, e, e)
    StencilRtup3 :: (Data.Array.Accelerate.Array.Sugar.Shape sh1,
                     Data.Array.Accelerate.Array.Sugar.Elt e) =>
                    (Data.Array.Accelerate.AST.StencilR sh1 e pat1)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat2)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat3)
                    -> StencilR (sh1
                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                e
                                (pat1, pat2, pat3)
    StencilRtup5 :: (Data.Array.Accelerate.Array.Sugar.Shape sh1,
                     Data.Array.Accelerate.Array.Sugar.Elt e) =>
                    (Data.Array.Accelerate.AST.StencilR sh1 e pat1)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat2)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat3)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat4)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat5)
                    -> StencilR (sh1
                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                e
                                (pat1, pat2, pat3, pat4, pat5)
    StencilRtup7 :: (Data.Array.Accelerate.Array.Sugar.Shape sh1,
                     Data.Array.Accelerate.Array.Sugar.Elt e) =>
                    (Data.Array.Accelerate.AST.StencilR sh1 e pat1)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat2)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat3)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat4)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat5)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat6)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat7)
                    -> StencilR (sh1
                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                e
                                (pat1, pat2, pat3, pat4, pat5, pat6, pat7)
    StencilRtup9 :: (Data.Array.Accelerate.Array.Sugar.Shape sh1,
                     Data.Array.Accelerate.Array.Sugar.Elt e) =>
                    (Data.Array.Accelerate.AST.StencilR sh1 e pat1)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat2)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat3)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat4)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat5)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat6)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat7)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat8)
                    -> (Data.Array.Accelerate.AST.StencilR sh1 e pat9)
                    -> StencilR (sh1
                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                e
                                (pat1, pat2, pat3, pat4, pat5, pat6, pat7, pat8, pat9)
289bd163359a5a1221959e0f6a90d574
  type role Val nominal
  data Val env where
    Empty :: Val ()
    Push :: (Data.Array.Accelerate.AST.Val env1) -> t -> Val (env1, t)
1b6e1a1299536d51a62acb7f3b0d18c9
  type role ValElt nominal
  data ValElt env where
    EmptyElt :: ValElt ()
    PushElt :: Data.Array.Accelerate.Array.Sugar.Elt t =>
               (Data.Array.Accelerate.AST.ValElt env1)
               -> (Data.Array.Accelerate.Array.Sugar.EltRepr t)
               -> ValElt (env1, t)
8d261f2de782c3f16463471eb1d41823
  idxToInt :: Data.Array.Accelerate.AST.Idx env t -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ env @ t (w :: Data.Array.Accelerate.AST.Idx env t) ->
                 case Data.Array.Accelerate.AST.$widxToInt
                        @ env
                        @ t
                        w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
06ad511db4086fcee5413da5552d33c5
  liftArrays ::
    Data.Array.Accelerate.Array.Sugar.ArraysR arr
    -> arr
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp arr)
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
ae817f44dd7e5b6f7f0b33ffdb10f335
  liftConst ::
    Data.Array.Accelerate.Type.TupleType t
    -> t
    -> Language.Haskell.TH.Syntax.Q (Language.Haskell.TH.Syntax.TExp t)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
e4274ccd9936b8ad28cd5a4c6f24887e
  liftIdx ::
    Data.Array.Accelerate.AST.Idx env t
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.Idx env t))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.AST.liftIdx1
                  `cast`
                (forall (env :: <*>_N) (t :: <*>_N).
                 <Data.Array.Accelerate.AST.Idx env t>_R
                 ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                               <Language.Haskell.TH.Syntax.TExp
                                  (Data.Array.Accelerate.AST.Idx env t)>_N)) -}
6565e466b25e480170baf53bbf230e7b
  liftIdx1 ::
    Data.Array.Accelerate.AST.Idx env t
    -> forall (m :: * -> *).
       Language.Haskell.TH.Syntax.Quasi m =>
       m (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.Idx env t))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
6e70a3027c2d3bd2016543dabccacffe
  liftPreOpenAcc ::
    Data.Array.Accelerate.AST.LiftAcc acc
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv a
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.PreOpenAcc acc aenv a))
  {- Arity: 2, Strictness: <L,C(U)><S,1*U> -}
2942fe33751937b00f5cb91c3c7d4fc6
  liftPreOpenAfun ::
    Data.Array.Accelerate.AST.LiftAcc acc
    -> Data.Array.Accelerate.AST.PreOpenAfun acc aenv t
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.PreOpenAfun acc aenv t))
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U> -}
9edff05a7bf9979e9e8c38f08d8ac24f
  liftPreOpenExp ::
    Data.Array.Accelerate.AST.LiftAcc acc
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t))
  {- Arity: 2, Strictness: <L,C(U)><S,1*U> -}
e08dd37ae00ea58470063acbff8d6e78
  liftPreOpenFun ::
    Data.Array.Accelerate.AST.LiftAcc acc
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv t
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.PreOpenFun acc env aenv t))
  {- Arity: 2, Strictness: <L,C(U)><S,1*U> -}
c476981e2e1f2caa8fbd7b6ae597872f
  liftPrimConst ::
    Data.Array.Accelerate.AST.PrimConst c
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.PrimConst c))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.AST.liftPrimConst1
                  `cast`
                (forall (c :: <*>_N).
                 <Data.Array.Accelerate.AST.PrimConst c>_R
                 ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                               <Language.Haskell.TH.Syntax.TExp
                                  (Data.Array.Accelerate.AST.PrimConst c)>_N)) -}
53ba7ec9861c9808cce3e77236e71eb0
  liftPrimConst1 ::
    Data.Array.Accelerate.AST.PrimConst c
    -> forall (m :: * -> *).
       Language.Haskell.TH.Syntax.Quasi m =>
       m (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.PrimConst c))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
89b8b235f39274dfebed680b1b59742b
  liftPrimFun ::
    Data.Array.Accelerate.AST.PrimFun f
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.PrimFun f))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.AST.liftPrimFun1
                  `cast`
                (forall (f :: <*>_N).
                 <Data.Array.Accelerate.AST.PrimFun f>_R
                 ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                               <Language.Haskell.TH.Syntax.TExp
                                  (Data.Array.Accelerate.AST.PrimFun f)>_N)) -}
f97543417fb85162b2c2085d0656908a
  liftPrimFun1 ::
    Data.Array.Accelerate.AST.PrimFun f
    -> forall (m :: * -> *).
       Language.Haskell.TH.Syntax.Quasi m =>
       m (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.AST.PrimFun f))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
87eb2d04266d81fd3a9d402f88390899
  liftSliceIndex ::
    Data.Array.Accelerate.Array.Representation.SliceIndex
      ix slice coSlice sliceDim
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.Array.Representation.SliceIndex
               ix slice coSlice sliceDim))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.AST.liftSliceIndex1
                  `cast`
                (forall (ix :: <*>_N) (slice :: <*>_N) (coSlice :: <*>_N) (sliceDim :: <*>_N).
                 <Data.Array.Accelerate.Array.Representation.SliceIndex
                    ix slice coSlice sliceDim>_R
                 ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                               <Language.Haskell.TH.Syntax.TExp
                                  (Data.Array.Accelerate.Array.Representation.SliceIndex
                                     ix slice coSlice sliceDim)>_N)) -}
f9e0a128060d9d672a62d6f51fbd402e
  liftSliceIndex1 ::
    Data.Array.Accelerate.Array.Representation.SliceIndex
      ix slice coSlice sliceDim
    -> forall (m :: * -> *).
       Language.Haskell.TH.Syntax.Quasi m =>
       m (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.Array.Representation.SliceIndex
               ix slice coSlice sliceDim))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
9ceb2ba6c9c55c5155e8096212d43ec8
  liftTupleIdx ::
    Data.Array.Accelerate.Product.TupleIdx t e
    -> Language.Haskell.TH.Syntax.Q
         (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.Product.TupleIdx t e))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.AST.liftTupleIdx1
                  `cast`
                (forall (t :: <*>_N) (e :: <*>_N).
                 <Data.Array.Accelerate.Product.TupleIdx t e>_R
                 ->_R Sym (Language.Haskell.TH.Syntax.N:Q[0]
                               <Language.Haskell.TH.Syntax.TExp
                                  (Data.Array.Accelerate.Product.TupleIdx t e)>_N)) -}
ecc7cf312ab0c90fbd6d04999c183748
  liftTupleIdx1 ::
    Data.Array.Accelerate.Product.TupleIdx t e
    -> forall (m :: * -> *).
       Language.Haskell.TH.Syntax.Quasi m =>
       m (Language.Haskell.TH.Syntax.TExp
            (Data.Array.Accelerate.Product.TupleIdx t e))
  {- Arity: 2,
     Strictness: <S,1*U><S(S(S(LC(C(S))LLL)L)LLLLLLLLLLLLLLLLLLLL),U(U(U(U(U,U,U,U,U),U,U,U,U),U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
52cf1a43d42e556e1fb28506d500c911
  prj ::
    Data.Array.Accelerate.AST.Idx env t
    -> Data.Array.Accelerate.AST.Val env -> t
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
45266a80eccad705948f2f32fdafd0ef
  prjElt ::
    Data.Array.Accelerate.AST.Idx env t
    -> Data.Array.Accelerate.AST.ValElt env -> t
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d85164a68dcedbc8a54813dd240745cc
  rnfOpenAcc :: Data.Array.Accelerate.AST.OpenAcc aenv t -> ()
  {- Arity: 1, Strictness: <S,1*U> -}
42ebcea3a248bee98c068ec65a2906fa
  rnfPreOpenAcc ::
    Data.Array.Accelerate.AST.NFDataAcc acc
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t -> ()
  {- Arity: 2, Strictness: <L,C(U())><S,1*U> -}
2eb0378ae2b49ef58fb201098de56cda
  rnfPreOpenAfun ::
    Data.Array.Accelerate.AST.NFDataAcc acc
    -> Data.Array.Accelerate.AST.PreOpenAfun acc aenv t -> ()
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),1*C1(U())><S,1*U> -}
a30df5bffccc43274a1d14696474af4d
  rnfPreOpenExp ::
    Data.Array.Accelerate.AST.NFDataAcc acc
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t -> ()
  {- Arity: 2, Strictness: <L,C(U())><S,1*U> -}
d522df8223811b2e0b2cd0ba3a12fd87
  rnfPreOpenFun ::
    Data.Array.Accelerate.AST.NFDataAcc acc
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv t -> ()
  {- Arity: 2, Strictness: <L,C(U())><S,1*U> -}
b0e194a563868226f6d47e584bc5b1b8
  showPreAccOp ::
    Data.Array.Accelerate.AST.PreOpenAcc acc aenv arrs
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
bd63635b816242e96283cb1104927935
  showPreExpOp ::
    Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
592640c94840d48a7193d4d5fad3e51b
  tupleIdxToInt ::
    Data.Array.Accelerate.Product.TupleIdx tup e -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ tup @ e (w :: Data.Array.Accelerate.Product.TupleIdx tup e) ->
                 case Data.Array.Accelerate.AST.$wtupleIdxToInt
                        @ tup
                        @ e
                        w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
instance Control.DeepSeq.NFData [Data.Array.Accelerate.AST.OpenAcc]
  = Data.Array.Accelerate.AST.$fNFDataOpenAcc
instance Control.DeepSeq.NFData [Data.Array.Accelerate.AST.PreOpenAfun]
  = Data.Array.Accelerate.AST.$fNFDataPreOpenAfun
instance Control.DeepSeq.NFData [Data.Array.Accelerate.AST.PreOpenExp]
  = Data.Array.Accelerate.AST.$fNFDataPreOpenExp
instance Control.DeepSeq.NFData [Data.Array.Accelerate.AST.PreOpenFun]
  = Data.Array.Accelerate.AST.$fNFDataPreOpenFun
instance Data.Array.Accelerate.AST.Stencil [Data.Array.Accelerate.Array.Sugar.:.,
                                            ., (,,)]
  = Data.Array.Accelerate.AST.$fStencil:.a(,,)
instance Data.Array.Accelerate.AST.Stencil [Data.Array.Accelerate.Array.Sugar.:.,
                                            ., (,,,,)]
  = Data.Array.Accelerate.AST.$fStencil:.a(,,,,)
instance Data.Array.Accelerate.AST.Stencil [Data.Array.Accelerate.Array.Sugar.:.,
                                            ., (,,,,,,)]
  = Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,)
instance Data.Array.Accelerate.AST.Stencil [Data.Array.Accelerate.Array.Sugar.:.,
                                            ., (,,,,,,,,)]
  = Data.Array.Accelerate.AST.$fStencil:.a(,,,,,,,,)
instance Data.Array.Accelerate.AST.Stencil [Data.Array.Accelerate.Array.Sugar.:.,
                                            ., (,,)]
  = Data.Array.Accelerate.AST.$fStencil:.e(,,)
instance Data.Array.Accelerate.AST.Stencil [Data.Array.Accelerate.Array.Sugar.:.,
                                            ., (,,,,)]
  = Data.Array.Accelerate.AST.$fStencil:.e(,,,,)
instance Data.Array.Accelerate.AST.Stencil [Data.Array.Accelerate.Array.Sugar.:.,
                                            ., (,,,,,,)]
  = Data.Array.Accelerate.AST.$fStencil:.e(,,,,,,)
instance Data.Array.Accelerate.AST.Stencil [Data.Array.Accelerate.Array.Sugar.:.,
                                            ., (,,,,,,,,)]
  = Data.Array.Accelerate.AST.$fStencil:.e(,,,,,,,,)
"SPEC/Data.Array.Accelerate.AST $fShape:. @ Z" [ALWAYS] forall ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                                             Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fShape:. @ Data.Array.Accelerate.Array.Sugar.Z
                                              $dShape
  = Data.Array.Accelerate.AST.$fStencil:.e(,,)_$s$fShape:.
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

