
==================== FINAL INTERFACE ====================
2017-08-29 05:28:48.254451 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Data.Monoid [orphan module] [family instance module] 8002
  interface hash: 7dc449c4ce00c4dbd02ae3c43a79129d
  ABI hash: 48c19df96f38ffb60b89276e0f717a6f
  export-list hash: 9a748afd1326252cf0665225482b62b3
  orphan hash: f1599d3a2ef1d9e39e9a1e43fa759c07
  flag hash: 4b535e384154f9dbabc73742d07b946f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Monoid.<>
  Data.Monoid.Product{Data.Monoid.Product getProduct}
  Data.Monoid.Sum{Data.Monoid.Sum getSum}
  GHC.Base.Monoid{GHC.Base.mappend GHC.Base.mconcat GHC.Base.mempty}
module dependencies: Data.Array.Accelerate
                     Data.Array.Accelerate.AST Data.Array.Accelerate.Analysis.Hash
                     Data.Array.Accelerate.Analysis.Hash.TH
                     Data.Array.Accelerate.Analysis.Match
                     Data.Array.Accelerate.Analysis.Shape
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique Data.Array.Accelerate.Classes
                     Data.Array.Accelerate.Classes.Bounded
                     Data.Array.Accelerate.Classes.Enum Data.Array.Accelerate.Classes.Eq
                     Data.Array.Accelerate.Classes.Floating
                     Data.Array.Accelerate.Classes.Fractional
                     Data.Array.Accelerate.Classes.FromIntegral
                     Data.Array.Accelerate.Classes.Integral
                     Data.Array.Accelerate.Classes.Num Data.Array.Accelerate.Classes.Ord
                     Data.Array.Accelerate.Classes.Real
                     Data.Array.Accelerate.Classes.RealFloat
                     Data.Array.Accelerate.Classes.RealFrac
                     Data.Array.Accelerate.Classes.ToFloating
                     Data.Array.Accelerate.Data.Bits Data.Array.Accelerate.Debug
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Stats Data.Array.Accelerate.Debug.Timed
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Language Data.Array.Accelerate.Lifetime
                     Data.Array.Accelerate.Lift Data.Array.Accelerate.Prelude
                     Data.Array.Accelerate.Pretty Data.Array.Accelerate.Pretty.Graphviz
                     Data.Array.Accelerate.Pretty.Graphviz.Monad
                     Data.Array.Accelerate.Pretty.Graphviz.Type
                     Data.Array.Accelerate.Pretty.Print Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Smart Data.Array.Accelerate.Trafo
                     Data.Array.Accelerate.Trafo.Algebra
                     Data.Array.Accelerate.Trafo.Base Data.Array.Accelerate.Trafo.Fusion
                     Data.Array.Accelerate.Trafo.Rewrite
                     Data.Array.Accelerate.Trafo.Sharing
                     Data.Array.Accelerate.Trafo.Shrink
                     Data.Array.Accelerate.Trafo.Simplify
                     Data.Array.Accelerate.Trafo.Substitution Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      hashtables-1.2.1.1@hashtables-1.2.1.1-CvCXxmZFzjODUwEtnf4YU7
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Bounded
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Enum
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Eq
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Floating
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Fractional
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Integral
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Num
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Ord
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Real
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.RealFloat
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.RealFrac
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Pretty
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Lift
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Prelude
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Smart
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Base
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Sharing
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Substitution
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  Data.Array.Accelerate c5ccb922c9a8ba9bac33e6d6581e4614
  exports: 4984901c27895514887a0937ecd3a099
import  -/  Data.Array.Accelerate.Array.Sugar 1095a84a969562bd64b7800341e0d23c
  exports: a6dd551b39ab2a3a217fc8c2a6979cd5
  Elt 78f23e81404aaf1e43268a71a575425c
  EltRepr 78f23e81404aaf1e43268a71a575425c
  NilTup 36796631cb3a95a68e6a4dde7e7b2bbe
  SnocTup ef3a739bcf04e48a53d49112dce542ea
  eltType 21a580fd17202e5faf93897dd670e4dd
  fromElt 861af21aa559d711d2643de35185f0ce
  toElt fb51c826f81999ac82f2cc2c37722ff3
import  -/  Data.Array.Accelerate.Classes.Eq b5abcb6d2b1b2f77926ba32e74c56bfd
  /= bfd246b5fc13bff4fe92c8890493d0d4
  == 373f16d63bf36dcf6c5be36579a78740
  Eq 52ed39f384f936d7cab795259d55d4b0
import  -/  Data.Array.Accelerate.Classes.Num 5830cb8ce2e6617e88ff07c7f188117f
  Num 13b6af1dd60ee5505ca10fef83916e95
import  -/  Data.Array.Accelerate.Classes.Ord 838718467444fc3520e0ce057ae54e2a
  < fb7363126baf54c55879edf3cf13ee03
  <= 18b2f445721b05c9c734aa0fa453ef9d
  > 8fb49bee9fb9940140f724b1400aa939
  >= 32c65a49eff2528ed35f750a60be2b01
  Ord 32c955536e40f163bc65c13f16697a02
  max b4116308dc1a98308e130ad57bba074e
  min bc752925f0b7e3e6736f85d788823e2c
import  -/  Data.Array.Accelerate.Lift 454e17a2929036e6ccaa20714d77504c
  Lift f80630fa058bc1fec72a0c728d66e0bc
  Plain 6077ef8139c94a2543619db19e2eb099
  Unlift 0812513d17ebe99933d114cc44033ab7
  lift e513fb85b3ecd1c6d6ecd1c153e280b8
  lift1 e9ecd355db9fb88e5fc27730c536212b
  lift2 0f105eb1a91f17d4847b22d512966d48
  unlift f5a24af2e6ef4bde78101039418077e7
import  -/  Data.Array.Accelerate.Product 8b6346e847887a013338cfe4431f2f5a
  exports: aebe828f4ca2c96d5390ff50126a2bd3
  IsProduct f6af3d33d87461c8507cabb9d14916a8
  ProdRepr 0d61c92e96be18fac6577f3d6512c149
  ProdRsnoc c5ad3ac4029cb1cc567238b2ef51d8cb
  ProdRunit c97f80510e9b3fdf6953382a45833225
  ZeroTupIdx 807a291e8a84844e2c5f3d7ffa83d357
import  -/  Data.Array.Accelerate.Smart c6a471aeed497009ce791e94dc05d100
  exports: 1e3a20050ce25466608a82a26d24d5f0
  Exp 2fd934232a7ed8f151cd01d9504e7b9f
  Exp dff601899922d9e86e5ab6941dfbac5f
  Prj 57e14165c8d4d18324b3351c490c5c28
  Tuple d9b38326707777837f9071d0b8b84579
  constant 8196d527ad9044191643ad6b39858685
import  -/  Data.Array.Accelerate.Type a1c7885f4a79193eaa1f192a9acbec78
  exports: 7aad7ca015788892b1349ebab929b71f
  PairTuple b47308804394be7e1f34db7591c0a9bf
  UnitTuple eae520607dd29fabf0b4e6abfa8934ce
import  -/  base-4.9.1.0:Data.Function 7aca86bfbd92366def5f260e30cb2628
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
89fa3652589761b35c7ab19a6d50676b
  $fEltProduct ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a).
                  @ (Data.Monoid.Product a)
                  (Data.Array.Accelerate.Data.Monoid.$fEltProduct_$cp1Elt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltProduct_$cp2Elt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltProduct_$cp3Elt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltProduct_$cp4Elt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltProduct_$celtType
                     @ a
                     $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltProduct_$cfromElt
                     @ a
                     $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltProduct_$ctoElt
                     @ a
                     $dElt) -}
015f1d20d309638c092b631e7bac366e
  $fEltProduct1 ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Monoid.Product a
    -> ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,1*C1(U),A)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (ds :: Data.Monoid.Product a) ->
                 (GHC.Tuple.(),
                  Data.Array.Accelerate.Array.Sugar.fromElt
                    @ a
                    $dElt
                    ds `cast` (Data.Monoid.N:Product[0] <a>_R))) -}
98424bad118192e1a7d41ed71ce5f7c5
  $fEltProduct10 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1011129974546046706##
                   1402264218767336210##) -}
085eb8a6e34585da908f4eb3413da5d1
  $fEltProduct2 :: a
  {- Strictness: x -}
97936a72953122f785079f1112a27bb7
  $fEltProduct3 ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Array.Data.ArrayElt
      ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*U(U,U,U,U,U,U,U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 Data.Array.Accelerate.Array.Data.$fArrayElt(,)
                   @ ()
                   @ (Data.Array.Accelerate.Array.Sugar.EltRepr a)
                   Data.Array.Accelerate.Array.Data.$fArrayElt()
                   (Data.Array.Accelerate.Array.Sugar.$p4Elt @ a $dElt)) -}
1b10ba232d0a4de9cb11f7514bd921d5
  $fEltProduct4 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Array.Accelerate.Data.Monoid.$fEltProduct7 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       Data.Array.Accelerate.Data.Monoid.$fEltProduct_types
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
0af7a88f8db52c335293e263b2dd841c
  $fEltProduct5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Data.Monoid.$fEltProduct6
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Tuple.$tc()
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
59368210ed942a1153d5b9491bfb5add
  $fEltProduct6 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   15843165073189925570##
                   13730769858450861905##) -}
1dc71e9b07e55d2be3318dd66f7083ef
  $fEltProduct7 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Data.Monoid.$fEltProduct8
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Tuple.$tc(,)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
c528a512431330929b423043d8634d27
  $fEltProduct8 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   17502837480397947244##
                   15872498598114190556##) -}
f14d46e32da4ed58149529cfd8df6736
  $fEltProduct9 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Data.Monoid.$fEltProduct10
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Monoid.$tcProduct
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
ae006530b1a76ac492a4cfea5b7552b7
  $fEltProduct_$celtType ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Monoid.Product a
    -> Data.Array.Accelerate.Type.TupleType
         (Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Product a))
  {- Arity: 1, Strictness: <L,1*U(A,A,A,A,1*C1(U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   lvl18 :: Data.Array.Accelerate.Type.TupleType
                              (Data.Array.Accelerate.Array.Sugar.EltRepr a)
                   = Data.Array.Accelerate.Array.Sugar.eltType
                       @ a
                       $dElt
                       (Data.Array.Accelerate.Data.Monoid.$fEltProduct2 @ a)
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Type.TupleType
                              ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
                   = Data.Array.Accelerate.Type.PairTuple
                       @ ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
                       @ ()
                       @ (Data.Array.Accelerate.Array.Sugar.EltRepr a)
                       @~ <((), Data.Array.Accelerate.Array.Sugar.EltRepr a)>_N
                       Data.Array.Accelerate.Type.$WUnitTuple
                       lvl18
                 } in
                 (\ (ds :: Data.Monoid.Product a) -> lvl19)
                   `cast`
                 (<Data.Monoid.Product a>_R
                  ->_R (Data.Array.Accelerate.Type.TupleType
                          (Sym (Data.Array.Accelerate.Data.Monoid.D:R:EltReprProduct[0]
                                    <a>_N)))_R)) -}
f69687000e4acb2d1a5d8493bf33022a
  $fEltProduct_$cfromElt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Monoid.Product a
    -> Data.Array.Accelerate.Array.Sugar.EltRepr
         (Data.Monoid.Product a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,1*C1(U),A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fEltProduct1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Monoid.Product a>_R
                 ->_R Sub (Sym (Data.Array.Accelerate.Data.Monoid.D:R:EltReprProduct[0]
                                    <a>_N))) -}
54034ec95ef5674254ee87cb2e56687c
  $fEltProduct_$cp1Elt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    GHC.Show.Show (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,1*U(1*U(C(C1(U)),A,A),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 Data.Monoid.$fShowProduct
                   @ a
                   (Data.Array.Accelerate.Array.Sugar.$p1Elt @ a $dElt)) -}
2905f95362ebe5af4e54a8dbc7b22223
  $fEltProduct_$cp2Elt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Typeable.Internal.Typeable (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,1*U(A,1*C1(U),A,A,A,A,A)>,
     Unfolding: (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   ds :: Data.Typeable.Internal.TypeRep
                   = case Data.Array.Accelerate.Data.Monoid.$fEltProduct9 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                     let {
                       types :: [Data.Typeable.Internal.TypeRep]
                       = GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ((Data.Array.Accelerate.Array.Sugar.$p2Elt @ a $dElt)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                                 (GHC.Prim.proxy# @ * @ a))
                              (GHC.Types.[] @ Data.Typeable.Internal.TypeRep))
                     } in
                     case Data.Typeable.Internal.typeRepFingerprints
                            ks
                            types of kt_fps { DEFAULT ->
                     case GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.tyConFingerprint tc)
                               kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                     Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }
                 } in
                 (\ (wild :: GHC.Prim.Proxy# (Data.Monoid.Product a)) -> ds)
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]
                           <*>_N <Data.Monoid.Product a>_N))) -}
d013f91a5beb41c2ca9cd11288ea446f
  $fEltProduct_$cp3Elt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Typeable.Internal.Typeable
      (Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Product a))
  {- Arity: 1, Strictness: <L,1*U(A,A,1*C1(U),A,A,A,A)>,
     Unfolding: (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   ds :: Data.Typeable.Internal.TypeRep
                   = case Data.Array.Accelerate.Data.Monoid.$fEltProduct4 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                     let {
                       types :: [Data.Typeable.Internal.TypeRep]
                       = GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ((Data.Array.Accelerate.Array.Sugar.$p3Elt @ a $dElt)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0]
                                    <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.EltRepr a>_N)
                                 (GHC.Prim.proxy#
                                    @ GHC.Types.*
                                    @ (Data.Array.Accelerate.Array.Sugar.EltRepr a)))
                              (GHC.Types.[] @ Data.Typeable.Internal.TypeRep))
                     } in
                     case Data.Typeable.Internal.typeRepFingerprints
                            ks
                            types of kt_fps { DEFAULT ->
                     case GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.tyConFingerprint tc)
                               kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                     Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }
                 } in
                 (\ (wild :: GHC.Prim.Proxy#
                               ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)) ->
                  ds)
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]
                           <*>_N
                           (Data.Array.Accelerate.Data.Monoid.D:R:EltReprProduct[0]
                                <a>_N)))) -}
3f94380083956dbb43ea4629f7b71758
  $fEltProduct_$cp4Elt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Array.Data.ArrayElt
      (Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Product a))
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*U(U,U,U,U,U,U,U,U,U),A,A,A)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fEltProduct3
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R (Data.Array.Accelerate.Array.Data.ArrayElt
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:EltReprProduct[0]
                                   <a>_N)))_R) -}
cfe64276e3bde71f624e7798f7d80f06
  $fEltProduct_$ctoElt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Product a)
    -> Data.Monoid.Product a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))><S(SL),1*U(1*H,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (ds :: Data.Array.Accelerate.Array.Sugar.EltRepr
                            (Data.Monoid.Product a)) ->
                 case ds
                        `cast`
                      (Sub (Data.Array.Accelerate.Data.Monoid.D:R:EltReprProduct[0]
                                <a>_N)) of wild { (,) ds1 x ->
                 case ds1 of wild1 { () ->
                 (Data.Array.Accelerate.Array.Sugar.toElt @ a $dElt x)
                   `cast`
                 (Sym (Data.Monoid.N:Product[0] <a>_R)) } }) -}
90e617479b8afaedfe54de9ee6974413
  $fEltProduct_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Data.Array.Accelerate.Data.Monoid.$fEltProduct5
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
5853490fc1057f80a4f3e55a65362b4e
  $fEltSum ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a).
                  @ (Data.Monoid.Sum a)
                  (Data.Array.Accelerate.Data.Monoid.$fEltSum_$cp1Elt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltSum_$cp2Elt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltSum_$cp3Elt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltSum_$cp4Elt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltSum_$celtType @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltSum_$cfromElt @ a $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fEltSum_$ctoElt @ a $dElt) -}
164428acec9208eef8b33f6d6d9f8c2d
  $fEltSum1 ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Monoid.Sum a
    -> ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,1*C1(U),A)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (ds :: Data.Monoid.Sum a) ->
                 (GHC.Tuple.(),
                  Data.Array.Accelerate.Array.Sugar.fromElt
                    @ a
                    $dElt
                    ds `cast` (Data.Monoid.N:Sum[0] <a>_R))) -}
b476eebac6c1bf1971e2cf3624071a06
  $fEltSum2 :: a
  {- Strictness: x -}
f2e6079a7ef6e76578f4b9e51030abbb
  $fEltSum3 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Data.Monoid.$fEltProduct8
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Data.Array.Accelerate.Data.Monoid.$fEltProduct_types of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Data.Monoid.$fEltProduct8
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   GHC.Tuple.$tc(,)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Data.Array.Accelerate.Data.Monoid.$fEltProduct_types } } } }) -}
b75e397011afd84a16a7f5b514c062a6
  $fEltSum4 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Data.Monoid.$fEltSum5
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Monoid.$tcSum
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
24accf00bc874a3d8dd24f3d672e7b72
  $fEltSum5 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   2751132239898001783##
                   9388364134189539981##) -}
4dda907e1a6a855b4356bdee6a3b62a6
  $fEltSum_$celtType ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Monoid.Sum a
    -> Data.Array.Accelerate.Type.TupleType
         (Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Sum a))
  {- Arity: 1, Strictness: <L,1*U(A,A,A,A,1*C1(U),A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   lvl18 :: Data.Array.Accelerate.Type.TupleType
                              (Data.Array.Accelerate.Array.Sugar.EltRepr a)
                   = Data.Array.Accelerate.Array.Sugar.eltType
                       @ a
                       $dElt
                       (Data.Array.Accelerate.Data.Monoid.$fEltSum2 @ a)
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Type.TupleType
                              ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
                   = Data.Array.Accelerate.Type.PairTuple
                       @ ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
                       @ ()
                       @ (Data.Array.Accelerate.Array.Sugar.EltRepr a)
                       @~ <((), Data.Array.Accelerate.Array.Sugar.EltRepr a)>_N
                       Data.Array.Accelerate.Type.$WUnitTuple
                       lvl18
                 } in
                 (\ (ds :: Data.Monoid.Sum a) -> lvl19)
                   `cast`
                 (<Data.Monoid.Sum a>_R
                  ->_R (Data.Array.Accelerate.Type.TupleType
                          (Sym (Data.Array.Accelerate.Data.Monoid.D:R:EltReprSum[0]
                                    <a>_N)))_R)) -}
011b3d55c265a48edf57e3217fc0bee3
  $fEltSum_$cfromElt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Monoid.Sum a
    -> Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Sum a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,1*C1(U),A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fEltSum1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Monoid.Sum a>_R
                 ->_R Sub (Sym (Data.Array.Accelerate.Data.Monoid.D:R:EltReprSum[0]
                                    <a>_N))) -}
b4564f6bf7aa9c56c156746a8709965d
  $fEltSum_$cp1Elt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    GHC.Show.Show (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,1*U(1*U(C(C1(U)),A,A),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 Data.Monoid.$fShowSum
                   @ a
                   (Data.Array.Accelerate.Array.Sugar.$p1Elt @ a $dElt)) -}
364bc0496c71ff40f90c7ac37bddcc0c
  $fEltSum_$cp2Elt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Typeable.Internal.Typeable (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,1*U(A,1*C1(U),A,A,A,A,A)>,
     Unfolding: (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   ds :: Data.Typeable.Internal.TypeRep
                   = case Data.Array.Accelerate.Data.Monoid.$fEltSum4 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                     let {
                       types :: [Data.Typeable.Internal.TypeRep]
                       = GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ((Data.Array.Accelerate.Array.Sugar.$p2Elt @ a $dElt)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                                 (GHC.Prim.proxy# @ * @ a))
                              (GHC.Types.[] @ Data.Typeable.Internal.TypeRep))
                     } in
                     case Data.Typeable.Internal.typeRepFingerprints
                            ks
                            types of kt_fps { DEFAULT ->
                     case GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.tyConFingerprint tc)
                               kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                     Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }
                 } in
                 (\ (wild :: GHC.Prim.Proxy# (Data.Monoid.Sum a)) -> ds)
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]
                           <*>_N <Data.Monoid.Sum a>_N))) -}
0635b61934e97c56399a5ba2f5e7bbc0
  $fEltSum_$cp3Elt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Typeable.Internal.Typeable
      (Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Sum a))
  {- Arity: 1, Strictness: <L,1*U(A,A,1*C1(U),A,A,A,A)>,
     Unfolding: (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   ds :: Data.Typeable.Internal.TypeRep
                   = case Data.Array.Accelerate.Data.Monoid.$fEltSum3 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                     let {
                       types :: [Data.Typeable.Internal.TypeRep]
                       = GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ((Data.Array.Accelerate.Array.Sugar.$p3Elt @ a $dElt)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0]
                                    <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.EltRepr a>_N)
                                 (GHC.Prim.proxy#
                                    @ GHC.Types.*
                                    @ (Data.Array.Accelerate.Array.Sugar.EltRepr a)))
                              (GHC.Types.[] @ Data.Typeable.Internal.TypeRep))
                     } in
                     case Data.Typeable.Internal.typeRepFingerprints
                            ks
                            types of kt_fps { DEFAULT ->
                     case GHC.Fingerprint.fingerprintFingerprints
                            (GHC.Types.:
                               @ GHC.Fingerprint.Type.Fingerprint
                               (Data.Typeable.Internal.tyConFingerprint tc)
                               kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                     Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }
                 } in
                 (\ (wild :: GHC.Prim.Proxy#
                               ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)) ->
                  ds)
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]
                           <*>_N
                           (Data.Array.Accelerate.Data.Monoid.D:R:EltReprSum[0] <a>_N)))) -}
b6a8411e6f20d0c4fb22e91d1f9af429
  $fEltSum_$cp4Elt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Array.Data.ArrayElt
      (Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Sum a))
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*U(U,U,U,U,U,U,U,U,U),A,A,A)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fEltProduct3
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R (Data.Array.Accelerate.Array.Data.ArrayElt
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:EltReprSum[0]
                                   <a>_N)))_R) -}
99311674409e659699f0704744466c61
  $fEltSum_$ctoElt ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Sum a)
    -> Data.Monoid.Sum a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))><S(SL),1*U(1*H,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (ds :: Data.Array.Accelerate.Array.Sugar.EltRepr
                            (Data.Monoid.Sum a)) ->
                 case ds
                        `cast`
                      (Sub (Data.Array.Accelerate.Data.Monoid.D:R:EltReprSum[0]
                                <a>_N)) of wild { (,) ds1 x ->
                 case ds1 of wild1 { () ->
                 (Data.Array.Accelerate.Array.Sugar.toElt @ a $dElt x)
                   `cast`
                 (Sym (Data.Monoid.N:Sum[0] <a>_R)) } }) -}
aacc3a3f628268df1089ade3d9f2f0a7
  $fEqProduct ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Classes.Eq.Eq (Data.Monoid.Product a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a).
                  @ (Data.Monoid.Product a)
                  (Data.Array.Accelerate.Data.Monoid.$fEqProduct_$cp1Eq @ a $dEq)
                  (Data.Array.Accelerate.Data.Monoid.$fEqProduct_$c== @ a $dEq)
                  (Data.Array.Accelerate.Data.Monoid.$fEqProduct_$c/= @ a $dEq) -}
98d9beb7a68c2765f80683cfc27dd00a
  $fEqProduct_$c/= ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLC(C(S))),U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp
                              (Data.Monoid.Product a)) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Eq./=
                   @ a
                   $dEq
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
53117734859abc22aed47cdf8b892174
  $fEqProduct_$c== ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LC(C(S))L),U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp
                              (Data.Monoid.Product a)) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Eq.==
                   @ a
                   $dEq
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
40adcbcc1d044e1d0f00da8f7181c972
  $fEqProduct_$cp1Eq ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
  {- Arity: 1,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a) ->
                 Data.Array.Accelerate.Data.Monoid.$fEltProduct
                   @ a
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq)) -}
5fff3ca5e19ae5e9417e45b2ddb8c698
  $fEqSum ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Classes.Eq.Eq (Data.Monoid.Sum a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a).
                  @ (Data.Monoid.Sum a)
                  (Data.Array.Accelerate.Data.Monoid.$fEqSum_$cp1Eq @ a $dEq)
                  (Data.Array.Accelerate.Data.Monoid.$fEqSum_$c== @ a $dEq)
                  (Data.Array.Accelerate.Data.Monoid.$fEqSum_$c/= @ a $dEq) -}
c2750c8c2ac2554cce84594ff4eff75c
  $fEqSum_$c/= ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLC(C(S))),U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Eq./=
                   @ a
                   $dEq
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
6acdb8b63503762deffc5161eede05b2
  $fEqSum_$c== ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LC(C(S))L),U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Eq.==
                   @ a
                   $dEq
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
60655e27019363c9dd305ff7762146ff
  $fEqSum_$cp1Eq ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
  {- Arity: 1,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a) ->
                 Data.Array.Accelerate.Data.Monoid.$fEltSum
                   @ a
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq)) -}
aa1bc9bf7b39373c1da93ad0ef1cb5ac
  $fIsProductEltProduct ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a).
                  @ Data.Array.Accelerate.Array.Sugar.Elt
                  @ (Data.Monoid.Product a)
                  (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct_$cfromProd
                     @ a
                     $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct_$ctoProd
                     @ a
                     $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct_$cprod
                     @ a
                     $dElt) -}
3de7fdda47682deaaa5d8bb7ff1d879c
  $fIsProductEltProduct1 ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Monoid.Product a
    -> Data.Array.Accelerate.Product.ProdR
         Data.Array.Accelerate.Array.Sugar.Elt ((), a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                   (ds :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                   (ds1 :: Data.Monoid.Product a) ->
                 Data.Array.Accelerate.Product.ProdRsnoc
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ ((), a)
                   @ a
                   @ ()
                   @~ <((), a)>_N
                   $dElt
                   (Data.Array.Accelerate.Product.$WProdRunit
                      @ Data.Array.Accelerate.Array.Sugar.Elt)) -}
7d7a1f09b6ae060e0b6f3455c91f360d
  $fIsProductEltProduct2 ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Monoid.Product a -> ((), a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>m,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                   (ds :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                   (ds1 :: Data.Monoid.Product a) ->
                 (GHC.Tuple.(), ds1 `cast` (Data.Monoid.N:Product[0] <a>_R))) -}
21ba0d2dab05985161d9936f1d7cfce5
  $fIsProductEltProduct_$cfromProd ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Monoid.Product a
    -> Data.Array.Accelerate.Product.ProdRepr (Data.Monoid.Product a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct2
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R forall (proxy :: <(* -> GHC.Types.Constraint) -> *>_N).
                      <proxy Data.Array.Accelerate.Array.Sugar.Elt>_R
                      ->_R <Data.Monoid.Product a>_R
                      ->_R Sub (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                         <a>_N))) -}
13bdf55123d9451d2cc4990edc317030
  $fIsProductEltProduct_$cprod ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Monoid.Product a
    -> Data.Array.Accelerate.Product.ProdR
         Data.Array.Accelerate.Array.Sugar.Elt
         (Data.Array.Accelerate.Product.ProdRepr (Data.Monoid.Product a))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R forall (proxy :: <(* -> GHC.Types.Constraint) -> *>_N).
                      <proxy Data.Array.Accelerate.Array.Sugar.Elt>_R
                      ->_R <Data.Monoid.Product a>_R
                      ->_R (Data.Array.Accelerate.Product.ProdR
                              <Data.Array.Accelerate.Array.Sugar.Elt>_R
                              (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                        <a>_N)))_R) -}
ded51e9d3d965840a9b3df630dc1e9fe
  $fIsProductEltProduct_$ctoProd ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Array.Accelerate.Product.ProdRepr (Data.Monoid.Product a)
    -> Data.Monoid.Product a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,A><S(SS),1*U(1*H,1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                   (ds :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                   (ds1 :: Data.Array.Accelerate.Product.ProdRepr
                             (Data.Monoid.Product a)) ->
                 case ds1
                        `cast`
                      (Sub (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                <a>_N)) of wild { (,) ds2 a1 ->
                 case ds2 of wild1 { () ->
                 a1 `cast` (Sym (Data.Monoid.N:Product[0] <a>_R)) } }) -}
80967a4906b159d15ea0268b86cb1c94
  $fIsProductEltSum ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a).
                  @ Data.Array.Accelerate.Array.Sugar.Elt
                  @ (Data.Monoid.Sum a)
                  (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum_$cfromProd
                     @ a
                     $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum_$ctoProd
                     @ a
                     $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum_$cprod
                     @ a
                     $dElt) -}
3e5e0abae0733187332bf1adde3c9b3e
  $fIsProductEltSum1 ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Monoid.Sum a
    -> Data.Array.Accelerate.Product.ProdR
         Data.Array.Accelerate.Array.Sugar.Elt ((), a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                   (ds :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                   (ds1 :: Data.Monoid.Sum a) ->
                 Data.Array.Accelerate.Product.ProdRsnoc
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ ((), a)
                   @ a
                   @ ()
                   @~ <((), a)>_N
                   $dElt
                   (Data.Array.Accelerate.Product.$WProdRunit
                      @ Data.Array.Accelerate.Array.Sugar.Elt)) -}
41513c025e512c437546169e12c36d54
  $fIsProductEltSum2 ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Monoid.Sum a -> ((), a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>m,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                   (ds :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                   (ds1 :: Data.Monoid.Sum a) ->
                 (GHC.Tuple.(), ds1 `cast` (Data.Monoid.N:Sum[0] <a>_R))) -}
da6736e180b26382c2439ca483fe7e82
  $fIsProductEltSum_$cfromProd ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Monoid.Sum a
    -> Data.Array.Accelerate.Product.ProdRepr (Data.Monoid.Sum a)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum2
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R forall (proxy :: <(* -> GHC.Types.Constraint) -> *>_N).
                      <proxy Data.Array.Accelerate.Array.Sugar.Elt>_R
                      ->_R <Data.Monoid.Sum a>_R
                      ->_R Sub (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                         <a>_N))) -}
954ad5b020a090bf2bf00f27ad2c423d
  $fIsProductEltSum_$cprod ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Monoid.Sum a
    -> Data.Array.Accelerate.Product.ProdR
         Data.Array.Accelerate.Array.Sugar.Elt
         (Data.Array.Accelerate.Product.ProdRepr (Data.Monoid.Sum a))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R forall (proxy :: <(* -> GHC.Types.Constraint) -> *>_N).
                      <proxy Data.Array.Accelerate.Array.Sugar.Elt>_R
                      ->_R <Data.Monoid.Sum a>_R
                      ->_R (Data.Array.Accelerate.Product.ProdR
                              <Data.Array.Accelerate.Array.Sugar.Elt>_R
                              (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                        <a>_N)))_R) -}
422f336b2842ae226ae6f6d3e60b369a
  $fIsProductEltSum_$ctoProd ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    forall (proxy :: (* -> GHC.Types.Constraint) -> *).
    proxy Data.Array.Accelerate.Array.Sugar.Elt
    -> Data.Array.Accelerate.Product.ProdRepr (Data.Monoid.Sum a)
    -> Data.Monoid.Sum a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,A><S(SS),1*U(1*H,1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   @ (proxy :: (* -> GHC.Types.Constraint) -> *)
                   (ds :: proxy Data.Array.Accelerate.Array.Sugar.Elt)
                   (ds1 :: Data.Array.Accelerate.Product.ProdRepr
                             (Data.Monoid.Sum a)) ->
                 case ds1
                        `cast`
                      (Sub (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                <a>_N)) of wild { (,) ds2 a1 ->
                 case ds2 of wild1 { () ->
                 a1 `cast` (Sym (Data.Monoid.N:Sum[0] <a>_R)) } }) -}
a8a80650ff15d5c71f6a58c2b549113a
  $fLiftExpProduct ::
    (Data.Array.Accelerate.Lift.Lift Data.Array.Accelerate.Smart.Exp a,
     Data.Array.Accelerate.Array.Sugar.Elt
       (Data.Array.Accelerate.Lift.Plain a)) =>
    Data.Array.Accelerate.Lift.Lift
      Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  DFunId
  {- Arity: 2,
     Strictness: <L,C(U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Array.Accelerate.Data.Monoid.$fLiftExpProduct_$clift
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Lift.Lift
                    Data.Array.Accelerate.Smart.Exp a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt
                         (Data.Array.Accelerate.Lift.Plain a)>_R
                 ->_R Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                               <Data.Array.Accelerate.Smart.Exp>_N <Data.Monoid.Product a>_N)) -}
6f3073343cdb3381ffaa2499c553d9c9
  $fLiftExpProduct_$clift ::
    (Data.Array.Accelerate.Lift.Lift Data.Array.Accelerate.Smart.Exp a,
     Data.Array.Accelerate.Array.Sugar.Elt
       (Data.Array.Accelerate.Lift.Plain a)) =>
    Data.Monoid.Product a
    -> Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain (Data.Monoid.Product a))
  {- Arity: 2,
     Strictness: <L,C(U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ a
                   ($dLift :: Data.Array.Accelerate.Lift.Lift
                                Data.Array.Accelerate.Smart.Exp a)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Array.Accelerate.Lift.Plain a)) ->
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product (Data.Array.Accelerate.Lift.Plain a))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain a)
                       $dElt
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product (Data.Array.Accelerate.Lift.Plain a))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain a)
                       $dElt
                 } in
                 (\ (ds :: Data.Monoid.Product a) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product (Data.Array.Accelerate.Lift.Plain a))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((), Data.Array.Accelerate.Lift.Plain a)
                       @ (Data.Array.Accelerate.Lift.Plain a)
                       @ ()
                       @~ <((), Data.Array.Accelerate.Lift.Plain a)>_N
                       $dElt
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       ($dLift
                          `cast`
                        (Data.Array.Accelerate.Lift.N:Lift[0]
                             <Data.Array.Accelerate.Smart.Exp>_N <a>_N)
                          ds `cast` (Data.Monoid.N:Product[0] <a>_R)))
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain a>_N)))_R)
                   `cast`
                 (<Data.Monoid.Product a>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                                                            <a>_N)))) -}
a248c5a64ab1d463b46c4504ecf42381
  $fLiftExpSum ::
    (Data.Array.Accelerate.Lift.Lift Data.Array.Accelerate.Smart.Exp a,
     Data.Array.Accelerate.Array.Sugar.Elt
       (Data.Array.Accelerate.Lift.Plain a)) =>
    Data.Array.Accelerate.Lift.Lift
      Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  DFunId
  {- Arity: 2,
     Strictness: <L,C(U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Array.Accelerate.Data.Monoid.$fLiftExpSum_$clift
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Lift.Lift
                    Data.Array.Accelerate.Smart.Exp a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt
                         (Data.Array.Accelerate.Lift.Plain a)>_R
                 ->_R Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                               <Data.Array.Accelerate.Smart.Exp>_N <Data.Monoid.Sum a>_N)) -}
b53922ccd9d6b86558172f88a65fd80f
  $fLiftExpSum_$clift ::
    (Data.Array.Accelerate.Lift.Lift Data.Array.Accelerate.Smart.Exp a,
     Data.Array.Accelerate.Array.Sugar.Elt
       (Data.Array.Accelerate.Lift.Plain a)) =>
    Data.Monoid.Sum a
    -> Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain (Data.Monoid.Sum a))
  {- Arity: 2,
     Strictness: <L,C(U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ a
                   ($dLift :: Data.Array.Accelerate.Lift.Lift
                                Data.Array.Accelerate.Smart.Exp a)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Array.Accelerate.Lift.Plain a)) ->
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum (Data.Array.Accelerate.Lift.Plain a))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain a)
                       $dElt
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum (Data.Array.Accelerate.Lift.Plain a))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain a)
                       $dElt
                 } in
                 (\ (ds :: Data.Monoid.Sum a) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum (Data.Array.Accelerate.Lift.Plain a))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((), Data.Array.Accelerate.Lift.Plain a)
                       @ (Data.Array.Accelerate.Lift.Plain a)
                       @ ()
                       @~ <((), Data.Array.Accelerate.Lift.Plain a)>_N
                       $dElt
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       ($dLift
                          `cast`
                        (Data.Array.Accelerate.Lift.N:Lift[0]
                             <Data.Array.Accelerate.Smart.Exp>_N <a>_N)
                          ds `cast` (Data.Monoid.N:Sum[0] <a>_R)))
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain a>_N)))_R)
                   `cast`
                 (<Data.Monoid.Sum a>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                                                            <a>_N)))) -}
f8e6baf12f78e2da1d8058ef47bd7ead
  $fMonoidExp ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)) =>
    GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp (a, b, c, d, e))
  DFunId
  {- Arity: 10,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                      ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                      ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                      ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                      ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                      ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                      ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                      ($dMonoid2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                      ($dMonoid3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d))
                      ($dMonoid4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)).
                  @ (Data.Array.Accelerate.Smart.Exp (a, b, c, d, e))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp_$cmempty
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     $dElt
                     $dElt1
                     $dElt2
                     $dElt3
                     $dElt4
                     $dMonoid
                     $dMonoid1
                     $dMonoid2
                     $dMonoid3
                     $dMonoid4)
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp_$cmappend
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     $dElt
                     $dElt1
                     $dElt2
                     $dElt3
                     $dElt4
                     $dMonoid
                     $dMonoid1
                     $dMonoid2
                     $dMonoid3
                     $dMonoid4)
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp_$cmconcat
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     $dElt
                     $dElt1
                     $dElt2
                     $dElt3
                     $dElt4
                     $dMonoid
                     $dMonoid1
                     $dMonoid2
                     $dMonoid3
                     $dMonoid4) -}
ed4ebd995d17eb38b728ff4e4dc4b9f1
  $fMonoidExp0 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) =>
    GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp (a, b, c, d))
  DFunId
  {- Arity: 8,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                      ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                      ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                      ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                      ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                      ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                      ($dMonoid2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                      ($dMonoid3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)).
                  @ (Data.Array.Accelerate.Smart.Exp (a, b, c, d))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp0_$cmempty
                     @ a
                     @ b
                     @ c
                     @ d
                     $dElt
                     $dElt1
                     $dElt2
                     $dElt3
                     $dMonoid
                     $dMonoid1
                     $dMonoid2
                     $dMonoid3)
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp0_$cmappend
                     @ a
                     @ b
                     @ c
                     @ d
                     $dElt
                     $dElt1
                     $dElt2
                     $dElt3
                     $dMonoid
                     $dMonoid1
                     $dMonoid2
                     $dMonoid3)
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp0_$cmconcat
                     @ a
                     @ b
                     @ c
                     @ d
                     $dElt
                     $dElt1
                     $dElt2
                     $dElt3
                     $dMonoid
                     $dMonoid1
                     $dMonoid2
                     $dMonoid3) -}
04f3532995c60c71256a06d0b0ee65c3
  $fMonoidExp0_$cmappend ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
  {- Arity: 10,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp9
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt c>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt d>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                      (Data.Array.Accelerate.Lift.D:R:Plain(,,,)[0]
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              d>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              c>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              b>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              a>_N)
                                                                      ((,,,)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <a>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <b>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <c>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <d>_N))_N)) -}
cd5ee5ba9abe5a7bb7a2c29316e5e047
  $fMonoidExp0_$cmconcat ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) =>
    [Data.Array.Accelerate.Smart.Exp (a, b, c, d)]
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
  {- Arity: 9,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   ($dMonoid2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   ($dMonoid3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d))
                   (eta :: [Data.Array.Accelerate.Smart.Exp (a, b, c, d)]) ->
                 let {
                   z :: Data.Array.Accelerate.Smart.PreExp
                          Data.Array.Accelerate.Smart.Acc
                          Data.Array.Accelerate.Smart.Exp
                          (Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a,
                              Data.Array.Accelerate.Smart.Exp b,
                              Data.Array.Accelerate.Smart.Exp c,
                              Data.Array.Accelerate.Smart.Exp d))
                   = case Data.Array.Accelerate.Data.Monoid.$w$cmempty
                            @ a
                            @ b
                            @ c
                            @ d
                            $dElt
                            $dElt1
                            $dElt2
                            $dElt3
                            $dMonoid
                            $dMonoid1
                            $dMonoid2
                            $dMonoid3 of ww { (#,,#) ww1 ww2 ww3 ->
                     Data.Array.Accelerate.Smart.Tuple
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a,
                             Data.Array.Accelerate.Smart.Exp b,
                             Data.Array.Accelerate.Smart.Exp c,
                             Data.Array.Accelerate.Smart.Exp d))
                       ww1
                       ww2
                       ww3 }
                 } in
                 letrec {
                   go :: [Data.Array.Accelerate.Smart.Exp (a, b, c, d)]
                         -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Array.Accelerate.Smart.Exp (a, b, c, d)]) ->
                     case ds of wild {
                       []
                       -> z `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                           (Data.Array.Accelerate.Lift.D:R:Plain(,,,)[0]
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   d>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   c>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   b>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   a>_N)
                                                                           ((,,,)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <a>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <b>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <c>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <d>_N))_N))
                       : y ys
                       -> case Data.Array.Accelerate.Data.Monoid.$w$cmappend
                                 @ a
                                 @ b
                                 @ c
                                 @ d
                                 $dElt
                                 $dElt1
                                 $dElt2
                                 $dElt3
                                 $dMonoid
                                 $dMonoid1
                                 $dMonoid2
                                 $dMonoid3
                                 y
                                 (go ys) of ww { (#,,#) ww1 ww2 ww3 ->
                          (Data.Array.Accelerate.Smart.Tuple
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a,
                                   Data.Array.Accelerate.Smart.Exp b,
                                   Data.Array.Accelerate.Smart.Exp c,
                                   Data.Array.Accelerate.Smart.Exp d))
                             ww1
                             ww2
                             ww3)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                           (Data.Array.Accelerate.Lift.D:R:Plain(,,,)[0]
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   d>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   c>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   b>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   a>_N)
                                                                           ((,,,)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <a>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <b>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <c>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <d>_N))_N)) } }
                 } in
                 go eta) -}
51156f2fec05feb8583932b1e7e828f6
  $fMonoidExp0_$cmempty ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d)
  {- Arity: 8,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>m3,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp10
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt c>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt d>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                      (Data.Array.Accelerate.Lift.D:R:Plain(,,,)[0]
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              d>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              c>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              b>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              a>_N)
                                                                      ((,,,)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <a>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <b>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <c>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <d>_N))_N)) -}
a1ed809292936f7aa5e16689aca4577a
  $fMonoidExp1 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)) =>
    GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp (a, b, c))
  DFunId
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                      ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                      ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                      ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                      ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                      ($dMonoid2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)).
                  @ (Data.Array.Accelerate.Smart.Exp (a, b, c))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp1_$cmempty
                     @ a
                     @ b
                     @ c
                     $dElt
                     $dElt1
                     $dElt2
                     $dMonoid
                     $dMonoid1
                     $dMonoid2)
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp1_$cmappend
                     @ a
                     @ b
                     @ c
                     $dElt
                     $dElt1
                     $dElt2
                     $dMonoid
                     $dMonoid1
                     $dMonoid2)
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp1_$cmconcat
                     @ a
                     @ b
                     @ c
                     $dElt
                     $dElt1
                     $dElt2
                     $dMonoid
                     $dMonoid1
                     $dMonoid2) -}
d0063d5349862c84c077f88df1bdf019
  $fMonoidExp10 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) =>
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp a,
          Data.Array.Accelerate.Smart.Exp b,
          Data.Array.Accelerate.Smart.Exp c,
          Data.Array.Accelerate.Smart.Exp d))
  {- Arity: 8,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>m3,
     Inline: INLINE[0],
     Unfolding: InlineRule (8, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (w3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   (w4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w5 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w6 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   (w7 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) ->
                 case Data.Array.Accelerate.Data.Monoid.$w$cmempty
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Smart.Tuple
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp a,
                         Data.Array.Accelerate.Smart.Exp b,
                         Data.Array.Accelerate.Smart.Exp c,
                         Data.Array.Accelerate.Smart.Exp d))
                   ww1
                   ww2
                   ww3 }) -}
9a418aa0b9c7aa5951ce6b5aa1cc2a51
  $fMonoidExp11 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp a,
             Data.Array.Accelerate.Smart.Exp b,
             Data.Array.Accelerate.Smart.Exp c))
  {- Arity: 8,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>m3,
     Inline: INLINE[0],
     Unfolding: InlineRule (8, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (w3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w5 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   (w6 :: Data.Array.Accelerate.Smart.Exp (a, b, c))
                   (w7 :: Data.Array.Accelerate.Smart.Exp (a, b, c)) ->
                 case Data.Array.Accelerate.Data.Monoid.$w$cmappend1
                        @ a
                        @ b
                        @ c
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Smart.Tuple
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp a,
                         Data.Array.Accelerate.Smart.Exp b,
                         Data.Array.Accelerate.Smart.Exp c))
                   ww1
                   ww2
                   ww3 }) -}
1e6c0187dfa5e70297e475b22d2d4266
  $fMonoidExp12 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)) =>
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp a,
          Data.Array.Accelerate.Smart.Exp b,
          Data.Array.Accelerate.Smart.Exp c))
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>m3,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (w3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w5 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)) ->
                 Data.Array.Accelerate.Smart.Tuple
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp a,
                         Data.Array.Accelerate.Smart.Exp b,
                         Data.Array.Accelerate.Smart.Exp c))
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp a))
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp b))
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp c))
                      w `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                      w1
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                      w2
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                <Data.Array.Accelerate.Smart.Exp c>_N
                                <Data.Array.Accelerate.Smart.Exp b>_N
                                <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                   (Data.Array.Accelerate.Product.$fIsProductcst(,,)
                      @ Data.Array.Accelerate.Array.Sugar.Elt
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp a))
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp b))
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp c))
                      w `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                      w1
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                      w2
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                     `cast`
                   (Data.Array.Accelerate.Product.IsProduct
                      <Data.Array.Accelerate.Array.Sugar.Elt>_N
                      (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                <Data.Array.Accelerate.Smart.Exp c>_N
                                <Data.Array.Accelerate.Smart.Exp b>_N
                                <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                   (Data.Array.Accelerate.Array.Sugar.SnocTup
                      @ Data.Array.Accelerate.Smart.Exp
                      @ ((((),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b)),
                         Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp c))
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp c))
                      @ (((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)),
                         Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp b))
                      @~ <((((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b)),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp c))>_N
                      w2
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))
                         @ (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))
                         @ ((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))
                         @~ <(((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp b))>_N
                         w1
                           `cast`
                         (Data.Array.Accelerate.Array.Sugar.Elt
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a))
                            @ (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a))
                            @ ()
                            @~ <((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp a))>_N
                            w `cast`
                            (Data.Array.Accelerate.Array.Sugar.Elt
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp a) w3)
                              `cast`
                            (Data.Array.Accelerate.Smart.Exp
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                         (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp b) w4)
                           `cast`
                         (Data.Array.Accelerate.Smart.Exp
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                      (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp c) w5)
                        `cast`
                      (Data.Array.Accelerate.Smart.Exp
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Tuple
                      <Data.Array.Accelerate.Smart.Exp>_R
                      (Trans
                           ((,)
                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                        <Data.Array.Accelerate.Lift.Plain
                                           (Data.Array.Accelerate.Smart.Exp b)>_N
                                        <Data.Array.Accelerate.Lift.Plain
                                           (Data.Array.Accelerate.Smart.Exp a)>_N))
                              <Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c)>_N)_N
                           (Trans
                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                          <Data.Array.Accelerate.Lift.Plain
                                             (Data.Array.Accelerate.Smart.Exp c)>_N
                                          <Data.Array.Accelerate.Lift.Plain
                                             (Data.Array.Accelerate.Smart.Exp b)>_N
                                          <Data.Array.Accelerate.Lift.Plain
                                             (Data.Array.Accelerate.Smart.Exp a)>_N))
                                (Data.Array.Accelerate.Product.ProdRepr
                                   (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                             <Data.Array.Accelerate.Smart.Exp c>_N
                                             <Data.Array.Accelerate.Smart.Exp b>_N
                                             <Data.Array.Accelerate.Smart.Exp a>_N)))_N)))_R) -}
e00f215ae7ef1d3f21117196b03eafcb
  $fMonoidExp13 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp a,
             Data.Array.Accelerate.Smart.Exp b))
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>m3,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w4 :: Data.Array.Accelerate.Smart.Exp (a, b))
                   (w5 :: Data.Array.Accelerate.Smart.Exp (a, b)) ->
                 case Data.Array.Accelerate.Data.Monoid.$w$cmappend2
                        @ a
                        @ b
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Smart.Tuple
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp a,
                         Data.Array.Accelerate.Smart.Exp b))
                   ww1
                   ww2
                   ww3 }) -}
ad8a7a26462b01e951677d7fc1487ef1
  $fMonoidExp14 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)) =>
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp a,
          Data.Array.Accelerate.Smart.Exp b))
  {- Arity: 4,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>m3,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)) ->
                 Data.Array.Accelerate.Smart.Tuple
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp a,
                         Data.Array.Accelerate.Smart.Exp b))
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp a))
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp b))
                      w `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                      w1
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                <Data.Array.Accelerate.Smart.Exp b>_N
                                <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                   (Data.Array.Accelerate.Product.$fIsProductcst(,)
                      @ Data.Array.Accelerate.Array.Sugar.Elt
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp a))
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp b))
                      w `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                      w1
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                     `cast`
                   (Data.Array.Accelerate.Product.IsProduct
                      <Data.Array.Accelerate.Array.Sugar.Elt>_N
                      (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                <Data.Array.Accelerate.Smart.Exp b>_N
                                <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                   (Data.Array.Accelerate.Array.Sugar.SnocTup
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)),
                         Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp b))
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp b))
                      @ ((),
                         Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp a))
                      @~ <(((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a)),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp b))>_N
                      w1
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ ((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))
                         @ (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))
                         @ ()
                         @~ <((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a))>_N
                         w `cast`
                         (Data.Array.Accelerate.Array.Sugar.Elt
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                         (Data.Array.Accelerate.Array.Sugar.$WNilTup
                            @ Data.Array.Accelerate.Smart.Exp)
                         (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp a) w2)
                           `cast`
                         (Data.Array.Accelerate.Smart.Exp
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp b) w3)
                        `cast`
                      (Data.Array.Accelerate.Smart.Exp
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Tuple
                      <Data.Array.Accelerate.Smart.Exp>_R
                      (Trans
                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                     <Data.Array.Accelerate.Lift.Plain
                                        (Data.Array.Accelerate.Smart.Exp b)>_N
                                     <Data.Array.Accelerate.Lift.Plain
                                        (Data.Array.Accelerate.Smart.Exp a)>_N))
                           (Data.Array.Accelerate.Product.ProdRepr
                              (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                        <Data.Array.Accelerate.Smart.Exp b>_N
                                        <Data.Array.Accelerate.Smart.Exp a>_N)))_N))_R) -}
30a47b386b0cca88ce7fd53e9b03c6aa
  $fMonoidExp15 ::
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp ()
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ ()
                   Data.Array.Accelerate.Array.Sugar.$fElt()
                   GHC.Tuple.()) -}
ef8512806346d15e741135e776bd48d2
  $fMonoidExp16 ::
    Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp ()
  {- Arity: 2, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Data.Array.Accelerate.Smart.Exp ())
                   (ds1 :: Data.Array.Accelerate.Smart.Exp ()) ->
                 Data.Array.Accelerate.Data.Monoid.$fMonoidExp15) -}
05e66a501175967cee7b7d2d8af06348
  $fMonoidExp17 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
b8841eb76fd36e50460528882515ccf7
  $fMonoidExp18 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
9229b1cc8d68be5ab1edcd7c14c12cb3
  $fMonoidExp1_$cmappend ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
  {- Arity: 8,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp11
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt c>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                      (Data.Array.Accelerate.Lift.D:R:Plain(,,)[0]
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              c>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              b>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              a>_N)
                                                                      ((,,)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <a>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <b>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <c>_N))_N)) -}
2f997b783789033fd57470adf39866b3
  $fMonoidExp1_$cmconcat ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)) =>
    [Data.Array.Accelerate.Smart.Exp (a, b, c)]
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
  {- Arity: 7,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   ($dMonoid2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   (eta :: [Data.Array.Accelerate.Smart.Exp (a, b, c)]) ->
                 let {
                   z :: Data.Array.Accelerate.Array.Sugar.Elt
                          (Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp b),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp c))
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                 } in
                 let {
                   z1 :: Data.Array.Accelerate.Product.IsProduct
                           Data.Array.Accelerate.Array.Sugar.Elt
                           (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp c))
                   = Data.Array.Accelerate.Product.$fIsProductcst(,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                 } in
                 let {
                   z2 :: Data.Array.Accelerate.Smart.Exp a
                   = GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp a) $dMonoid
                 } in
                 let {
                   z3 :: Data.Array.Accelerate.Array.Sugar.Tuple
                           Data.Array.Accelerate.Smart.Exp
                           ((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))
                   = Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       z2
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   z4 :: Data.Array.Accelerate.Smart.Exp b
                   = GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp b) $dMonoid1
                 } in
                 let {
                   z5 :: Data.Array.Accelerate.Array.Sugar.Tuple
                           Data.Array.Accelerate.Smart.Exp
                           (((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))
                   = Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (((),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @~ <(((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))>_N
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       z3
                       z4
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                 } in
                 let {
                   z6 :: Data.Array.Accelerate.Smart.Exp c
                   = GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp c) $dMonoid2
                 } in
                 let {
                   z7 :: Data.Array.Accelerate.Array.Sugar.Tuple
                           Data.Array.Accelerate.Smart.Exp
                           ((((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp c))
                   = Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a)),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp b)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (((),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @~ <((((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp c))>_N
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       z5
                       z6
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                 } in
                 let {
                   z8 :: Data.Array.Accelerate.Smart.PreExp
                           Data.Array.Accelerate.Smart.Acc
                           Data.Array.Accelerate.Smart.Exp
                           (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a,
                               Data.Array.Accelerate.Smart.Exp b,
                               Data.Array.Accelerate.Smart.Exp c))
                   = Data.Array.Accelerate.Smart.Tuple
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a,
                             Data.Array.Accelerate.Smart.Exp b,
                             Data.Array.Accelerate.Smart.Exp c))
                       z `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                    <Data.Array.Accelerate.Smart.Exp c>_N
                                    <Data.Array.Accelerate.Smart.Exp b>_N
                                    <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                       z1
                         `cast`
                       (Data.Array.Accelerate.Product.IsProduct
                          <Data.Array.Accelerate.Array.Sugar.Elt>_N
                          (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                    <Data.Array.Accelerate.Smart.Exp c>_N
                                    <Data.Array.Accelerate.Smart.Exp b>_N
                                    <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                       z7
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Trans
                               ((,)
                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                            <Data.Array.Accelerate.Lift.Plain
                                               (Data.Array.Accelerate.Smart.Exp b)>_N
                                            <Data.Array.Accelerate.Lift.Plain
                                               (Data.Array.Accelerate.Smart.Exp a)>_N))
                                  <Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp c)>_N)_N
                               (Trans
                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp c)>_N
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp b)>_N
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp a)>_N))
                                    (Data.Array.Accelerate.Product.ProdRepr
                                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                                 <Data.Array.Accelerate.Smart.Exp c>_N
                                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_N)))_R
                 } in
                 letrec {
                   go :: [Data.Array.Accelerate.Smart.Exp (a, b, c)]
                         -> Data.Array.Accelerate.Smart.Exp (a, b, c)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Array.Accelerate.Smart.Exp (a, b, c)]) ->
                     case ds of wild {
                       []
                       -> z8
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                           (Data.Array.Accelerate.Lift.D:R:Plain(,,)[0]
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   c>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   b>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   a>_N)
                                                                           ((,,)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <a>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <b>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <c>_N))_N))
                       : y ys
                       -> case Data.Array.Accelerate.Data.Monoid.$w$cmappend1
                                 @ a
                                 @ b
                                 @ c
                                 $dElt
                                 $dElt1
                                 $dElt2
                                 $dMonoid
                                 $dMonoid1
                                 $dMonoid2
                                 y
                                 (go ys) of ww { (#,,#) ww1 ww2 ww3 ->
                          (Data.Array.Accelerate.Smart.Tuple
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a,
                                   Data.Array.Accelerate.Smart.Exp b,
                                   Data.Array.Accelerate.Smart.Exp c))
                             ww1
                             ww2
                             ww3)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                           (Data.Array.Accelerate.Lift.D:R:Plain(,,)[0]
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   c>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   b>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   a>_N)
                                                                           ((,,)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <a>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <b>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <c>_N))_N)) } }
                 } in
                 go eta) -}
9379aa58b0b8b96e9546dc346b09f572
  $fMonoidExp1_$cmempty ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c)
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>m3,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp12
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt c>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                      (Data.Array.Accelerate.Lift.D:R:Plain(,,)[0]
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              c>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              b>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              a>_N)
                                                                      ((,,)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <a>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <b>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <c>_N))_N)) -}
ace9e6aea10921c577db25856fcec5c5
  $fMonoidExp2 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)) =>
    GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp (a, b))
  DFunId
  {- Arity: 4,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,C(C1(U)),A)><L,U(U,C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                      ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                      ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                      ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)).
                  @ (Data.Array.Accelerate.Smart.Exp (a, b))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp2_$cmempty
                     @ a
                     @ b
                     $dElt
                     $dElt1
                     $dMonoid
                     $dMonoid1)
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp2_$cmappend
                     @ a
                     @ b
                     $dElt
                     $dElt1
                     $dMonoid
                     $dMonoid1)
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp2_$cmconcat
                     @ a
                     @ b
                     $dElt
                     $dElt1
                     $dMonoid
                     $dMonoid1) -}
724bbc3245f3ce500e43bcb100c08d08
  $fMonoidExp2_$cmappend ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp (a, b)
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp13
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                      (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              b>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              a>_N)
                                                                      ((,)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <a>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <b>_N))_N)) -}
189d8c8d08b97d06084339716a6acd2b
  $fMonoidExp2_$cmconcat ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)) =>
    [Data.Array.Accelerate.Smart.Exp (a, b)]
    -> Data.Array.Accelerate.Smart.Exp (a, b)
  {- Arity: 5,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (eta :: [Data.Array.Accelerate.Smart.Exp (a, b)]) ->
                 let {
                   z :: Data.Array.Accelerate.Array.Sugar.Elt
                          (Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp b))
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                 } in
                 let {
                   z1 :: Data.Array.Accelerate.Product.IsProduct
                           Data.Array.Accelerate.Array.Sugar.Elt
                           (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))
                   = Data.Array.Accelerate.Product.$fIsProductcst(,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                 } in
                 let {
                   z2 :: Data.Array.Accelerate.Smart.Exp a
                   = GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp a) $dMonoid
                 } in
                 let {
                   z3 :: Data.Array.Accelerate.Array.Sugar.Tuple
                           Data.Array.Accelerate.Smart.Exp
                           ((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))
                   = Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       z2
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   z4 :: Data.Array.Accelerate.Smart.Exp b
                   = GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp b) $dMonoid1
                 } in
                 let {
                   z5 :: Data.Array.Accelerate.Array.Sugar.Tuple
                           Data.Array.Accelerate.Smart.Exp
                           (((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))
                   = Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (((),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @~ <(((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))>_N
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       z3
                       z4
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                 } in
                 let {
                   z6 :: Data.Array.Accelerate.Smart.PreExp
                           Data.Array.Accelerate.Smart.Acc
                           Data.Array.Accelerate.Smart.Exp
                           (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a,
                               Data.Array.Accelerate.Smart.Exp b))
                   = Data.Array.Accelerate.Smart.Tuple
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a,
                             Data.Array.Accelerate.Smart.Exp b))
                       z `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                    <Data.Array.Accelerate.Smart.Exp b>_N
                                    <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                       z1
                         `cast`
                       (Data.Array.Accelerate.Product.IsProduct
                          <Data.Array.Accelerate.Array.Sugar.Elt>_N
                          (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                    <Data.Array.Accelerate.Smart.Exp b>_N
                                    <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                       z5
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Trans
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                         <Data.Array.Accelerate.Lift.Plain
                                            (Data.Array.Accelerate.Smart.Exp b)>_N
                                         <Data.Array.Accelerate.Lift.Plain
                                            (Data.Array.Accelerate.Smart.Exp a)>_N))
                               (Data.Array.Accelerate.Product.ProdRepr
                                  (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                            <Data.Array.Accelerate.Smart.Exp b>_N
                                            <Data.Array.Accelerate.Smart.Exp a>_N)))_N))_R
                 } in
                 letrec {
                   go :: [Data.Array.Accelerate.Smart.Exp (a, b)]
                         -> Data.Array.Accelerate.Smart.Exp (a, b)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Array.Accelerate.Smart.Exp (a, b)]) ->
                     case ds of wild {
                       []
                       -> z6
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                           (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   b>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   a>_N)
                                                                           ((,)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <a>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <b>_N))_N))
                       : y ys
                       -> case Data.Array.Accelerate.Data.Monoid.$w$cmappend2
                                 @ a
                                 @ b
                                 $dElt
                                 $dElt1
                                 $dMonoid
                                 $dMonoid1
                                 y
                                 (go ys) of ww { (#,,#) ww1 ww2 ww3 ->
                          (Data.Array.Accelerate.Smart.Tuple
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a,
                                   Data.Array.Accelerate.Smart.Exp b))
                             ww1
                             ww2
                             ww3)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                           (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   b>_N
                                                                                <Data.Array.Accelerate.Smart.Exp
                                                                                   a>_N)
                                                                           ((,)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <a>_N)
                                                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                   <b>_N))_N)) } }
                 } in
                 go eta) -}
4696e3eb542a67d6cb8e05a135e943d8
  $fMonoidExp2_$cmempty ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
  {- Arity: 4,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>m3,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp14
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                      (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              b>_N
                                                                           <Data.Array.Accelerate.Smart.Exp
                                                                              a>_N)
                                                                      ((,)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <a>_N)
                                                                         (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                              <b>_N))_N)) -}
dd784efdcb72f1d7ec94e735b4332676
  $fMonoidExp3 ::
    GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp ())
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp ())
                  Data.Array.Accelerate.Data.Monoid.$fMonoidExp3_$cmempty
                  Data.Array.Accelerate.Data.Monoid.$fMonoidExp3_$cmappend
                  Data.Array.Accelerate.Data.Monoid.$fMonoidExp3_$cmconcat -}
6f1c661ba078593ebc550f42836a767c
  $fMonoidExp3_$cmappend ::
    Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp ()
  {- Arity: 2, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp16
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp ()>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp ()>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <()>_N) -}
44559792f8568c20a1b4f478becf5c54
  $fMonoidExp3_$cmconcat ::
    [Data.Array.Accelerate.Smart.Exp ()]
    -> Data.Array.Accelerate.Smart.Exp ()
  {- Arity: 1, Strictness: <S,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Data.Array.Accelerate.Smart.Exp ()]) ->
                 case eta of wild { DEFAULT ->
                 Data.Array.Accelerate.Data.Monoid.$fMonoidExp15
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <()>_N) }) -}
42bc95443d633f72262a36cc0dfc92cb
  $fMonoidExp3_$cmempty :: Data.Array.Accelerate.Smart.Exp ()
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp15
                  `cast`
                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <()>_N) -}
08d71e118d15ea3fabdc9f9869dcc7ff
  $fMonoidExp4 ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    GHC.Base.Monoid
      (Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a).
                  @ (Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp4_$cmempty
                     @ a
                     $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp4_$cmappend
                     @ a
                     $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp4_$cmconcat
                     @ a
                     $d(%,%)) -}
2c9074c693507df2bad0aa99920eb111
  $fMonoidExp4_$cfromInteger ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dNum :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 (\ (x :: GHC.Integer.Type.Integer) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (GHC.Num.fromInteger @ (Data.Array.Accelerate.Smart.Exp a) $dNum x)
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 (<GHC.Integer.Type.Integer>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
46b603b5ea6b0fca46dabe38cb7be5d3
  $fMonoidExp4_$cmappend ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.* @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a))))
                    (y :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             x `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             y `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Product
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                    <Data.Array.Accelerate.Smart.Exp a>_N)
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
5fda39c4bfc1bf60e034a8f9c9d8db18
  $fMonoidExp4_$cmconcat ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    [Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)]
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a)
                   (eta :: [Data.Array.Accelerate.Smart.Exp
                              (Data.Monoid.Product a)]) ->
                 let {
                   k :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
                        -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
                        -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fMonoidExp4_$cmappend
                       @ a
                       $d(%,%)
                 } in
                 let {
                   z :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fMonoidExp4_$cfromInteger
                       @ a
                       $d(%,%)
                       Data.Array.Accelerate.Data.Monoid.$fMonoidExp17
                 } in
                 letrec {
                   go :: [Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)]
                         -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Array.Accelerate.Smart.Exp
                                 (Data.Monoid.Product a)]) ->
                     case ds of wild { [] -> z : y ys -> k y (go ys) }
                 } in
                 go eta) -}
d27d1ab51029c06bad7a13d104e52513
  $fMonoidExp4_$cmempty ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 Data.Array.Accelerate.Data.Monoid.$fMonoidExp4_$cfromInteger
                   @ a
                   $d(%,%)
                   Data.Array.Accelerate.Data.Monoid.$fMonoidExp17) -}
d65b1db83d2b8b0df96e500c07d41e4d
  $fMonoidExp5 ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    GHC.Base.Monoid
      (Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a).
                  @ (Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp5_$cmempty
                     @ a
                     $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp5_$cmappend
                     @ a
                     $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp5_$cmconcat
                     @ a
                     $d(%,%)) -}
2382e33c187085261d26e600caef2a40
  $fMonoidExp5_$cfromInteger ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dNum :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 (\ (x :: GHC.Integer.Type.Integer) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (GHC.Num.fromInteger @ (Data.Array.Accelerate.Smart.Exp a) $dNum x)
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 (<GHC.Integer.Type.Integer>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
6812b7cf11e4eb89412c179d148e0ee3
  $fMonoidExp5_$cmappend ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.+ @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a))))
                    (y :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             x `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             y `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Sum
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                    <Data.Array.Accelerate.Smart.Exp a>_N)
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
417082b8b0e189fdff314f4c30655ecf
  $fMonoidExp5_$cmconcat ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    [Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)]
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a)
                   (eta :: [Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)]) ->
                 let {
                   k :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
                        -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
                        -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fMonoidExp5_$cmappend
                       @ a
                       $d(%,%)
                 } in
                 let {
                   z :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fMonoidExp5_$cfromInteger
                       @ a
                       $d(%,%)
                       Data.Array.Accelerate.Data.Monoid.$fMonoidExp18
                 } in
                 letrec {
                   go :: [Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)]
                         -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Array.Accelerate.Smart.Exp
                                 (Data.Monoid.Sum a)]) ->
                     case ds of wild { [] -> z : y ys -> k y (go ys) }
                 } in
                 go eta) -}
65ce1148e72a75bedad7750f685b8eb0
  $fMonoidExp5_$cmempty ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 Data.Array.Accelerate.Data.Monoid.$fMonoidExp5_$cfromInteger
                   @ a
                   $d(%,%)
                   Data.Array.Accelerate.Data.Monoid.$fMonoidExp18) -}
55b68cc2f1b364f3526de27d2b4ee494
  $fMonoidExp7 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp a),
          Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp b),
          Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp c),
          Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp d),
          Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp e))
  {- Arity: 12,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   ($dMonoid2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   ($dMonoid3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d))
                   ($dMonoid4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e))
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)) ->
                 Data.Array.Accelerate.Smart.tup5
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp a))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp b))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp c))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp d))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp e))
                   $dElt
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                   $dElt1
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                   $dElt2
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                   $dElt3
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                   $dElt4
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R
                   (let {
                      $dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e)
                      = Data.Array.Accelerate.Array.Sugar.$fElt(,,,,)
                          @ a
                          @ b
                          @ c
                          @ d
                          @ e
                          $dElt
                          $dElt1
                          $dElt2
                          $dElt3
                          $dElt4
                    } in
                    let {
                      $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                       (a, b, c, d, e)
                      = Data.Array.Accelerate.Product.$fIsProductcst(,,,,)
                          @ Data.Array.Accelerate.Array.Sugar.Elt
                          @ a
                          @ b
                          @ c
                          @ d
                          @ e
                          $dElt
                          $dElt1
                          $dElt2
                          $dElt3
                          $dElt4
                    } in
                    ((GHC.Base.mappend
                        @ (Data.Array.Accelerate.Smart.Exp a)
                        $dMonoid
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ a
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt
                           (Data.Array.Accelerate.Smart.tix4 @ () @ a @ b @ c @ d @ e)
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <a>_N)_R
                           eta)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ a
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt
                           (Data.Array.Accelerate.Smart.tix4 @ () @ a @ b @ c @ d @ e)
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <a>_N)_R
                           eta1)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                       `cast`
                     (Data.Array.Accelerate.Smart.Exp
                        (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R,
                     (GHC.Base.mappend
                        @ (Data.Array.Accelerate.Smart.Exp b)
                        $dMonoid1
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ b
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt1
                           (Data.Array.Accelerate.Smart.tix3 @ ((), a) @ b @ c @ d @ e)
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <b>_N)_R
                           eta)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ b
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt1
                           (Data.Array.Accelerate.Smart.tix3 @ ((), a) @ b @ c @ d @ e)
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <b>_N)_R
                           eta1)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N))
                       `cast`
                     (Data.Array.Accelerate.Smart.Exp
                        (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R,
                     (GHC.Base.mappend
                        @ (Data.Array.Accelerate.Smart.Exp c)
                        $dMonoid2
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ c
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt2
                           (Data.Array.Accelerate.Smart.tix2 @ (((), a), b) @ c @ d @ e)
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <c>_N)_R
                           eta)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ c
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt2
                           (Data.Array.Accelerate.Smart.tix2 @ (((), a), b) @ c @ d @ e)
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <c>_N)_R
                           eta1)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N))
                       `cast`
                     (Data.Array.Accelerate.Smart.Exp
                        (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R,
                     (GHC.Base.mappend
                        @ (Data.Array.Accelerate.Smart.Exp d)
                        $dMonoid3
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ d
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt3
                           (Data.Array.Accelerate.Smart.tix1 @ ((((), a), b), c) @ d @ e)
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <d>_N)_R
                           eta)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ d
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt3
                           (Data.Array.Accelerate.Smart.tix1 @ ((((), a), b), c) @ d @ e)
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <d>_N)_R
                           eta1)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N))
                       `cast`
                     (Data.Array.Accelerate.Smart.Exp
                        (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R,
                     (GHC.Base.mappend
                        @ (Data.Array.Accelerate.Smart.Exp e)
                        $dMonoid4
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ e
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt4
                           (Data.Array.Accelerate.Product.$WZeroTupIdx
                              @ e
                              @ (((((), a), b), c), d))
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <e>_N)_R
                           eta)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N)
                        (Data.Array.Accelerate.Smart.Prj
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ e
                           @ (a, b, c, d, e)
                           $dElt5
                           $dIsProduct
                           $dElt4
                           (Data.Array.Accelerate.Product.$WZeroTupIdx
                              @ e
                              @ (((((), a), b), c), d))
                             `cast`
                           (Data.Array.Accelerate.Product.TupleIdx
                              (Trans
                                   ((,)
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <e>_N)_N
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                             <e>_N <d>_N <c>_N <b>_N <a>_N)))
                              <e>_N)_R
                           eta1)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N))
                       `cast`
                     (Data.Array.Accelerate.Smart.Exp
                        (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R))) -}
94cd9c2622c2c3fac097c6de3901eff5
  $fMonoidExp8 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)) =>
    Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp a),
       Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp b),
       Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp c),
       Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp d),
       Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp e))
  {- Arity: 10,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   ($dMonoid2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   ($dMonoid3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d))
                   ($dMonoid4 :: GHC.Base.Monoid
                                   (Data.Array.Accelerate.Smart.Exp e)) ->
                 Data.Array.Accelerate.Smart.tup5
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp a))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp b))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp c))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp d))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp e))
                   $dElt
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                   $dElt1
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                   $dElt2
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                   $dElt3
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                   $dElt4
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R
                   ((GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp a) $dMonoid)
                      `cast`
                    (Data.Array.Accelerate.Smart.Exp
                       (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R,
                    (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp b) $dMonoid1)
                      `cast`
                    (Data.Array.Accelerate.Smart.Exp
                       (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R,
                    (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp c) $dMonoid2)
                      `cast`
                    (Data.Array.Accelerate.Smart.Exp
                       (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R,
                    (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp d) $dMonoid3)
                      `cast`
                    (Data.Array.Accelerate.Smart.Exp
                       (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R,
                    (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp e) $dMonoid4)
                      `cast`
                    (Data.Array.Accelerate.Smart.Exp
                       (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R)) -}
53860bb3cd2497c3f43cf911bcc106e7
  $fMonoidExp9 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp a,
             Data.Array.Accelerate.Smart.Exp b,
             Data.Array.Accelerate.Smart.Exp c,
             Data.Array.Accelerate.Smart.Exp d))
  {- Arity: 10,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>m3,
     Inline: INLINE[0],
     Unfolding: InlineRule (10, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (w3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   (w4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w5 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w6 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   (w7 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d))
                   (w8 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d))
                   (w9 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)) ->
                 case Data.Array.Accelerate.Data.Monoid.$w$cmappend
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8
                        w9 of ww { (#,,#) ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Smart.Tuple
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp a,
                         Data.Array.Accelerate.Smart.Exp b,
                         Data.Array.Accelerate.Smart.Exp c,
                         Data.Array.Accelerate.Smart.Exp d))
                   ww1
                   ww2
                   ww3 }) -}
4c416df18c43aa27e42af8edd4f1d71b
  $fMonoidExp_$cmappend ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
  {- Arity: 12,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp7
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt c>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt d>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt e>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                 ->_R (Data.Array.Accelerate.Smart.Exp
                         ((,,,,)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N))_N)_R) -}
0a22d77aa67bda8cc5b89475bf0c8898
  $fMonoidExp_$cmconcat ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)) =>
    [Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)]
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
  {- Arity: 11,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><L,U(1*U,C(C1(U)),A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dMonoid :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   ($dMonoid1 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   ($dMonoid2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   ($dMonoid3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d))
                   ($dMonoid4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e))
                   (eta :: [Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)]) ->
                 let {
                   z :: Data.Array.Accelerate.Smart.Exp
                          (Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp b),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp c),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp d),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp e))
                   = Data.Array.Accelerate.Data.Monoid.$fMonoidExp8
                       @ a
                       @ b
                       @ c
                       @ d
                       @ e
                       $dElt
                       $dElt1
                       $dElt2
                       $dElt3
                       $dElt4
                       $dMonoid
                       $dMonoid1
                       $dMonoid2
                       $dMonoid3
                       $dMonoid4
                 } in
                 letrec {
                   go :: [Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)]
                         -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)]) ->
                     case ds of wild {
                       []
                       -> z `cast`
                          (Data.Array.Accelerate.Smart.Exp
                             ((,,,,)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N))_N)_R
                       : y ys
                       -> (Data.Array.Accelerate.Data.Monoid.$fMonoidExp7
                             @ a
                             @ b
                             @ c
                             @ d
                             @ e
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                             $dElt4
                             $dMonoid
                             $dMonoid1
                             $dMonoid2
                             $dMonoid3
                             $dMonoid4
                             y
                             (go ys))
                            `cast`
                          (Data.Array.Accelerate.Smart.Exp
                             ((,,,,)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N))_N)_R }
                 } in
                 go eta) -}
158b3ff78a1d4ff09e8f08b016228c29
  $fMonoidExp_$cmempty ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
  {- Arity: 10,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Data.Monoid.$fMonoidExp8
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt c>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt d>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt e>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)>_R
                 ->_R <GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp e)>_R
                 ->_R (Data.Array.Accelerate.Smart.Exp
                         ((,,,,)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N))_N)_R) -}
e4e15a42cdae55ba46323d0a8aafd5c1
  $fNumExp ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    GHC.Num.Num
      (Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a).
                  @ (Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp_$c+ @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp_$c- @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp_$c* @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp_$cnegate @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp_$cabs @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp_$csignum @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp4_$cfromInteger
                     @ a
                     $d(%,%)) -}
995765847b5b5d584c8d2919e1b22997
  $fNumExp0 ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
  DFunId
  {- Arity: 1, Strictness: <L,U(U,U)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a).
                  @ (Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp0_$c+ @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp0_$c- @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp0_$c* @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp0_$cnegate @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp0_$cabs @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fNumExp0_$csignum @ a $d(%,%))
                  (Data.Array.Accelerate.Data.Monoid.$fMonoidExp5_$cfromInteger
                     @ a
                     $d(%,%)) -}
057de004d0cbe388b57809dffe528dd4
  $fNumExp0_$c* ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.* @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a))))
                    (y :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             x `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             y `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Sum
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                    <Data.Array.Accelerate.Smart.Exp a>_N)
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
be42010a1ad03ff5da6757a90b51310a
  $fNumExp0_$c+ ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.+ @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a))))
                    (y :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             x `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             y `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Sum
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                    <Data.Array.Accelerate.Smart.Exp a>_N)
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
df920e8cffc7ac70a687822e474700a7
  $fNumExp0_$c- ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.- @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a))))
                    (y :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             x `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             y `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Sum
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                    <Data.Array.Accelerate.Smart.Exp a>_N)
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
7eb3daf62f590cb53ab49dc262b1f8fe
  $fNumExp0_$cabs ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.signum @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (eta :: Data.Array.Accelerate.Smart.Exp
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl19
                             lvl18
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             eta
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Sum
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
e6ec1f9470aba03c4b06b1ef147c8312
  $fNumExp0_$cnegate ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.negate @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (eta :: Data.Array.Accelerate.Smart.Exp
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl19
                             lvl18
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             eta
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Sum
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
fc81d4506c5444262c70eae7e79a97cb
  $fNumExp0_$csignum ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.signum @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (eta :: Data.Array.Accelerate.Smart.Exp
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl19
                             lvl18
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             eta
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Sum
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Sum
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
61e53f687ac22713b0d019725a37d614
  $fNumExp_$c* ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.* @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a))))
                    (y :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             x `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             y `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Product
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                    <Data.Array.Accelerate.Smart.Exp a>_N)
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
5af3fc6b3daa218196c13ab36e4de61d
  $fNumExp_$c+ ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.+ @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a))))
                    (y :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             x `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             y `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Product
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                    <Data.Array.Accelerate.Smart.Exp a>_N)
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
0132ca85ff685c2a421c9c139d23943c
  $fNumExp_$c- ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.- @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a))))
                    (y :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             x `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             y `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Product
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                    <Data.Array.Accelerate.Smart.Exp a>_N)
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
b071f730c4fe0af3dc07909f0750f17b
  $fNumExp_$cabs ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.signum @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (eta :: Data.Array.Accelerate.Smart.Exp
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl19
                             lvl18
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             eta
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Product
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
7a386084c7e1e6c8ef9d46d21e204a10
  $fNumExp_$cnegate ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.negate @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (eta :: Data.Array.Accelerate.Smart.Exp
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl19
                             lvl18
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             eta
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Product
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
2f514efc1c48bd230de0bfed296edc82
  $fNumExp_$csignum ::
    Data.Array.Accelerate.Classes.Num.Num a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,1*U)>,
     Unfolding: (\ @ a
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num a) ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   f :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt a)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
                       $d(%,%)
                 } in
                 let {
                   f1 :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                   = GHC.Num.signum @ (Data.Array.Accelerate.Smart.Exp a) f
                 } in
                 (\ (eta :: Data.Array.Accelerate.Smart.Exp
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (f1
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl19
                             lvl18
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             eta
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Trans
                                     (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                          <Data.Array.Accelerate.Smart.Exp a>_N)
                                     (Data.Monoid.Product
                                        (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 ((Data.Array.Accelerate.Smart.Exp
                     (Trans
                          (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                               <Data.Array.Accelerate.Smart.Exp a>_N)
                          (Data.Monoid.Product
                             (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
fbd480081464919737104999a8f3d629
  $fOrdProduct ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Classes.Ord.Ord (Data.Monoid.Product a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a).
                  @ (Data.Monoid.Product a)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdProduct_$cp1Ord @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdProduct_$c< @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdProduct_$c> @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdProduct_$c<= @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdProduct_$c>= @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdProduct_$cmin @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdProduct_$cmax @ a $dOrd) -}
49dbba7acc836905f9d3922957b34588
  $fOrdProduct_$c< ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LC(C(S))LLLLL),U(1*U,1*C1(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp
                              (Data.Monoid.Product a)) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Ord.<
                   @ a
                   $dOrd
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
b4d99e9ca07502d01bc29a4cb20d85df
  $fOrdProduct_$c<= ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLC(C(S))LLL),U(1*U,A,A,1*C1(C1(U)),A,A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp
                              (Data.Monoid.Product a)) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Ord.<=
                   @ a
                   $dOrd
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
5336c5ee3d3c606d483a1abf5fc25a37
  $fOrdProduct_$c> ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLC(C(S))LLLL),U(1*U,A,1*C1(C1(U)),A,A,A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp
                              (Data.Monoid.Product a)) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Ord.>
                   @ a
                   $dOrd
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
8d29cf04aad10ade4a7c08429b4d38cc
  $fOrdProduct_$c>= ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLLC(C(S))LL),U(1*U,A,A,A,1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp
                              (Data.Monoid.Product a)) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Ord.>=
                   @ a
                   $dOrd
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Product a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                   <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
660d38c4919684e80427b4776bd597d0
  $fOrdProduct_$cmax ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,A,A,A,A,A,1*U)>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   .*. :: Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                   = Data.Array.Accelerate.Classes.Ord.max @ a $dOrd
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                    (y :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (.*.
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             x)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             y)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
67e03a9f816904412ef6101ea4dabc10
  $fOrdProduct_$cmin ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)
  {- Arity: 1, Strictness: <L,U(1*U,A,A,A,A,1*U,A)>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 let {
                   .*. :: Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                   = Data.Array.Accelerate.Classes.Ord.min @ a $dOrd
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a))
                    (y :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (.*.
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             x)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Product a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                          <a>_N))
                                <a>_N)_R
                             y)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp (Data.Monoid.Product a)>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Product
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
e44ed0e4a9c2b434af5bbaef37753b1a
  $fOrdProduct_$cp1Ord ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Classes.Eq.Eq (Data.Monoid.Product a)
  {- Arity: 1,
     Strictness: <L,1*U(1*U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U))),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a) ->
                 Data.Array.Accelerate.Data.Monoid.$fEqProduct
                   @ a
                   (Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd)) -}
18e4f5f36c167cf0c0592b7319b0c410
  $fOrdSum ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Classes.Ord.Ord (Data.Monoid.Sum a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a).
                  @ (Data.Monoid.Sum a)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdSum_$cp1Ord @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdSum_$c< @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdSum_$c> @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdSum_$c<= @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdSum_$c>= @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdSum_$cmin @ a $dOrd)
                  (Data.Array.Accelerate.Data.Monoid.$fOrdSum_$cmax @ a $dOrd) -}
79feb5084e9664c964bf88a2ef98e5a5
  $fOrdSum_$c< ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LC(C(S))LLLLL),U(1*U,1*C1(C1(U)),A,A,A,A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Ord.<
                   @ a
                   $dOrd
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
ce8ab4336d5b39ae794376da8a275044
  $fOrdSum_$c<= ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLC(C(S))LLL),U(1*U,A,A,1*C1(C1(U)),A,A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Ord.<=
                   @ a
                   $dOrd
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
961fd3ecd6ff6e1cec9d0fcf13100dab
  $fOrdSum_$c> ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLC(C(S))LLLL),U(1*U,A,1*C1(C1(U)),A,A,A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Ord.>
                   @ a
                   $dOrd
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
00173bc84293caabe9db1cff35ab4d3e
  $fOrdSum_$c>= ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLLC(C(S))LL),U(1*U,A,A,A,1*C1(C1(U)),A,A)><L,U><L,U>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a)
                   (eta :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 Data.Array.Accelerate.Classes.Ord.>=
                   @ a
                   $dOrd
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                   (Data.Array.Accelerate.Smart.Prj
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ a
                      @ (Data.Monoid.Sum a)
                      (Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt)
                      (Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt)
                      $dElt
                      (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                        `cast`
                      (Data.Array.Accelerate.Product.TupleIdx
                         (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                         <a>_N)_R
                      eta1)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
0b47070c119917f6832deed0595727a6
  $fOrdSum_$cmax ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,A,A,A,A,A,1*U)>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   .*. :: Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                   = Data.Array.Accelerate.Classes.Ord.max @ a $dOrd
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                    (y :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (.*.
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             x)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             y)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
7c645bf019846a3a4163f73983290406
  $fOrdSum_$cmin ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
    -> Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)
  {- Arity: 1, Strictness: <L,U(1*U,A,A,A,A,1*U,A)>,
     Unfolding: (\ @ a
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a) ->
                 let {
                   $dEq :: Data.Array.Accelerate.Classes.Eq.Eq a
                   = Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd
                 } in
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                   = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                 } in
                 let {
                   lvl18 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   lvl19 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 let {
                   .*. :: Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                   = Data.Array.Accelerate.Classes.Ord.min @ a $dOrd
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 (\ (x :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a))
                    (y :: Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       (.*.
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             x)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ a
                             @ (Data.Monoid.Sum a)
                             lvl18
                             lvl19
                             $dElt
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                                <a>_N)_R
                             y)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp (Data.Monoid.Sum a)>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Data.Monoid.Sum
                                                                     (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                          <a>_N))_N)) -}
f607d8815eb93055735ba86d36da9193
  $fOrdSum_$cp1Ord ::
    Data.Array.Accelerate.Classes.Ord.Ord a =>
    Data.Array.Accelerate.Classes.Eq.Eq (Data.Monoid.Sum a)
  {- Arity: 1,
     Strictness: <L,1*U(1*U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U))),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord a) ->
                 Data.Array.Accelerate.Data.Monoid.$fEqSum
                   @ a
                   (Data.Array.Accelerate.Classes.Ord.$p1Ord @ a $dOrd)) -}
32abd1dd45658e63ac24b29da0964006
  $fUnliftExpProduct ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Lift.Unlift
      Data.Array.Accelerate.Smart.Exp
      (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a))
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a).
                  @ Data.Array.Accelerate.Smart.Exp
                  @ (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a))
                  (Data.Array.Accelerate.Data.Monoid.$fUnliftExpProduct_$cp1Unlift
                     @ a
                     $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fUnliftExpProduct_$cunlift
                     @ a
                     $dElt) -}
ee7bfc19b69c8ddca8f935f07da2662e
  $fUnliftExpProduct_$cp1Unlift ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Lift.Lift
      Data.Array.Accelerate.Smart.Exp
      (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a))
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 (\ (ds :: Data.Monoid.Product
                             (Data.Array.Accelerate.Smart.Exp a)) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Product
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       ds
                         `cast`
                       (Data.Monoid.N:Product[0]
                            (Data.Array.Accelerate.Smart.Exp
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R))
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 (Trans
                      (<Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)>_R
                       ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                                                                 <Data.Array.Accelerate.Smart.Exp
                                                                                    a>_N)))
                      (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                <Data.Array.Accelerate.Smart.Exp>_N
                                <Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)>_N)))) -}
8d84d432a955b15e2f3be9125573d7a5
  $fUnliftExpProduct_$cunlift ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Lift.Plain
         (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))
    -> Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltProduct @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Product a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct @ a $dElt
                 } in
                 (\ (t :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Prj
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ a
                    @ (Data.Monoid.Product a)
                    $dElt1
                    $dIsProduct
                    $dElt
                    (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                      `cast`
                    (Data.Array.Accelerate.Product.TupleIdx
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct[0]
                                 <a>_N))
                       <a>_N)_R
                    t `cast`
                    (Data.Array.Accelerate.Smart.Exp
                       (Trans
                            (Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct[0]
                                 <Data.Array.Accelerate.Smart.Exp a>_N)
                            (Data.Monoid.Product
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp
                     (Data.Array.Accelerate.Lift.Plain
                        (Data.Monoid.Product (Data.Array.Accelerate.Smart.Exp a)))>_R
                  ->_R Sym (Data.Monoid.N:Product[0]
                                (Data.Array.Accelerate.Smart.N:Exp[0] <a>_N)))) -}
798e188e448a68a0d865e0de531474e6
  $fUnliftExpSum ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Lift.Unlift
      Data.Array.Accelerate.Smart.Exp
      (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a))
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a).
                  @ Data.Array.Accelerate.Smart.Exp
                  @ (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a))
                  (Data.Array.Accelerate.Data.Monoid.$fUnliftExpSum_$cp1Unlift
                     @ a
                     $dElt)
                  (Data.Array.Accelerate.Data.Monoid.$fUnliftExpSum_$cunlift
                     @ a
                     $dElt) -}
9b7f20b0a778443741138ff73a92ada8
  $fUnliftExpSum_$cp1Unlift ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Lift.Lift
      Data.Array.Accelerate.Smart.Exp
      (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a))
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum
                                       (Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                               (Data.Monoid.Sum
                                  (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)))
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 (\ (ds :: Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)) ->
                  Data.Array.Accelerate.Smart.Tuple
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Monoid.Sum
                         (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a)))
                    $dElt1
                    $dIsProduct
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ ()
                       @~ <((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))>_N
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.$WNilTup
                          @ Data.Array.Accelerate.Smart.Exp)
                       ds
                         `cast`
                       (Data.Monoid.N:Sum[0]
                            (Data.Array.Accelerate.Smart.Exp
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R))
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0]
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)>_N)))_R)
                   `cast`
                 (Trans
                      (<Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)>_R
                       ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                                                                 <Data.Array.Accelerate.Smart.Exp
                                                                                    a>_N)))
                      (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                <Data.Array.Accelerate.Smart.Exp>_N
                                <Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)>_N)))) -}
833cfb2507f919d8da67af6974cfb9f2
  $fUnliftExpSum_$cunlift ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Lift.Plain
         (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))
    -> Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fEltSum @ a $dElt
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                    (Data.Monoid.Sum a)
                   = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum @ a $dElt
                 } in
                 (\ (t :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Lift.Plain
                               (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))) ->
                  Data.Array.Accelerate.Smart.Prj
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ a
                    @ (Data.Monoid.Sum a)
                    $dElt1
                    $dIsProduct
                    $dElt
                    (Data.Array.Accelerate.Product.$WZeroTupIdx @ a @ ())
                      `cast`
                    (Data.Array.Accelerate.Product.TupleIdx
                       (Sym (Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum[0] <a>_N))
                       <a>_N)_R
                    t `cast`
                    (Data.Array.Accelerate.Smart.Exp
                       (Trans
                            (Data.Array.Accelerate.Data.Monoid.D:R:PlainSum[0]
                                 <Data.Array.Accelerate.Smart.Exp a>_N)
                            (Data.Monoid.Sum
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R)
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp
                     (Data.Array.Accelerate.Lift.Plain
                        (Data.Monoid.Sum (Data.Array.Accelerate.Smart.Exp a)))>_R
                  ->_R Sym (Data.Monoid.N:Sum[0]
                                (Data.Array.Accelerate.Smart.N:Exp[0] <a>_N)))) -}
dad5aefaa9b5a95b3a00c676e18ff5e2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Data.Monoid.$trModule2
                   Data.Array.Accelerate.Data.Monoid.$trModule1) -}
b6516e071dd7cc3f643971a2d4a14a53
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Data.Monoid"#) -}
9054fa18fe8acd968110b5fcf21af9af
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
129cb961d018ecf3430e114359497b33
  $w$cmappend ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> (# Data.Array.Accelerate.Array.Sugar.Elt
            (Data.Array.Accelerate.Lift.Plain
               (Data.Array.Accelerate.Smart.Exp a,
                Data.Array.Accelerate.Smart.Exp b,
                Data.Array.Accelerate.Smart.Exp c,
                Data.Array.Accelerate.Smart.Exp d)),
          Data.Array.Accelerate.Array.Sugar.IsTuple
            (Data.Array.Accelerate.Lift.Plain
               (Data.Array.Accelerate.Smart.Exp a,
                Data.Array.Accelerate.Smart.Exp b,
                Data.Array.Accelerate.Smart.Exp c,
                Data.Array.Accelerate.Smart.Exp d)),
          Data.Array.Accelerate.Array.Sugar.Tuple
            Data.Array.Accelerate.Smart.Exp
            (Data.Array.Accelerate.Array.Sugar.TupleRepr
               (Data.Array.Accelerate.Lift.Plain
                  (Data.Array.Accelerate.Smart.Exp a,
                   Data.Array.Accelerate.Smart.Exp b,
                   Data.Array.Accelerate.Smart.Exp c,
                   Data.Array.Accelerate.Smart.Exp d))) #)
  {- Arity: 10,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (w3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   (w4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w5 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w6 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   (w7 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d))
                   (w8 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d))
                   (w9 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)) ->
                 (# (Data.Array.Accelerate.Array.Sugar.$fElt(,,,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       w `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       w2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       w3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Elt
                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                 <Data.Array.Accelerate.Smart.Exp d>_N
                                 <Data.Array.Accelerate.Smart.Exp c>_N
                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_R,
                    (Data.Array.Accelerate.Product.$fIsProductcst(,,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       w `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       w2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       w3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Product.IsProduct
                       <Data.Array.Accelerate.Array.Sugar.Elt>_N
                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                 <Data.Array.Accelerate.Smart.Exp d>_N
                                 <Data.Array.Accelerate.Smart.Exp c>_N
                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_R,
                    let {
                      $dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d)
                      = Data.Array.Accelerate.Array.Sugar.$fElt(,,,)
                          @ a
                          @ b
                          @ c
                          @ d
                          w
                          w1
                          w2
                          w3
                    } in
                    let {
                      $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                       (a, b, c, d)
                      = Data.Array.Accelerate.Product.$fIsProductcst(,,,)
                          @ Data.Array.Accelerate.Array.Sugar.Elt
                          @ a
                          @ b
                          @ c
                          @ d
                          w
                          w1
                          w2
                          w3
                    } in
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (((((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b)),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp c)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ ((((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a)),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp b)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @~ <(((((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp c)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp d))>_N
                       w3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ ((((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp c))
                          @ (Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp c))
                          @ (((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b))
                          @~ <((((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp a)),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c))>_N
                          w2
                            `cast`
                          (Data.Array.Accelerate.Array.Sugar.Elt
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp a)),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b))
                             @ (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b))
                             @ ((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a))
                             @~ <(((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b))>_N
                             w1
                               `cast`
                             (Data.Array.Accelerate.Array.Sugar.Elt
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                             (Data.Array.Accelerate.Array.Sugar.SnocTup
                                @ Data.Array.Accelerate.Smart.Exp
                                @ ((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a))
                                @ (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a))
                                @ ()
                                @~ <((),
                                     Data.Array.Accelerate.Lift.Plain
                                       (Data.Array.Accelerate.Smart.Exp a))>_N
                                w `cast`
                                (Data.Array.Accelerate.Array.Sugar.Elt
                                   (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                                (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                   @ Data.Array.Accelerate.Smart.Exp)
                                (GHC.Base.mappend
                                   @ (Data.Array.Accelerate.Smart.Exp a)
                                   w4
                                   (Data.Array.Accelerate.Smart.Prj
                                      @ Data.Array.Accelerate.Smart.Acc
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ a
                                      @ (a, b, c, d)
                                      $dElt4
                                      $dIsProduct
                                      w
                                      (Data.Array.Accelerate.Smart.tix3 @ () @ a @ b @ c @ d)
                                        `cast`
                                      (Data.Array.Accelerate.Product.TupleIdx
                                         (Trans
                                              ((,)
                                                 (Trans
                                                      ((,)
                                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                   <b>_N <a>_N))
                                                         <c>_N)_N
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                <c>_N <b>_N <a>_N)))
                                                 <d>_N)_N
                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                        <d>_N <c>_N <b>_N <a>_N)))
                                         <a>_N)_R
                                      w8)
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                   (Data.Array.Accelerate.Smart.Prj
                                      @ Data.Array.Accelerate.Smart.Acc
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ a
                                      @ (a, b, c, d)
                                      $dElt4
                                      $dIsProduct
                                      w
                                      (Data.Array.Accelerate.Smart.tix3 @ () @ a @ b @ c @ d)
                                        `cast`
                                      (Data.Array.Accelerate.Product.TupleIdx
                                         (Trans
                                              ((,)
                                                 (Trans
                                                      ((,)
                                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                   <b>_N <a>_N))
                                                         <c>_N)_N
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                <c>_N <b>_N <a>_N)))
                                                 <d>_N)_N
                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                        <d>_N <c>_N <b>_N <a>_N)))
                                         <a>_N)_R
                                      w9)
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                                  `cast`
                                (Data.Array.Accelerate.Smart.Exp
                                   (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                             (GHC.Base.mappend
                                @ (Data.Array.Accelerate.Smart.Exp b)
                                w5
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ b
                                   @ (a, b, c, d)
                                   $dElt4
                                   $dIsProduct
                                   w1
                                   (Data.Array.Accelerate.Smart.tix2 @ ((), a) @ b @ c @ d)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <b>_N)_R
                                   w8)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ b
                                   @ (a, b, c, d)
                                   $dElt4
                                   $dIsProduct
                                   w1
                                   (Data.Array.Accelerate.Smart.tix2 @ ((), a) @ b @ c @ d)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <b>_N)_R
                                   w9)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N))
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                          (GHC.Base.mappend
                             @ (Data.Array.Accelerate.Smart.Exp c)
                             w6
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ c
                                @ (a, b, c, d)
                                $dElt4
                                $dIsProduct
                                w2
                                (Data.Array.Accelerate.Smart.tix1 @ (((), a), b) @ c @ d)
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Trans
                                        ((,)
                                           (Trans
                                                ((,)
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                             <b>_N <a>_N))
                                                   <c>_N)_N
                                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                          <c>_N <b>_N <a>_N)))
                                           <d>_N)_N
                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                  <d>_N <c>_N <b>_N <a>_N)))
                                   <c>_N)_R
                                w8)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ c
                                @ (a, b, c, d)
                                $dElt4
                                $dIsProduct
                                w2
                                (Data.Array.Accelerate.Smart.tix1 @ (((), a), b) @ c @ d)
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Trans
                                        ((,)
                                           (Trans
                                                ((,)
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                             <b>_N <a>_N))
                                                   <c>_N)_N
                                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                          <c>_N <b>_N <a>_N)))
                                           <d>_N)_N
                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                  <d>_N <c>_N <b>_N <a>_N)))
                                   <c>_N)_R
                                w9)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N))
                            `cast`
                          (Data.Array.Accelerate.Smart.Exp
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                       (GHC.Base.mappend
                          @ (Data.Array.Accelerate.Smart.Exp d)
                          w7
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ d
                             @ (a, b, c, d)
                             $dElt4
                             $dIsProduct
                             w3
                             (Data.Array.Accelerate.Product.$WZeroTupIdx
                                @ d
                                @ ((((), a), b), c))
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Trans
                                     ((,)
                                        (Trans
                                             ((,)
                                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                          <b>_N <a>_N))
                                                <c>_N)_N
                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                       <c>_N <b>_N <a>_N)))
                                        <d>_N)_N
                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                               <d>_N <c>_N <b>_N <a>_N)))
                                <d>_N)_R
                             w8)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ d
                             @ (a, b, c, d)
                             $dElt4
                             $dIsProduct
                             w3
                             (Data.Array.Accelerate.Product.$WZeroTupIdx
                                @ d
                                @ ((((), a), b), c))
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Trans
                                     ((,)
                                        (Trans
                                             ((,)
                                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                          <b>_N <a>_N))
                                                <c>_N)_N
                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                       <c>_N <b>_N <a>_N)))
                                        <d>_N)_N
                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                               <d>_N <c>_N <b>_N <a>_N)))
                                <d>_N)_R
                             w9)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Trans
                            ((,)
                               (Trans
                                    ((,)
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                 <Data.Array.Accelerate.Lift.Plain
                                                    (Data.Array.Accelerate.Smart.Exp b)>_N
                                                 <Data.Array.Accelerate.Lift.Plain
                                                    (Data.Array.Accelerate.Smart.Exp a)>_N))
                                       <Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp c)>_N)_N
                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp c)>_N
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp b)>_N
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp a)>_N)))
                               <Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp d)>_N)_N
                            (Trans
                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp d)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp c)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp b)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp a)>_N))
                                 (Data.Array.Accelerate.Product.ProdRepr
                                    (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                              <Data.Array.Accelerate.Smart.Exp d>_N
                                              <Data.Array.Accelerate.Smart.Exp c>_N
                                              <Data.Array.Accelerate.Smart.Exp b>_N
                                              <Data.Array.Accelerate.Smart.Exp a>_N)))_N)))_R #)) -}
475173bca82f185d3eba478be732a1b5
  $w$cmappend1 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c)) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> (# Data.Array.Accelerate.Array.Sugar.Elt
            (Data.Array.Accelerate.Lift.Plain
               (Data.Array.Accelerate.Smart.Exp a,
                Data.Array.Accelerate.Smart.Exp b,
                Data.Array.Accelerate.Smart.Exp c)),
          Data.Array.Accelerate.Array.Sugar.IsTuple
            (Data.Array.Accelerate.Lift.Plain
               (Data.Array.Accelerate.Smart.Exp a,
                Data.Array.Accelerate.Smart.Exp b,
                Data.Array.Accelerate.Smart.Exp c)),
          Data.Array.Accelerate.Array.Sugar.Tuple
            Data.Array.Accelerate.Smart.Exp
            (Data.Array.Accelerate.Array.Sugar.TupleRepr
               (Data.Array.Accelerate.Lift.Plain
                  (Data.Array.Accelerate.Smart.Exp a,
                   Data.Array.Accelerate.Smart.Exp b,
                   Data.Array.Accelerate.Smart.Exp c))) #)
  {- Arity: 8,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (w3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w5 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   (w6 :: Data.Array.Accelerate.Smart.Exp (a, b, c))
                   (w7 :: Data.Array.Accelerate.Smart.Exp (a, b, c)) ->
                 (# (Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       w `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       w2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Elt
                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                 <Data.Array.Accelerate.Smart.Exp c>_N
                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_R,
                    (Data.Array.Accelerate.Product.$fIsProductcst(,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       w `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       w2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Product.IsProduct
                       <Data.Array.Accelerate.Array.Sugar.Elt>_N
                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                 <Data.Array.Accelerate.Smart.Exp c>_N
                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_R,
                    let {
                      $dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c)
                      = Data.Array.Accelerate.Array.Sugar.$fElt(,,) @ a @ b @ c w w1 w2
                    } in
                    let {
                      $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple (a, b, c)
                      = Data.Array.Accelerate.Product.$fIsProductcst(,,)
                          @ Data.Array.Accelerate.Array.Sugar.Elt
                          @ a
                          @ b
                          @ c
                          w
                          w1
                          w2
                    } in
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ ((((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a)),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp b)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (((),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @~ <((((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp c))>_N
                       w2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b))
                          @ (Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b))
                          @ ((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a))
                          @~ <(((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b))>_N
                          w1
                            `cast`
                          (Data.Array.Accelerate.Array.Sugar.Elt
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a))
                             @ (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a))
                             @ ()
                             @~ <((),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a))>_N
                             w `cast`
                             (Data.Array.Accelerate.Array.Sugar.Elt
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (GHC.Base.mappend
                                @ (Data.Array.Accelerate.Smart.Exp a)
                                w3
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c)
                                   $dElt3
                                   $dIsProduct
                                   w
                                   (Data.Array.Accelerate.Smart.tix2 @ () @ a @ b @ c)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                        <b>_N <a>_N))
                                              <c>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                     <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   w6)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c)
                                   $dElt3
                                   $dIsProduct
                                   w
                                   (Data.Array.Accelerate.Smart.tix2 @ () @ a @ b @ c)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                        <b>_N <a>_N))
                                              <c>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                     <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   w7)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                          (GHC.Base.mappend
                             @ (Data.Array.Accelerate.Smart.Exp b)
                             w4
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ b
                                @ (a, b, c)
                                $dElt3
                                $dIsProduct
                                w1
                                (Data.Array.Accelerate.Smart.tix1 @ ((), a) @ b @ c)
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Trans
                                        ((,)
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                     <b>_N <a>_N))
                                           <c>_N)_N
                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                  <c>_N <b>_N <a>_N)))
                                   <b>_N)_R
                                w6)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ b
                                @ (a, b, c)
                                $dElt3
                                $dIsProduct
                                w1
                                (Data.Array.Accelerate.Smart.tix1 @ ((), a) @ b @ c)
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Trans
                                        ((,)
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                     <b>_N <a>_N))
                                           <c>_N)_N
                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                  <c>_N <b>_N <a>_N)))
                                   <b>_N)_R
                                w7)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N))
                            `cast`
                          (Data.Array.Accelerate.Smart.Exp
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                       (GHC.Base.mappend
                          @ (Data.Array.Accelerate.Smart.Exp c)
                          w5
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ c
                             @ (a, b, c)
                             $dElt3
                             $dIsProduct
                             w2
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ c @ (((), a), b))
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Trans
                                     ((,)
                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                  <b>_N <a>_N))
                                        <c>_N)_N
                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                               <c>_N <b>_N <a>_N)))
                                <c>_N)_R
                             w6)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ c
                             @ (a, b, c)
                             $dElt3
                             $dIsProduct
                             w2
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ c @ (((), a), b))
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Trans
                                     ((,)
                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                  <b>_N <a>_N))
                                        <c>_N)_N
                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                               <c>_N <b>_N <a>_N)))
                                <c>_N)_R
                             w7)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Trans
                            ((,)
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                         <Data.Array.Accelerate.Lift.Plain
                                            (Data.Array.Accelerate.Smart.Exp b)>_N
                                         <Data.Array.Accelerate.Lift.Plain
                                            (Data.Array.Accelerate.Smart.Exp a)>_N))
                               <Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp c)>_N)_N
                            (Trans
                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp c)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp b)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp a)>_N))
                                 (Data.Array.Accelerate.Product.ProdRepr
                                    (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                              <Data.Array.Accelerate.Smart.Exp c>_N
                                              <Data.Array.Accelerate.Smart.Exp b>_N
                                              <Data.Array.Accelerate.Smart.Exp a>_N)))_N)))_R #)) -}
8a7d72ebad31d99e850548820cf8800e
  $w$cmappend2 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b)) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp (a, b)
    -> (# Data.Array.Accelerate.Array.Sugar.Elt
            (Data.Array.Accelerate.Lift.Plain
               (Data.Array.Accelerate.Smart.Exp a,
                Data.Array.Accelerate.Smart.Exp b)),
          Data.Array.Accelerate.Array.Sugar.IsTuple
            (Data.Array.Accelerate.Lift.Plain
               (Data.Array.Accelerate.Smart.Exp a,
                Data.Array.Accelerate.Smart.Exp b)),
          Data.Array.Accelerate.Array.Sugar.Tuple
            Data.Array.Accelerate.Smart.Exp
            (Data.Array.Accelerate.Array.Sugar.TupleRepr
               (Data.Array.Accelerate.Lift.Plain
                  (Data.Array.Accelerate.Smart.Exp a,
                   Data.Array.Accelerate.Smart.Exp b))) #)
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(A,1*C1(C1(U)),A)><L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w3 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w4 :: Data.Array.Accelerate.Smart.Exp (a, b))
                   (w5 :: Data.Array.Accelerate.Smart.Exp (a, b)) ->
                 (# (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       w `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Elt
                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_R,
                    (Data.Array.Accelerate.Product.$fIsProductcst(,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       w `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Product.IsProduct
                       <Data.Array.Accelerate.Array.Sugar.Elt>_N
                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_R,
                    let {
                      $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b)
                      = Data.Array.Accelerate.Array.Sugar.$fElt(,) @ a @ b w w1
                    } in
                    let {
                      $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple (a, b)
                      = Data.Array.Accelerate.Product.$fIsProductcst(,)
                          @ Data.Array.Accelerate.Array.Sugar.Elt
                          @ a
                          @ b
                          w
                          w1
                    } in
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (((),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp a)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ ((),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @~ <(((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))>_N
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ ((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a))
                          @ (Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a))
                          @ ()
                          @~ <((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a))>_N
                          w `cast`
                          (Data.Array.Accelerate.Array.Sugar.Elt
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                          (Data.Array.Accelerate.Array.Sugar.$WNilTup
                             @ Data.Array.Accelerate.Smart.Exp)
                          (GHC.Base.mappend
                             @ (Data.Array.Accelerate.Smart.Exp a)
                             w2
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ a
                                @ (a, b)
                                $dElt2
                                $dIsProduct
                                w
                                (Data.Array.Accelerate.Smart.tix1 @ () @ a @ b)
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <b>_N <a>_N))
                                   <a>_N)_R
                                w4)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ a
                                @ (a, b)
                                $dElt2
                                $dIsProduct
                                w
                                (Data.Array.Accelerate.Smart.tix1 @ () @ a @ b)
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <b>_N <a>_N))
                                   <a>_N)_R
                                w5)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                            `cast`
                          (Data.Array.Accelerate.Smart.Exp
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                       (GHC.Base.mappend
                          @ (Data.Array.Accelerate.Smart.Exp b)
                          w3
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ b
                             @ (a, b)
                             $dElt2
                             $dIsProduct
                             w1
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), a))
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                          <b>_N <a>_N))
                                <b>_N)_R
                             w4)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                          (Data.Array.Accelerate.Smart.Prj
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ b
                             @ (a, b)
                             $dElt2
                             $dIsProduct
                             w1
                             (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), a))
                               `cast`
                             (Data.Array.Accelerate.Product.TupleIdx
                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                          <b>_N <a>_N))
                                <b>_N)_R
                             w5)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Trans
                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                      <Data.Array.Accelerate.Lift.Plain
                                         (Data.Array.Accelerate.Smart.Exp b)>_N
                                      <Data.Array.Accelerate.Lift.Plain
                                         (Data.Array.Accelerate.Smart.Exp a)>_N))
                            (Data.Array.Accelerate.Product.ProdRepr
                               (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                         <Data.Array.Accelerate.Smart.Exp b>_N
                                         <Data.Array.Accelerate.Smart.Exp a>_N)))_N))_R #)) -}
7da662c10d7238ef5c4c5aa2c846c17f
  $w$cmempty ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c),
     GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) =>
    (# Data.Array.Accelerate.Array.Sugar.Elt
         (Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp a,
             Data.Array.Accelerate.Smart.Exp b,
             Data.Array.Accelerate.Smart.Exp c,
             Data.Array.Accelerate.Smart.Exp d)),
       Data.Array.Accelerate.Array.Sugar.IsTuple
         (Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Smart.Exp a,
             Data.Array.Accelerate.Smart.Exp b,
             Data.Array.Accelerate.Smart.Exp c,
             Data.Array.Accelerate.Smart.Exp d)),
       Data.Array.Accelerate.Array.Sugar.Tuple
         Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Array.Sugar.TupleRepr
            (Data.Array.Accelerate.Lift.Plain
               (Data.Array.Accelerate.Smart.Exp a,
                Data.Array.Accelerate.Smart.Exp b,
                Data.Array.Accelerate.Smart.Exp c,
                Data.Array.Accelerate.Smart.Exp d))) #)
  {- Arity: 8,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)><L,1*U(1*U,A,A)>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (w3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   (w4 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp a))
                   (w5 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp b))
                   (w6 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp c))
                   (w7 :: GHC.Base.Monoid (Data.Array.Accelerate.Smart.Exp d)) ->
                 (# (Data.Array.Accelerate.Array.Sugar.$fElt(,,,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       w `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       w2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       w3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Elt
                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                 <Data.Array.Accelerate.Smart.Exp d>_N
                                 <Data.Array.Accelerate.Smart.Exp c>_N
                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_R,
                    (Data.Array.Accelerate.Product.$fIsProductcst(,,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       w `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       w1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       w2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       w3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Product.IsProduct
                       <Data.Array.Accelerate.Array.Sugar.Elt>_N
                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                 <Data.Array.Accelerate.Smart.Exp d>_N
                                 <Data.Array.Accelerate.Smart.Exp c>_N
                                 <Data.Array.Accelerate.Smart.Exp b>_N
                                 <Data.Array.Accelerate.Smart.Exp a>_N)))_R,
                    (Data.Array.Accelerate.Array.Sugar.SnocTup
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (((((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b)),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp c)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ ((((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a)),
                           Data.Array.Accelerate.Lift.Plain
                             (Data.Array.Accelerate.Smart.Exp b)),
                          Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @~ <(((((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp c)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp d))>_N
                       w3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ ((((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp c))
                          @ (Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp c))
                          @ (((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b))
                          @~ <((((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp a)),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c))>_N
                          w2
                            `cast`
                          (Data.Array.Accelerate.Array.Sugar.Elt
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp a)),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b))
                             @ (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b))
                             @ ((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a))
                             @~ <(((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b))>_N
                             w1
                               `cast`
                             (Data.Array.Accelerate.Array.Sugar.Elt
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                             (Data.Array.Accelerate.Array.Sugar.SnocTup
                                @ Data.Array.Accelerate.Smart.Exp
                                @ ((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a))
                                @ (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a))
                                @ ()
                                @~ <((),
                                     Data.Array.Accelerate.Lift.Plain
                                       (Data.Array.Accelerate.Smart.Exp a))>_N
                                w `cast`
                                (Data.Array.Accelerate.Array.Sugar.Elt
                                   (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                                (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                   @ Data.Array.Accelerate.Smart.Exp)
                                (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp a) w4)
                                  `cast`
                                (Data.Array.Accelerate.Smart.Exp
                                   (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                             (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp b) w5)
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                          (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp c) w6)
                            `cast`
                          (Data.Array.Accelerate.Smart.Exp
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                       (GHC.Base.mempty @ (Data.Array.Accelerate.Smart.Exp d) w7)
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R)
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Tuple
                       <Data.Array.Accelerate.Smart.Exp>_R
                       (Trans
                            ((,)
                               (Trans
                                    ((,)
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                 <Data.Array.Accelerate.Lift.Plain
                                                    (Data.Array.Accelerate.Smart.Exp b)>_N
                                                 <Data.Array.Accelerate.Lift.Plain
                                                    (Data.Array.Accelerate.Smart.Exp a)>_N))
                                       <Data.Array.Accelerate.Lift.Plain
                                          (Data.Array.Accelerate.Smart.Exp c)>_N)_N
                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp c)>_N
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp b)>_N
                                              <Data.Array.Accelerate.Lift.Plain
                                                 (Data.Array.Accelerate.Smart.Exp a)>_N)))
                               <Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp d)>_N)_N
                            (Trans
                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp d)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp c)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp b)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp a)>_N))
                                 (Data.Array.Accelerate.Product.ProdRepr
                                    (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                              <Data.Array.Accelerate.Smart.Exp d>_N
                                              <Data.Array.Accelerate.Smart.Exp c>_N
                                              <Data.Array.Accelerate.Smart.Exp b>_N
                                              <Data.Array.Accelerate.Smart.Exp a>_N)))_N)))_R #)) -}
6397b8a50f86066b487bb7a6b7754f7d
  axiom D:R:EltReprProduct::
    [a]
      Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Product a)
        = ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
cba5e04ec8fcef9e4313ed56a514d718
  axiom D:R:EltReprSum::
    [a]
      Data.Array.Accelerate.Array.Sugar.EltRepr (Data.Monoid.Sum a)
        = ((), Data.Array.Accelerate.Array.Sugar.EltRepr a)
444c5b688e8b049f6522c0a13d01b3f9
  axiom D:R:PlainProduct::
    [a]
      Data.Array.Accelerate.Lift.Plain (Data.Monoid.Product a)
        = Data.Monoid.Product (Data.Array.Accelerate.Lift.Plain a)
84cb50f641b158b987160e59ad5771ad
  axiom D:R:PlainSum::
    [a]
      Data.Array.Accelerate.Lift.Plain (Data.Monoid.Sum a)
        = Data.Monoid.Sum (Data.Array.Accelerate.Lift.Plain a)
f7397451850b37a6d264da49e829ebe3
  axiom D:R:ProdReprProduct::
    [a]
      Data.Array.Accelerate.Product.ProdRepr (Data.Monoid.Product a)
        = ((), a)
257b87b7a53349f109012f81217e3712
  axiom D:R:ProdReprSum::
    [a]
      Data.Array.Accelerate.Product.ProdRepr (Data.Monoid.Sum a)
        = ((), a)
instance Data.Array.Accelerate.Array.Sugar.Elt [Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.$fEltProduct
instance Data.Array.Accelerate.Array.Sugar.Elt [Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.$fEltSum
instance Data.Array.Accelerate.Classes.Eq.Eq [Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.$fEqProduct
instance Data.Array.Accelerate.Classes.Eq.Eq [Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.$fEqSum
instance Data.Array.Accelerate.Product.IsProduct [Data.Array.Accelerate.Array.Sugar.Elt,
                                                  Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.$fIsProductEltProduct
instance Data.Array.Accelerate.Product.IsProduct [Data.Array.Accelerate.Array.Sugar.Elt,
                                                  Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.$fIsProductEltSum
instance Data.Array.Accelerate.Lift.Lift [Data.Array.Accelerate.Smart.Exp,
                                          Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.$fLiftExpProduct
instance Data.Array.Accelerate.Lift.Lift [Data.Array.Accelerate.Smart.Exp,
                                          Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.$fLiftExpSum
instance GHC.Base.Monoid [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fMonoidExp
instance GHC.Base.Monoid [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fMonoidExp0
instance GHC.Base.Monoid [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fMonoidExp1
instance GHC.Base.Monoid [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fMonoidExp2
instance GHC.Base.Monoid [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fMonoidExp3
instance GHC.Base.Monoid [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fMonoidExp4
instance GHC.Base.Monoid [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fMonoidExp5
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fNumExp
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Data.Monoid.$fNumExp0
instance Data.Array.Accelerate.Classes.Ord.Ord [Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.$fOrdProduct
instance Data.Array.Accelerate.Classes.Ord.Ord [Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.$fOrdSum
instance Data.Array.Accelerate.Lift.Unlift [Data.Array.Accelerate.Smart.Exp,
                                            Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.$fUnliftExpProduct
instance Data.Array.Accelerate.Lift.Unlift [Data.Array.Accelerate.Smart.Exp,
                                            Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.$fUnliftExpSum
family instance Data.Array.Accelerate.Array.Sugar.EltRepr [Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.D:R:EltReprSum
family instance Data.Array.Accelerate.Array.Sugar.EltRepr [Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.D:R:EltReprProduct
family instance Data.Array.Accelerate.Lift.Plain [Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.D:R:PlainSum
family instance Data.Array.Accelerate.Lift.Plain [Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.D:R:PlainProduct
family instance Data.Array.Accelerate.Product.ProdRepr [Data.Monoid.Sum]
  = Data.Array.Accelerate.Data.Monoid.D:R:ProdReprSum
family instance Data.Array.Accelerate.Product.ProdRepr [Data.Monoid.Product]
  = Data.Array.Accelerate.Data.Monoid.D:R:ProdReprProduct
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

