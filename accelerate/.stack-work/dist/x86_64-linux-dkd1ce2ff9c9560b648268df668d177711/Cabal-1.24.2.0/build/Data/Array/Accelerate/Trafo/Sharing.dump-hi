
==================== FINAL INTERFACE ====================
2017-08-29 05:28:18.494966 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Sharing [family instance module] 8002
  interface hash: 133a9516937cb8fc113393b4ce69ab50
  ABI hash: 21bc326414b6c38d04ea1d264783a384
  export-list hash: 1a96218264d6786e138f9a507bae1439
  orphan hash: 269a722eb5b906089f835beec738aadd
  flag hash: 2e2867ffaf82a828f715a25a84f21607
  sig of: Nothing
  used TH splices: True
  where
exports:
  Data.Array.Accelerate.Trafo.Sharing.convertAcc
  Data.Array.Accelerate.Trafo.Sharing.convertAfun
  Data.Array.Accelerate.Trafo.Sharing.convertExp
  Data.Array.Accelerate.Trafo.Sharing.convertFun
  Data.Array.Accelerate.Trafo.Sharing.Afunction{Data.Array.Accelerate.Trafo.Sharing.AfunctionR}
  Data.Array.Accelerate.Trafo.Sharing.Function{Data.Array.Accelerate.Trafo.Sharing.FunctionR}
module dependencies: Data.Array.Accelerate.AST
                     Data.Array.Accelerate.Analysis.Hash
                     Data.Array.Accelerate.Analysis.Hash.TH
                     Data.Array.Accelerate.Analysis.Match
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique Data.Array.Accelerate.Debug
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Stats Data.Array.Accelerate.Debug.Timed
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Lifetime
                     Data.Array.Accelerate.Pretty.Graphviz
                     Data.Array.Accelerate.Pretty.Graphviz.Monad
                     Data.Array.Accelerate.Pretty.Graphviz.Type
                     Data.Array.Accelerate.Pretty.Print Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Smart Data.Array.Accelerate.Trafo.Base
                     Data.Array.Accelerate.Trafo.Substitution Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      hashtables-1.2.1.1@hashtables-1.2.1.1-CvCXxmZFzjODUwEtnf4YU7
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Smart
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Base
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Substitution
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  Data.Array.Accelerate.AST 4907563d36aadcb5fe024fe0eaf42ffa
  exports: 14f3cf8c02b472222e546556891c5be1
  Abody ee120ad61e0a5f248fbde7e991e9af28
  Acc a01eea241a2bac92d453216e0d79448e
  Acond 750209431eae401dfff3c860bd1e2fc6
  Aforeign 5214b73c1fba23d3d4e7f85cb199ac1c
  Afun 30d1ccfa7d785b48f1fe2113bd7841b4
  Alam 9e3e3605bc50ad599485b7c0977e13d9
  Alet 0ab0425bc7b0ec829dbc083ffa16825d
  Apply acd8c8af26b0a8b682df360df59fa8be
  Aprj 404b31d0a415df80893151ff13fb0846
  Atuple 902517e36fd9d4d0cfb6191b1c6684eb
  Avar b9746522dbbe78edef452606b6656a87
  Awhile 14384d8a9ba2da72092122c848e2ae32
  Backpermute 4f66d0e89ef4df5962354aa16441f617
  Body 1196576b2aa6a07bc2357625785ef2e5
  Boundary 710a652edeea6147a461e884a9d7e24b
  Clamp c3a43eecdb9882efc038c7b9062cdcb4
  Cond 85b737c39381609050fcedb2a2391a92
  Const d4b278465afaa56210a92bc3030b1c81
  Constant 109db35160e400a315f90946c081dc01
  Exp 193cbb0e6397a8830bfefbb64f224369
  Fold bb3f680fb271e4fc52befb09d536ab67
  Fold1 81a218046119358257d76f4180b62916
  Fold1Seg e17f7dec7f49bed9b09c5dddc31f075f
  FoldSeg 066501eca698e8d157f1bbd44032854e
  Foreign cd3ba341b3611dd6c5a93df013aa5a0f
  FromIndex 175bd7890f27a032cb2a1e79fa38d269
  Fun 55ceff312de354690e32ea06e9f15707
  Function 303d21de1401dc1e63266aacbd76779e
  Generate 36e058fa32bd3e74acd8e2c33b47dc54
  Idx 9e7661ad7cc1bdaa299ff04fb99275fb
  Index 63200e0b9961802f7b038a2e740789b0
  IndexAny 76a617483a4b1532550fe134ec1b4e43
  IndexCons a015173a5dad6ebd2b8e31b35afb501a
  IndexHead 3f325360371c4024fd7e59caec7726dd
  IndexNil 8331ee2296cdcd4d19411e11e8205177
  IndexTail 08923ce42f0b849d79fabcb6207dc0a4
  Intersect d61777171aa2d140c0046919d45de878
  Lam 158725fe690b603ce6a570d589782162
  Let fb7635520863b39ad81ae4c22c0dfd53
  LinearIndex d5e9e584798a5b18adfd76ceee4f21f3
  Map c186fc6c7cc5f818dedf44e9c7679cfc
  Mirror f990633b0e9d96822dbfd328904ab57b
  OpenAcc 3461fc2319f9b06050cf56128e83b27c
  OpenAcc d85164a68dcedbc8a54813dd240745cc
  OpenAfun d85164a68dcedbc8a54813dd240745cc
  OpenExp d85164a68dcedbc8a54813dd240745cc
  OpenFun d85164a68dcedbc8a54813dd240745cc
  Permute 0d48aeaf25db12c40fda0dfdecef40cf
  PreBoundary f77d583ab18e537cb481471882c136a8
  PreOpenAcc 1c6afba98b6c67e35689096ef2f6efe3
  PrimApp 4153e64d1996ff9e8d5bab83757d04cc
  PrimConst c3e9d3e0be46d673c989e142b6fb53f5
  PrimFun 66016ad2b3472f117aa67ab3504b9f9e
  Prj ea0969c2ebd78e8f97f90fdce0ec5b85
  Replicate b45b307c3ac5834be45157f9b97164b0
  Reshape 47f08dcad6d10e3aa1cb6093ba11dd85
  Scanl 396bf0430f22f20afe3957f5ca59a08b
  Scanl' 1adc9e003ccf30f16828abd0fd78615a
  Scanl1 1276c7f35ce3c67a27dcc2ffd5def021
  Scanr 1a875086cf9a77ee605ee5eb6845fb3d
  Scanr' 93cb828599b9e47e6605e12c5a38e182
  Scanr1 80c7de53ede553c41fe8bb104ed3dbc8
  Shape 188e3cfc394232139edff3a93b6fc738
  ShapeSize f339b41eb7026d658f318c6ff3b1ddbd
  Slice 0f021a8f0af5175920645825ac2450a8
  Stencil 09b6572f0048c550f2782ea5ac548286
  Stencil2 bbe92a77ce856793eceb2afaa356761b
  SuccIdx 076f2d7bd7da8ff1d9570f0dbeb5674a
  ToIndex 1778bb2206e9b9af2bfb73385aa8fcf6
  Tuple 286fa31822ac85195775eaca8264e583
  Union a7d3a050ed47fbfc04189bf738e5cbf8
  Unit 6a040b1551bc804afa771300d0236e16
  Use d69e2b4a5c6ddbf9268deeebd8e6f6e2
  Var 316870341ee21060a306c8836bf702a6
  While e1c4381be88ce0fc5eeff6f5cfbbbe14
  Wrap ebef9cf28c72cc8d1ebbffba633ea578
  ZeroIdx 2872af3fb6867732883d5517094bca30
  ZipWith 51d1ce30678f2f98e0a9db1215a02e6e
import  -/  Data.Array.Accelerate.Array.Sugar 1095a84a969562bd64b7800341e0d23c
  exports: a6dd551b39ab2a3a217fc8c2a6979cd5
  Array 78f23e81404aaf1e43268a71a575425c
  Arrays 3cc6db7d6b3c36ee0c840e1566f75d38
  Atuple 6feaa0161ffad15a746afb867f21f70b
  Elt 78f23e81404aaf1e43268a71a575425c
  FullShape b7faae048fa0a842f86460a6c84a131d
  NilAtup cc36880f178a7e9e125505f43c8172e2
  NilTup 36796631cb3a95a68e6a4dde7e7b2bbe
  Slice 78f23e81404aaf1e43268a71a575425c
  SliceShape bd501b3c0eaee4d3c0c33e67a5d6690a
  SnocAtup 8508890a48fc19a3130443094eda67f2
  SnocTup ef3a739bcf04e48a53d49112dce542ea
  Tuple 878418f2d4c18f6518d438b74451ef4e
  fromArr a02fba7e549192bcfaec3707ce480284
  fromElt 861af21aa559d711d2643de35185f0ce
  sliceIndex 82e8e06e6c0e573cf9d92fdd385691d8
import  -/  Data.Array.Accelerate.Debug 48fd217a26d4240434223974d5084c0c
  exports: 7e8587d30c425be122b3b310eb4ec0ea
import  -/  Data.Array.Accelerate.Debug.Flags 4ae65d880031597019ea1d1d62ef661e
  dump_sharing 1291b0f6700854988412e579294cf88a
import  -/  Data.Array.Accelerate.Debug.Trace 365190b9829a1554a2d495d3f4fb1682
  trace cdd87d23deae53b9ad0b8bc78882192c
  traceIO bf3190e68fbfa59511d56a82757db26c
import  -/  Data.Array.Accelerate.Error 9ed2d4a71009d558f562e118e9d36a23
  exports: f46a01ad5e78f9618f7a91c4ba90bc31
  Internal 354d17f13fa8c5b135052bcadc13dc67
  call 95bf4b02947c8c3e282c15050c022fa9
  internalError aa331c50846093a3a39d2946a445c28d
  message 43164dbb4cecc9911948fd9ecaf0a042
import  -/  Data.Array.Accelerate.Smart c6a471aeed497009ce791e94dc05d100
  exports: 1e3a20050ce25466608a82a26d24d5f0
  Acc 4a164f5e174079736ad2d5fe6620f3ae
  Acc dff601899922d9e86e5ab6941dfbac5f
  Acond 1f46b8659b8858228bc976e8ddccd16d
  Aforeign a0f9d770c77b06425e0ebe709581fbb9
  Aprj 9681cf8ad9fcaa15bbdf2bb6b2905d25
  Atag fd1ccd6d700d03ddcc757a5e240db243
  Atuple 7531404162d82ef9f1abe31c5752fd70
  Awhile c8105d184eeabd25a132bc012affd004
  Backpermute 0ff8597c27f580824016f0f72ffcd035
  Clamp f6cd9b1637b002a73502a2d0202cb3ed
  Cond 4628c12b51c834347b1c399b590eac59
  Const 47a7370c0dff85214a71205d43d09c85
  Constant 886daafd08a15c98cc6199c54360b5fd
  Exp 2fd934232a7ed8f151cd01d9504e7b9f
  Exp dff601899922d9e86e5ab6941dfbac5f
  Fold 4208a2ab124e96cd8753f60366f41435
  Fold1 582c997327b9340df6ef912bfaa1c84a
  Fold1Seg 98512b552e2cf2b36570daf816bf3c91
  FoldSeg 0c138273c3ff338784d416078e6cfc84
  Foreign 7136ca05e947b0e73597810ce09cc8f7
  FromIndex 57562549b71f62a1ac9db4be9177ca63
  Function 996d7382fc5ec29fd9f2fb15a32925d4
  Generate afe3516c724a80fe5a3154bf64a85f82
  Index eee4c69772eb20abfa2354224c1cf803
  IndexAny 7333af084a9d4b0a03e4ff7ecf8e095a
  IndexCons f1f85370d35d47a3a1bd06f717860082
  IndexHead a3dcf1c37cc1041b1d46d74292b92f3c
  IndexNil 2c7add0f523f2db34528dd280ff9a433
  IndexTail 012019a307d07ab5e2f2dd4fe141658c
  Intersect 800043d747c4cb12272b7af51ba022c8
  Level f4451b5daf00a08e4642895b5dc52859
  LinearIndex 97db30a134eadf78bc5d366b6002b044
  Map abe29321659061f4e44a3fc91b038f4b
  Mirror 4abcfe839571340865dd2eec73f37073
  Permute 35cd9489778ef203ff30f00a5b09e3d4
  Pipe 64db37be62324623ceb32890015f8ed7
  PreAcc dff601899922d9e86e5ab6941dfbac5f
  PreBoundary dff601899922d9e86e5ab6941dfbac5f
  PreExp dff601899922d9e86e5ab6941dfbac5f
  PrimApp e16dc92daed33834bca4edd5759f9db1
  PrimConst 9801a59404a32564e739e3d5b1b137d2
  Prj 57e14165c8d4d18324b3351c490c5c28
  Replicate 9e1d2fc0343423f1e86df4c365e83616
  Reshape 3ec2cd19d0a147b57ae6902ddec3685b
  Scanl 4c1edf31dc45b07d2b60ba1eadaf0623
  Scanl' bea8dca1fee4008016a91f77113793ff
  Scanl1 2289844b50a8be3060fcfe7faa4ad0e0
  Scanr 0f6842b0e29995092cef54d232f5dfd9
  Scanr' 3c92a034a1165eefdcc4ff24a09c3af1
  Scanr1 7b59b540aa797fe9e56db3254d857c11
  Shape e23aa05dcaf566623d034b4d3f2790ec
  ShapeSize 78fd09917250e4dac01bded99dbba41f
  Slice f8ce11da95bb3bb50f406603f6181a4e
  Stencil ac40c388323d5f1a5c911217a0e5f37a
  Stencil dff601899922d9e86e5ab6941dfbac5f
  Stencil2 7d100851ff73a197e0f3904146d9427d
  StencilRepr 61cf93d1fbcd436d6337c27c8b2954cb
  Tag a99c777b27d47fe4f2363bae7072d32d
  ToIndex 29c696db6a0470459a6e9071cbf64f93
  Tuple d9b38326707777837f9071d0b8b84579
  Union 46c521b8b314eb58ceaab3dbbcb6caec
  Unit b2c96fa4340cdfaf589d4ac7b8963cf2
  Use 53e7f68a57506a8f88e3b18e8730b626
  While cfa001692d2530a211574d427e1300f3
  Wrap e3f6d61f066455bed8bf0f06aed9b8ed
  ZipWith 6a5445d8dc6243d6471c9223e905f61d
  showPreAccOp c664712c14a61c980db78cc5f24e4d84
  showPreExpOp eb45310a1f23e1fce5827dac3e79fa4d
  stencilPrj db8c977cb5ec6b123fe20ac7784ed0fb
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Monad.Fix 1847625fb543f2f5c2510a02760c6b1a
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:Data.Typeable.Internal 0e9bdefa4325a0112d8e73b5e1e1f85d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  base-4.9.1.0:System.Mem.StableName 23f9e05ef19db7982375ca2ae4791ca9
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap 95327db6b6fbb3f03bedc684af6bf84f
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base 248d3140f4906d3f80988682df5d56f3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable 27b03ff780e9d73195c5aaa1719f6919
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Class a1b222b41dee000240e3f24bda9d56d9
import  -/  hashtables-1.2.1.1@hashtables-1.2.1.1-CvCXxmZFzjODUwEtnf4YU7:Data.HashTable.IO f47b4486acd7885cd54517bc141fe8b4
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base 214d0e8bbe09552a4e9173f83388cb27
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict cdc8d7d8128e5603c14becb8a365dbe4
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet fc979ee2b38aaa038af760db40c35f4a
792ed38aabc59ccdd5401f09d3755737
  $fAfunction(->) ::
    (Data.Array.Accelerate.Array.Sugar.Arrays a,
     Data.Array.Accelerate.Trafo.Sharing.Afunction r) =>
    Data.Array.Accelerate.Trafo.Sharing.Afunction
      (Data.Array.Accelerate.Smart.Acc a -> r)
  DFunId
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U)><L,1*C1(C1(C1(U)))><L,U><L,U><L,1*C1(U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Array.Accelerate.Trafo.Sharing.$fAfunction(->)_$caconvert
                  `cast`
                (forall (a :: <*>_N) (r :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays a>_R
                 ->_R <Data.Array.Accelerate.Trafo.Sharing.Afunction r>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Sharing.N:Afunction[0]
                               <Data.Array.Accelerate.Smart.Acc a -> r>_N)) -}
792ed38aabc59ccdd5401f09d3755737
  $fAfunction(->)1 ::
    (Data.Array.Accelerate.Array.Sugar.Arrays a,
     Data.Array.Accelerate.Trafo.Sharing.Afunction r) =>
    forall aenv.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
    -> (Data.Array.Accelerate.Smart.Acc a -> r)
    -> Data.Array.Accelerate.AST.PreOpenAfun
         Data.Array.Accelerate.AST.OpenAcc
         aenv
         (a -> Data.Array.Accelerate.Trafo.Sharing.AfunctionR r)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U)><L,1*C1(C1(C1(U)))><L,U><L,U><L,1*C1(U)>,
     Unfolding: (\ @ a
                   @ r
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a)
                   ($dAfunction :: Data.Array.Accelerate.Trafo.Sharing.Afunction r)
                   @ aenv
                   (eta :: Data.Array.Accelerate.Trafo.Sharing.Config)
                   (eta1 :: Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv)
                   (eta2 :: Data.Array.Accelerate.Smart.Acc a -> r) ->
                 Data.Array.Accelerate.AST.Alam
                   @ Data.Array.Accelerate.AST.OpenAcc
                   @ aenv
                   @ (a -> Data.Array.Accelerate.Trafo.Sharing.AfunctionR r)
                   @ a
                   @ (Data.Array.Accelerate.Trafo.Sharing.AfunctionR r)
                   @~ <a -> Data.Array.Accelerate.Trafo.Sharing.AfunctionR r>_N
                   $dArrays
                   ($dAfunction
                      `cast`
                    (Data.Array.Accelerate.Trafo.Sharing.N:Afunction[0] <r>_N)
                      @ (aenv, a)
                      eta
                      (Data.Array.Accelerate.Trafo.Sharing.PushLayout
                         @ (aenv, a)
                         @ (aenv, a)
                         @ a
                         @ aenv
                         @~ <(aenv, a)>_N
                         (Data.Array.Accelerate.Array.Sugar.$p1Arrays @ a $dArrays)
                         (Data.Array.Accelerate.Trafo.Sharing.incLayout
                            @ aenv
                            @ aenv
                            @ a
                            eta1)
                         (Data.Array.Accelerate.AST.$WZeroIdx @ a @ aenv))
                      (eta2
                         (Data.Array.Accelerate.Smart.Atag
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ a
                            $dArrays
                            (Data.Array.Accelerate.Trafo.Sharing.sizeLayout
                               @ aenv
                               @ aenv
                               eta1))
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <a>_N)))) -}
792ed38aabc59ccdd5401f09d3755737
  $fAfunction(->)_$caconvert ::
    (Data.Array.Accelerate.Array.Sugar.Arrays a,
     Data.Array.Accelerate.Trafo.Sharing.Afunction r) =>
    forall aenv.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
    -> (Data.Array.Accelerate.Smart.Acc a -> r)
    -> Data.Array.Accelerate.AST.OpenAfun
         aenv
         (Data.Array.Accelerate.Trafo.Sharing.AfunctionR
            (Data.Array.Accelerate.Smart.Acc a -> r))
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U)><L,1*C1(C1(C1(U)))><L,U><L,U><L,1*C1(U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Sharing.$fAfunction(->)1
                  `cast`
                (forall (a :: <*>_N) (r :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays a>_R
                 ->_R <Data.Array.Accelerate.Trafo.Sharing.Afunction r>_R
                 ->_R forall (aenv :: <*>_N).
                      <Data.Array.Accelerate.Trafo.Sharing.Config>_R
                      ->_R <Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv>_R
                      ->_R <Data.Array.Accelerate.Smart.Acc a -> r>_R
                      ->_R (Data.Array.Accelerate.AST.PreOpenAfun
                              <Data.Array.Accelerate.AST.OpenAcc>_R
                              <aenv>_N
                              (Sym (Data.Array.Accelerate.Trafo.Sharing.D:R:AfunctionR(->)[0]
                                        <r>_N <a>_N)))_R) -}
792ed38aabc59ccdd5401f09d3755737
  $fAfunctionAcc ::
    Data.Array.Accelerate.Array.Sugar.Arrays b =>
    Data.Array.Accelerate.Trafo.Sharing.Afunction
      (Data.Array.Accelerate.Smart.Acc b)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,A,U)><L,U><L,1*U>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Sharing.$fAfunctionAcc_$caconvert
                  `cast`
                (forall (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays b>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Sharing.N:Afunction[0]
                               <Data.Array.Accelerate.Smart.Acc b>_N)) -}
cd79cb95889c2c4dd59abcad8360e318
  $fAfunctionAcc1 ::
    Data.Array.Accelerate.Array.Sugar.Arrays b =>
    forall aenv.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
    -> Data.Array.Accelerate.Smart.Acc b
    -> Data.Array.Accelerate.AST.PreOpenAfun
         Data.Array.Accelerate.AST.OpenAcc aenv b
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,A,U)><L,U><L,1*U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (w :: Data.Array.Accelerate.Array.Sugar.Arrays b)
                   @ aenv
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.Config)
                   (w2 :: Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv)
                   (w3 :: Data.Array.Accelerate.Smart.Acc b) ->
                 case Data.Array.Accelerate.Trafo.Sharing.$w$caconvert
                        @ b
                        w
                        @ aenv
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 Data.Array.Accelerate.AST.Abody
                   @ Data.Array.Accelerate.AST.OpenAcc
                   @ aenv
                   @ b
                   ww1
                   ww2 }) -}
792ed38aabc59ccdd5401f09d3755737
  $fAfunctionAcc_$caconvert ::
    Data.Array.Accelerate.Array.Sugar.Arrays b =>
    forall aenv.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
    -> Data.Array.Accelerate.Smart.Acc b
    -> Data.Array.Accelerate.AST.OpenAfun
         aenv
         (Data.Array.Accelerate.Trafo.Sharing.AfunctionR
            (Data.Array.Accelerate.Smart.Acc b))
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,A,U)><L,U><L,1*U>m1,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Sharing.$fAfunctionAcc1
                  `cast`
                (forall (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays b>_R
                 ->_R forall (aenv :: <*>_N).
                      <Data.Array.Accelerate.Trafo.Sharing.Config>_R
                      ->_R <Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv>_R
                      ->_R <Data.Array.Accelerate.Smart.Acc b>_R
                      ->_R (Data.Array.Accelerate.AST.PreOpenAfun
                              <Data.Array.Accelerate.AST.OpenAcc>_R
                              <aenv>_N
                              (Sym (Data.Array.Accelerate.Trafo.Sharing.D:R:AfunctionRAcc[0]
                                        <b>_N)))_R) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fEqNodeName ::
    GHC.Classes.Eq Data.Array.Accelerate.Trafo.Sharing.NodeName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                  Data.Array.Accelerate.Trafo.Sharing.$fEqNodeName_$c==
                  Data.Array.Accelerate.Trafo.Sharing.$fEqNodeName_$c/= -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fEqNodeName_$c/= ::
    Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> Data.Array.Accelerate.Trafo.Sharing.NodeName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Array.Accelerate.Trafo.Sharing.NodeName)
                   (y :: Data.Array.Accelerate.Trafo.Sharing.NodeName) ->
                 GHC.Classes.not
                   (Data.Array.Accelerate.Trafo.Sharing.$fEqNodeName_$c== x y)) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fEqNodeName_$c== ::
    Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> Data.Array.Accelerate.Trafo.Sharing.NodeName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds1 :: Data.Array.Accelerate.Trafo.Sharing.NodeName)
                   (ds2 :: Data.Array.Accelerate.Trafo.Sharing.NodeName) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.NodeName a $dTypeable1 sn1 ->
                 case ds2 of wild1 { Data.Array.Accelerate.Trafo.Sharing.NodeName a1 $dTypeable2 sn2 ->
                 case $dTypeable2
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <a1>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ a1) of wild2 { Data.Typeable.Internal.TypeRep dt dt1 ds3 ds4 ds5 ->
                 case $dTypeable1
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                        (GHC.Prim.proxy#
                           @ *
                           @ a) of wild3 { Data.Typeable.Internal.TypeRep dt2 dt3 ds6 ds7 ds8 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt dt2) of wild4 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt1 dt3) of wild5 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> System.Mem.StableName.$fEqStableName_$c==
                             @ a
                             sn1
                             sn2
                               `cast`
                             (System.Mem.StableName.StableName
                                (UnsafeCo representational a1 a))_R } } } } } }) -}
b09d3d1c9e72701785befddf3c9c793a
  $fEqStableASTName ::
    GHC.Classes.Eq
      (Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (c :: * -> *).
                  @ (Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                  (Data.Array.Accelerate.Trafo.Sharing.$fEqStableASTName_$c== @ c)
                  (Data.Array.Accelerate.Trafo.Sharing.$fEqStableASTName_$c/= @ c) -}
b09d3d1c9e72701785befddf3c9c793a
  $fEqStableASTName_$c/= ::
    Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ (c :: * -> *)
                   (x :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                   (y :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c) ->
                 GHC.Classes.not
                   (Data.Array.Accelerate.Trafo.Sharing.$fEqStableASTName_$c==
                      @ c
                      x
                      y)) -}
b09d3d1c9e72701785befddf3c9c793a
  $fEqStableASTName_$c== ::
    Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ @ (c :: * -> *)
                   (ds1 :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                   (ds2 :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.StableASTName t $dTypeable1 $dTypeable2 sn1 ->
                 case ds2 of wild1 { Data.Array.Accelerate.Trafo.Sharing.StableASTName t1 $dTypeable3 $dTypeable4 sn2 ->
                 case $dTypeable1
                        `cast`
                      (Data.Typeable.Internal.N:Typeable[0] <* -> *>_N <c>_N)
                        (GHC.Prim.proxy#
                           @ (* -> *)
                           @ c) of wild2 { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ($dTypeable2
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <t>_N)
                                 (GHC.Prim.proxy# @ * @ t))
                              (GHC.Types.[]
                                 @ Data.Typeable.Internal.TypeRep))) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ($dTypeable4
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <t1>_N)
                                 (GHC.Prim.proxy# @ * @ t1))
                              (GHC.Types.[]
                                 @ Data.Typeable.Internal.TypeRep))) of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps1) of dt7 { GHC.Fingerprint.Type.Fingerprint dt8 dt9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt3 dt8) of wild3 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt4 dt9) of wild4 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> System.Mem.StableName.$fEqStableName_$c==
                             @ (c t1)
                             sn1
                               `cast`
                             (System.Mem.StableName.StableName
                                (UnsafeCo representational (c t) (c t1)))_R
                             sn2 } } } } } } } } }) -}
8d8e628e08917450fc183a072404bbf0
  $fEqStableNameHeight ::
    GHC.Classes.Eq
      (Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ t.
                  @ (Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t)
                  (Data.Array.Accelerate.Trafo.Sharing.$fEqStableNameHeight_$c== @ t)
                  (Data.Array.Accelerate.Trafo.Sharing.$fEqStableNameHeight_$c/=
                     @ t) -}
8d8e628e08917450fc183a072404bbf0
  $fEqStableNameHeight_$c/= ::
    Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t
    -> Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ t
                   (x :: Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t)
                   (y :: Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t) ->
                 GHC.Classes.not
                   (Data.Array.Accelerate.Trafo.Sharing.$fEqStableNameHeight_$c==
                      @ t
                      x
                      y)) -}
8d8e628e08917450fc183a072404bbf0
  $fEqStableNameHeight_$c== ::
    Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t
    -> Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),A)><S(S(S)L),1*U(1*U(U),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   (ds1 :: Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t)
                   (ds2 :: Data.Array.Accelerate.Trafo.Sharing.StableNameHeight t) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.StableNameHeight sn1 ds3 ->
                 case ds2 of wild1 { Data.Array.Accelerate.Trafo.Sharing.StableNameHeight sn2 ds4 ->
                 System.Mem.StableName.$fEqStableName_$c== @ t sn1 sn2 } }) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fEqStableSharingAcc ::
    GHC.Classes.Eq Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
                  Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingAcc_$c==
                  Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingAcc_$c/= -}
5e02048dfea86e178d484f2af0e87b30
  $fEqStableSharingAcc1 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingAcc2
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Array.Accelerate.Smart.$tcAcc
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
de8d7559a34f7b18a33c3dcbcd350ec8
  $fEqStableSharingAcc2 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   9915860086765540572##
                   16473808605954969667##) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fEqStableSharingAcc_$c/= ::
    Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
    -> Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc)
                   (y :: Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc) ->
                 GHC.Classes.not
                   (Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingAcc_$c==
                      x
                      y)) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fEqStableSharingAcc_$c== ::
    Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
    -> Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds1 :: Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc)
                   (ds2 :: Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc arrs $dArrays sn1 ds3 ->
                 case ds2 of wild1 { Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc arrs1 $dArrays1 sn2 ds4 ->
                 case Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingAcc1 of wild2 { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ((Data.Array.Accelerate.Array.Sugar.$p1Arrays @ arrs $dArrays)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <arrs>_N)
                                 (GHC.Prim.proxy# @ * @ arrs))
                              (GHC.Types.[]
                                 @ Data.Typeable.Internal.TypeRep))) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ((Data.Array.Accelerate.Array.Sugar.$p1Arrays @ arrs1 $dArrays1)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <arrs1>_N)
                                 (GHC.Prim.proxy# @ * @ arrs1))
                              (GHC.Types.[]
                                 @ Data.Typeable.Internal.TypeRep))) of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps1) of dt7 { GHC.Fingerprint.Type.Fingerprint dt8 dt9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt3 dt8) of wild3 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt4 dt9) of wild4 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> Data.Array.Accelerate.Trafo.Sharing.$fEqStableNameHeight_$c==
                             @ (Data.Array.Accelerate.Smart.Acc arrs1)
                             sn1
                               `cast`
                             (Data.Array.Accelerate.Trafo.Sharing.StableNameHeight
                                (Data.Array.Accelerate.Smart.Acc
                                   (UnsafeCo nominal arrs arrs1))_R)_R
                             sn2 } } } } } } } } }) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fEqStableSharingExp ::
    GHC.Classes.Eq Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
                  Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingExp_$c==
                  Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingExp_$c/= -}
0ec2b68d91f5be49fd62bed7cbace74b
  $fEqStableSharingExp1 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingExp2
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Array.Accelerate.Smart.$tcExp
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
6b0b92a9f9ba389c3522d8c0247bd5a0
  $fEqStableSharingExp2 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   14551889688355319762##
                   1809544616326321266##) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fEqStableSharingExp_$c/= ::
    Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
    -> Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Array.Accelerate.Trafo.Sharing.StableSharingExp)
                   (y :: Data.Array.Accelerate.Trafo.Sharing.StableSharingExp) ->
                 GHC.Classes.not
                   (Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingExp_$c==
                      x
                      y)) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fEqStableSharingExp_$c== ::
    Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
    -> Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds1 :: Data.Array.Accelerate.Trafo.Sharing.StableSharingExp)
                   (ds2 :: Data.Array.Accelerate.Trafo.Sharing.StableSharingExp) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.StableSharingExp t $dElt sn1 ds3 ->
                 case ds2 of wild1 { Data.Array.Accelerate.Trafo.Sharing.StableSharingExp t1 $dElt1 sn2 ds4 ->
                 case Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingExp1 of wild2 { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ((Data.Array.Accelerate.Array.Sugar.$p2Elt @ t $dElt)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <t>_N)
                                 (GHC.Prim.proxy# @ * @ t))
                              (GHC.Types.[]
                                 @ Data.Typeable.Internal.TypeRep))) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        (GHC.Base.++
                           @ Data.Typeable.Internal.TypeRep
                           trs
                           (GHC.Types.:
                              @ Data.Typeable.Internal.TypeRep
                              ((Data.Array.Accelerate.Array.Sugar.$p2Elt @ t1 $dElt1)
                                 `cast`
                               (Data.Typeable.Internal.N:Typeable[0] <*>_N <t1>_N)
                                 (GHC.Prim.proxy# @ * @ t1))
                              (GHC.Types.[]
                                 @ Data.Typeable.Internal.TypeRep))) of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps1) of dt7 { GHC.Fingerprint.Type.Fingerprint dt8 dt9 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# dt3 dt8) of wild3 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt4 dt9) of wild4 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> Data.Array.Accelerate.Trafo.Sharing.$fEqStableNameHeight_$c==
                             @ (Data.Array.Accelerate.Smart.Exp t1)
                             sn1
                               `cast`
                             (Data.Array.Accelerate.Trafo.Sharing.StableNameHeight
                                (Data.Array.Accelerate.Smart.Exp (UnsafeCo nominal t t1))_R)_R
                             sn2 } } } } } } } } }) -}
3c7e0c3bf69aa19b1ff7874b8708cb1c
  $fFunction(->) ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Trafo.Sharing.Function r) =>
    Data.Array.Accelerate.Trafo.Sharing.Function
      (Data.Array.Accelerate.Smart.Exp a -> r)
  DFunId
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U,U)><L,1*C1(C1(C1(U)))><L,U><L,U><L,1*C1(U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (2, False, True)
                Data.Array.Accelerate.Trafo.Sharing.$fFunction(->)_$cconvert
                  `cast`
                (forall (a :: <*>_N) (r :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Trafo.Sharing.Function r>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Sharing.N:Function[0]
                               <Data.Array.Accelerate.Smart.Exp a -> r>_N)) -}
3c7e0c3bf69aa19b1ff7874b8708cb1c
  $fFunction(->)1 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Trafo.Sharing.Function r) =>
    forall env.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout env env
    -> (Data.Array.Accelerate.Smart.Exp a -> r)
    -> Data.Array.Accelerate.AST.PreOpenFun
         Data.Array.Accelerate.AST.OpenAcc
         env
         ()
         (a -> Data.Array.Accelerate.Trafo.Sharing.FunctionR r)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U,U)><L,1*C1(C1(C1(U)))><L,U><L,U><L,1*C1(U)>,
     Unfolding: (\ @ a
                   @ r
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dFunction :: Data.Array.Accelerate.Trafo.Sharing.Function r)
                   @ env
                   (eta :: Data.Array.Accelerate.Trafo.Sharing.Config)
                   (eta1 :: Data.Array.Accelerate.Trafo.Sharing.Layout env env)
                   (eta2 :: Data.Array.Accelerate.Smart.Exp a -> r) ->
                 Data.Array.Accelerate.AST.Lam
                   @ Data.Array.Accelerate.AST.OpenAcc
                   @ env
                   @ ()
                   @ (a -> Data.Array.Accelerate.Trafo.Sharing.FunctionR r)
                   @ a
                   @ (Data.Array.Accelerate.Trafo.Sharing.FunctionR r)
                   @~ <a -> Data.Array.Accelerate.Trafo.Sharing.FunctionR r>_N
                   $dElt
                   ($dFunction
                      `cast`
                    (Data.Array.Accelerate.Trafo.Sharing.N:Function[0] <r>_N)
                      @ (env, a)
                      eta
                      (Data.Array.Accelerate.Trafo.Sharing.PushLayout
                         @ (env, a)
                         @ (env, a)
                         @ a
                         @ env
                         @~ <(env, a)>_N
                         (Data.Array.Accelerate.Array.Sugar.$p2Elt @ a $dElt)
                         (Data.Array.Accelerate.Trafo.Sharing.incLayout
                            @ env
                            @ env
                            @ a
                            eta1)
                         (Data.Array.Accelerate.AST.$WZeroIdx @ a @ env))
                      (eta2
                         (Data.Array.Accelerate.Smart.Tag
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ a
                            $dElt
                            (Data.Array.Accelerate.Trafo.Sharing.sizeLayout @ env @ env eta1))
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))) -}
3c7e0c3bf69aa19b1ff7874b8708cb1c
  $fFunction(->)_$cconvert ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Trafo.Sharing.Function r) =>
    forall env.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout env env
    -> (Data.Array.Accelerate.Smart.Exp a -> r)
    -> Data.Array.Accelerate.AST.OpenFun
         env
         ()
         (Data.Array.Accelerate.Trafo.Sharing.FunctionR
            (Data.Array.Accelerate.Smart.Exp a -> r))
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U,U)><L,1*C1(C1(C1(U)))><L,U><L,U><L,1*C1(U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Sharing.$fFunction(->)1
                  `cast`
                (forall (a :: <*>_N) (r :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Trafo.Sharing.Function r>_R
                 ->_R forall (env :: <*>_N).
                      <Data.Array.Accelerate.Trafo.Sharing.Config>_R
                      ->_R <Data.Array.Accelerate.Trafo.Sharing.Layout env env>_R
                      ->_R <Data.Array.Accelerate.Smart.Exp a -> r>_R
                      ->_R (Data.Array.Accelerate.AST.PreOpenFun
                              <Data.Array.Accelerate.AST.OpenAcc>_R
                              <env>_N
                              <()>_N
                              (Sym (Data.Array.Accelerate.Trafo.Sharing.D:R:FunctionR(->)[0]
                                        <r>_N <a>_N)))_R) -}
3c7e0c3bf69aa19b1ff7874b8708cb1c
  $fFunctionExp ::
    Data.Array.Accelerate.Array.Sugar.Elt b =>
    Data.Array.Accelerate.Trafo.Sharing.Function
      (Data.Array.Accelerate.Smart.Exp b)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,A,U)><L,U><L,1*U>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Sharing.$fFunctionExp_$cconvert
                  `cast`
                (forall (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Sharing.N:Function[0]
                               <Data.Array.Accelerate.Smart.Exp b>_N)) -}
5eaef1366d8a96cf46af3d6b682f041b
  $fFunctionExp1 ::
    Data.Array.Accelerate.Array.Sugar.Elt b =>
    forall env.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout env env
    -> Data.Array.Accelerate.Smart.Exp b
    -> Data.Array.Accelerate.AST.PreOpenFun
         Data.Array.Accelerate.AST.OpenAcc env () b
  {- Arity: 4,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,A,U)><L,U><L,1*U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ b
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   @ env
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.Config)
                   (w2 :: Data.Array.Accelerate.Trafo.Sharing.Layout env env)
                   (w3 :: Data.Array.Accelerate.Smart.Exp b) ->
                 case Data.Array.Accelerate.Trafo.Sharing.$w$cconvert
                        @ b
                        w
                        @ env
                        w1
                        w2
                        w3 of ww { (#,#) ww1 ww2 ->
                 Data.Array.Accelerate.AST.Body
                   @ Data.Array.Accelerate.AST.OpenAcc
                   @ env
                   @ ()
                   @ b
                   ww1
                   ww2 }) -}
3c7e0c3bf69aa19b1ff7874b8708cb1c
  $fFunctionExp_$cconvert ::
    Data.Array.Accelerate.Array.Sugar.Elt b =>
    forall env.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout env env
    -> Data.Array.Accelerate.Smart.Exp b
    -> Data.Array.Accelerate.AST.OpenFun
         env
         ()
         (Data.Array.Accelerate.Trafo.Sharing.FunctionR
            (Data.Array.Accelerate.Smart.Exp b))
  {- Arity: 4,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,A,U)><L,U><L,1*U>m1,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Sharing.$fFunctionExp1
                  `cast`
                (forall (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R forall (env :: <*>_N).
                      <Data.Array.Accelerate.Trafo.Sharing.Config>_R
                      ->_R <Data.Array.Accelerate.Trafo.Sharing.Layout env env>_R
                      ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                      ->_R (Data.Array.Accelerate.AST.PreOpenFun
                              <Data.Array.Accelerate.AST.OpenAcc>_R
                              <env>_N
                              <()>_N
                              (Sym (Data.Array.Accelerate.Trafo.Sharing.D:R:FunctionRExp[0]
                                        <b>_N)))_R) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fHashableNodeName ::
    Data.Hashable.Class.Hashable
      Data.Array.Accelerate.Trafo.Sharing.NodeName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                  Data.Array.Accelerate.Trafo.Sharing.$fHashableNodeName_$chashWithSalt
                  Data.Array.Accelerate.Trafo.Sharing.$fHashableNodeName_$chash -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fHashableNodeName_$chash ::
    Data.Array.Accelerate.Trafo.Sharing.NodeName -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.Array.Accelerate.Trafo.Sharing.$fHashableNodeName_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fHashableNodeName_$chashWithSalt ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Trafo.Sharing.NodeName -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (hash :: GHC.Types.Int)
                   (ds1 :: Data.Array.Accelerate.Trafo.Sharing.NodeName) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.NodeName a $dTypeable1 sn1 ->
                 case hash of wild1 { GHC.Types.I# x ->
                 case sn1 of wild2 { System.Mem.StableName.StableName sn ->
                 GHC.Types.I#
                   (GHC.Prim.+# x (GHC.Prim.stableNameToInt# @ a sn)) } } }) -}
b09d3d1c9e72701785befddf3c9c793a
  $fHashableStableASTName ::
    Data.Hashable.Class.Hashable
      (Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (c :: * -> *).
                  @ (Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                  (Data.Array.Accelerate.Trafo.Sharing.$fHashableStableASTName_$chashWithSalt
                     @ c)
                  (Data.Array.Accelerate.Trafo.Sharing.$fHashableStableASTName_$chash
                     @ c) -}
b09d3d1c9e72701785befddf3c9c793a
  $fHashableStableASTName_$chash ::
    Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ (c :: * -> *) ->
                 Data.Array.Accelerate.Trafo.Sharing.$fHashableStableASTName_$chashWithSalt
                   @ c
                   Data.Hashable.Class.defaultSalt) -}
b09d3d1c9e72701785befddf3c9c793a
  $fHashableStableASTName_$chashWithSalt ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ (c :: * -> *)
                   (s :: GHC.Types.Int)
                   (ds1 :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.StableASTName t $dTypeable1 $dTypeable2 sn ->
                 Data.Hashable.Class.$fHashableStableName_$chashWithSalt
                   @ (c t)
                   s
                   sn }) -}
b3b9077555dbded98fb9fd00243179dc
  $fShowNodeCount ::
    GHC.Show.Show Data.Array.Accelerate.Trafo.Sharing.NodeCount
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Sharing.NodeCount
                  Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount_$cshowsPrec
                  Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount_$cshow
                  Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount_$cshowList -}
fb76b2c1e37ccdd58041538748d4fdce
  $fShowNodeCount1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ExpNodeCount "#) -}
35b2c2c2edb41b681aca121cbaa7d535
  $fShowNodeCount2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AccNodeCount "#) -}
b3b9077555dbded98fb9fd00243179dc
  $fShowNodeCount_$cshow ::
    Data.Array.Accelerate.Trafo.Sharing.NodeCount -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Trafo.Sharing.NodeCount) ->
                 Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b3b9077555dbded98fb9fd00243179dc
  $fShowNodeCount_$cshowList ::
    [Data.Array.Accelerate.Trafo.Sharing.NodeCount] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Data.Array.Accelerate.Trafo.Sharing.NodeCount
                   Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount_$sshows) -}
b3b9077555dbded98fb9fd00243179dc
  $fShowNodeCount_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Trafo.Sharing.NodeCount -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.NodeCount)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Data.Array.Accelerate.Trafo.Sharing.$w$cshowsPrec ww1 w1 w2 }) -}
b3b9077555dbded98fb9fd00243179dc
  $fShowNodeCount_$sshows ::
    Data.Array.Accelerate.Trafo.Sharing.NodeCount -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: InlineRule (0, True, False)
                (Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount_$cshowsPrec
                   GHC.Show.shows22) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fShowNodeName ::
    GHC.Show.Show Data.Array.Accelerate.Trafo.Sharing.NodeName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                  Data.Array.Accelerate.Trafo.Sharing.$fShowNodeName_$cshowsPrec
                  Data.Array.Accelerate.Trafo.Sharing.$fShowNodeName_$cshow
                  Data.Array.Accelerate.Trafo.Sharing.$fShowNodeName_$cshowList -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fShowNodeName_$cshow ::
    Data.Array.Accelerate.Trafo.Sharing.NodeName -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Trafo.Sharing.NodeName) ->
                 case w of wild { Data.Array.Accelerate.Trafo.Sharing.NodeName a $dTypeable1 sn ->
                 case sn of wild1 { System.Mem.StableName.StableName sn1 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt# @ a sn1)
                        (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 } } }) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fShowNodeName_$cshowList ::
    [Data.Array.Accelerate.Trafo.Sharing.NodeName] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Data.Array.Accelerate.Trafo.Sharing.NodeName])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                   Data.Array.Accelerate.Trafo.Sharing.$fShowNodeName_$sshows
                   ls
                   s) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fShowNodeName_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Trafo.Sharing.NodeName -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.NodeName)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Trafo.Sharing.$w$cshowsPrec3 w1 w2) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $fShowNodeName_$sshows ::
    Data.Array.Accelerate.Trafo.Sharing.NodeName -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, False)
                (Data.Array.Accelerate.Trafo.Sharing.$fShowNodeName_$cshowsPrec
                   GHC.Show.shows22) -}
b09d3d1c9e72701785befddf3c9c793a
  $fShowStableASTName ::
    GHC.Show.Show (Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (c :: * -> *).
                  @ (Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                  (Data.Array.Accelerate.Trafo.Sharing.$fShowStableASTName_$cshowsPrec
                     @ c)
                  (Data.Array.Accelerate.Trafo.Sharing.$fShowStableASTName_$cshow
                     @ c)
                  (Data.Array.Accelerate.Trafo.Sharing.$fShowStableASTName_$cshowList
                     @ c) -}
b09d3d1c9e72701785befddf3c9c793a
  $fShowStableASTName1 ::
    Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ (c :: * -> *)
                   (x :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                   (s :: GHC.Base.String)[OneShot] ->
                 case x of wild { Data.Array.Accelerate.Trafo.Sharing.StableASTName t $dTypeable1 $dTypeable2 sn ->
                 case sn of wild1 { System.Mem.StableName.StableName sn1 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt# @ (c t) sn1)
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   s } } }) -}
b09d3d1c9e72701785befddf3c9c793a
  $fShowStableASTName_$cshow ::
    Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ (c :: * -> *)
                   (w :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c) ->
                 case w of wild { Data.Array.Accelerate.Trafo.Sharing.StableASTName t $dTypeable1 $dTypeable2 sn ->
                 case sn of wild1 { System.Mem.StableName.StableName sn1 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt# @ (c t) sn1)
                        (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 } } }) -}
b09d3d1c9e72701785befddf3c9c793a
  $fShowStableASTName_$cshowList ::
    [Data.Array.Accelerate.Trafo.Sharing.StableASTName c]
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ (c :: * -> *)
                   (ls :: [Data.Array.Accelerate.Trafo.Sharing.StableASTName c])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                   (Data.Array.Accelerate.Trafo.Sharing.$fShowStableASTName1 @ c)
                   ls
                   s) -}
b09d3d1c9e72701785befddf3c9c793a
  $fShowStableASTName_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ (c :: * -> *)
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Trafo.Sharing.$w$cshowsPrec4 @ c w1 w2) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fShowStableSharingAcc ::
    GHC.Show.Show Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
                  Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingAcc_$cshowsPrec
                  Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingAcc_$cshow
                  Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingAcc_$cshowList -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fShowStableSharingAcc_$cshow ::
    Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
    -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc) ->
                 case w of wild { Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc arrs $dArrays sn ds1 ->
                 case sn of wild1 { Data.Array.Accelerate.Trafo.Sharing.StableNameHeight sn1 ds2 ->
                 case sn1 of wild2 { System.Mem.StableName.StableName sn2 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt#
                           @ (Data.Array.Accelerate.Smart.Acc arrs)
                           sn2)
                        (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 } } } }) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fShowStableSharingAcc_$cshowList ::
    [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc]
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
                   (Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingAcc_$cshowsPrec
                      GHC.Show.shows22)
                   ls
                   s) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fShowStableSharingAcc_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
    -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Trafo.Sharing.$w$cshowsPrec2 w1 w2) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fShowStableSharingExp ::
    GHC.Show.Show Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
                  Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingExp_$cshowsPrec
                  Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingExp_$cshow
                  Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingExp_$cshowList -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fShowStableSharingExp_$cshow ::
    Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
    -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Trafo.Sharing.StableSharingExp) ->
                 case w of wild { Data.Array.Accelerate.Trafo.Sharing.StableSharingExp t $dElt sn ds1 ->
                 case sn of wild1 { Data.Array.Accelerate.Trafo.Sharing.StableNameHeight sn1 ds2 ->
                 case sn1 of wild2 { System.Mem.StableName.StableName sn2 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt#
                           @ (Data.Array.Accelerate.Smart.Exp t)
                           sn2)
                        (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 } } } }) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fShowStableSharingExp_$cshowList ::
    [Data.Array.Accelerate.Trafo.Sharing.StableSharingExp]
    -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Array.Accelerate.Trafo.Sharing.StableSharingExp])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
                   (Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingExp_$cshowsPrec
                      GHC.Show.shows22)
                   ls
                   s) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $fShowStableSharingExp_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
    -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.StableSharingExp)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Trafo.Sharing.$w$cshowsPrec1 w1 w2) -}
8c248b77c713d90aa20a91d7b899dcb4
  $s! ::
    Data.HashMap.Base.HashMap
      Data.Array.Accelerate.Trafo.Sharing.NodeName v
    -> Data.Array.Accelerate.Trafo.Sharing.NodeName -> v
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ @ v
                   (m :: Data.HashMap.Base.HashMap
                           Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                   (k1 :: Data.Array.Accelerate.Trafo.Sharing.NodeName) ->
                 case k1 of wild { Data.Array.Accelerate.Trafo.Sharing.NodeName a $dTypeable1 sn1 ->
                 case sn1 of wild1 { System.Mem.StableName.StableName sn ->
                 case Data.Array.Accelerate.Trafo.Sharing.$s!_$s$wpoly_go1
                        @ a
                        @ v
                        m
                        0#
                        $dTypeable1
                        wild1
                        (GHC.Prim.int2Word#
                           (GHC.Prim.+#
                              -2578643520546668380#
                              (GHC.Prim.stableNameToInt# @ a sn))) of wild2 {
                   GHC.Base.Nothing -> Data.Array.Accelerate.Trafo.Sharing.$s!1 @ v
                   GHC.Base.Just v1 -> v1 } } }) -}
1fd47c0758528654de201a5f25957c60
  $s!1 :: v
  {- Strictness: x -}
14687502d406ec9d77d5e3b57f7a0ad3
  $s!_$s$wpoly_go1 ::
    Data.HashMap.Base.HashMap
      Data.Array.Accelerate.Trafo.Sharing.NodeName v
    -> GHC.Prim.Int#
    -> Data.Typeable.Internal.Typeable ipv0 =>
       System.Mem.StableName.StableName ipv0
       -> GHC.Prim.Word# -> GHC.Base.Maybe v
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
05c46f919acd60af4ffdf61a66ac61ab
  $s$fArraysArray ::
    Data.Array.Accelerate.Array.Sugar.Arrays
      (Data.Array.Accelerate.Array.Sugar.Array
         Data.Array.Accelerate.Array.Sugar.Z GHC.Types.Bool)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Array.Sugar.Array
                       Data.Array.Accelerate.Array.Sugar.Z GHC.Types.Bool)
                  (Data.Array.Accelerate.Array.Sugar.$fArraysArray_$cp1Arrays
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Bool
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ
                     Data.Array.Accelerate.Array.Sugar.$fEltBool)
                  (Data.Array.Accelerate.Array.Sugar.$fArraysArray_$cp2Arrays
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Bool
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ
                     Data.Array.Accelerate.Array.Sugar.$fEltBool)
                  (Data.Array.Accelerate.Array.Sugar.$fArraysArray_$carrays
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Bool
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ
                     Data.Array.Accelerate.Array.Sugar.$fEltBool)
                  (Data.Array.Accelerate.Array.Sugar.$fArraysArray_$cflavour
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Bool
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ
                     Data.Array.Accelerate.Array.Sugar.$fEltBool)
                  (Data.Array.Accelerate.Array.Sugar.$fArraysArray_$ctoArr
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Bool
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ
                     Data.Array.Accelerate.Array.Sugar.$fEltBool)
                  (Data.Array.Accelerate.Array.Sugar.$fArraysArray_$cfromArr
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Bool
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ
                     Data.Array.Accelerate.Array.Sugar.$fEltBool) -}
f633a52c9aaccbe005c42152ad013f0a
  $s$fShape:. ::
    Data.Array.Accelerate.Array.Sugar.Shape
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp1Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp2Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp3Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp4Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp5Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp6Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$crank
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  Data.Array.Accelerate.Array.Sugar.$fShape:._$s$csize
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cempty
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cignore
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cintersect
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cunion
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$ctoIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cfromIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$citer
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$citer1
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$crangeToShape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cshapeToRange
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cshapeToList
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$clistToShape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csliceAnyIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csliceNoneIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ) -}
fddf541d3670288156dca3d6682acddf
  $s$windexOf_$s$wpoly_go1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
    -> Data.Typeable.Internal.Typeable ipv0 =>
       GHC.Prim.StableName# ipv0 -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><S,U><S,U><L,U><L,U> -}
38b81223b051061dce3931b3833a62d2
  $s$windexOf_$s$wpoly_go2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
    -> Data.Typeable.Internal.Typeable ipv0 =>
       System.Mem.StableName.StableName ipv0
       -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><S,U><S,U><L,U><L,U> -}
b481900357127628fb5a4c6fc0209c9c
  $s$wlookupInArray_$s$wpoly_go1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName
            (Data.HashSet.HashSet
               Data.Array.Accelerate.Trafo.Sharing.NodeName))
    -> Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Smart.Exp t) =>
       GHC.Prim.StableName# (Data.Array.Accelerate.Smart.Exp t)
       -> GHC.Base.Maybe
            (Data.HashSet.HashSet Data.Array.Accelerate.Trafo.Sharing.NodeName)
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><S,U><S,U><L,U><L,U> -}
76d72098a53440d1edfc96059facdb7e
  $s$wlookupInArray_$s$wpoly_go2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
    -> Data.Typeable.Internal.Typeable ipv0 =>
       System.Mem.StableName.StableName ipv0 -> GHC.Base.Maybe v
  {- Arity: 5, HasNoCafRefs, Strictness: <S,U><S,U><S,U><L,U><L,U> -}
b06333ba810071116bc4ee2f59dc9347
  $s$wupdateOrConcatWithKey ::
    (Data.Array.Accelerate.Trafo.Sharing.NodeName -> v -> v -> v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
  {- Arity: 3, Strictness: <L,C(C1(C1(U)))><S,U><S,U>, Inline: [0],
     Unfolding: (\ @ v
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.NodeName -> v -> v -> v)
                   (ww :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf
                               Data.Array.Accelerate.Trafo.Sharing.NodeName v))
                   (ww1 :: GHC.Prim.Array#
                             (Data.HashMap.Base.Leaf
                                Data.Array.Accelerate.Trafo.Sharing.NodeName v)) ->
                 let {
                   wild1 :: GHC.Prim.Int#
                   = GHC.Prim.sizeofArray#
                       @ (Data.HashMap.Base.Leaf
                            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                       ww1
                 } in
                 case GHC.Prim.newArray#
                        @ (GHC.Base.Maybe GHC.Types.Int)
                        @ GHC.Prim.RealWorld
                        wild1
                        (Data.HashMap.Array.undefinedElem @ (GHC.Base.Maybe GHC.Types.Int))
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 letrec {
                   $s$wgo1 :: GHC.Prim.State# GHC.Prim.RealWorld
                              -> GHC.Prim.Int#
                              -> GHC.Prim.Int#
                              -> GHC.Prim.MutableArray#
                                   GHC.Prim.RealWorld (GHC.Base.Maybe GHC.Types.Int)
                              -> GHC.Prim.Array#
                                   (Data.HashMap.Base.Leaf
                                      Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                    Data.HashMap.Array.MArray
                                      GHC.Prim.RealWorld (GHC.Base.Maybe GHC.Types.Int) #)
                     {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><L,U> -}
                   = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (sc1 :: GHC.Prim.Int#)
                       (sc2 :: GHC.Prim.Int#)
                       (sc3 :: GHC.Prim.MutableArray#
                                 GHC.Prim.RealWorld (GHC.Base.Maybe GHC.Types.Int))
                       (sc4 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf
                                    Data.Array.Accelerate.Trafo.Sharing.NodeName v)) ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# sc2 sc1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                 sc3
                                 sc2
                                 (case GHC.Prim.indexArray#
                                         @ (Data.HashMap.Base.Leaf
                                              Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                                         sc4
                                         sc2 of ds2 { Unit# ipv2 ->
                                  case ipv2 of wild5 { Data.HashMap.Base.L k1 ds3 ->
                                  Data.Array.Accelerate.Trafo.Sharing.$wpoly_go1
                                    @ v
                                    k1
                                    ww
                                    0#
                                    (GHC.Prim.sizeofArray#
                                       @ (Data.HashMap.Base.Leaf
                                            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                                       ww) } })
                                 sc of s' { DEFAULT ->
                          $s$wgo1 s' sc1 (GHC.Prim.+# sc2 1#) sc3 sc4 }
                       GHC.Types.True
                       -> (# sc,
                             Data.HashMap.Array.MArray
                               @ GHC.Prim.RealWorld
                               @ (GHC.Base.Maybe GHC.Types.Int)
                               sc3 #) }
                 } in
                 case $s$wgo1 ipv wild1 0# ipv1 ww1 of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { Data.HashMap.Array.MArray ds3 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ (GHC.Base.Maybe GHC.Types.Int)
                        ds3
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Data.Array.Accelerate.Trafo.Sharing.$s$wupdateOrConcatWithKey_$s$wgo1
                        0#
                        0#
                        (GHC.Prim.sizeofArray# @ (GHC.Base.Maybe GHC.Types.Int) ipv5)
                        ipv5 of ww2 { DEFAULT ->
                 let {
                   n1 :: GHC.Prim.Int#
                   = GHC.Prim.sizeofArray#
                       @ (Data.HashMap.Base.Leaf
                            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                       ww
                 } in
                 case GHC.Prim.newArray#
                        @ (Data.HashMap.Base.Leaf
                             Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.+# n1 ww2)
                        (Data.HashMap.Array.undefinedElem
                           @ (Data.HashMap.Base.Leaf
                                Data.Array.Accelerate.Trafo.Sharing.NodeName v))
                        GHC.Prim.realWorld# of ds5 { (#,#) ipv7 ipv8 ->
                 case GHC.Prim.copyArray#
                        @ (Data.HashMap.Base.Leaf
                             Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                        @ GHC.Prim.RealWorld
                        ww
                        0#
                        ipv8
                        0#
                        n1
                        ipv7 of s2 { DEFAULT ->
                 letrec {
                   $wgo4 :: GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.Int#)
                       (ww4 :: GHC.Prim.Int#)
                       (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww4 wild1) of wild2 {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                 ipv5
                                 ww4 of ds6 { Unit# ipv9 ->
                          case ipv9 of wild3 {
                            GHC.Base.Nothing
                            -> case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf
                                           Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                                      ww1
                                      ww4 of ds7 { Unit# ipv10 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf
                                           Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                                      ipv8
                                      ww3
                                      ipv10
                                      w of s' { DEFAULT ->
                               $wgo4 (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 1#) s' } }
                            GHC.Base.Just i3
                            -> case i3 of wild4 { GHC.Types.I# i# ->
                               case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf
                                           Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                                      ww
                                      i# of ds7 { Unit# ipv10 ->
                               case ipv10 of wild5 { Data.HashMap.Base.L k1 v1 ->
                               case GHC.Prim.indexArray#
                                      @ (Data.HashMap.Base.Leaf
                                           Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                                      ww1
                                      ww4 of ds8 { Unit# ipv6 ->
                               case ipv6 of wild6 { Data.HashMap.Base.L ds9 v2 ->
                               case GHC.Prim.writeArray#
                                      @ GHC.Prim.RealWorld
                                      @ (Data.HashMap.Base.Leaf
                                           Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                                      ipv8
                                      i#
                                      (Data.HashMap.Base.L
                                         @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                                         @ v
                                         k1
                                         (w1 k1 v1 v2))
                                      w of s' { DEFAULT ->
                               $wgo4 ww3 (GHC.Prim.+# ww4 1#) s' } } } } } } } }
                       GHC.Types.True -> (# w, GHC.Tuple.() #) }
                 } in
                 case $wgo4 n1 0# s2 of ds6 { (#,#) ipv9 ipv10 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ GHC.Prim.RealWorld
                        @ (Data.HashMap.Base.Leaf
                             Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                        ipv8
                        ipv9 of ds7 { (#,#) ipv11 ipv12 ->
                 ipv12 } } } } } } } } }) -}
61ad62a509cf0a756d9b0b10e3bd3f59
  $s$wupdateOrConcatWithKey_$s$wgo1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (GHC.Base.Maybe GHC.Types.Int)
    -> GHC.Prim.Int#
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><S,U><S,U><L,U> -}
57af2c220174339203209df53a5e4033
  $s$wupdateOrSnocWithKey ::
    (Data.Array.Accelerate.Trafo.Sharing.NodeName -> v -> v -> v)
    -> Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
  {- Arity: 4, Strictness: <L,C(C1(C1(U)))><S,1*U><L,U><S,U>,
     Inline: [0] -}
1c3bf0ec4b748944fd3c7de90c736239
  $s$wupdateOrSnocWithKey1 ::
    (Data.Array.Accelerate.Trafo.Sharing.NodeName -> v -> v -> v)
    -> Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
  {- Arity: 4, Strictness: <L,C(C1(C1(U)))><S,1*U><L,U><S,U>,
     Inline: [0] -}
b69965ea85c52574bc85d06104ed98d6
  $slookup1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
fb6e801ac9b225a5fe18f541f3899ae0
  $slookup_$s$wpoly_go1 ::
    Data.HashMap.Base.HashMap
      Data.Array.Accelerate.Trafo.Sharing.NodeName
      (Data.HashSet.HashSet Data.Array.Accelerate.Trafo.Sharing.NodeName)
    -> GHC.Prim.Int#
    -> Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Smart.Exp t) =>
       GHC.Prim.StableName# (Data.Array.Accelerate.Smart.Exp t)
       -> GHC.Prim.Word#
       -> GHC.Base.Maybe
            (Data.HashSet.HashSet Data.Array.Accelerate.Trafo.Sharing.NodeName)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
98018b19d1d5428ea7e6e878fff4b288
  $stypeRep#10 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8452476611439654124##
                   6760158545453672353##) -}
99316b2bad87ca9d835a347fb12fc2f0
  $stypeRep#11 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   15503067570392668097##
                   1099276473081943541##) -}
6cbe62c215c03c2f188811229ccaaa2e
  $stypeRep#16 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#17
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Array.Accelerate.Array.Sugar.$tc:.
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
f4f217d9b34bacec5c7bf5081bafb5cb
  $stypeRep#17 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1936543264398198033##
                   16676657196993113259##) -}
72c659f89eb037fd1ea569f662ff0c31
  $stypeRep#2 ::
    GHC.Prim.Proxy# Data.Array.Accelerate.Smart.Exp
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Data.Array.Accelerate.Smart.Exp) ->
                 Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingExp1) -}
b840ff7b749f73860206c07d5ac252d9
  $stypeRep#20 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Array.Accelerate.Trafo.Sharing.$stypeRep#16 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       Data.Array.Accelerate.Trafo.Sharing.$stypeRep#_types
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
f56aafd1550ba550fac48d904b782956
  $stypeRep#23 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Array.Accelerate.Trafo.Sharing.$stypeRep#20 of wild { Data.Typeable.Internal.TypeRep dt dt1 tc ks trs ->
                 let {
                   types :: [Data.Typeable.Internal.TypeRep]
                   = GHC.Base.++
                       @ Data.Typeable.Internal.TypeRep
                       trs
                       Data.Array.Accelerate.Trafo.Sharing.$stypeRep#24
                 } in
                 case Data.Typeable.Internal.typeRepFingerprints
                        ks
                        types of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           (Data.Typeable.Internal.tyConFingerprint tc)
                           kt_fps) of dt2 { GHC.Fingerprint.Type.Fingerprint dt3 dt4 ->
                 Data.Typeable.Internal.TypeRep dt3 dt4 tc ks types } } }) -}
5029dd4905b7cd5c34bbe946be9be56f
  $stypeRep#24 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#25
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
619110f1b07580d02c7300f45de4bb4d
  $stypeRep#25 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#26
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcInt
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b33c5bd15681a5d7cb3ffb6f7adf729f
  $stypeRep#26 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16287469036901857884##
                   16587023596664995632##) -}
835159391c766c9e4235f9b3bbe56d7f
  $stypeRep#29 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Data.Array.Accelerate.Trafo.Sharing.$stypeRep#_types1 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Data.Array.Accelerate.Array.Sugar.$tcArray
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#_types1 } } } }) -}
a7ebed6ca50aa43c221a763639d5a168
  $stypeRep#32 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Array.Accelerate.Array.Sugar.$tcArray
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
1e09dffc9cf0cd73b4c8ff5a6208ee5a
  $stypeRep#35 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#17
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Data.Array.Accelerate.Trafo.Sharing.$stypeRep#24 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#17
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Data.Array.Accelerate.Array.Sugar.$tc:.
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#24 } } } }) -}
6c4e39f390a79ff077c1cda4cf92766a
  $stypeRep#38 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Data.Array.Accelerate.Trafo.Sharing.$stypeRep#24 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Data.Array.Accelerate.Array.Sugar.$tcArray
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#24 } } } }) -}
5ea7ec8447f3ab2f321c9702d0625594
  $stypeRep#41 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#17
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Data.Array.Accelerate.Trafo.Sharing.$stypeRep#42 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#17
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Data.Array.Accelerate.Array.Sugar.$tc:.
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#42 } } } }) -}
d13daf2dec353fd53ff28a426b4dc8a1
  $stypeRep#42 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#43
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
2932a46e8e6d41aecc84d886a3e9be6a
  $stypeRep#43 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#44
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcBool
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
4f0770877d9014bfb31554b8e1e1637d
  $stypeRep#44 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   15899861992609591342##
                   8208526680161485329##) -}
eb1a4304163513740a5c57324b8aa877
  $stypeRep#47 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Data.Array.Accelerate.Trafo.Sharing.$stypeRep#42 of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Data.Array.Accelerate.Array.Sugar.$tcArray
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#42 } } } }) -}
0f586307d1c739b9a8ae0fe38e2d6f9c
  $stypeRep#5 ::
    GHC.Prim.Proxy# Data.Array.Accelerate.Smart.Acc
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Data.Array.Accelerate.Smart.Acc) ->
                 Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingAcc1) -}
da272b25fe336ca0f2748893608caae7
  $stypeRep#8 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        Data.Array.Accelerate.Trafo.Sharing.$stypeRep#_types of kt_fps1 { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#11
                           kt_fps1) of dt4 { GHC.Fingerprint.Type.Fingerprint dt3 dt5 ->
                 Data.Typeable.Internal.TypeRep
                   dt3
                   dt5
                   Data.Array.Accelerate.Array.Sugar.$tcArray
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#_types } } } }) -}
b98790065cc6c4336e515016e5655f47
  $stypeRep#9 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Trafo.Sharing.$stypeRep#10
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Data.Array.Accelerate.Array.Sugar.$tcZ
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
010e6a6b0a479c50ce610e631ab6185b
  $stypeRep#_types :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#9
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
7c63ab8be40be43b759463102e43b37e
  $stypeRep#_types1 :: [Data.Typeable.Internal.TypeRep]
  {- Unfolding: (GHC.Types.:
                   @ Data.Typeable.Internal.TypeRep
                   Data.Array.Accelerate.Trafo.Sharing.$stypeRep#23
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)) -}
114c4b2fcf159325b9953696767e317e
  $sunion1 ::
    Data.HashSet.HashSet Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> Data.HashSet.HashSet
         Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> Data.HashSet.HashSet
         Data.Array.Accelerate.Trafo.Sharing.NodeName
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (s1 :: Data.HashSet.HashSet
                            Data.Array.Accelerate.Trafo.Sharing.NodeName)
                   (s2 :: Data.HashSet.HashSet
                            Data.Array.Accelerate.Trafo.Sharing.NodeName) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (Data.HashMap.Base.HashMap
                        Data.Array.Accelerate.Trafo.Sharing.NodeName ())
                   @ (Data.HashSet.HashSet
                        Data.Array.Accelerate.Trafo.Sharing.NodeName)
                   (\ (tpl :: Data.HashMap.Base.HashMap
                                Data.Array.Accelerate.Trafo.Sharing.NodeName ()) ->
                    tpl)
                     `cast`
                   (<Data.HashMap.Base.HashMap
                       Data.Array.Accelerate.Trafo.Sharing.NodeName ()>_R
                    ->_R Sym (Data.HashSet.N:HashSet[0]
                                  <Data.Array.Accelerate.Trafo.Sharing.NodeName>_N))
                   (Data.HashMap.Base.union
                      @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                      @ ()
                      Data.Array.Accelerate.Trafo.Sharing.$fEqNodeName
                      Data.Array.Accelerate.Trafo.Sharing.$fHashableNodeName
                      (Data.HashSet.asMap
                         @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                         s1)
                      (Data.HashSet.asMap
                         @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                         s2))) -}
b442a59ac5be3fa94e6103a76de0b790
  $sunsafeInsert_$s$wpoly_go2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.HashMap.Base.HashMap
         Data.Array.Accelerate.Trafo.Sharing.NodeName
         (Data.HashSet.HashSet Data.Array.Accelerate.Trafo.Sharing.NodeName)
    -> GHC.Prim.Int#
    -> Data.HashSet.HashSet
         Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> Data.Typeable.Internal.Typeable a =>
       GHC.Prim.StableName# a
       -> GHC.Prim.Word#
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Data.HashMap.Base.HashMap
               Data.Array.Accelerate.Trafo.Sharing.NodeName
               (Data.HashSet.HashSet
                  Data.Array.Accelerate.Trafo.Sharing.NodeName) #)
  {- Arity: 7, Strictness: <S,U><S,1*U><L,U><L,U><L,U><L,U><L,U> -}
ef42da1973c24e55a1eb6e03016c5b84
  $sunsafeInsert_$s$wpoly_go3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Prim.Word#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.HashMap
            Data.Array.Accelerate.Trafo.Sharing.NodeName
            (Data.HashSet.HashSet
               Data.Array.Accelerate.Trafo.Sharing.NodeName))
    -> GHC.Prim.Int#
    -> Data.HashSet.HashSet
         Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> Data.Typeable.Internal.Typeable a =>
       GHC.Prim.StableName# a
       -> GHC.Prim.Word#
       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
             Data.HashMap.Base.HashMap
               Data.Array.Accelerate.Trafo.Sharing.NodeName
               (Data.HashSet.HashSet
                  Data.Array.Accelerate.Trafo.Sharing.NodeName) #)
  {- Arity: 8, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ a
                   (sc :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (sc1 :: GHC.Prim.Word#)
                   (sc2 :: GHC.Prim.Array#
                             (Data.HashMap.Base.HashMap
                                Data.Array.Accelerate.Trafo.Sharing.NodeName
                                (Data.HashSet.HashSet
                                   Data.Array.Accelerate.Trafo.Sharing.NodeName)))
                   (sc3 :: GHC.Prim.Int#)
                   (sc4 :: Data.HashSet.HashSet
                             Data.Array.Accelerate.Trafo.Sharing.NodeName)
                   (sc5 :: Data.Typeable.Internal.Typeable a)
                   (sc6 :: GHC.Prim.StableName# a)
                   (sc7 :: GHC.Prim.Word#) ->
                 let {
                   m :: GHC.Prim.Word#
                   = GHC.Prim.uncheckedShiftL#
                       1##
                       (GHC.Prim.word2Int#
                          (GHC.Prim.and# (GHC.Prim.uncheckedShiftRL# sc7 sc3) 15##))
                 } in
                 case GHC.Prim.and# sc1 m of wild {
                   DEFAULT
                   -> let {
                        i# :: GHC.Prim.Int#
                        = GHC.Prim.word2Int#
                            (GHC.Prim.popCnt# (GHC.Prim.and# sc1 (GHC.Prim.minusWord# m 1##)))
                      } in
                      case GHC.Prim.indexArray#
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             sc2
                             i# of ds3 { Unit# ipv2 ->
                      case Data.Array.Accelerate.Trafo.Sharing.$sunsafeInsert_$s$wpoly_go2
                             @ a
                             sc
                             ipv2
                             (GHC.Prim.+# sc3 4#)
                             sc4
                             sc5
                             sc6
                             sc7 of ds5 { (#,#) ipv5 ipv6 ->
                      case GHC.Prim.unsafeThawArray#
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             @ GHC.Prim.RealWorld
                             sc2
                             ipv5 of ds6 { (#,#) ipv7 ipv8 ->
                      case GHC.Prim.writeArray#
                             @ GHC.Prim.RealWorld
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             ipv8
                             i#
                             ipv6
                             ipv7 of s' { DEFAULT ->
                      case GHC.Prim.unsafeFreezeArray#
                             @ GHC.Prim.RealWorld
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             ipv8
                             s' of ds7 { (#,#) ipv9 ipv10 ->
                      (# ipv9,
                         Data.HashMap.Base.BitmapIndexed
                           @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                           @ (Data.HashSet.HashSet
                                Data.Array.Accelerate.Trafo.Sharing.NodeName)
                           sc1
                           sc2 #) } } } } }
                   0##
                   -> let {
                        wild1 :: GHC.Prim.Int#
                        = GHC.Prim.sizeofArray#
                            @ (Data.HashMap.Base.HashMap
                                 Data.Array.Accelerate.Trafo.Sharing.NodeName
                                 (Data.HashSet.HashSet
                                    Data.Array.Accelerate.Trafo.Sharing.NodeName))
                            sc2
                      } in
                      case GHC.Prim.newArray#
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.+# wild1 1#)
                             (Data.HashMap.Array.undefinedElem
                                @ (Data.HashMap.Base.HashMap
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName
                                     (Data.HashSet.HashSet
                                        Data.Array.Accelerate.Trafo.Sharing.NodeName)))
                             sc of ds1 { (#,#) ipv ipv1 ->
                      let {
                        idx :: GHC.Prim.Int#
                        = GHC.Prim.word2Int#
                            (GHC.Prim.popCnt# (GHC.Prim.and# sc1 (GHC.Prim.minusWord# m 1##)))
                      } in
                      case GHC.Prim.copyArray#
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             @ GHC.Prim.RealWorld
                             sc2
                             0#
                             ipv1
                             0#
                             idx
                             ipv of s2 { DEFAULT ->
                      case GHC.Prim.writeArray#
                             @ GHC.Prim.RealWorld
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             ipv1
                             idx
                             (Data.HashMap.Base.Leaf
                                @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                                @ (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName)
                                sc7
                                (Data.Array.Accelerate.Trafo.Sharing.NodeName
                                   @ a
                                   sc5
                                   (System.Mem.StableName.StableName @ a sc6))
                                sc4)
                             s2 of s' { DEFAULT ->
                      case GHC.Prim.copyArray#
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             @ GHC.Prim.RealWorld
                             sc2
                             idx
                             ipv1
                             (GHC.Prim.+# idx 1#)
                             (GHC.Prim.-# wild1 idx)
                             s' of s1 { DEFAULT ->
                      case GHC.Prim.unsafeFreezeArray#
                             @ GHC.Prim.RealWorld
                             @ (Data.HashMap.Base.HashMap
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName
                                  (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName))
                             ipv1
                             s1 of ds2 { (#,#) ipv2 ipv3 ->
                      case GHC.Prim.or# sc1 m of wild2 {
                        DEFAULT
                        -> (# ipv2,
                              Data.HashMap.Base.BitmapIndexed
                                @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                                @ (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName)
                                wild2
                                ipv3 #)
                        65535##
                        -> (# ipv2,
                              Data.HashMap.Base.Full
                                @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                                @ (Data.HashSet.HashSet
                                     Data.Array.Accelerate.Trafo.Sharing.NodeName)
                                ipv3 #) } } } } } } }) -}
30390829691c6bc862651086a4203272
  $tc'AccNodeCount :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   112422069118770894##
                   15413591138012644665##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'AccNodeCount1) -}
f5d31059f2d50c5a0a134210fc66b0bd
  $tc'AccNodeCount1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AccNodeCount"#) -}
ff6800e196c461145e01893d707cd23a
  $tc'AccSharing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11121944357932579213##
                   4995660580097005069##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'AccSharing1) -}
14c0da10aa2de2efac48ed9e14131d3e
  $tc'AccSharing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AccSharing"#) -}
7cf402db593d8c06b24df06b7d059204
  $tc'AletSharing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7167218423199865932##
                   2592257799690952036##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'AletSharing1) -}
01571794f325b68da662568a6bdeefd5
  $tc'AletSharing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AletSharing"#) -}
f6a61f363f003b4c57bf4e10b3655225
  $tc'AvarSharing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9496323241951961974##
                   11537341229989777831##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'AvarSharing1) -}
5ec5e58a80d08905a20b949fadce0a33
  $tc'AvarSharing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AvarSharing"#) -}
04b7533744dd9f5b48ee064fe542ff22
  $tc'C:Afunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12240847343479414465##
                   131668739360111931##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'C:Afunction1) -}
56eb41798464b27da886a10804daf71d
  $tc'C:Afunction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Afunction"#) -}
4907e6e5ab4debb5e004c54661fff550
  $tc'C:Function :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8005705573619628971##
                   8337580317148749670##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'C:Function1) -}
0566802619e98d444efcb2fb630aaef8
  $tc'C:Function1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Function"#) -}
009c171309604938605b9d03404a4075
  $tc'Config :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15737018727359137964##
                   16931953448599835991##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'Config1) -}
30427322d14bb5dea72ad4dadbac6c47
  $tc'Config1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Config"#) -}
0d2e1401447f2dc64c3df3c3f9087914
  $tc'EmptyLayout :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3553860786636336610##
                   9046132068684670647##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'EmptyLayout1) -}
5c9cea8913a1ee6bd02346c239064dc6
  $tc'EmptyLayout1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EmptyLayout"#) -}
65f814caf07e3966275759d6a8a9ee37
  $tc'ExpNodeCount :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10983206303669665506##
                   16223884250377437775##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'ExpNodeCount1) -}
88bc75902d718cb63e0227f7df158160
  $tc'ExpNodeCount1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ExpNodeCount"#) -}
432e9741b8f1714b68974eb08752f372
  $tc'ExpSharing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13656267272747399946##
                   3300061750082615124##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'ExpSharing1) -}
5b90e4d6c1eb82d8cdab501e23a2809c
  $tc'ExpSharing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ExpSharing"#) -}
5669640988c28de856be0959ec8243d9
  $tc'LetSharing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15785414821401528840##
                   14290516640034207903##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'LetSharing1) -}
a3575860b10b5c856b408491f154612f
  $tc'LetSharing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LetSharing"#) -}
ab3ad725e7c0e9888cbbde2684d67e60
  $tc'NodeName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9763257898728341679##
                   16963550053324911268##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'NodeName1) -}
fa84f247393de0b9c45d406a39b556e1
  $tc'NodeName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NodeName"#) -}
c2106402042e2623319fca5d368fbada
  $tc'PushLayout :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16355439033888906841##
                   4074393436725782907##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'PushLayout1) -}
c40e375d607c36bef8ceaac13cffba7e
  $tc'PushLayout1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PushLayout"#) -}
e57770a6e6bdf23dd5750c8e9fbde249
  $tc'RootExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5615742983013036466##
                   17600595509428268938##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'RootExp1) -}
2f2e0c0b085c7e43bf041a9a55d0b825
  $tc'RootExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RootExp"#) -}
1ad3972584137c1eb28e565bc488ce83
  $tc'ScopedAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   195325243738257284##
                   18397183870337674829##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'ScopedAcc1) -}
e1e679848d42b8643b9f652acfa8ad78
  $tc'ScopedAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ScopedAcc"#) -}
41fa50821faf471ff00eb7ebf7dd8ffa
  $tc'ScopedExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5971368317292745279##
                   6451289011787363737##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'ScopedExp1) -}
925214adc3422bcb6431c1cd4bc48556
  $tc'ScopedExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ScopedExp"#) -}
51e026b911cd8001c3c63cdd1d378486
  $tc'StableASTName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4934195903340806265##
                   2215475185587123844##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'StableASTName1) -}
46cf9acc42f8ef663a081e1a4663967b
  $tc'StableASTName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StableASTName"#) -}
99adc2e574500f3038652d8237a5554a
  $tc'StableNameHeight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12444498178485120718##
                   5247612941083059949##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'StableNameHeight1) -}
de8b83becc7bfd63b02d7a4b3b412cbb
  $tc'StableNameHeight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StableNameHeight"#) -}
6cde77775d1debfc87b0284788c194e0
  $tc'StableSharingAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17728654871900200424##
                   17642367540512673006##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'StableSharingAcc1) -}
cdb99056ebab429d83dbab5c6d853773
  $tc'StableSharingAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StableSharingAcc"#) -}
fdcb8d3b9bebddfe6b6c4d9e9bb99e78
  $tc'StableSharingExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6929639669020578879##
                   12111280724500595525##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'StableSharingExp1) -}
52c21ce6c5918a8a049a22b5b49b674d
  $tc'StableSharingExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StableSharingExp"#) -}
6a8cb0e2106788d21393db15babb89ef
  $tc'UnscopedAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9319454088846144186##
                   15039297667309606591##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'UnscopedAcc1) -}
773c9df9b57e666eb1e86b49d11b0b7a
  $tc'UnscopedAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UnscopedAcc"#) -}
52a80538b641be6c241d9eda04f79905
  $tc'UnscopedExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1320198765535750679##
                   3812098188550922831##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'UnscopedExp1) -}
93655881510a6527fc73e9eeb9cf8148
  $tc'UnscopedExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UnscopedExp"#) -}
8994f3444421499134d81a7e048e967e
  $tc'VarSharing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12685067728965441336##
                   4686163798283260271##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tc'VarSharing1) -}
b14c8ce0946454a2ad264c0d4f522e8f
  $tc'VarSharing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VarSharing"#) -}
97175ac04aff89cbf2a4611890f0cac9
  $tcAfunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13309882574448661168##
                   1696289132512546067##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcAfunction1) -}
f97605109f46446906ebdb2b2ed17457
  $tcAfunction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Afunction"#) -}
32c0267acfce771be4d516b9db78efa5
  $tcConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1131085158128614495##
                   6144224545841749790##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcConfig1) -}
1767f92cb2e2fa1f9938e130b2787faf
  $tcConfig1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Config"#) -}
c8035b41be7896f2de9250a02686cbf3
  $tcFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6295189216430974908##
                   2346166528094318900##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcFunction1) -}
63518d2c9c56e521285b755f04afeb45
  $tcFunction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Function"#) -}
6d414fb04fcfd7a4d98bb14b1c4b6af6
  $tcLayout :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13175119003596342762##
                   5079436571295952253##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcLayout1) -}
be87f8fc80429e930c101b69b68f2645
  $tcLayout1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Layout"#) -}
7e07d0d001f4a57b2d5164734a19fb6c
  $tcNodeCount :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17881098397425050739##
                   17826946068193379278##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcNodeCount1) -}
d966e90af5515b2bc4e16a96260bda0a
  $tcNodeCount1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NodeCount"#) -}
173ae785308f898d03e9f74ec523eaa7
  $tcNodeName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6705003356315950038##
                   13684696638650330815##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcNodeName1) -}
3939d1a52a7316248c470a1bf123eb9b
  $tcNodeName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NodeName"#) -}
8fc27e5069c4bdb3acf8e7df66ca314b
  $tcRootExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8510153775272784258##
                   10347125282129240682##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcRootExp1) -}
c215594f7765dc05b72104846a3c1f32
  $tcRootExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RootExp"#) -}
348fbe8334f9d6fdfc076d88d1d6f4a0
  $tcScopedAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6987513150301420505##
                   10699660677185286131##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcScopedAcc1) -}
74fb170182f96a3533feaa42742f09f6
  $tcScopedAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ScopedAcc"#) -}
55cb0b21cbe05a147ec64cbb5db41804
  $tcScopedExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1749962966657482399##
                   16470758858313772624##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcScopedExp1) -}
62a0ad3d90510f859892d4c7cccb8ea1
  $tcScopedExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ScopedExp"#) -}
46d792fd4f20eb39d0bb35e6134e298d
  $tcSharingAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5869241092045185097##
                   8465921435548684867##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcSharingAcc1) -}
47b7ec66a87680551121a0ecdc97fe30
  $tcSharingAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SharingAcc"#) -}
30efc395cd771fabdee2d2d7e1c52b04
  $tcSharingExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1451954510595548731##
                   11611917536786490236##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcSharingExp1) -}
4669800af97397180159dad77f8625f6
  $tcSharingExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SharingExp"#) -}
7bb7356748be86e84011f2a73259f420
  $tcStableASTName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2827529698930108905##
                   6698031391903224599##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcStableASTName1) -}
16fcd7edec47f20e5e333716efa8fb77
  $tcStableASTName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StableASTName"#) -}
db57fd8ca009a4292e1e5d4c2dfb2605
  $tcStableNameHeight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4557193560306683667##
                   11282533145282265840##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcStableNameHeight1) -}
ad51cefb940e21332bf0eacc2df61795
  $tcStableNameHeight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StableNameHeight"#) -}
3f06512987e18414626ef31b33428680
  $tcStableSharingAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4788607786512761582##
                   16840638600055576492##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcStableSharingAcc1) -}
9d867f899c391e7a9ed8886dc7bf2813
  $tcStableSharingAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StableSharingAcc"#) -}
83edc9cf528a3e7dda5a7bf9c58bf39b
  $tcStableSharingExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15454844473917353505##
                   6857584794040376494##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcStableSharingExp1) -}
877c199696a62356a0188f12e1758ce9
  $tcStableSharingExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "StableSharingExp"#) -}
2b3f104a2851bffea931a774e7f77570
  $tcUnscopedAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7694522416204007351##
                   16375556323044999168##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcUnscopedAcc1) -}
926d44f7434e68983ad5690d7029897e
  $tcUnscopedAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "UnscopedAcc"#) -}
9e2bd7ccb4f4749e8622bf24ac8ee945
  $tcUnscopedExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3808455825246029667##
                   8897246021609198147##
                   Data.Array.Accelerate.Trafo.Sharing.$trModule
                   Data.Array.Accelerate.Trafo.Sharing.$tcUnscopedExp1) -}
d7259863b36c34ea10f72c205a7f9c9f
  $tcUnscopedExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "UnscopedExp"#) -}
75a077a510935c4825fd27cab9ee66d7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Trafo.Sharing.$trModule2
                   Data.Array.Accelerate.Trafo.Sharing.$trModule1) -}
1fa3c27422bb7e2bd91855a33770450a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Trafo.Sharing"#) -}
f7e96b30eb4eb54fbda57d44d95fd7da
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
05a82b219117704ef7d7cbe3a1410784
  $w$caconvert ::
    Data.Array.Accelerate.Array.Sugar.Arrays b =>
    forall aenv.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
    -> Data.Array.Accelerate.Smart.Acc b
    -> (# Data.Array.Accelerate.Array.Sugar.Arrays b,
          Data.Array.Accelerate.AST.OpenAcc aenv b #)
  {- Arity: 4,
     Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,A,U)><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Data.Array.Accelerate.Array.Sugar.Arrays b)
                   @ aenv
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.Config)
                   (w2 :: Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv)
                   (w3 :: Data.Array.Accelerate.Smart.Acc b) ->
                 (# w,
                    let {
                      lvl390 :: GHC.Types.Int
                      = case Data.Array.Accelerate.Trafo.Sharing.$wsizeLayout
                               @ aenv
                               @ aenv
                               w2 of ww { DEFAULT ->
                        GHC.Types.I# ww }
                    } in
                    Data.Array.Accelerate.Trafo.Sharing.convertOpenAcc
                      @ b
                      @ aenv
                      w
                      w1
                      lvl390
                      (case lvl390 of wild { GHC.Types.I# x ->
                       let {
                         x1 :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                       } in
                       let {
                         x2 :: GHC.Prim.Int# = GHC.Prim.-# x 2#
                       } in
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.>=# x2 x1) of wild1 {
                         GHC.Types.False -> GHC.Enum.efdtIntDn x1 x2 0#
                         GHC.Types.True -> GHC.Enum.efdtIntUp x1 x2 0# } })
                      w2
                      w3 #)) -}
597cc0466b1de7712616a0dbe7eafef6
  $w$cconvert ::
    Data.Array.Accelerate.Array.Sugar.Elt b =>
    forall env.
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout env env
    -> Data.Array.Accelerate.Smart.Exp b
    -> (# Data.Array.Accelerate.Array.Sugar.Elt b,
          Data.Array.Accelerate.AST.PreOpenExp
            Data.Array.Accelerate.AST.OpenAcc env () b #)
  {- Arity: 4,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,A,U)><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ b
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   @ env
                   (w1 :: Data.Array.Accelerate.Trafo.Sharing.Config)
                   (w2 :: Data.Array.Accelerate.Trafo.Sharing.Layout env env)
                   (w3 :: Data.Array.Accelerate.Smart.Exp b) ->
                 (# w,
                    let {
                      lvl390 :: GHC.Types.Int
                      = case Data.Array.Accelerate.Trafo.Sharing.$wsizeLayout
                               @ env
                               @ env
                               w2 of ww { DEFAULT ->
                        GHC.Types.I# ww }
                    } in
                    Data.Array.Accelerate.Trafo.Sharing.convertOpenExp
                      @ b
                      @ env
                      w
                      w1
                      lvl390
                      (case lvl390 of wild { GHC.Types.I# x ->
                       let {
                         x1 :: GHC.Prim.Int# = GHC.Prim.-# x 1#
                       } in
                       let {
                         x2 :: GHC.Prim.Int# = GHC.Prim.-# x 2#
                       } in
                       case GHC.Prim.tagToEnum#
                              @ GHC.Types.Bool
                              (GHC.Prim.>=# x2 x1) of wild1 {
                         GHC.Types.False -> GHC.Enum.efdtIntDn x1 x2 0#
                         GHC.Types.True -> GHC.Enum.efdtIntUp x1 x2 0# } })
                      w2
                      w3 #)) -}
b3b9077555dbded98fb9fd00243179dc
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Array.Accelerate.Trafo.Sharing.NodeCount
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Data.Array.Accelerate.Trafo.Sharing.NodeCount)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Array.Accelerate.Trafo.Sharing.AccNodeCount b1 b2
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          Data.Array.Accelerate.Trafo.Sharing.$w$cshowsPrec2
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case b2 of ww2 { GHC.Types.I# ww3 ->
                                case GHC.Show.$wshowSignedInt 11# ww3 x of ww4 { (#,#) ww5 ww6 ->
                                GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount2
                             (g w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }
                   Data.Array.Accelerate.Trafo.Sharing.ExpNodeCount b1 b2
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String)[OneShot] ->
                          Data.Array.Accelerate.Trafo.Sharing.$w$cshowsPrec1
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (case b2 of ww2 { GHC.Types.I# ww3 ->
                                case GHC.Show.$wshowSignedInt 11# ww3 x of ww4 { (#,#) ww5 ww6 ->
                                GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount1
                             (g w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount1
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) } }) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $w$cshowsPrec1 ::
    Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Array.Accelerate.Trafo.Sharing.StableSharingExp)
                   (w1 :: GHC.Base.String) ->
                 case w of wild { Data.Array.Accelerate.Trafo.Sharing.StableSharingExp t $dElt sn ds1 ->
                 case sn of wild1 { Data.Array.Accelerate.Trafo.Sharing.StableNameHeight sn1 ds2 ->
                 case sn1 of wild2 { System.Mem.StableName.StableName sn2 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt#
                           @ (Data.Array.Accelerate.Smart.Exp t)
                           sn2)
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   w1 } } } }) -}
b111e8ea5ebf72d490f1d1a0189c69c5
  $w$cshowsPrec2 ::
    Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc)
                   (w1 :: GHC.Base.String) ->
                 case w of wild { Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc arrs $dArrays sn ds1 ->
                 case sn of wild1 { Data.Array.Accelerate.Trafo.Sharing.StableNameHeight sn1 ds2 ->
                 case sn1 of wild2 { System.Mem.StableName.StableName sn2 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt#
                           @ (Data.Array.Accelerate.Smart.Acc arrs)
                           sn2)
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   w1 } } } }) -}
eaff42d9f9228adc00d8ccd74ee6c729
  $w$cshowsPrec3 ::
    Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Array.Accelerate.Trafo.Sharing.NodeName)
                   (w1 :: GHC.Base.String) ->
                 case w of wild { Data.Array.Accelerate.Trafo.Sharing.NodeName a $dTypeable1 sn ->
                 case sn of wild1 { System.Mem.StableName.StableName sn1 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt# @ a sn1)
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   w1 } } }) -}
b09d3d1c9e72701785befddf3c9c793a
  $w$cshowsPrec4 ::
    Data.Array.Accelerate.Trafo.Sharing.StableASTName c
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ (c :: * -> *)
                   (w :: Data.Array.Accelerate.Trafo.Sharing.StableASTName c)
                   (w1 :: GHC.Base.String) ->
                 case w of wild { Data.Array.Accelerate.Trafo.Sharing.StableASTName t $dTypeable1 $dTypeable2 sn ->
                 case sn of wild1 { System.Mem.StableName.StableName sn1 ->
                 case GHC.Show.$wshowSignedInt
                        0#
                        (GHC.Prim.stableNameToInt# @ (c t) sn1)
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                   w1 } } }) -}
fbe8ec26653c3231aa482924fd2a13fd
  $wconvertSharingAcc ::
    Data.Array.Accelerate.Array.Sugar.Arrays arrs =>
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
    -> [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc]
    -> [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc]
    -> Data.Array.Accelerate.Trafo.Sharing.SharingAcc
         Data.Array.Accelerate.Trafo.Sharing.ScopedAcc
         Data.Array.Accelerate.Trafo.Sharing.ScopedExp
         arrs
    -> Data.Array.Accelerate.AST.OpenAcc aenv arrs
  {- Arity: 6,
     Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,A,U)><L,U><L,1*U><L,1*U><S,1*U>,
     Inline: [0] -}
e59e2dfe83d5e89c2c19f9d3267fcd40
  $wconvertSharingExp ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Trafo.Sharing.Layout env env
    -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
    -> [Data.Array.Accelerate.Trafo.Sharing.StableSharingExp]
    -> [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc]
    -> [Data.Array.Accelerate.Trafo.Sharing.StableSharingExp]
    -> Data.Array.Accelerate.Trafo.Sharing.SharingExp
         Data.Array.Accelerate.Trafo.Sharing.ScopedAcc
         Data.Array.Accelerate.Trafo.Sharing.ScopedExp
         t
    -> Data.Array.Accelerate.AST.OpenExp env aenv t
  {- Arity: 8,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,A,U)><L,U><L,U><L,1*U><L,U><L,1*U><S,1*U>,
     Inline: [0] -}
92883f6e70e818adf02a4b764642a13e
  $wpoly_go1 ::
    Data.Array.Accelerate.Trafo.Sharing.NodeName
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf
            Data.Array.Accelerate.Trafo.Sharing.NodeName v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><S,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Array.Accelerate.Trafo.Sharing.NodeName)
                   (ww :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf
                               Data.Array.Accelerate.Trafo.Sharing.NodeName v))
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case w of k2 { Data.Array.Accelerate.Trafo.Sharing.NodeName ipv0 ipv ipv1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww1 ww2) of wild {
                   GHC.Types.False
                   -> case GHC.Prim.indexArray#
                             @ (Data.HashMap.Base.Leaf
                                  Data.Array.Accelerate.Trafo.Sharing.NodeName v)
                             ww
                             ww1 of ds1 { Unit# ipv3 ->
                      case ipv3 of wild1 { Data.HashMap.Base.L kx ds2 ->
                      case kx of wild2 { Data.Array.Accelerate.Trafo.Sharing.NodeName a $dTypeable1 sn2 ->
                      case $dTypeable1
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <a>_N)
                             (GHC.Prim.proxy#
                                @ *
                                @ a) of wild3 { Data.Typeable.Internal.TypeRep dt dt1 ds3 ds4 ds5 ->
                      case ipv
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <ipv0>_N)
                             (GHC.Prim.proxy#
                                @ *
                                @ ipv0) of wild4 { Data.Typeable.Internal.TypeRep dt2 dt3 ds6 ds7 ds8 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt dt2) of wild5 {
                        GHC.Types.False
                        -> Data.Array.Accelerate.Trafo.Sharing.$s$windexOf_$s$wpoly_go2
                             @ ipv0
                             @ v
                             ww2
                             (GHC.Prim.+# ww1 1#)
                             ww
                             ipv
                             ipv1
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqWord# dt1 dt3) of wild6 {
                             GHC.Types.False
                             -> Data.Array.Accelerate.Trafo.Sharing.$s$windexOf_$s$wpoly_go2
                                  @ ipv0
                                  @ v
                                  ww2
                                  (GHC.Prim.+# ww1 1#)
                                  ww
                                  ipv
                                  ipv1
                             GHC.Types.True
                             -> case ipv1 of wild7 { System.Mem.StableName.StableName sn1 ->
                                case sn2
                                       `cast`
                                     (System.Mem.StableName.StableName
                                        (UnsafeCo representational a ipv0))_R of wild8 { System.Mem.StableName.StableName sn4 ->
                                case GHC.Prim.eqStableName# @ ipv0 @ ipv0 sn1 sn4 of ds9 {
                                  DEFAULT -> GHC.Base.Just @ GHC.Types.Int (GHC.Types.I# ww1)
                                  0#
                                  -> Data.Array.Accelerate.Trafo.Sharing.$s$windexOf_$s$wpoly_go1
                                       @ ipv0
                                       @ v
                                       ww2
                                       (GHC.Prim.+# ww1 1#)
                                       ww
                                       ipv
                                       sn1 } } } } } } } } } }
                   GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int } }) -}
1c68dd8b69df713a7718a850ce2dd2eb
  $wpoly_go3 ::
    GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap
         Data.Array.Accelerate.Trafo.Sharing.NodeName v
    -> Data.HashMap.Base.HashMap
         Data.Array.Accelerate.Trafo.Sharing.NodeName v
    -> Data.HashMap.Base.HashMap
         Data.Array.Accelerate.Trafo.Sharing.NodeName v
  {- Arity: 3, Strictness: <L,U><S,U><S,1*U>, Inline: [0] -}
99bb415e51d86ef26b434a0330837328
  $wsizeLayout ::
    Data.Array.Accelerate.Trafo.Sharing.Layout env env'
    -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
8c4fb99defa6e8fc05a1867bf124304d
  type ASTHashTable (c :: * -> *) v =
    Data.Array.Accelerate.Trafo.Sharing.HashTable
      (Data.Array.Accelerate.Trafo.Sharing.StableASTName c) v
792ed38aabc59ccdd5401f09d3755737
  class Afunction f where
    type family AfunctionR f :: * open
    aconvert :: Data.Array.Accelerate.Trafo.Sharing.Config
                -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
                -> f
                -> Data.Array.Accelerate.AST.OpenAfun
                     aenv (Data.Array.Accelerate.Trafo.Sharing.AfunctionR f)
    {-# MINIMAL aconvert #-}
8c05e3769b9f7e72cd1f99a7a6a518a1
  data Config
    = Config {recoverAccSharing :: GHC.Types.Bool,
              recoverExpSharing :: GHC.Types.Bool,
              recoverSeqSharing :: GHC.Types.Bool,
              floatOutAcc :: GHC.Types.Bool}
792ed38aabc59ccdd5401f09d3755737
  axiom D:R:AfunctionR(->)::
    [r, a]
      Data.Array.Accelerate.Trafo.Sharing.AfunctionR
        (Data.Array.Accelerate.Smart.Acc a -> r)
        = a -> Data.Array.Accelerate.Trafo.Sharing.AfunctionR r
792ed38aabc59ccdd5401f09d3755737
  axiom D:R:AfunctionRAcc::
    [b]
      Data.Array.Accelerate.Trafo.Sharing.AfunctionR
        (Data.Array.Accelerate.Smart.Acc b)
        = b
3c7e0c3bf69aa19b1ff7874b8708cb1c
  axiom D:R:FunctionR(->)::
    [r, a]
      Data.Array.Accelerate.Trafo.Sharing.FunctionR
        (Data.Array.Accelerate.Smart.Exp a -> r)
        = a -> Data.Array.Accelerate.Trafo.Sharing.FunctionR r
3c7e0c3bf69aa19b1ff7874b8708cb1c
  axiom D:R:FunctionRExp::
    [b]
      Data.Array.Accelerate.Trafo.Sharing.FunctionR
        (Data.Array.Accelerate.Smart.Exp b)
        = b
3c7e0c3bf69aa19b1ff7874b8708cb1c
  class Function f where
    type family FunctionR f :: * open
    convert :: Data.Array.Accelerate.Trafo.Sharing.Config
               -> Data.Array.Accelerate.Trafo.Sharing.Layout env env
               -> f
               -> Data.Array.Accelerate.AST.OpenFun
                    env () (Data.Array.Accelerate.Trafo.Sharing.FunctionR f)
    {-# MINIMAL convert #-}
ee72079a32906fbbb508bbb00921df50
  type HashTable key val = Data.HashTable.IO.BasicHashTable key val
ad22de2a4bc672ca05439b7a4e02e1c3
  type role Layout nominal nominal
  data Layout env env' where
    EmptyLayout :: Layout env ()
    PushLayout :: Data.Typeable.Internal.Typeable t =>
                  (Data.Array.Accelerate.Trafo.Sharing.Layout env env'1)
                  -> (Data.Array.Accelerate.AST.Idx env t) -> Layout env (env'1, t)
b3b9077555dbded98fb9fd00243179dc
  data NodeCount
    = AccNodeCount Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
                   GHC.Types.Int
    | ExpNodeCount Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
                   GHC.Types.Int
641072a30cc059cb103f065f906d0553
  type NodeCounts =
    ([Data.Array.Accelerate.Trafo.Sharing.NodeCount],
     Data.HashMap.Base.HashMap
       Data.Array.Accelerate.Trafo.Sharing.NodeName
       (Data.HashSet.HashSet
          Data.Array.Accelerate.Trafo.Sharing.NodeName))
eaff42d9f9228adc00d8ccd74ee6c729
  data NodeName where
    NodeName :: Data.Typeable.Internal.Typeable a =>
                (System.Mem.StableName.StableName a) -> NodeName
17f2b9fc03f360e94f1204477f44cd99
  type OccMap (c :: * -> *) =
    Data.IntMap.Base.IntMap
      [(Data.Array.Accelerate.Trafo.Sharing.StableASTName c,
        GHC.Types.Int)]
4335ad2dd9b36d483f4e56d4c1e11c7f
  type OccMapHash (c :: * -> *) =
    Data.Array.Accelerate.Trafo.Sharing.ASTHashTable
      c (GHC.Types.Int, GHC.Types.Int)
059e337b0c26417d27ce76866ada84ff
  type role RootExp nominal
  data RootExp t
    = RootExp (Data.Array.Accelerate.Trafo.Sharing.OccMap
                 Data.Array.Accelerate.Smart.Exp)
              (Data.Array.Accelerate.Trafo.Sharing.UnscopedExp t)
b111e8ea5ebf72d490f1d1a0189c69c5
  type role ScopedAcc nominal
  data ScopedAcc t
    = ScopedAcc [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc]
                (Data.Array.Accelerate.Trafo.Sharing.SharingAcc
                   Data.Array.Accelerate.Trafo.Sharing.ScopedAcc
                   Data.Array.Accelerate.Trafo.Sharing.ScopedExp
                   t)
    RecFlag: Recursive
b111e8ea5ebf72d490f1d1a0189c69c5
  type role ScopedExp nominal
  data ScopedExp t
    = ScopedExp [Data.Array.Accelerate.Trafo.Sharing.StableSharingExp]
                (Data.Array.Accelerate.Trafo.Sharing.SharingExp
                   Data.Array.Accelerate.Trafo.Sharing.ScopedAcc
                   Data.Array.Accelerate.Trafo.Sharing.ScopedExp
                   t)
    RecFlag: Recursive
b111e8ea5ebf72d490f1d1a0189c69c5
  type role SharingAcc representational representational nominal
  data SharingAcc (acc :: GHC.Types.* -> *)
                  (exp :: * -> *)
                  arrs where
    AvarSharing :: Data.Array.Accelerate.Array.Sugar.Arrays arrs =>
                   (Data.Array.Accelerate.Trafo.Sharing.StableAccName arrs)
                   -> SharingAcc acc exp arrs
    AletSharing :: Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc
                   -> (acc arrs) -> SharingAcc acc exp arrs
    AccSharing :: Data.Array.Accelerate.Array.Sugar.Arrays arrs =>
                  (Data.Array.Accelerate.Trafo.Sharing.StableAccName arrs)
                  -> (Data.Array.Accelerate.Smart.PreAcc acc exp arrs)
                  -> SharingAcc acc exp arrs
b111e8ea5ebf72d490f1d1a0189c69c5
  type role SharingExp representational representational nominal
  data SharingExp (acc :: GHC.Types.* -> GHC.Types.*)
                  (exp :: * -> *)
                  t where
    VarSharing :: Data.Array.Accelerate.Array.Sugar.Elt t =>
                  (Data.Array.Accelerate.Trafo.Sharing.StableExpName t)
                  -> SharingExp acc exp t
    LetSharing :: Data.Array.Accelerate.Trafo.Sharing.StableSharingExp
                  -> (exp t) -> SharingExp acc exp t
    ExpSharing :: Data.Array.Accelerate.Array.Sugar.Elt t =>
                  (Data.Array.Accelerate.Trafo.Sharing.StableExpName t)
                  -> (Data.Array.Accelerate.Smart.PreExp acc exp t)
                  -> SharingExp acc exp t
b09d3d1c9e72701785befddf3c9c793a
  type role StableASTName nominal
  data StableASTName (c :: * -> *) where
    StableASTName :: (Data.Typeable.Internal.Typeable c,
                      Data.Typeable.Internal.Typeable t) =>
                     (System.Mem.StableName.StableName (c t)) -> StableASTName c
de2ff2fc315a945615ffe7fe9f29beff
  type StableAccName arrs =
    Data.Array.Accelerate.Trafo.Sharing.StableNameHeight
      (Data.Array.Accelerate.Smart.Acc arrs)
b4a7bf6e8dd43301fd65681c421a3b2f
  type StableExpName t =
    Data.Array.Accelerate.Trafo.Sharing.StableNameHeight
      (Data.Array.Accelerate.Smart.Exp t)
8d8e628e08917450fc183a072404bbf0
  data StableNameHeight t
    = StableNameHeight (System.Mem.StableName.StableName t)
                       GHC.Types.Int
b111e8ea5ebf72d490f1d1a0189c69c5
  data StableSharingAcc where
    StableSharingAcc :: Data.Array.Accelerate.Array.Sugar.Arrays
                          arrs =>
                        (Data.Array.Accelerate.Trafo.Sharing.StableAccName arrs)
                        -> (Data.Array.Accelerate.Trafo.Sharing.SharingAcc
                              Data.Array.Accelerate.Trafo.Sharing.ScopedAcc
                              Data.Array.Accelerate.Trafo.Sharing.ScopedExp
                              arrs)
                        -> StableSharingAcc
b111e8ea5ebf72d490f1d1a0189c69c5
  data StableSharingExp where
    StableSharingExp :: Data.Array.Accelerate.Array.Sugar.Elt t =>
                        (Data.Array.Accelerate.Trafo.Sharing.StableExpName t)
                        -> (Data.Array.Accelerate.Trafo.Sharing.SharingExp
                              Data.Array.Accelerate.Trafo.Sharing.ScopedAcc
                              Data.Array.Accelerate.Trafo.Sharing.ScopedExp
                              t)
                        -> StableSharingExp
    RecFlag: Recursive
059e337b0c26417d27ce76866ada84ff
  type role UnscopedAcc nominal
  data UnscopedAcc t
    = UnscopedAcc [GHC.Types.Int]
                  (Data.Array.Accelerate.Trafo.Sharing.SharingAcc
                     Data.Array.Accelerate.Trafo.Sharing.UnscopedAcc
                     Data.Array.Accelerate.Trafo.Sharing.RootExp
                     t)
    RecFlag: Recursive
059e337b0c26417d27ce76866ada84ff
  type role UnscopedExp nominal
  data UnscopedExp t
    = UnscopedExp [GHC.Types.Int]
                  (Data.Array.Accelerate.Trafo.Sharing.SharingExp
                     Data.Array.Accelerate.Trafo.Sharing.UnscopedAcc
                     Data.Array.Accelerate.Trafo.Sharing.UnscopedExp
                     t)
    RecFlag: Recursive
72229e033d22fb08204262d730d1ee81
  convertAcc ::
    Data.Array.Accelerate.Array.Sugar.Arrays arrs =>
    GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Acc arrs
    -> Data.Array.Accelerate.AST.Acc arrs
  {- Arity: 6,
     Strictness: <L,U(U,U,U,U,U,U)><L,U><L,U><L,A><L,1*U><L,1*U>,
     Unfolding: InlineRule (6, True, False)
                (\ @ arrs
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays arrs)
                   (shareAcc :: GHC.Types.Bool)
                   (shareExp :: GHC.Types.Bool)
                   (shareSeq :: GHC.Types.Bool)
                   (floatAcc :: GHC.Types.Bool)
                   (acc :: Data.Array.Accelerate.Smart.Acc arrs) ->
                 Data.Array.Accelerate.Trafo.Sharing.convertOpenAcc
                   @ arrs
                   @ ()
                   $dArrays
                   (Data.Array.Accelerate.Trafo.Sharing.Config
                      shareAcc
                      shareExp
                      shareSeq
                      (GHC.Classes.&& shareAcc floatAcc))
                   Data.Array.Accelerate.Trafo.Sharing.$slookup1
                   (GHC.Types.[] @ Data.Array.Accelerate.Smart.Level)
                   (Data.Array.Accelerate.Trafo.Sharing.$WEmptyLayout @ ())
                   acc) -}
d2e36389050e9db63b57ee2d188b75b4
  convertAfun ::
    Data.Array.Accelerate.Trafo.Sharing.Afunction f =>
    GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> f
    -> Data.Array.Accelerate.AST.Afun
         (Data.Array.Accelerate.Trafo.Sharing.AfunctionR f)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><L,U><L,U><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ f
                   ($dAfunction :: Data.Array.Accelerate.Trafo.Sharing.Afunction f)
                   (shareAcc :: GHC.Types.Bool)
                   (shareExp :: GHC.Types.Bool)
                   (shareSeq :: GHC.Types.Bool)
                   (floatAcc :: GHC.Types.Bool) ->
                 $dAfunction
                   `cast`
                 (Data.Array.Accelerate.Trafo.Sharing.N:Afunction[0] <f>_N)
                   @ ()
                   (Data.Array.Accelerate.Trafo.Sharing.Config
                      shareAcc
                      shareExp
                      shareSeq
                      (GHC.Classes.&& shareAcc floatAcc))
                   (Data.Array.Accelerate.Trafo.Sharing.$WEmptyLayout @ ())) -}
51e56eda4b978498f283eb561379fda1
  convertExp ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.AST.Exp () e
  {- Arity: 3,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (shareExp :: GHC.Types.Bool)
                   (exp :: Data.Array.Accelerate.Smart.Exp e) ->
                 Data.Array.Accelerate.Trafo.Sharing.convertOpenExp
                   @ e
                   @ ()
                   $dElt
                   (Data.Array.Accelerate.Trafo.Sharing.Config
                      GHC.Types.False
                      shareExp
                      GHC.Types.False
                      GHC.Types.False)
                   Data.Array.Accelerate.Trafo.Sharing.$slookup1
                   (GHC.Types.[] @ Data.Array.Accelerate.Smart.Level)
                   (Data.Array.Accelerate.Trafo.Sharing.$WEmptyLayout @ ())
                   exp) -}
23ebf0875b4c2809b8c11c279220293b
  convertFun ::
    Data.Array.Accelerate.Trafo.Sharing.Function f =>
    GHC.Types.Bool
    -> f
    -> Data.Array.Accelerate.AST.Fun
         () (Data.Array.Accelerate.Trafo.Sharing.FunctionR f)
  {- Arity: 2, HasNoCafRefs, Strictness: <C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ f
                   ($dFunction :: Data.Array.Accelerate.Trafo.Sharing.Function f)
                   (shareExp :: GHC.Types.Bool) ->
                 $dFunction
                   `cast`
                 (Data.Array.Accelerate.Trafo.Sharing.N:Function[0] <f>_N)
                   @ ()
                   (Data.Array.Accelerate.Trafo.Sharing.Config
                      GHC.Types.False
                      shareExp
                      GHC.Types.False
                      GHC.Types.False)
                   (Data.Array.Accelerate.Trafo.Sharing.$WEmptyLayout @ ())) -}
7c508ba9684c905af44009a663b6c97c
  convertOpenAcc ::
    Data.Array.Accelerate.Array.Sugar.Arrays arrs =>
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Smart.Level
    -> [Data.Array.Accelerate.Smart.Level]
    -> Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv
    -> Data.Array.Accelerate.Smart.Acc arrs
    -> Data.Array.Accelerate.AST.OpenAcc aenv arrs
  {- Arity: 6,
     Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,A,U)><L,U(U)><L,1*U><L,U><L,1*U>,
     Unfolding: (\ @ arrs
                   @ aenv
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays arrs)
                   (eta :: Data.Array.Accelerate.Trafo.Sharing.Config)
                   (eta1 :: Data.Array.Accelerate.Smart.Level)
                   (eta2 :: [Data.Array.Accelerate.Smart.Level])
                   (eta3 :: Data.Array.Accelerate.Trafo.Sharing.Layout aenv aenv)
                   (eta4 :: Data.Array.Accelerate.Smart.Acc arrs) ->
                 case Data.Array.Accelerate.Trafo.Sharing.recoverSharingAcc
                        @ arrs
                        (Data.Array.Accelerate.Array.Sugar.$p1Arrays @ arrs $dArrays)
                        eta
                        eta1
                        eta2
                        eta4 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Data.Array.Accelerate.Trafo.Sharing.ScopedAcc ww4 ww5 ->
                 Data.Array.Accelerate.Trafo.Sharing.$wconvertSharingAcc
                   @ aenv
                   @ arrs
                   $dArrays
                   eta
                   eta3
                   ww2
                   ww4
                   ww5 } }) -}
e8c96e8b41387ee5dfd13b2f689aa83b
  convertOpenExp ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Smart.Level
    -> [Data.Array.Accelerate.Smart.Level]
    -> Data.Array.Accelerate.Trafo.Sharing.Layout env env
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.AST.OpenExp env () e
  {- Arity: 6,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,A,U)><L,U(U)><L,U><L,U><L,1*U>,
     Unfolding: (\ @ e
                   @ env
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (eta :: Data.Array.Accelerate.Trafo.Sharing.Config)
                   (eta1 :: Data.Array.Accelerate.Smart.Level)
                   (eta2 :: [Data.Array.Accelerate.Smart.Level])
                   (eta3 :: Data.Array.Accelerate.Trafo.Sharing.Layout env env)
                   (eta4 :: Data.Array.Accelerate.Smart.Exp e) ->
                 case Data.Array.Accelerate.Trafo.Sharing.recoverSharingExp
                        @ e
                        (Data.Array.Accelerate.Array.Sugar.$p2Elt @ e $dElt)
                        eta
                        eta1
                        eta2
                        eta4 of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { Data.Array.Accelerate.Trafo.Sharing.ScopedExp ww4 ww5 ->
                 Data.Array.Accelerate.Trafo.Sharing.$wconvertSharingExp
                   @ e
                   @ env
                   @ ()
                   $dElt
                   eta
                   eta3
                   (Data.Array.Accelerate.Trafo.Sharing.$WEmptyLayout @ ())
                   ww2
                   (GHC.Types.[]
                      @ Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc)
                   ww4
                   ww5 } }) -}
1087177b1b19b99305b9fa4ff3f7024f
  floatOutAcc ::
    Data.Array.Accelerate.Trafo.Sharing.Config -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Trafo.Sharing.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Data.Array.Accelerate.Trafo.Sharing.Config) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.Config ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
cd0744b5d80ad29ced35f06816b62a7e
  incLayout ::
    Data.Array.Accelerate.Trafo.Sharing.Layout env env'
    -> Data.Array.Accelerate.Trafo.Sharing.Layout (env, t) env'
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d790c8c4fab3cad2bfb718b259eb733d
  recoverAccSharing ::
    Data.Array.Accelerate.Trafo.Sharing.Config -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Trafo.Sharing.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Data.Array.Accelerate.Trafo.Sharing.Config) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.Config ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
bea437218a0703e0f840333732e498a7
  recoverExpSharing ::
    Data.Array.Accelerate.Trafo.Sharing.Config -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Trafo.Sharing.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Data.Array.Accelerate.Trafo.Sharing.Config) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.Config ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
0e1fe198c765869927b7c8c846ef5228
  recoverSeqSharing ::
    Data.Array.Accelerate.Trafo.Sharing.Config -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Trafo.Sharing.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Data.Array.Accelerate.Trafo.Sharing.Config) ->
                 case ds1 of wild { Data.Array.Accelerate.Trafo.Sharing.Config ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
7e5ba92cbac804429c9659ac468d2240
  recoverSharingAcc ::
    Data.Typeable.Internal.Typeable a =>
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Smart.Level
    -> [Data.Array.Accelerate.Smart.Level]
    -> Data.Array.Accelerate.Smart.Acc a
    -> (Data.Array.Accelerate.Trafo.Sharing.ScopedAcc a,
        [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc])
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U,A,U)><L,U(U)><L,1*U><L,1*U>m,
     Inline: NOINLINE -}
fd7be86b6d56b0b9127c5d9ee22944a7
  recoverSharingExp ::
    Data.Typeable.Internal.Typeable e =>
    Data.Array.Accelerate.Trafo.Sharing.Config
    -> Data.Array.Accelerate.Smart.Level
    -> [Data.Array.Accelerate.Smart.Level]
    -> Data.Array.Accelerate.Smart.Exp e
    -> (Data.Array.Accelerate.Trafo.Sharing.ScopedExp e,
        [Data.Array.Accelerate.Trafo.Sharing.StableSharingExp])
  {- Arity: 5, Strictness: <L,U><L,U(U,U,A,U)><L,U(U)><L,U><L,1*U>m,
     Inline: NOINLINE -}
30b48f83be32935b9c15db302f692457
  sizeLayout ::
    Data.Array.Accelerate.Trafo.Sharing.Layout env env'
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ env
                   @ env'
                   (w :: Data.Array.Accelerate.Trafo.Sharing.Layout env env') ->
                 case Data.Array.Accelerate.Trafo.Sharing.$wsizeLayout
                        @ env
                        @ env'
                        w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
instance Data.Array.Accelerate.Trafo.Sharing.Afunction [(->)]
  = Data.Array.Accelerate.Trafo.Sharing.$fAfunction(->)
instance Data.Array.Accelerate.Trafo.Sharing.Afunction [Data.Array.Accelerate.Smart.Acc]
  = Data.Array.Accelerate.Trafo.Sharing.$fAfunctionAcc
instance GHC.Classes.Eq [Data.Array.Accelerate.Trafo.Sharing.NodeName]
  = Data.Array.Accelerate.Trafo.Sharing.$fEqNodeName
instance GHC.Classes.Eq [Data.Array.Accelerate.Trafo.Sharing.StableASTName]
  = Data.Array.Accelerate.Trafo.Sharing.$fEqStableASTName
instance GHC.Classes.Eq [Data.Array.Accelerate.Trafo.Sharing.StableNameHeight]
  = Data.Array.Accelerate.Trafo.Sharing.$fEqStableNameHeight
instance GHC.Classes.Eq [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc]
  = Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingAcc
instance GHC.Classes.Eq [Data.Array.Accelerate.Trafo.Sharing.StableSharingExp]
  = Data.Array.Accelerate.Trafo.Sharing.$fEqStableSharingExp
instance Data.Array.Accelerate.Trafo.Sharing.Function [(->)]
  = Data.Array.Accelerate.Trafo.Sharing.$fFunction(->)
instance Data.Array.Accelerate.Trafo.Sharing.Function [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Trafo.Sharing.$fFunctionExp
instance Data.Hashable.Class.Hashable [Data.Array.Accelerate.Trafo.Sharing.NodeName]
  = Data.Array.Accelerate.Trafo.Sharing.$fHashableNodeName
instance Data.Hashable.Class.Hashable [Data.Array.Accelerate.Trafo.Sharing.StableASTName]
  = Data.Array.Accelerate.Trafo.Sharing.$fHashableStableASTName
instance GHC.Show.Show [Data.Array.Accelerate.Trafo.Sharing.NodeCount]
  = Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount
instance GHC.Show.Show [Data.Array.Accelerate.Trafo.Sharing.NodeName]
  = Data.Array.Accelerate.Trafo.Sharing.$fShowNodeName
instance GHC.Show.Show [Data.Array.Accelerate.Trafo.Sharing.StableASTName]
  = Data.Array.Accelerate.Trafo.Sharing.$fShowStableASTName
instance GHC.Show.Show [Data.Array.Accelerate.Trafo.Sharing.StableSharingAcc]
  = Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingAcc
instance GHC.Show.Show [Data.Array.Accelerate.Trafo.Sharing.StableSharingExp]
  = Data.Array.Accelerate.Trafo.Sharing.$fShowStableSharingExp
family instance Data.Array.Accelerate.Trafo.Sharing.AfunctionR [(->)]
  = Data.Array.Accelerate.Trafo.Sharing.D:R:AfunctionR(->)
family instance Data.Array.Accelerate.Trafo.Sharing.AfunctionR [Data.Array.Accelerate.Smart.Acc]
  = Data.Array.Accelerate.Trafo.Sharing.D:R:AfunctionRAcc
family instance Data.Array.Accelerate.Trafo.Sharing.FunctionR [(->)]
  = Data.Array.Accelerate.Trafo.Sharing.D:R:FunctionR(->)
family instance Data.Array.Accelerate.Trafo.Sharing.FunctionR [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Trafo.Sharing.D:R:FunctionRExp
"SC:$wpoly_go10" [0] forall @ ipv0
                            @ v
                            (sc :: GHC.Prim.Int#)
                            (sc1 :: GHC.Prim.Int#)
                            (sc2 :: GHC.Prim.Array#
                                      (Data.HashMap.Base.Leaf
                                         Data.Array.Accelerate.Trafo.Sharing.NodeName v))
                            (sc3 :: Data.Typeable.Internal.Typeable ipv0)
                            (sc4 :: System.Mem.StableName.StableName ipv0)
  Data.Array.Accelerate.Trafo.Sharing.$wpoly_go1 @ v
                                                 (Data.Array.Accelerate.Trafo.Sharing.NodeName
                                                    @ ipv0
                                                    sc3
                                                    sc4)
                                                 sc2
                                                 sc1
                                                 sc
  = Data.Array.Accelerate.Trafo.Sharing.$s$windexOf_$s$wpoly_go2
      @ ipv0
      @ v
      sc
      sc1
      sc2
      sc3
      sc4
"SC:$wpoly_go11" [0] forall @ ipv0
                            @ v
                            (sc :: GHC.Prim.Int#)
                            (sc1 :: GHC.Prim.Int#)
                            (sc2 :: GHC.Prim.Array#
                                      (Data.HashMap.Base.Leaf
                                         Data.Array.Accelerate.Trafo.Sharing.NodeName v))
                            (sc3 :: Data.Typeable.Internal.Typeable ipv0)
                            (sc4 :: GHC.Prim.StableName# ipv0)
  Data.Array.Accelerate.Trafo.Sharing.$wpoly_go1 @ v
                                                 (Data.Array.Accelerate.Trafo.Sharing.NodeName
                                                    @ ipv0
                                                    sc3
                                                    (System.Mem.StableName.StableName @ ipv0 sc4))
                                                 sc2
                                                 sc1
                                                 sc
  = Data.Array.Accelerate.Trafo.Sharing.$s$windexOf_$s$wpoly_go1
      @ ipv0
      @ v
      sc
      sc1
      sc2
      sc3
      sc4
"SPEC/Data.Array.Accelerate.Trafo.Sharing ! @ NodeName _" [ALWAYS] forall @ v
                                                                          ($dHashable :: Data.Hashable.Class.Hashable
                                                                                           Data.Array.Accelerate.Trafo.Sharing.NodeName)
                                                                          ($dEq :: GHC.Classes.Eq
                                                                                     Data.Array.Accelerate.Trafo.Sharing.NodeName)
  Data.HashMap.Base.! @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                      @ v
                      $dEq
                      $dHashable
  = Data.Array.Accelerate.Trafo.Sharing.$s! @ v
"SPEC/Data.Array.Accelerate.Trafo.Sharing $fArraysArray @ Z @ Bool" [ALWAYS] forall ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                                GHC.Types.Bool)
                                                                                    ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                                                                  Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fArraysArray @ Data.Array.Accelerate.Array.Sugar.Z
                                                  @ GHC.Types.Bool
                                                  $dShape
                                                  $dElt
  = Data.Array.Accelerate.Trafo.Sharing.$s$fArraysArray
"SPEC/Data.Array.Accelerate.Trafo.Sharing $fShape:. @ Z" [ALWAYS] forall ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                                                       Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fShape:. @ Data.Array.Accelerate.Array.Sugar.Z
                                              $dShape
  = Data.Array.Accelerate.Trafo.Sharing.$s$fShape:.
"SPEC/Data.Array.Accelerate.Trafo.Sharing $wupdateOrConcatWithKey @ NodeName _" [0] forall @ v
                                                                                           (w :: GHC.Classes.Eq
                                                                                                   Data.Array.Accelerate.Trafo.Sharing.NodeName)
  Data.HashMap.Base.$wupdateOrConcatWithKey @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                                            @ v
                                            w
  = Data.Array.Accelerate.Trafo.Sharing.$s$wupdateOrConcatWithKey @ v
"SPEC/Data.Array.Accelerate.Trafo.Sharing $wupdateOrSnocWithKey @ NodeName _" [0] forall @ v
                                                                                         (w :: GHC.Classes.Eq
                                                                                                 Data.Array.Accelerate.Trafo.Sharing.NodeName)
  Data.HashMap.Base.$wupdateOrSnocWithKey @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                                          @ v
                                          w
  = Data.Array.Accelerate.Trafo.Sharing.$s$wupdateOrSnocWithKey @ v
"SPEC/Data.Array.Accelerate.Trafo.Sharing $wupdateOrSnocWithKey @ NodeName _" [0] forall @ v
                                                                                         (w :: GHC.Classes.Eq
                                                                                                 Data.Array.Accelerate.Trafo.Sharing.NodeName)
  Data.HashMap.Strict.$wupdateOrSnocWithKey @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                                            @ v
                                            w
  = Data.Array.Accelerate.Trafo.Sharing.$s$wupdateOrSnocWithKey1 @ v
"SPEC/Data.Array.Accelerate.Trafo.Sharing shows @ NodeCount" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                          Data.Array.Accelerate.Trafo.Sharing.NodeCount)
  GHC.Show.shows @ Data.Array.Accelerate.Trafo.Sharing.NodeCount
                 $dShow
  = Data.Array.Accelerate.Trafo.Sharing.$fShowNodeCount_$sshows
"SPEC/Data.Array.Accelerate.Trafo.Sharing shows @ NodeName" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                         Data.Array.Accelerate.Trafo.Sharing.NodeName)
  GHC.Show.shows @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                 $dShow
  = Data.Array.Accelerate.Trafo.Sharing.$fShowNodeName_$sshows
"SPEC/Data.Array.Accelerate.Trafo.Sharing union @ NodeName" [ALWAYS] forall ($dHashable :: Data.Hashable.Class.Hashable
                                                                                             Data.Array.Accelerate.Trafo.Sharing.NodeName)
                                                                            ($dEq :: GHC.Classes.Eq
                                                                                       Data.Array.Accelerate.Trafo.Sharing.NodeName)
  Data.HashSet.union @ Data.Array.Accelerate.Trafo.Sharing.NodeName
                     $dEq
                     $dHashable
  = Data.Array.Accelerate.Trafo.Sharing.$sunion1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

