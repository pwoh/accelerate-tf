
==================== FINAL INTERFACE ====================
2017-08-29 05:28:02.180329 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Substitution [family instance module] 8002
  interface hash: f0ee5fc8d8a685dc0359ff56f7960033
  ABI hash: 1ab9162bd3f0f153d1c21a8dd76bc781
  export-list hash: 3e411ea0b6662b69d52e36eb3bfba800
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 312c30b481eba3ddb83dd3666a127c1d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Array.Accelerate.Trafo.Substitution.compose
  Data.Array.Accelerate.Trafo.Substitution.inline
  Data.Array.Accelerate.Trafo.Substitution.strengthen
  Data.Array.Accelerate.Trafo.Substitution.strengthenE
  Data.Array.Accelerate.Trafo.Substitution.subAtop
  Data.Array.Accelerate.Trafo.Substitution.subTop
  Data.Array.Accelerate.Trafo.Substitution.substitute
  Data.Array.Accelerate.Trafo.Substitution.:>
  Data.Array.Accelerate.Trafo.Substitution.:?>
  Data.Array.Accelerate.Trafo.Substitution.RebuildAcc
  Data.Array.Accelerate.Trafo.Substitution.RebuildTup{Data.Array.Accelerate.Trafo.Substitution.RebuildTup unRTup}
  Data.Array.Accelerate.Trafo.Substitution.Rebuildable{Data.Array.Accelerate.Trafo.Substitution.AccClo Data.Array.Accelerate.Trafo.Substitution.rebuildA Data.Array.Accelerate.Trafo.Substitution.rebuildPartial}
  Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
  Data.Array.Accelerate.Trafo.Substitution.RebuildableExp{Data.Array.Accelerate.Trafo.Substitution.rebuildE Data.Array.Accelerate.Trafo.Substitution.rebuildPartialE}
  Data.Array.Accelerate.Trafo.Substitution.Sink{Data.Array.Accelerate.Trafo.Substitution.weaken}
  Data.Array.Accelerate.Trafo.Substitution.SinkExp{Data.Array.Accelerate.Trafo.Substitution.weakenE}
module dependencies: Data.Array.Accelerate.AST
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Stats Data.Array.Accelerate.Debug.Trace
                     Data.Array.Accelerate.Error Data.Array.Accelerate.Lifetime
                     Data.Array.Accelerate.Product Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  Data.Array.Accelerate.AST 4907563d36aadcb5fe024fe0eaf42ffa
  exports: 14f3cf8c02b472222e546556891c5be1
  Abody ee120ad61e0a5f248fbde7e991e9af28
  Acond 750209431eae401dfff3c860bd1e2fc6
  Aforeign 5214b73c1fba23d3d4e7f85cb199ac1c
  Alam 9e3e3605bc50ad599485b7c0977e13d9
  Alet 0ab0425bc7b0ec829dbc083ffa16825d
  Apply acd8c8af26b0a8b682df360df59fa8be
  Aprj 404b31d0a415df80893151ff13fb0846
  Atuple 902517e36fd9d4d0cfb6191b1c6684eb
  Avar b9746522dbbe78edef452606b6656a87
  Awhile 14384d8a9ba2da72092122c848e2ae32
  Backpermute 4f66d0e89ef4df5962354aa16441f617
  Body 1196576b2aa6a07bc2357625785ef2e5
  Clamp c3a43eecdb9882efc038c7b9062cdcb4
  Cond 85b737c39381609050fcedb2a2391a92
  Const d4b278465afaa56210a92bc3030b1c81
  Constant 109db35160e400a315f90946c081dc01
  Fold bb3f680fb271e4fc52befb09d536ab67
  Fold1 81a218046119358257d76f4180b62916
  Fold1Seg e17f7dec7f49bed9b09c5dddc31f075f
  FoldSeg 066501eca698e8d157f1bbd44032854e
  Foreign cd3ba341b3611dd6c5a93df013aa5a0f
  FromIndex 175bd7890f27a032cb2a1e79fa38d269
  Function 303d21de1401dc1e63266aacbd76779e
  Generate 36e058fa32bd3e74acd8e2c33b47dc54
  Idx 9e7661ad7cc1bdaa299ff04fb99275fb
  Index 63200e0b9961802f7b038a2e740789b0
  IndexAny 76a617483a4b1532550fe134ec1b4e43
  IndexCons a015173a5dad6ebd2b8e31b35afb501a
  IndexFull b79f06d91ed5766f10b485089815d3f3
  IndexHead 3f325360371c4024fd7e59caec7726dd
  IndexNil 8331ee2296cdcd4d19411e11e8205177
  IndexSlice 45dcf8fd2ee557f7e6b7acb3cb7bd68d
  IndexTail 08923ce42f0b849d79fabcb6207dc0a4
  Intersect d61777171aa2d140c0046919d45de878
  Lam 158725fe690b603ce6a570d589782162
  Let fb7635520863b39ad81ae4c22c0dfd53
  LinearIndex d5e9e584798a5b18adfd76ceee4f21f3
  Map c186fc6c7cc5f818dedf44e9c7679cfc
  Mirror f990633b0e9d96822dbfd328904ab57b
  OpenAcc 3461fc2319f9b06050cf56128e83b27c
  OpenAcc d85164a68dcedbc8a54813dd240745cc
  Permute 0d48aeaf25db12c40fda0dfdecef40cf
  PreBoundary f77d583ab18e537cb481471882c136a8
  PreOpenAcc 1c6afba98b6c67e35689096ef2f6efe3
  PreOpenAfun 2e727f8d346dd6a6266c06baf474000a
  PreOpenExp d3bf8e354493ff12972ab24a46d8ebad
  PreOpenFun d3bf8e354493ff12972ab24a46d8ebad
  PrimApp 4153e64d1996ff9e8d5bab83757d04cc
  PrimConst c3e9d3e0be46d673c989e142b6fb53f5
  Prj ea0969c2ebd78e8f97f90fdce0ec5b85
  Replicate b45b307c3ac5834be45157f9b97164b0
  Reshape 47f08dcad6d10e3aa1cb6093ba11dd85
  Scanl 396bf0430f22f20afe3957f5ca59a08b
  Scanl' 1adc9e003ccf30f16828abd0fd78615a
  Scanl1 1276c7f35ce3c67a27dcc2ffd5def021
  Scanr 1a875086cf9a77ee605ee5eb6845fb3d
  Scanr' 93cb828599b9e47e6605e12c5a38e182
  Scanr1 80c7de53ede553c41fe8bb104ed3dbc8
  Shape 188e3cfc394232139edff3a93b6fc738
  ShapeSize f339b41eb7026d658f318c6ff3b1ddbd
  Slice 0f021a8f0af5175920645825ac2450a8
  Stencil 09b6572f0048c550f2782ea5ac548286
  Stencil2 bbe92a77ce856793eceb2afaa356761b
  SuccIdx 076f2d7bd7da8ff1d9570f0dbeb5674a
  ToIndex 1778bb2206e9b9af2bfb73385aa8fcf6
  Transform 3346841e54e9c2cae2cf221c490a757d
  Tuple 286fa31822ac85195775eaca8264e583
  Union a7d3a050ed47fbfc04189bf738e5cbf8
  Unit 6a040b1551bc804afa771300d0236e16
  Use d69e2b4a5c6ddbf9268deeebd8e6f6e2
  Var 316870341ee21060a306c8836bf702a6
  While e1c4381be88ce0fc5eeff6f5cfbbbe14
  Wrap ebef9cf28c72cc8d1ebbffba633ea578
  ZeroIdx 2872af3fb6867732883d5517094bca30
  ZipWith 51d1ce30678f2f98e0a9db1215a02e6e
import  -/  Data.Array.Accelerate.Array.Sugar 1095a84a969562bd64b7800341e0d23c
  exports: a6dd551b39ab2a3a217fc8c2a6979cd5
  Arrays 3cc6db7d6b3c36ee0c840e1566f75d38
  Atuple 6feaa0161ffad15a746afb867f21f70b
  Elt 78f23e81404aaf1e43268a71a575425c
  NilAtup cc36880f178a7e9e125505f43c8172e2
  NilTup 36796631cb3a95a68e6a4dde7e7b2bbe
  SnocAtup 8508890a48fc19a3130443094eda67f2
  SnocTup ef3a739bcf04e48a53d49112dce542ea
  Tuple 878418f2d4c18f6518d438b74451ef4e
import  -/  Data.Array.Accelerate.Debug.Stats 233b556167dd26bfa71d8540af4d79bd
  exports: 1a390e34a04e023aa79411b38bd9c6fa
  substitution 8d30b18fdbea434f732e01539cdc959a
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Type.Equality e58d97d060ef5a0f7906bf33d6e50df2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
fixities infixr 9 compose, infixr 9 substitute
53a762194c947b304399e52c30f834b9
  $dmrebuildA ::
    Data.Array.Accelerate.Trafo.Substitution.Rebuildable f =>
    forall (fa :: (* -> * -> *) -> * -> * -> *) aenv aenv' a.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo f) aenv' a')
    -> f aenv a -> f aenv' a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A)><L,U><L,C(U)>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: InlineRule (0, True, False)
                (\ @ (f :: * -> * -> *)
                   ($dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                       f)
                   @ (fa :: (* -> * -> *) -> * -> * -> *)
                   @ aenv
                   @ aenv'
                   @ a
                   ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                        fa)
                   (av :: forall a'.
                          Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                          Data.Array.Accelerate.AST.Idx aenv a'
                          -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                   f) aenv' a') ->
                 let {
                   g :: f aenv a
                        -> Data.Array.Accelerate.Trafo.Substitution.Identity (f aenv' a)
                   = Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                       @ f
                       $dRebuildable
                       @ Data.Array.Accelerate.Trafo.Substitution.Identity
                       @ fa
                       @ aenv
                       @ aenv'
                       @ a
                       Data.Array.Accelerate.Trafo.Substitution.$fApplicativeIdentity
                       $dSyntacticAcc
                       (\ @ a'
                          ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a') ->
                        let {
                          g1 :: Data.Array.Accelerate.AST.Idx aenv a'
                                -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo f) aenv' a'
                          = av @ a' $dArrays
                        } in
                        \ (x :: Data.Array.Accelerate.AST.Idx aenv a') ->
                        Data.Array.Accelerate.Trafo.Substitution.Identity
                          @ (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo f) aenv' a')
                          (g1 x))
                 } in
                 \ (x :: f aenv a) ->
                 Data.Array.Accelerate.Trafo.Substitution.runIdentity
                   @ (f aenv' a)
                   (g x)) -}
36c7f0abc445c51e17e75229b06ca755
  $dmrebuildE ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableExp f =>
    forall (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                  -> * -> * -> * -> *) env env' aenv e.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe =>
    (forall e'.
     Data.Array.Accelerate.Array.Sugar.Elt e' =>
     Data.Array.Accelerate.AST.Idx env e'
     -> fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
              (f env)) env' aenv e')
    -> f env aenv e -> f env' aenv e
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A)><L,U><L,C(U)>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: InlineRule (0, True, False)
                (\ @ (f :: * -> * -> * -> *)
                   ($dRebuildableExp :: Data.Array.Accelerate.Trafo.Substitution.RebuildableExp
                                          f)
                   @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                            -> * -> * -> * -> *)
                   @ env
                   @ env'
                   @ aenv
                   @ e
                   ($dSyntacticExp :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
                                        fe)
                   (v :: forall e'.
                         Data.Array.Accelerate.Array.Sugar.Elt e' =>
                         Data.Array.Accelerate.AST.Idx env e'
                         -> fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                  (f env)) env' aenv e') ->
                 let {
                   g :: f env aenv e
                        -> Data.Array.Accelerate.Trafo.Substitution.Identity
                             (f env' aenv e)
                   = Data.Array.Accelerate.Trafo.Substitution.rebuildPartialE
                       @ f
                       $dRebuildableExp
                       @ Data.Array.Accelerate.Trafo.Substitution.Identity
                       @ fe
                       @ env
                       @ env'
                       @ aenv
                       @ e
                       Data.Array.Accelerate.Trafo.Substitution.$fApplicativeIdentity
                       $dSyntacticExp
                       (\ @ e' ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e') ->
                        let {
                          g1 :: Data.Array.Accelerate.AST.Idx env e'
                                -> fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                         (f env)) env' aenv e'
                          = v @ e' $dElt
                        } in
                        \ (x :: Data.Array.Accelerate.AST.Idx env e') ->
                        Data.Array.Accelerate.Trafo.Substitution.Identity
                          @ (fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                   (f env)) env' aenv e')
                          (g1 x))
                 } in
                 \ (x :: f env aenv e) ->
                 Data.Array.Accelerate.Trafo.Substitution.runIdentity
                   @ (f env' aenv e)
                   (g x)) -}
64c64ba83d8ff28f2ecc4e662d8008d6
  $fApplicativeIdentity ::
    GHC.Base.Applicative
      Data.Array.Accelerate.Trafo.Substitution.Identity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Substitution.Identity
                  Data.Array.Accelerate.Trafo.Substitution.$fFunctorIdentity
                  Data.Array.Accelerate.Trafo.Substitution.Identity
                  Data.Array.Accelerate.Trafo.Substitution.$fApplicativeIdentity_$c<*>
                  Data.Array.Accelerate.Trafo.Substitution.$fApplicativeIdentity_$c*>
                  Data.Array.Accelerate.Trafo.Substitution.$fApplicativeIdentity_$c<* -}
64c64ba83d8ff28f2ecc4e662d8008d6
  $fApplicativeIdentity_$c*> ::
    Data.Array.Accelerate.Trafo.Substitution.Identity a
    -> Data.Array.Accelerate.Trafo.Substitution.Identity b
    -> Data.Array.Accelerate.Trafo.Substitution.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (eta :: Data.Array.Accelerate.Trafo.Substitution.Identity a)
                   (eta1 :: Data.Array.Accelerate.Trafo.Substitution.Identity b) ->
                 case eta of wild { Data.Array.Accelerate.Trafo.Substitution.Identity a1 ->
                 eta1 }) -}
64c64ba83d8ff28f2ecc4e662d8008d6
  $fApplicativeIdentity_$c<* ::
    Data.Array.Accelerate.Trafo.Substitution.Identity a
    -> Data.Array.Accelerate.Trafo.Substitution.Identity b
    -> Data.Array.Accelerate.Trafo.Substitution.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*H>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (eta :: Data.Array.Accelerate.Trafo.Substitution.Identity a)
                   (eta1 :: Data.Array.Accelerate.Trafo.Substitution.Identity b) ->
                 case eta of wild { Data.Array.Accelerate.Trafo.Substitution.Identity a1 ->
                 case eta1 of wild1 { Data.Array.Accelerate.Trafo.Substitution.Identity a2 ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity @ a a1 } }) -}
64c64ba83d8ff28f2ecc4e662d8008d6
  $fApplicativeIdentity_$c<*> ::
    Data.Array.Accelerate.Trafo.Substitution.Identity (a -> b)
    -> Data.Array.Accelerate.Trafo.Substitution.Identity a
    -> Data.Array.Accelerate.Trafo.Substitution.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(1*C1(U))><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.Identity (a -> b))
                   (ds1 :: Data.Array.Accelerate.Trafo.Substitution.Identity a) ->
                 case ds of wild { Data.Array.Accelerate.Trafo.Substitution.Identity f ->
                 case ds1 of wild1 { Data.Array.Accelerate.Trafo.Substitution.Identity a1 ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity
                   @ b
                   (f a1) } }) -}
64c64ba83d8ff28f2ecc4e662d8008d6
  $fFunctorIdentity ::
    GHC.Base.Functor Data.Array.Accelerate.Trafo.Substitution.Identity
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Substitution.Identity
                  Data.Array.Accelerate.Trafo.Substitution.$fFunctorIdentity_$cfmap
                  Data.Array.Accelerate.Trafo.Substitution.$fFunctorIdentity_$c<$ -}
64c64ba83d8ff28f2ecc4e662d8008d6
  $fFunctorIdentity_$c<$ ::
    a
    -> Data.Array.Accelerate.Trafo.Substitution.Identity b
    -> Data.Array.Accelerate.Trafo.Substitution.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*H>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.Identity b) ->
                 case ds of wild { Data.Array.Accelerate.Trafo.Substitution.Identity a1 ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity @ a eta }) -}
64c64ba83d8ff28f2ecc4e662d8008d6
  $fFunctorIdentity_$cfmap ::
    (a -> b)
    -> Data.Array.Accelerate.Trafo.Substitution.Identity a
    -> Data.Array.Accelerate.Trafo.Substitution.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.Identity a) ->
                 case ds of wild { Data.Array.Accelerate.Trafo.Substitution.Identity a1 ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity @ b (f a1) }) -}
36c7f0abc445c51e17e75229b06ca755
  $fRebuildableExpPreOpenExp ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildableExp
      (Data.Array.Accelerate.AST.PreOpenExp acc)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                    acc).
                  @ (Data.Array.Accelerate.AST.PreOpenExp acc)
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenExp_$crebuildPartialE
                     @ acc
                     $d(%,%))
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenExp_$crebuildE
                     @ acc
                     $d(%,%)) -}
36c7f0abc445c51e17e75229b06ca755
  $fRebuildableExpPreOpenExp_$crebuildE ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                  -> * -> * -> * -> *) env env' aenv e.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe =>
    (forall e'.
     Data.Array.Accelerate.Array.Sugar.Elt e' =>
     Data.Array.Accelerate.AST.Idx env e'
     -> fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
              (Data.Array.Accelerate.AST.PreOpenExp acc env)) env' aenv e')
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv e
    -> Data.Array.Accelerate.AST.PreOpenExp acc env' aenv e
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,U(C(C1(U)),C(U),C(C1(U)),A)><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (acc :: * -> * -> *)
                                          ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                                        acc)
                                          @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                                   -> * -> * -> * -> *)
                                          @ env
                                          @ env'
                                          @ aenv
                                          @ e
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
                                                    fe) ->
                                        case GHC.Types.HEq_sc
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                    acc)
                                               @ acc
                                               (GHC.Classes.$p2(%,%)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                       acc)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                       acc
                                                     Data.Type.Equality.~ acc)
                                                  $d(%,%))
                                                 `cast`
                                               (Data.Type.Equality.N:~[0]
                                                    <GHC.Types.*
                                                     -> GHC.Types.*
                                                     -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                                          acc>_N <acc>_N) of cobox0 { DEFAULT ->
                                        let {
                                          $dRebuildableExp :: Data.Array.Accelerate.Trafo.Substitution.RebuildableExp
                                                                (Data.Array.Accelerate.AST.PreOpenExp
                                                                   acc)
                                          = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenExp
                                              @ acc
                                              $d(%,%)
                                        } in
                                        \ (ds :: forall e'.
                                                 Data.Array.Accelerate.Array.Sugar.Elt e' =>
                                                 Data.Array.Accelerate.AST.Idx env e'
                                                 -> fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                          (Data.Array.Accelerate.AST.PreOpenExp
                                                             acc env)) env' aenv e') ->
                                        Data.Array.Accelerate.Trafo.Substitution.$dmrebuildE
                                          @ (Data.Array.Accelerate.AST.PreOpenExp acc)
                                          $dRebuildableExp
                                          @ fe
                                          @ env
                                          @ env'
                                          @ aenv
                                          @ e
                                          eta
                                          ds }) -}
7f3d16a06b1e89c00cbf8bb9ef00c2d7
  $fRebuildableExpPreOpenExp_$crebuildPartialE ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (f' :: * -> *) (fe :: (GHC.Types.*
                                  -> GHC.Types.* -> GHC.Types.*)
                                 -> * -> * -> * -> *) env env' aenv e.
    (GHC.Base.Applicative f',
     Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe) =>
    (forall e'.
     Data.Array.Accelerate.Array.Sugar.Elt e' =>
     Data.Array.Accelerate.AST.Idx env e'
     -> f' (fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                  (Data.Array.Accelerate.AST.PreOpenExp acc env)) env' aenv e'))
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv e
    -> f' (Data.Array.Accelerate.AST.PreOpenExp acc env' aenv e)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(S)),U(1*U,1*U(1*U))><S,U(U(U,U),U,U,U,U)><L,U(C(C1(U)),C(U),C(C1(U)),A)><L,C(C1(U))><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ (f' :: * -> *)
                            @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                     -> * -> * -> * -> *)
                            @ env
                            @ env'
                            @ aenv
                            @ e
                            (eta :: GHC.Base.Applicative f')
                            (eta1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe)
                            (eta2 :: forall e'.
                                     Data.Array.Accelerate.Array.Sugar.Elt e' =>
                                     Data.Array.Accelerate.AST.Idx env e'
                                     -> f' (fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                  (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env)) env' aenv e'))
                            (eta3 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv e) ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                               acc
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                   Data.Type.Equality.~ acc)
                                $d(%,%)
                          } in
                          Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                            @ f'
                            @ fe
                            @ Data.Array.Accelerate.Trafo.Substitution.IdxA
                            @ acc
                            @ env
                            @ env'
                            @ aenv
                            @ aenv
                            @ e
                            eta
                            eta1
                            Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA
                            (\ @ aenv1
                               @ aenv'
                               @ (f :: * -> *)
                               @ (fa :: (* -> * -> *) -> * -> * -> *)
                               @ a
                               ($dApplicative :: GHC.Base.Applicative f)
                               ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa)[OneShot]
                               (ds :: forall a'.
                                      Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                      Data.Array.Accelerate.AST.Idx aenv1 a'
                                      -> f (fa acc aenv' a'))[OneShot] ->
                             Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                               @ acc
                               $dRebuildable
                               @ f
                               @ fa
                               @ aenv1
                               @ aenv'
                               @ a
                               $dApplicative
                               $dSyntacticAcc
                               ds
                                 `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx aenv1 a'>_R
                                ->_R <f>_R (<fa>_N (Sym cobox0) <aenv'>_N <a'>_N)))
                            eta2
                              `cast`
                            (forall (t' :: <*>_N).
                             <Data.Array.Accelerate.Array.Sugar.Elt t'>_R
                             ->_R <Data.Array.Accelerate.AST.Idx env t'>_R
                             ->_R <f'>_R (<fe>_N (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenExp[0]
                                                      <env>_N <acc>_N) <env'>_N <aenv>_N <t'>_N))
                            (\ @ t'
                               ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t')
                               (eta4 :: Data.Array.Accelerate.AST.Idx aenv t') ->
                             GHC.Base.pure
                               @ f'
                               eta
                               @ (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t')
                               eta4
                                 `cast`
                               (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                                         <acc>_P) <aenv>_N <t'>_N))
                            eta3 }) -}
36c7f0abc445c51e17e75229b06ca755
  $fRebuildableExpPreOpenFun ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildableExp
      (Data.Array.Accelerate.AST.PreOpenFun acc)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                    acc).
                  @ (Data.Array.Accelerate.AST.PreOpenFun acc)
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenFun_$crebuildPartialE
                     @ acc
                     $d(%,%))
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenFun_$crebuildE
                     @ acc
                     $d(%,%)) -}
36c7f0abc445c51e17e75229b06ca755
  $fRebuildableExpPreOpenFun_$crebuildE ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                  -> * -> * -> * -> *) env env' aenv e.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe =>
    (forall e'.
     Data.Array.Accelerate.Array.Sugar.Elt e' =>
     Data.Array.Accelerate.AST.Idx env e'
     -> fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
              (Data.Array.Accelerate.AST.PreOpenFun acc env)) env' aenv e')
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv e
    -> Data.Array.Accelerate.AST.PreOpenFun acc env' aenv e
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,U(C(C1(U)),C(U),C(C1(U)),A)><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (acc :: * -> * -> *)
                                          ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                                        acc)
                                          @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                                   -> * -> * -> * -> *)
                                          @ env
                                          @ env'
                                          @ aenv
                                          @ e
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
                                                    fe) ->
                                        case GHC.Types.HEq_sc
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                    acc)
                                               @ acc
                                               (GHC.Classes.$p2(%,%)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                       acc)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                       acc
                                                     Data.Type.Equality.~ acc)
                                                  $d(%,%))
                                                 `cast`
                                               (Data.Type.Equality.N:~[0]
                                                    <GHC.Types.*
                                                     -> GHC.Types.*
                                                     -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                                          acc>_N <acc>_N) of cobox0 { DEFAULT ->
                                        let {
                                          $dRebuildableExp :: Data.Array.Accelerate.Trafo.Substitution.RebuildableExp
                                                                (Data.Array.Accelerate.AST.PreOpenFun
                                                                   acc)
                                          = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenFun
                                              @ acc
                                              $d(%,%)
                                        } in
                                        \ (ds :: forall e'.
                                                 Data.Array.Accelerate.Array.Sugar.Elt e' =>
                                                 Data.Array.Accelerate.AST.Idx env e'
                                                 -> fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                          (Data.Array.Accelerate.AST.PreOpenFun
                                                             acc env)) env' aenv e') ->
                                        Data.Array.Accelerate.Trafo.Substitution.$dmrebuildE
                                          @ (Data.Array.Accelerate.AST.PreOpenFun acc)
                                          $dRebuildableExp
                                          @ fe
                                          @ env
                                          @ env'
                                          @ aenv
                                          @ e
                                          eta
                                          ds }) -}
5756fb86e738a248c37fc43c2ed8e4d6
  $fRebuildableExpPreOpenFun_$crebuildPartialE ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (f' :: * -> *) (fe :: (GHC.Types.*
                                  -> GHC.Types.* -> GHC.Types.*)
                                 -> * -> * -> * -> *) env env' aenv e.
    (GHC.Base.Applicative f',
     Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe) =>
    (forall e'.
     Data.Array.Accelerate.Array.Sugar.Elt e' =>
     Data.Array.Accelerate.AST.Idx env e'
     -> f' (fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                  (Data.Array.Accelerate.AST.PreOpenFun acc env)) env' aenv e'))
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv e
    -> f' (Data.Array.Accelerate.AST.PreOpenFun acc env' aenv e)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(S)),U(1*U,1*U(1*U))><S(S(C(C(S))L)LLLL),U(U(U,U),U,U,U,U)><L,U(C(C1(U)),C(U),C(C1(U)),A)><L,C(C1(U))><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ (f' :: * -> *)
                            @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                     -> * -> * -> * -> *)
                            @ env
                            @ env'
                            @ aenv
                            @ e
                            (eta :: GHC.Base.Applicative f')
                            (eta1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe)
                            (eta2 :: forall e'.
                                     Data.Array.Accelerate.Array.Sugar.Elt e' =>
                                     Data.Array.Accelerate.AST.Idx env e'
                                     -> f' (fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                  (Data.Array.Accelerate.AST.PreOpenFun
                                                     acc env)) env' aenv e'))
                            (eta3 :: Data.Array.Accelerate.AST.PreOpenFun acc env aenv e) ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                               acc
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                   Data.Type.Equality.~ acc)
                                $d(%,%)
                          } in
                          Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                            @ f'
                            @ fe
                            @ Data.Array.Accelerate.Trafo.Substitution.IdxA
                            @ acc
                            @ env
                            @ env'
                            @ aenv
                            @ aenv
                            @ e
                            eta
                            eta1
                            Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA
                            (\ @ aenv1
                               @ aenv'
                               @ (f :: * -> *)
                               @ (fa :: (* -> * -> *) -> * -> * -> *)
                               @ a
                               ($dApplicative :: GHC.Base.Applicative f)
                               ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa)[OneShot]
                               (ds :: forall a'.
                                      Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                      Data.Array.Accelerate.AST.Idx aenv1 a'
                                      -> f (fa acc aenv' a'))[OneShot] ->
                             Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                               @ acc
                               $dRebuildable
                               @ f
                               @ fa
                               @ aenv1
                               @ aenv'
                               @ a
                               $dApplicative
                               $dSyntacticAcc
                               ds
                                 `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx aenv1 a'>_R
                                ->_R <f>_R (<fa>_N (Sym cobox0) <aenv'>_N <a'>_N)))
                            eta2
                              `cast`
                            (forall (t' :: <*>_N).
                             <Data.Array.Accelerate.Array.Sugar.Elt t'>_R
                             ->_R <Data.Array.Accelerate.AST.Idx env t'>_R
                             ->_R <f'>_R (<fe>_N (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenFun[0]
                                                      <env>_N <acc>_N) <env'>_N <aenv>_N <t'>_N))
                            (\ @ t'
                               ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t')
                               (eta4 :: Data.Array.Accelerate.AST.Idx aenv t') ->
                             GHC.Base.pure
                               @ f'
                               eta
                               @ (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t')
                               eta4
                                 `cast`
                               (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                                         <acc>_P) <aenv>_N <t'>_N))
                            eta3 }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildableOpenAcc ::
    Data.Array.Accelerate.Trafo.Substitution.Rebuildable
      Data.Array.Accelerate.AST.OpenAcc
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.AST.OpenAcc
                  Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc_$crebuildPartial
                  Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc_$crebuildA -}
533461e57bde824607d4f39cc0e87e2a
  $fRebuildableOpenAcc1 ::
    Data.Array.Accelerate.Array.Sugar.Elt t' =>
    Data.Array.Accelerate.AST.Idx () t'
    -> Data.Array.Accelerate.Trafo.Substitution.Identity
         (Data.Array.Accelerate.Trafo.Substitution.IdxE acc () aenv' t')
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ (acc :: * -> * -> *)
                   @ aenv'
                   @ t'
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t')
                   (eta :: Data.Array.Accelerate.AST.Idx () t') ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity
                   @ (Data.Array.Accelerate.Trafo.Substitution.IdxE acc () aenv' t')
                   eta
                     `cast`
                   (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                             <acc>_P <()>_N <aenv'>_P) <t'>_N)) -}
53a762194c947b304399e52c30f834b9
  $fRebuildableOpenAcc_$crebuildA ::
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
              Data.Array.Accelerate.AST.OpenAcc) aenv' a')
    -> Data.Array.Accelerate.AST.OpenAcc aenv a
    -> Data.Array.Accelerate.AST.OpenAcc aenv' a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,C(U)><L,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (fa :: (* -> * -> *)
                                                   -> * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                               fa)
                                          (ds :: forall a'.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                 Data.Array.Accelerate.AST.Idx aenv a'
                                                 -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                          Data.Array.Accelerate.AST.OpenAcc) aenv' a') ->
                                        Data.Array.Accelerate.Trafo.Substitution.$dmrebuildA
                                          @ Data.Array.Accelerate.AST.OpenAcc
                                          Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc
                                          @ fa
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          $dSyntacticAcc
                                          ds) -}
53a762194c947b304399e52c30f834b9
  $fRebuildableOpenAcc_$crebuildPartial ::
    (GHC.Base.Applicative f',
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                  Data.Array.Accelerate.AST.OpenAcc) aenv' a'))
    -> Data.Array.Accelerate.AST.OpenAcc aenv a
    -> f' (Data.Array.Accelerate.AST.OpenAcc aenv' a)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(U,U),U,U,U,U)><L,U(U,U,U)><L,U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: InlineRule (4, True, True)
                (\ @ (f' :: * -> *)
                   @ (fa :: (* -> * -> *) -> * -> * -> *)
                   @ aenv
                   @ aenv'
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f')
                   ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                        fa)
                   (ds :: forall a'.
                          Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                          Data.Array.Accelerate.AST.Idx aenv a'
                          -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                       Data.Array.Accelerate.AST.OpenAcc) aenv' a'))
                   (eta :: Data.Array.Accelerate.AST.OpenAcc aenv a) ->
                 Data.Array.Accelerate.Trafo.Substitution.rebuildOpenAcc
                   @ f'
                   @ fa
                   @ aenv
                   @ aenv'
                   @ a
                   $dApplicative
                   $dSyntacticAcc
                   ds
                     `cast`
                   (forall (t' :: <*>_N).
                    <Data.Array.Accelerate.Array.Sugar.Arrays t'>_R
                    ->_R <Data.Array.Accelerate.AST.Idx aenv t'>_R
                    ->_R <f'>_R (<fa>_N (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloOpenAcc[0]) <aenv'>_N <t'>_N))
                   eta) -}
77b46b1c97274627186574a70844e1fd
  $fRebuildableOpenAcc_$s$crebuildA ::
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> Data.Array.Accelerate.AST.PreOpenAcc
          (Data.Array.Accelerate.Trafo.Substitution.AccClo
             Data.Array.Accelerate.AST.OpenAcc)
          aenv'
          a')
    -> Data.Array.Accelerate.AST.OpenAcc aenv a
    -> Data.Array.Accelerate.AST.OpenAcc aenv' a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ aenv
                   @ aenv'
                   @ a
                   (ds :: forall a'.
                          Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                          Data.Array.Accelerate.AST.Idx aenv a'
                          -> Data.Array.Accelerate.AST.PreOpenAcc
                               (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                  Data.Array.Accelerate.AST.OpenAcc)
                               aenv'
                               a')
                   (eta :: Data.Array.Accelerate.AST.OpenAcc aenv a) ->
                 case Data.Array.Accelerate.Trafo.Substitution.$w$srebuildOpenAcc
                        @ aenv
                        @ aenv'
                        @ a
                        (\ @ a'
                           ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a') ->
                         let {
                           g :: Data.Array.Accelerate.AST.Idx aenv a'
                                -> Data.Array.Accelerate.AST.PreOpenAcc
                                     (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                        Data.Array.Accelerate.AST.OpenAcc)
                                     aenv'
                                     a'
                           = ds @ a' $dArrays
                         } in
                         \ (x :: Data.Array.Accelerate.AST.Idx aenv a') ->
                         Data.Array.Accelerate.Trafo.Substitution.Identity
                           @ (Data.Array.Accelerate.AST.PreOpenAcc
                                (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                   Data.Array.Accelerate.AST.OpenAcc)
                                aenv'
                                a')
                           (g x))
                          `cast`
                        (forall (t' :: <*>_N).
                         <Data.Array.Accelerate.Array.Sugar.Arrays t'>_R
                         ->_R <Data.Array.Accelerate.AST.Idx aenv t'>_R
                         ->_R (Data.Array.Accelerate.Trafo.Substitution.Identity
                                 (Data.Array.Accelerate.AST.PreOpenAcc
                                    (Sub (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloOpenAcc[0]))
                                    <aenv'>_N
                                    <t'>_N)_R)_R)
                        eta of ww { Unit# ww1 ->
                 ww1 }) -}
7a155ed1eae53153cee400bed0b315e2
  $fRebuildableOpenAcc_$srebuildOpenAcc ::
    (forall t'.
     Data.Array.Accelerate.Array.Sugar.Arrays t' =>
     Data.Array.Accelerate.AST.Idx aenv t'
     -> Data.Array.Accelerate.Trafo.Substitution.Identity
          (Data.Array.Accelerate.AST.PreOpenAcc
             Data.Array.Accelerate.AST.OpenAcc aenv' t'))
    -> Data.Array.Accelerate.AST.OpenAcc aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.Identity
         (Data.Array.Accelerate.AST.OpenAcc aenv' t)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ aenv
                   @ aenv'
                   @ t
                   (w :: forall t'.
                         Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                         Data.Array.Accelerate.AST.Idx aenv t'
                         -> Data.Array.Accelerate.Trafo.Substitution.Identity
                              (Data.Array.Accelerate.AST.PreOpenAcc
                                 Data.Array.Accelerate.AST.OpenAcc aenv' t'))
                   (w1 :: Data.Array.Accelerate.AST.OpenAcc aenv t) ->
                 case Data.Array.Accelerate.Trafo.Substitution.$w$srebuildOpenAcc
                        @ aenv
                        @ aenv'
                        @ t
                        w
                        w1 of ww { Unit# ww1 ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity
                   @ (Data.Array.Accelerate.AST.OpenAcc aenv' t)
                   ww1 }) -}
90346060a8de1bd582e044134a1e6242
  $fRebuildableOpenAcc_$srebuildPreOpenAcc1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.Identity
         (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U><S,1*U> -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenAcc ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Rebuildable
      (Data.Array.Accelerate.AST.PreOpenAcc acc)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                    acc).
                  @ (Data.Array.Accelerate.AST.PreOpenAcc acc)
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAcc_$crebuildPartial
                     @ acc
                     $d(%,%))
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAcc_$crebuildA
                     @ acc
                     $d(%,%)) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenAcc_$crebuildA ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (fa :: (* -> * -> *) -> * -> * -> *) aenv aenv' a.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
              (Data.Array.Accelerate.AST.PreOpenAcc acc)) aenv' a')
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv a
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv' a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,U(U,U,U)><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (acc :: * -> * -> *)
                                          ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                                        acc)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa) ->
                                        case GHC.Types.HEq_sc
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                    acc)
                                               @ acc
                                               (GHC.Classes.$p2(%,%)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                       acc)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                       acc
                                                     Data.Type.Equality.~ acc)
                                                  $d(%,%))
                                                 `cast`
                                               (Data.Type.Equality.N:~[0]
                                                    <GHC.Types.*
                                                     -> GHC.Types.*
                                                     -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                                          acc>_N <acc>_N) of cobox0 { DEFAULT ->
                                        let {
                                          $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                             (Data.Array.Accelerate.AST.PreOpenAcc
                                                                acc)
                                          = Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAcc
                                              @ acc
                                              $d(%,%)
                                        } in
                                        \ (ds :: forall a'.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                 Data.Array.Accelerate.AST.Idx aenv a'
                                                 -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                          (Data.Array.Accelerate.AST.PreOpenAcc
                                                             acc)) aenv' a') ->
                                        Data.Array.Accelerate.Trafo.Substitution.$dmrebuildA
                                          @ (Data.Array.Accelerate.AST.PreOpenAcc acc)
                                          $dRebuildable
                                          @ fa
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          eta
                                          ds }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenAcc_$crebuildPartial ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (f' :: * -> *) (fa :: (* -> * -> *)
                                 -> * -> * -> *) aenv aenv' a.
    (GHC.Base.Applicative f',
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                  (Data.Array.Accelerate.AST.PreOpenAcc acc)) aenv' a'))
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv a
    -> f' (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' a)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(S)),U(1*U,1*U(1*U))><S,U(U(U,U),U,U,U,U)><L,U(U,U,U)><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ (f' :: * -> *)
                            @ (fa :: (* -> * -> *) -> * -> * -> *)
                            @ aenv
                            @ aenv'
                            @ a
                            (eta :: GHC.Base.Applicative f')
                            (eta1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa)
                            (eta2 :: forall a'.
                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                     Data.Array.Accelerate.AST.Idx aenv a'
                                     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                  (Data.Array.Accelerate.AST.PreOpenAcc
                                                     acc)) aenv' a'))
                            (eta3 :: Data.Array.Accelerate.AST.PreOpenAcc acc aenv a) ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                               acc
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                   Data.Type.Equality.~ acc)
                                $d(%,%)
                          } in
                          Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenAcc
                            @ f'
                            @ fa
                            @ acc
                            @ aenv
                            @ aenv'
                            @ a
                            eta
                            eta1
                            (\ @ aenv1
                               @ aenv'1
                               @ (f :: * -> *)
                               @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                               @ a1
                               ($dApplicative :: GHC.Base.Applicative f)
                               ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa1)[OneShot]
                               (ds :: forall a'.
                                      Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                      Data.Array.Accelerate.AST.Idx aenv1 a'
                                      -> f (fa1 acc aenv'1 a'))[OneShot] ->
                             Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                               @ acc
                               $dRebuildable
                               @ f
                               @ fa1
                               @ aenv1
                               @ aenv'1
                               @ a1
                               $dApplicative
                               $dSyntacticAcc
                               ds
                                 `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx aenv1 a'>_R
                                ->_R <f>_R (<fa1>_N (Sym cobox0) <aenv'1>_N <a'>_N)))
                            eta2
                              `cast`
                            (forall (t' :: <*>_N).
                             <Data.Array.Accelerate.Array.Sugar.Arrays t'>_R
                             ->_R <Data.Array.Accelerate.AST.Idx aenv t'>_R
                             ->_R <f'>_R (<fa>_N (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenAcc[0]
                                                      <acc>_N) <aenv'>_N <t'>_N))
                            eta3 }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenAfun ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Rebuildable
      (Data.Array.Accelerate.AST.PreOpenAfun acc)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                    acc).
                  @ (Data.Array.Accelerate.AST.PreOpenAfun acc)
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAfun_$crebuildPartial
                     @ acc
                     $d(%,%))
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAfun_$crebuildA
                     @ acc
                     $d(%,%)) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenAfun_$crebuildA ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (fa :: (* -> * -> *) -> * -> * -> *) aenv aenv' a.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
              (Data.Array.Accelerate.AST.PreOpenAfun acc)) aenv' a')
    -> Data.Array.Accelerate.AST.PreOpenAfun acc aenv a
    -> Data.Array.Accelerate.AST.PreOpenAfun acc aenv' a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,U(U,U,U)><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (acc :: * -> * -> *)
                                          ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                                        acc)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa) ->
                                        case GHC.Types.HEq_sc
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                    acc)
                                               @ acc
                                               (GHC.Classes.$p2(%,%)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                       acc)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                       acc
                                                     Data.Type.Equality.~ acc)
                                                  $d(%,%))
                                                 `cast`
                                               (Data.Type.Equality.N:~[0]
                                                    <GHC.Types.*
                                                     -> GHC.Types.*
                                                     -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                                          acc>_N <acc>_N) of cobox0 { DEFAULT ->
                                        let {
                                          $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                             (Data.Array.Accelerate.AST.PreOpenAfun
                                                                acc)
                                          = Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAfun
                                              @ acc
                                              $d(%,%)
                                        } in
                                        \ (ds :: forall a'.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                 Data.Array.Accelerate.AST.Idx aenv a'
                                                 -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                          (Data.Array.Accelerate.AST.PreOpenAfun
                                                             acc)) aenv' a') ->
                                        Data.Array.Accelerate.Trafo.Substitution.$dmrebuildA
                                          @ (Data.Array.Accelerate.AST.PreOpenAfun acc)
                                          $dRebuildable
                                          @ fa
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          eta
                                          ds }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenAfun_$crebuildPartial ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (f' :: * -> *) (fa :: (* -> * -> *)
                                 -> * -> * -> *) aenv aenv' a.
    (GHC.Base.Applicative f',
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                  (Data.Array.Accelerate.AST.PreOpenAfun acc)) aenv' a'))
    -> Data.Array.Accelerate.AST.PreOpenAfun acc aenv a
    -> f' (Data.Array.Accelerate.AST.PreOpenAfun acc aenv' a)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(S)),U(1*U,1*U(1*U))><S(S(C(C(S))L)LLLL),U(U(U,U),U,U,U,U)><L,U(U,U,U)><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ (f' :: * -> *)
                            @ (fa :: (* -> * -> *) -> * -> * -> *)
                            @ aenv
                            @ aenv'
                            @ a
                            (eta :: GHC.Base.Applicative f')
                            (eta1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa)
                            (eta2 :: forall a'.
                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                     Data.Array.Accelerate.AST.Idx aenv a'
                                     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                  (Data.Array.Accelerate.AST.PreOpenAfun
                                                     acc)) aenv' a'))
                            (eta3 :: Data.Array.Accelerate.AST.PreOpenAfun acc aenv a) ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                               acc
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                   Data.Type.Equality.~ acc)
                                $d(%,%)
                          } in
                          Data.Array.Accelerate.Trafo.Substitution.rebuildAfun
                            @ f'
                            @ fa
                            @ acc
                            @ aenv
                            @ aenv'
                            @ a
                            eta
                            eta1
                            (\ @ aenv1
                               @ aenv'1
                               @ (f :: * -> *)
                               @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                               @ a1
                               ($dApplicative :: GHC.Base.Applicative f)
                               ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa1)[OneShot]
                               (ds :: forall a'.
                                      Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                      Data.Array.Accelerate.AST.Idx aenv1 a'
                                      -> f (fa1 acc aenv'1 a'))[OneShot] ->
                             Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                               @ acc
                               $dRebuildable
                               @ f
                               @ fa1
                               @ aenv1
                               @ aenv'1
                               @ a1
                               $dApplicative
                               $dSyntacticAcc
                               ds
                                 `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx aenv1 a'>_R
                                ->_R <f>_R (<fa1>_N (Sym cobox0) <aenv'1>_N <a'>_N)))
                            eta2
                              `cast`
                            (forall (t' :: <*>_N).
                             <Data.Array.Accelerate.Array.Sugar.Arrays t'>_R
                             ->_R <Data.Array.Accelerate.AST.Idx aenv t'>_R
                             ->_R <f'>_R (<fa>_N (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenAfun[0]
                                                      <acc>_N) <aenv'>_N <t'>_N))
                            eta3 }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenExp ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Rebuildable
      (Data.Array.Accelerate.AST.PreOpenExp acc env)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      @ env
                      ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                    acc).
                  @ (Data.Array.Accelerate.AST.PreOpenExp acc env)
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenExp_$crebuildPartial
                     @ acc
                     @ env
                     $d(%,%))
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenExp_$crebuildA
                     @ acc
                     @ env
                     $d(%,%)) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenExp_$crebuildA ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (fa :: (* -> * -> *) -> * -> * -> *) aenv aenv' a.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
              (Data.Array.Accelerate.AST.PreOpenExp acc env)) aenv' a')
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv a
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv' a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,U><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (acc :: * -> * -> *)
                                          @ env
                                          ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                                        acc)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa) ->
                                        case GHC.Types.HEq_sc
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                    acc)
                                               @ acc
                                               (GHC.Classes.$p2(%,%)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                       acc)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                       acc
                                                     Data.Type.Equality.~ acc)
                                                  $d(%,%))
                                                 `cast`
                                               (Data.Type.Equality.N:~[0]
                                                    <GHC.Types.*
                                                     -> GHC.Types.*
                                                     -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                                          acc>_N <acc>_N) of cobox0 { DEFAULT ->
                                        let {
                                          $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                             (Data.Array.Accelerate.AST.PreOpenExp
                                                                acc env)
                                          = Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenExp
                                              @ acc
                                              @ env
                                              $d(%,%)
                                        } in
                                        \ (ds :: forall a'.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                 Data.Array.Accelerate.AST.Idx aenv a'
                                                 -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                          (Data.Array.Accelerate.AST.PreOpenExp
                                                             acc env)) aenv' a') ->
                                        Data.Array.Accelerate.Trafo.Substitution.$dmrebuildA
                                          @ (Data.Array.Accelerate.AST.PreOpenExp acc env)
                                          $dRebuildable
                                          @ fa
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          eta
                                          ds }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenExp_$crebuildPartial ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (f' :: * -> *) (fa :: (* -> * -> *)
                                 -> * -> * -> *) aenv aenv' a.
    (GHC.Base.Applicative f',
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                  (Data.Array.Accelerate.AST.PreOpenExp acc env)) aenv' a'))
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv a
    -> f' (Data.Array.Accelerate.AST.PreOpenExp acc env aenv' a)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(S)),U(1*U,1*U(1*U))><S,U(U(U,U),U,U,U,U)><L,U><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            @ env
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ (f' :: * -> *)
                            @ (fa :: (* -> * -> *) -> * -> * -> *)
                            @ aenv
                            @ aenv'
                            @ a
                            (eta :: GHC.Base.Applicative f')
                            (eta1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa)
                            (eta2 :: forall a'.
                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                     Data.Array.Accelerate.AST.Idx aenv a'
                                     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                  (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env)) aenv' a'))
                            (eta3 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv a) ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                               acc
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                   Data.Type.Equality.~ acc)
                                $d(%,%)
                          } in
                          Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                            @ f'
                            @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                            @ fa
                            @ acc
                            @ env
                            @ env
                            @ aenv'
                            @ aenv
                            @ a
                            eta
                            Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                            eta1
                            (\ @ aenv1
                               @ aenv'1
                               @ (f :: * -> *)
                               @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                               @ a1
                               ($dApplicative :: GHC.Base.Applicative f)
                               ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa1)[OneShot]
                               (ds :: forall a'.
                                      Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                      Data.Array.Accelerate.AST.Idx aenv1 a'
                                      -> f (fa1 acc aenv'1 a'))[OneShot] ->
                             Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                               @ acc
                               $dRebuildable
                               @ f
                               @ fa1
                               @ aenv1
                               @ aenv'1
                               @ a1
                               $dApplicative
                               $dSyntacticAcc
                               ds
                                 `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx aenv1 a'>_R
                                ->_R <f>_R (<fa1>_N (Sym cobox0) <aenv'1>_N <a'>_N)))
                            (\ @ t'
                               ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t')
                               (eta4 :: Data.Array.Accelerate.AST.Idx env t')[OneShot] ->
                             GHC.Base.pure
                               @ f'
                               eta
                               @ (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv' t')
                               eta4
                                 `cast`
                               (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                         <acc>_P <env>_N <aenv'>_P) <t'>_N))
                            eta2
                              `cast`
                            (forall (t' :: <*>_N).
                             <Data.Array.Accelerate.Array.Sugar.Arrays t'>_R
                             ->_R <Data.Array.Accelerate.AST.Idx aenv t'>_R
                             ->_R <f'>_R (<fa>_N (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenExp[0]
                                                      <env>_N <acc>_N) <aenv'>_N <t'>_N))
                            eta3 }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenFun ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Rebuildable
      (Data.Array.Accelerate.AST.PreOpenFun acc env)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      @ env
                      ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                    acc).
                  @ (Data.Array.Accelerate.AST.PreOpenFun acc env)
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenFun_$crebuildPartial
                     @ acc
                     @ env
                     $d(%,%))
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenFun_$crebuildA
                     @ acc
                     @ env
                     $d(%,%)) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenFun_$crebuildA ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (fa :: (* -> * -> *) -> * -> * -> *) aenv aenv' a.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
              (Data.Array.Accelerate.AST.PreOpenFun acc env)) aenv' a')
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv a
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv' a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,U><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (acc :: * -> * -> *)
                                          @ env
                                          ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                                        acc)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa) ->
                                        case GHC.Types.HEq_sc
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                    acc)
                                               @ acc
                                               (GHC.Classes.$p2(%,%)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                       acc)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                       acc
                                                     Data.Type.Equality.~ acc)
                                                  $d(%,%))
                                                 `cast`
                                               (Data.Type.Equality.N:~[0]
                                                    <GHC.Types.*
                                                     -> GHC.Types.*
                                                     -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                                          acc>_N <acc>_N) of cobox0 { DEFAULT ->
                                        let {
                                          $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                             (Data.Array.Accelerate.AST.PreOpenFun
                                                                acc env)
                                          = Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenFun
                                              @ acc
                                              @ env
                                              $d(%,%)
                                        } in
                                        \ (ds :: forall a'.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                 Data.Array.Accelerate.AST.Idx aenv a'
                                                 -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                          (Data.Array.Accelerate.AST.PreOpenFun
                                                             acc env)) aenv' a') ->
                                        Data.Array.Accelerate.Trafo.Substitution.$dmrebuildA
                                          @ (Data.Array.Accelerate.AST.PreOpenFun acc env)
                                          $dRebuildable
                                          @ fa
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          eta
                                          ds }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildablePreOpenFun_$crebuildPartial ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (f' :: * -> *) (fa :: (* -> * -> *)
                                 -> * -> * -> *) aenv aenv' a.
    (GHC.Base.Applicative f',
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                  (Data.Array.Accelerate.AST.PreOpenFun acc env)) aenv' a'))
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv a
    -> f' (Data.Array.Accelerate.AST.PreOpenFun acc env aenv' a)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(S)),U(1*U,1*U(1*U))><S(S(C(C(S))L)LLLL),U(U(U,U),U,U,U,U)><L,U><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            @ env
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ (f' :: * -> *)
                            @ (fa :: (* -> * -> *) -> * -> * -> *)
                            @ aenv
                            @ aenv'
                            @ a
                            (eta :: GHC.Base.Applicative f')
                            (eta1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa)
                            (eta2 :: forall a'.
                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                     Data.Array.Accelerate.AST.Idx aenv a'
                                     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                  (Data.Array.Accelerate.AST.PreOpenFun
                                                     acc env)) aenv' a'))
                            (eta3 :: Data.Array.Accelerate.AST.PreOpenFun acc env aenv a) ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                               acc
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                   Data.Type.Equality.~ acc)
                                $d(%,%)
                          } in
                          Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                            @ f'
                            @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                            @ fa
                            @ acc
                            @ env
                            @ env
                            @ aenv'
                            @ aenv
                            @ a
                            eta
                            Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                            eta1
                            (\ @ aenv1
                               @ aenv'1
                               @ (f :: * -> *)
                               @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                               @ a1
                               ($dApplicative :: GHC.Base.Applicative f)
                               ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa1)[OneShot]
                               (ds :: forall a'.
                                      Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                      Data.Array.Accelerate.AST.Idx aenv1 a'
                                      -> f (fa1 acc aenv'1 a'))[OneShot] ->
                             Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                               @ acc
                               $dRebuildable
                               @ f
                               @ fa1
                               @ aenv1
                               @ aenv'1
                               @ a1
                               $dApplicative
                               $dSyntacticAcc
                               ds
                                 `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx aenv1 a'>_R
                                ->_R <f>_R (<fa1>_N (Sym cobox0) <aenv'1>_N <a'>_N)))
                            (\ @ t'
                               ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t')
                               (eta4 :: Data.Array.Accelerate.AST.Idx env t')[OneShot] ->
                             GHC.Base.pure
                               @ f'
                               eta
                               @ (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv' t')
                               eta4
                                 `cast`
                               (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                         <acc>_P <env>_N <aenv'>_P) <t'>_N))
                            eta2
                              `cast`
                            (forall (t' :: <*>_N).
                             <Data.Array.Accelerate.Array.Sugar.Arrays t'>_R
                             ->_R <Data.Array.Accelerate.AST.Idx aenv t'>_R
                             ->_R <f'>_R (<fa>_N (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenFun[0]
                                                      <env>_N <acc>_N) <aenv'>_N <t'>_N))
                            eta3 }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildableRebuildTup ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Rebuildable
      (Data.Array.Accelerate.Trafo.Substitution.RebuildTup acc env)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,U(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      @ env
                      ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                    acc).
                  @ (Data.Array.Accelerate.Trafo.Substitution.RebuildTup acc env)
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableRebuildTup_$crebuildPartial
                     @ acc
                     @ env
                     $d(%,%))
                  (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableRebuildTup_$crebuildA
                     @ acc
                     @ env
                     $d(%,%)) -}
53a762194c947b304399e52c30f834b9
  $fRebuildableRebuildTup_$crebuildA ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (fa :: (* -> * -> *) -> * -> * -> *) aenv aenv' a.
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
              (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                 acc env)) aenv' a')
    -> Data.Array.Accelerate.Trafo.Substitution.RebuildTup
         acc env aenv a
    -> Data.Array.Accelerate.Trafo.Substitution.RebuildTup
         acc env aenv' a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,U><L,C(U)><L,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (acc :: * -> * -> *)
                                          @ env
                                          ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                                        acc)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                    fa) ->
                                        case GHC.Types.HEq_sc
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                               @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                    acc)
                                               @ acc
                                               (GHC.Classes.$p2(%,%)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                       acc)
                                                  @ (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                       acc
                                                     Data.Type.Equality.~ acc)
                                                  $d(%,%))
                                                 `cast`
                                               (Data.Type.Equality.N:~[0]
                                                    <GHC.Types.*
                                                     -> GHC.Types.*
                                                     -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                                          acc>_N <acc>_N) of cobox0 { DEFAULT ->
                                        let {
                                          $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                             (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                                                acc env)
                                          = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableRebuildTup
                                              @ acc
                                              @ env
                                              $d(%,%)
                                        } in
                                        \ (ds :: forall a'.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                 Data.Array.Accelerate.AST.Idx aenv a'
                                                 -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                          (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                                             acc env)) aenv' a') ->
                                        Data.Array.Accelerate.Trafo.Substitution.$dmrebuildA
                                          @ (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                               acc env)
                                          $dRebuildable
                                          @ fa
                                          @ aenv
                                          @ aenv'
                                          @ a
                                          eta
                                          ds }) -}
53a762194c947b304399e52c30f834b9
  $fRebuildableRebuildTup_$crebuildPartial ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall (f' :: * -> *) (fa :: (* -> * -> *)
                                 -> * -> * -> *) aenv aenv' a.
    (GHC.Base.Applicative f',
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a'
     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                  (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                     acc env)) aenv' a'))
    -> Data.Array.Accelerate.Trafo.Substitution.RebuildTup
         acc env aenv a
    -> f' (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
             acc env aenv' a)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(S)),U(1*U,1*U(1*U))><S(S(C(C(S))L)LLLL),U(U(U,U),U,U,U,U)><L,U><L,U><L,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            @ env
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ (f' :: * -> *)
                            @ (fa :: (* -> * -> *) -> * -> * -> *)
                            @ aenv
                            @ aenv'
                            @ a
                            (eta :: GHC.Base.Applicative f')
                            (eta1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa)
                            (eta2 :: forall a'.
                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                     Data.Array.Accelerate.AST.Idx aenv a'
                                     -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                  (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                                     acc env)) aenv' a'))
                            (eta3 :: Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                       acc env aenv a) ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            $dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                               acc
                            = GHC.Classes.$p1(%,%)
                                @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                   Data.Type.Equality.~ acc)
                                $d(%,%)
                          } in
                          Data.Functor.<$>
                            @ f'
                            @ (Data.Array.Accelerate.Array.Sugar.Tuple
                                 (Data.Array.Accelerate.AST.PreOpenExp acc env aenv') a)
                            @ (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                 acc env aenv' a)
                            (GHC.Base.$p1Applicative @ f' eta)
                            (\ (tpl :: Data.Array.Accelerate.Array.Sugar.Tuple
                                         (Data.Array.Accelerate.AST.PreOpenExp acc env aenv') a) ->
                             tpl)
                              `cast`
                            (<Data.Array.Accelerate.Array.Sugar.Tuple
                                (Data.Array.Accelerate.AST.PreOpenExp acc env aenv') a>_R
                             ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:RebuildTup[0]
                                           <acc>_R <env>_N <aenv'>_N) <a>_N)
                            (Data.Array.Accelerate.Trafo.Substitution.rebuildTup
                               @ f'
                               @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                               @ fa
                               @ acc
                               @ env
                               @ env
                               @ aenv'
                               @ aenv
                               @ a
                               eta
                               Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                               eta1
                               (\ @ aenv1
                                  @ aenv'1
                                  @ (f :: * -> *)
                                  @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                  @ a1
                                  ($dApplicative :: GHC.Base.Applicative f)
                                  ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                       fa1)[OneShot]
                                  (ds :: forall a'.
                                         Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                         Data.Array.Accelerate.AST.Idx aenv1 a'
                                         -> f (fa1 acc aenv'1 a'))[OneShot] ->
                                Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                                  @ acc
                                  $dRebuildable
                                  @ f
                                  @ fa1
                                  @ aenv1
                                  @ aenv'1
                                  @ a1
                                  $dApplicative
                                  $dSyntacticAcc
                                  ds
                                    `cast`
                                  (forall (a' :: <*>_N).
                                   <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                   ->_R <Data.Array.Accelerate.AST.Idx aenv1 a'>_R
                                   ->_R <f>_R (<fa1>_N (Sym cobox0) <aenv'1>_N <a'>_N)))
                               (\ @ t'
                                  ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                  (eta4 :: Data.Array.Accelerate.AST.Idx env t')[OneShot] ->
                                GHC.Base.pure
                                  @ f'
                                  eta
                                  @ (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv' t')
                                  eta4
                                    `cast`
                                  (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                            <acc>_P <env>_N <aenv'>_P) <t'>_N))
                               eta2
                                 `cast`
                               (forall (t' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays t'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx aenv t'>_R
                                ->_R <f'>_R (<fa>_N (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloRebuildTup[0]
                                                         <env>_N <acc>_N) <aenv'>_N <t'>_N))
                               (Data.Array.Accelerate.Trafo.Substitution.unRTup
                                  @ acc
                                  @ env
                                  @ aenv
                                  @ a
                                  eta3)) }) -}
7e4e88bc8e5a58e3e7fda427e66021c2
  $fSinkExpPreOpenExp ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.SinkExp
      (Data.Array.Accelerate.AST.PreOpenExp acc)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkExpPreOpenExp_$cweakenE
                  `cast`
                (forall (acc :: <* -> * -> *>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:SinkExp[0]
                               <Data.Array.Accelerate.AST.PreOpenExp acc>_N)) -}
297846e93cc8669c11aa6904c6b32d52
  $fSinkExpPreOpenExp_$cweakenE ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall env env' aenv t.
    (env Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env' aenv t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ env
                            @ env'
                            @ aenv
                            @ t
                            (eta :: env Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            f :: [GHC.Types.Char]
                            = GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "weakenE"#)
                          } in
                          let {
                            g :: forall e'.
                                 Data.Array.Accelerate.Array.Sugar.Elt e' =>
                                 Data.Array.Accelerate.AST.Idx env e'
                                 -> Data.Array.Accelerate.AST.Idx env' e'
                              {- Arity: 2 -}
                            = \ @ e'
                                ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e')
                                (x :: Data.Array.Accelerate.AST.Idx env e') ->
                              eta @ e' x
                          } in
                          \ (x :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv t) ->
                          Data.Array.Accelerate.Debug.Stats.substitution
                            @ (Data.Array.Accelerate.AST.PreOpenExp acc env' aenv t)
                            f
                            (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenExp_$crebuildE
                               @ acc
                               $d(%,%)
                               @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                               @ env
                               @ env'
                               @ aenv
                               @ t
                               Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                               g `cast`
                               (forall (e' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Elt e'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx env e'>_R
                                ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                              <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                 (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env), acc>
                                              <env'>_N
                                              <aenv>_P) <e'>_N)
                               x) }) -}
7e4e88bc8e5a58e3e7fda427e66021c2
  $fSinkExpPreOpenFun ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.SinkExp
      (Data.Array.Accelerate.AST.PreOpenFun acc)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkExpPreOpenFun_$cweakenE
                  `cast`
                (forall (acc :: <* -> * -> *>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:SinkExp[0]
                               <Data.Array.Accelerate.AST.PreOpenFun acc>_N)) -}
7bb39c66d59da5a466231d9963ce0249
  $fSinkExpPreOpenFun_$cweakenE ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall env env' aenv t.
    (env Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv t
    -> Data.Array.Accelerate.AST.PreOpenFun acc env' aenv t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ env
                            @ env'
                            @ aenv
                            @ t
                            (eta :: env Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            f :: [GHC.Types.Char]
                            = GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "weakenE"#)
                          } in
                          let {
                            g :: forall e'.
                                 Data.Array.Accelerate.Array.Sugar.Elt e' =>
                                 Data.Array.Accelerate.AST.Idx env e'
                                 -> Data.Array.Accelerate.AST.Idx env' e'
                              {- Arity: 2 -}
                            = \ @ e'
                                ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e')
                                (x :: Data.Array.Accelerate.AST.Idx env e') ->
                              eta @ e' x
                          } in
                          \ (x :: Data.Array.Accelerate.AST.PreOpenFun acc env aenv t) ->
                          Data.Array.Accelerate.Debug.Stats.substitution
                            @ (Data.Array.Accelerate.AST.PreOpenFun acc env' aenv t)
                            f
                            (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenFun_$crebuildE
                               @ acc
                               $d(%,%)
                               @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                               @ env
                               @ env'
                               @ aenv
                               @ t
                               Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                               g `cast`
                               (forall (e' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Elt e'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx env e'>_R
                                ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                              <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                 (Data.Array.Accelerate.AST.PreOpenFun
                                                    acc env), acc>
                                              <env'>_N
                                              <aenv>_P) <e'>_N)
                               x) }) -}
0f35c2a1006f7263a649bd2af71efd6f
  $fSinkIdx ::
    Data.Array.Accelerate.Trafo.Substitution.Sink
      Data.Array.Accelerate.AST.Idx
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkIdx_$cweaken
                  `cast`
                (Sym (Data.Array.Accelerate.Trafo.Substitution.N:Sink[0]
                          <Data.Array.Accelerate.AST.Idx>_N)) -}
22a3dcda476ad0d91febacb6526071da
  $fSinkIdx_$cweaken ::
    (env Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.Idx env t
    -> Data.Array.Accelerate.AST.Idx env' t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: InlineRule (1, True, True)
                (\ @ env
                   @ env'
                   @ t
                   (k :: env Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                 k @ t) -}
0f35c2a1006f7263a649bd2af71efd6f
  $fSinkOpenAcc ::
    Data.Array.Accelerate.Trafo.Substitution.Sink
      Data.Array.Accelerate.AST.OpenAcc
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkOpenAcc_$cweaken
                  `cast`
                (Sym (Data.Array.Accelerate.Trafo.Substitution.N:Sink[0]
                          <Data.Array.Accelerate.AST.OpenAcc>_N)) -}
9b9402d6f9818e30718934c1af074114
  $fSinkOpenAcc_$cweaken ::
    (env Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.OpenAcc env t
    -> Data.Array.Accelerate.AST.OpenAcc env' t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ env
                            @ env'
                            @ t
                            (k :: env Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                          let {
                            f :: [GHC.Types.Char]
                            = GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "weaken"#)
                          } in
                          let {
                            g :: forall a'.
                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                 Data.Array.Accelerate.AST.Idx env a'
                                 -> Data.Array.Accelerate.AST.PreOpenAcc
                                      Data.Array.Accelerate.AST.OpenAcc env' a'
                              {- Arity: 2 -}
                            = \ @ a'
                                ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                                (x :: Data.Array.Accelerate.AST.Idx env a') ->
                              Data.Array.Accelerate.AST.Avar
                                @ Data.Array.Accelerate.AST.OpenAcc
                                @ env'
                                @ a'
                                $dArrays
                                (k @ a' x)
                          } in
                          \ (x :: Data.Array.Accelerate.AST.OpenAcc env t) ->
                          Data.Array.Accelerate.Debug.Stats.substitution
                            @ (Data.Array.Accelerate.AST.OpenAcc env' t)
                            f
                            (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc_$s$crebuildA
                               @ env
                               @ env'
                               @ t
                               g `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx env a'>_R
                                ->_R (Data.Array.Accelerate.AST.PreOpenAcc
                                        (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloOpenAcc[0])))
                                        <env'>_N
                                        <a'>_N)_R)
                               x)) -}
0f35c2a1006f7263a649bd2af71efd6f
  $fSinkPreBoundary ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Sink
      (Data.Array.Accelerate.AST.PreBoundary acc)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkPreBoundary_$cweaken
                  `cast`
                (forall (acc :: <* -> * -> *>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:Sink[0]
                               <Data.Array.Accelerate.AST.PreBoundary acc>_N)) -}
96b8f38c72edef21b4a2b04cb43cb018
  $fSinkPreBoundary_$cweaken ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall env env' t.
    (env Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.PreBoundary acc env t
    -> Data.Array.Accelerate.AST.PreBoundary acc env' t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ env
                            @ env'
                            @ t
                            (eta :: env Data.Array.Accelerate.Trafo.Substitution.:> env')
                            (eta1 :: Data.Array.Accelerate.AST.PreBoundary acc env t) ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          case eta1 of wild {
                            Data.Array.Accelerate.AST.Clamp
                            -> Data.Array.Accelerate.AST.Clamp @ acc @ env' @ t
                            Data.Array.Accelerate.AST.Mirror
                            -> Data.Array.Accelerate.AST.Mirror @ acc @ env' @ t
                            Data.Array.Accelerate.AST.Wrap
                            -> Data.Array.Accelerate.AST.Wrap @ acc @ env' @ t
                            Data.Array.Accelerate.AST.Constant e sh cobox1 $dElt c
                            -> (Data.Array.Accelerate.AST.$WConstant
                                  @ acc
                                  @ env'
                                  @ e
                                  @ sh
                                  $dElt
                                  c)
                                 `cast`
                               (Data.Array.Accelerate.AST.PreBoundary
                                  <acc>_R <env'>_N (Sym cobox1))_R
                            Data.Array.Accelerate.AST.Function sh e cobox1 $dShape $dElt f
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox4 { DEFAULT ->
                               (Data.Array.Accelerate.AST.Function
                                  @ acc
                                  @ env'
                                  @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                  @ sh
                                  @ e
                                  @~ <Data.Array.Accelerate.Array.Sugar.Array sh e>_N
                                  $dShape
                                  $dElt
                                  (Data.Array.Accelerate.Trafo.Substitution.$fSinkPreBoundary_$cweaken1
                                     @ acc
                                     @ ()
                                     $d(%,%)
                                     @ env
                                     @ env'
                                     @ (sh -> e)
                                     eta
                                     f))
                                 `cast`
                               (Data.Array.Accelerate.AST.PreBoundary
                                  <acc>_R <env'>_N (Sym cobox1))_R } } } } }) -}
ba23cd1f4b364d10badb3ac09b7baae2
  $fSinkPreBoundary_$cweaken1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall env1 env' t.
    (env1 Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.PreOpenFun acc env env1 t
    -> Data.Array.Accelerate.AST.PreOpenFun acc env env' t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            @ env
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ env1
                            @ env'
                            @ t
                            (eta :: env1 Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            f :: [GHC.Types.Char]
                            = GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "weaken"#)
                          } in
                          let {
                            g :: forall a'.
                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                 Data.Array.Accelerate.AST.Idx env1 a'
                                 -> Data.Array.Accelerate.AST.PreOpenAcc acc env' a'
                              {- Arity: 2 -}
                            = \ @ a'
                                ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                                (x :: Data.Array.Accelerate.AST.Idx env1 a') ->
                              Data.Array.Accelerate.AST.Avar
                                @ acc
                                @ env'
                                @ a'
                                $dArrays
                                (eta @ a' x)
                          } in
                          \ (x :: Data.Array.Accelerate.AST.PreOpenFun acc env env1 t) ->
                          Data.Array.Accelerate.Debug.Stats.substitution
                            @ (Data.Array.Accelerate.AST.PreOpenFun acc env env' t)
                            f
                            (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenFun_$crebuildA
                               @ acc
                               @ env
                               $d(%,%)
                               @ Data.Array.Accelerate.AST.PreOpenAcc
                               @ env1
                               @ env'
                               @ t
                               Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc
                               g `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx env1 a'>_R
                                ->_R (Data.Array.Accelerate.AST.PreOpenAcc
                                        (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenFun[0]
                                                       <env>_N <acc>_N)))
                                        <env'>_N
                                        <a'>_N)_R)
                               x) }) -}
0f35c2a1006f7263a649bd2af71efd6f
  $fSinkPreOpenAcc ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Sink
      (Data.Array.Accelerate.AST.PreOpenAcc acc)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkPreOpenAcc_$cweaken
                  `cast`
                (forall (acc :: <* -> * -> *>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:Sink[0]
                               <Data.Array.Accelerate.AST.PreOpenAcc acc>_N)) -}
98de5f7858174ab7ada610b5fd3abcff
  $fSinkPreOpenAcc_$cweaken ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall env env' t.
    (env Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.PreOpenAcc acc env t
    -> Data.Array.Accelerate.AST.PreOpenAcc acc env' t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ env
                            @ env'
                            @ t
                            (eta :: env Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            f :: [GHC.Types.Char]
                            = GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "weaken"#)
                          } in
                          let {
                            g :: forall a'.
                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                 Data.Array.Accelerate.AST.Idx env a'
                                 -> Data.Array.Accelerate.AST.PreOpenAcc acc env' a'
                              {- Arity: 2 -}
                            = \ @ a'
                                ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                                (x :: Data.Array.Accelerate.AST.Idx env a') ->
                              Data.Array.Accelerate.AST.Avar
                                @ acc
                                @ env'
                                @ a'
                                $dArrays
                                (eta @ a' x)
                          } in
                          \ (x :: Data.Array.Accelerate.AST.PreOpenAcc acc env t) ->
                          Data.Array.Accelerate.Debug.Stats.substitution
                            @ (Data.Array.Accelerate.AST.PreOpenAcc acc env' t)
                            f
                            (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAcc_$crebuildA
                               @ acc
                               $d(%,%)
                               @ Data.Array.Accelerate.AST.PreOpenAcc
                               @ env
                               @ env'
                               @ t
                               Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc
                               g `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx env a'>_R
                                ->_R (Data.Array.Accelerate.AST.PreOpenAcc
                                        (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenAcc[0]
                                                       <acc>_N)))
                                        <env'>_N
                                        <a'>_N)_R)
                               x) }) -}
0f35c2a1006f7263a649bd2af71efd6f
  $fSinkPreOpenAfun ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Sink
      (Data.Array.Accelerate.AST.PreOpenAfun acc)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkPreOpenAfun_$cweaken
                  `cast`
                (forall (acc :: <* -> * -> *>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:Sink[0]
                               <Data.Array.Accelerate.AST.PreOpenAfun acc>_N)) -}
6bc39c7630614255c4b4070b6a49c889
  $fSinkPreOpenAfun_$cweaken ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall env env' t.
    (env Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.PreOpenAfun acc env t
    -> Data.Array.Accelerate.AST.PreOpenAfun acc env' t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ env
                            @ env'
                            @ t
                            (eta :: env Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            f :: [GHC.Types.Char]
                            = GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "weaken"#)
                          } in
                          let {
                            g :: forall a'.
                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                 Data.Array.Accelerate.AST.Idx env a'
                                 -> Data.Array.Accelerate.AST.PreOpenAcc acc env' a'
                              {- Arity: 2 -}
                            = \ @ a'
                                ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                                (x :: Data.Array.Accelerate.AST.Idx env a') ->
                              Data.Array.Accelerate.AST.Avar
                                @ acc
                                @ env'
                                @ a'
                                $dArrays
                                (eta @ a' x)
                          } in
                          \ (x :: Data.Array.Accelerate.AST.PreOpenAfun acc env t) ->
                          Data.Array.Accelerate.Debug.Stats.substitution
                            @ (Data.Array.Accelerate.AST.PreOpenAfun acc env' t)
                            f
                            (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAfun_$crebuildA
                               @ acc
                               $d(%,%)
                               @ Data.Array.Accelerate.AST.PreOpenAcc
                               @ env
                               @ env'
                               @ t
                               Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc
                               g `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx env a'>_R
                                ->_R (Data.Array.Accelerate.AST.PreOpenAcc
                                        (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenAfun[0]
                                                       <acc>_N)))
                                        <env'>_N
                                        <a'>_N)_R)
                               x) }) -}
0f35c2a1006f7263a649bd2af71efd6f
  $fSinkPreOpenExp ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Sink
      (Data.Array.Accelerate.AST.PreOpenExp acc env)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkPreOpenExp_$cweaken
                  `cast`
                (forall (acc :: <* -> * -> *>_N) (env :: <*>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:Sink[0]
                               <Data.Array.Accelerate.AST.PreOpenExp acc env>_N)) -}
df7bab72156beb6a4dca406172e61aff
  $fSinkPreOpenExp_$cweaken ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall env1 env' t.
    (env1 Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.AST.PreOpenExp acc env env1 t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env env' t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            @ env
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ env1
                            @ env'
                            @ t
                            (eta :: env1 Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            f :: [GHC.Types.Char]
                            = GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "weaken"#)
                          } in
                          let {
                            g :: forall a'.
                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                 Data.Array.Accelerate.AST.Idx env1 a'
                                 -> Data.Array.Accelerate.AST.PreOpenAcc acc env' a'
                              {- Arity: 2 -}
                            = \ @ a'
                                ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                                (x :: Data.Array.Accelerate.AST.Idx env1 a') ->
                              Data.Array.Accelerate.AST.Avar
                                @ acc
                                @ env'
                                @ a'
                                $dArrays
                                (eta @ a' x)
                          } in
                          \ (x :: Data.Array.Accelerate.AST.PreOpenExp acc env env1 t) ->
                          Data.Array.Accelerate.Debug.Stats.substitution
                            @ (Data.Array.Accelerate.AST.PreOpenExp acc env env' t)
                            f
                            (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenExp_$crebuildA
                               @ acc
                               @ env
                               $d(%,%)
                               @ Data.Array.Accelerate.AST.PreOpenAcc
                               @ env1
                               @ env'
                               @ t
                               Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc
                               g `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx env1 a'>_R
                                ->_R (Data.Array.Accelerate.AST.PreOpenAcc
                                        (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenExp[0]
                                                       <env>_N <acc>_N)))
                                        <env'>_N
                                        <a'>_N)_R)
                               x) }) -}
0f35c2a1006f7263a649bd2af71efd6f
  $fSinkPreOpenFun ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Sink
      (Data.Array.Accelerate.AST.PreOpenFun acc env)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkPreBoundary_$cweaken1
                  `cast`
                (forall (acc :: <* -> * -> *>_N) (env :: <*>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:Sink[0]
                               <Data.Array.Accelerate.AST.PreOpenFun acc env>_N)) -}
0f35c2a1006f7263a649bd2af71efd6f
  $fSinkRebuildTup ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.Trafo.Substitution.Sink
      (Data.Array.Accelerate.Trafo.Substitution.RebuildTup acc env)
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSinkRebuildTup_$cweaken
                  `cast`
                (forall (acc :: <* -> * -> *>_N) (env :: <*>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:Sink[0]
                               <Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                  acc env>_N)) -}
98ca13702f008cf8f30fefb8b1fb4a3b
  $fSinkRebuildTup_$cweaken ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    forall env1 env' t.
    (env1 Data.Array.Accelerate.Trafo.Substitution.:> env')
    -> Data.Array.Accelerate.Trafo.Substitution.RebuildTup
         acc env env1 t
    -> Data.Array.Accelerate.Trafo.Substitution.RebuildTup
         acc env env' t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,C(U)><L,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (acc :: * -> * -> *)
                            @ env
                            ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                          acc)
                            @ env1
                            @ env'
                            @ t
                            (eta :: env1 Data.Array.Accelerate.Trafo.Substitution.:> env') ->
                          case GHC.Types.HEq_sc
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                 @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                                 @ acc
                                 (GHC.Classes.$p2(%,%)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                                    @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                                       Data.Type.Equality.~ acc)
                                    $d(%,%))
                                   `cast`
                                 (Data.Type.Equality.N:~[0]
                                      <GHC.Types.*
                                       -> GHC.Types.*
                                       -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                            acc>_N <acc>_N) of cobox0 { DEFAULT ->
                          let {
                            f :: [GHC.Types.Char]
                            = GHC.Base.build
                                @ GHC.Types.Char
                                (\ @ b -> GHC.CString.unpackFoldrCString# @ b "weaken"#)
                          } in
                          let {
                            g :: forall a'.
                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                 Data.Array.Accelerate.AST.Idx env1 a'
                                 -> Data.Array.Accelerate.AST.PreOpenAcc acc env' a'
                              {- Arity: 2 -}
                            = \ @ a'
                                ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                                (x :: Data.Array.Accelerate.AST.Idx env1 a') ->
                              Data.Array.Accelerate.AST.Avar
                                @ acc
                                @ env'
                                @ a'
                                $dArrays
                                (eta @ a' x)
                          } in
                          \ (x :: Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                    acc env env1 t) ->
                          Data.Array.Accelerate.Debug.Stats.substitution
                            @ (Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                                 acc env env' t)
                            f
                            (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableRebuildTup_$crebuildA
                               @ acc
                               @ env
                               $d(%,%)
                               @ Data.Array.Accelerate.AST.PreOpenAcc
                               @ env1
                               @ env'
                               @ t
                               Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc
                               g `cast`
                               (forall (a' :: <*>_N).
                                <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                ->_R <Data.Array.Accelerate.AST.Idx env1 a'>_R
                                ->_R (Data.Array.Accelerate.AST.PreOpenAcc
                                        (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloRebuildTup[0]
                                                       <env>_N <acc>_N)))
                                        <env'>_N
                                        <a'>_N)_R)
                               x) }) -}
613cd5bc33d0d7cf492bbe92daddeb96
  $fSyntacticAccIdxA ::
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
      Data.Array.Accelerate.Trafo.Substitution.IdxA
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Substitution.IdxA
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA_$cavarIn
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA_$caccOut
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA_$cweakenAcc -}
613cd5bc33d0d7cf492bbe92daddeb96
  $fSyntacticAccIdxA1 ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t
    -> Data.Array.Accelerate.AST.Idx (aenv, s) t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ aenv
                   @ s
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t)
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (eta :: Data.Array.Accelerate.Trafo.Substitution.IdxA
                             acc aenv t) ->
                 Data.Array.Accelerate.AST.SuccIdx
                   @ (aenv, s)
                   @ t
                   @ aenv
                   @ s
                   @~ <(aenv, s)>_N
                   eta
                     `cast`
                   (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                        <acc>_P <aenv>_N <t>_N)) -}
43e9f7d5324feab345d325d0bb8d8b0a
  $fSyntacticAccIdxA2 ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.AST.Idx aenv t
    -> Data.Array.Accelerate.AST.Idx aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   @ aenv
                   @ (acc :: * -> * -> *)
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t)
                   (tpl :: Data.Array.Accelerate.AST.Idx aenv t) ->
                 tpl) -}
c07d8643cfbc786cc9c92d215c7c3db6
  $fSyntacticAccIdxA_$caccOut ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ aenv
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t)
                   (eta :: Data.Array.Accelerate.Trafo.Substitution.IdxA
                             acc aenv t) ->
                 Data.Array.Accelerate.AST.Avar
                   @ acc
                   @ aenv
                   @ t
                   $dArrays
                   eta
                     `cast`
                   (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                        <acc>_P <aenv>_N <t>_N)) -}
411e4304dcaa934f0adaa2e0a2595390
  $fSyntacticAccIdxA_$cavarIn ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.AST.Idx aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA2
                  `cast`
                (forall (t :: <*>_N) (aenv :: <*>_N) (acc :: <* -> * -> *>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays t>_R
                 ->_R <Data.Array.Accelerate.AST.Idx aenv t>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                               <acc>_P) <aenv>_N <t>_N) -}
613cd5bc33d0d7cf492bbe92daddeb96
  $fSyntacticAccIdxA_$cweakenAcc ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.IdxA acc (aenv, s) t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA1
                  `cast`
                (forall (t :: <*>_N) (acc :: <*
                                              -> * -> *>_N) (aenv :: <*>_N) (s :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays t>_R
                 ->_R <Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc>_R
                 ->_R <Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                               <acc>_P) <(aenv, s)>_N <t>_N) -}
613cd5bc33d0d7cf492bbe92daddeb96
  $fSyntacticAccPreOpenAcc ::
    Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
      Data.Array.Accelerate.AST.PreOpenAcc
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.AST.PreOpenAcc
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc_$cavarIn
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc_$caccOut
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc_$cweakenAcc -}
bcfa771dfba390787e38db8678da006c
  $fSyntacticAccPreOpenAcc1 ::
    Data.Array.Accelerate.Array.Sugar.Arrays t' =>
    Data.Array.Accelerate.AST.Idx aenv t'
    -> Data.Array.Accelerate.Trafo.Substitution.Identity
         (Data.Array.Accelerate.Trafo.Substitution.IdxA acc (aenv, s) t')
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ s
                   @ aenv
                   @ t'
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t')
                   (eta :: Data.Array.Accelerate.AST.Idx aenv t') ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity
                   @ (Data.Array.Accelerate.Trafo.Substitution.IdxA acc (aenv, s) t')
                   (Data.Array.Accelerate.AST.SuccIdx
                      @ (aenv, s)
                      @ t'
                      @ aenv
                      @ s
                      @~ <(aenv, s)>_N
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                             <acc>_P) <(aenv, s)>_N <t'>_N)) -}
9850a3b8207c6d402bd7afd155229678
  $fSyntacticAccPreOpenAcc_$caccOut ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ aenv
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t)
                   (eta :: Data.Array.Accelerate.AST.PreOpenAcc acc aenv t) ->
                 GHC.Base.id
                   @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv t)
                   eta) -}
b228acd5e76ac234b7fc095323a26151
  $fSyntacticAccPreOpenAcc_$cavarIn ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.AST.Idx aenv t
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t
                   @ aenv
                   @ (acc :: * -> * -> *)
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t)
                   (eta :: Data.Array.Accelerate.AST.Idx aenv t) ->
                 Data.Array.Accelerate.AST.Avar @ acc @ aenv @ t $dArrays eta) -}
613cd5bc33d0d7cf492bbe92daddeb96
  $fSyntacticAccPreOpenAcc_$cweakenAcc ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
    -> Data.Array.Accelerate.AST.PreOpenAcc acc (aenv, s) t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,C(C1(C1(C1(U))))><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ aenv
                   @ s
                   (w :: Data.Array.Accelerate.Array.Sugar.Arrays t)
                   (w1 :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (w2 :: Data.Array.Accelerate.AST.PreOpenAcc acc aenv t) ->
                 Data.Array.Accelerate.Trafo.Substitution.$w$cweakenAcc
                   @ t
                   @ acc
                   @ aenv
                   @ s
                   w1
                   w2) -}
90e16bd30079b2cf91854dd8dff762f0
  $fSyntacticExpIdxE ::
    Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
      Data.Array.Accelerate.Trafo.Substitution.IdxE
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE_$cvarIn
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE_$cexpOut
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE_$cweakenExp
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE_$cweakenExpAcc -}
00b3112965a51e310c36b4056d1e87e4
  $fSyntacticExpIdxE1 ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ s
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (eta :: Data.Array.Accelerate.Trafo.Substitution.IdxE
                             acc env aenv t) ->
                 eta) -}
45951ef7a05a788808efac2156a1fb15
  $fSyntacticExpIdxE2 ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
    -> Data.Array.Accelerate.AST.Idx (env, s) t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ s
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (eta :: Data.Array.Accelerate.Trafo.Substitution.IdxE
                             acc env aenv t) ->
                 Data.Array.Accelerate.AST.SuccIdx
                   @ (env, s)
                   @ t
                   @ env
                   @ s
                   @~ <(env, s)>_N
                   eta
                     `cast`
                   (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                        <acc>_P <env>_N <aenv>_P <t>_N)) -}
af7dfd6a2413f2704622c1664c70df99
  $fSyntacticExpIdxE3 ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.AST.Idx env t
    -> Data.Array.Accelerate.AST.Idx env t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   @ env
                   @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ aenv
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (tpl :: Data.Array.Accelerate.AST.Idx env t) ->
                 tpl) -}
80cf5670e687afa04e09aae762b28303
  $fSyntacticExpIdxE_$cexpOut ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, True)
                (\ @ t
                   @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ env
                   @ aenv
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (eta :: Data.Array.Accelerate.Trafo.Substitution.IdxE
                             acc env aenv t) ->
                 Data.Array.Accelerate.AST.Var
                   @ acc
                   @ env
                   @ aenv
                   @ t
                   $dElt
                   eta
                     `cast`
                   (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                        <acc>_P <env>_N <aenv>_P <t>_N)) -}
b58a059eb0a6095588b7ad9add4c1309
  $fSyntacticExpIdxE_$cvarIn ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.AST.Idx env t
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE3
                  `cast`
                (forall (t :: <*>_N) (env :: <*>_N) (acc :: <GHC.Types.*
                                                             -> GHC.Types.*
                                                             -> GHC.Types.*>_N) (aenv :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt t>_R
                 ->_R <Data.Array.Accelerate.AST.Idx env t>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                               <acc>_P <env>_N <aenv>_P) <t>_N) -}
c93233d2ac8248f4a76104e0c25540c3
  $fSyntacticExpIdxE_$cweakenExp ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE
         acc (env, s) aenv t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE2
                  `cast`
                (forall (t :: <*>_N) (acc :: <*
                                              -> *
                                              -> *>_N) (env :: <*>_N) (aenv :: <*>_N) (s :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt t>_R
                 ->_R <Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc>_R
                 ->_R <Data.Array.Accelerate.Trafo.Substitution.IdxE
                         acc env aenv t>_R
                 ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                               <acc>_P <(env, s)>_N <aenv>_P) <t>_N) -}
0a3ccc5f09ffb8623f780997be1b4cac
  $fSyntacticExpIdxE_$cweakenExpAcc ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE
         acc env (aenv, s) t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE1
                  `cast`
                (forall (t :: <*>_N) (acc :: <*
                                              -> *
                                              -> *>_N) (env :: <*>_N) (aenv :: <*>_N) (s :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt t>_R
                 ->_R <Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc>_R
                 ->_R <Data.Array.Accelerate.Trafo.Substitution.IdxE
                         acc env aenv t>_R
                 ->_R Trans
                          (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                               <acc>_P <env>_N <aenv>_P)
                          (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                    <acc>_P <env>_N <(aenv, s)>_P)) <t>_N) -}
90e16bd30079b2cf91854dd8dff762f0
  $fSyntacticExpPreOpenExp ::
    Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
      Data.Array.Accelerate.AST.PreOpenExp
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.AST.PreOpenExp
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp_$cvarIn
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp_$cexpOut
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp_$cweakenExp
                  Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp_$cweakenExpAcc -}
58d3f4541ec79916bfa82b02f3361148
  $fSyntacticExpPreOpenExp1 ::
    Data.Array.Accelerate.Array.Sugar.Elt t' =>
    Data.Array.Accelerate.AST.Idx env t'
    -> Data.Array.Accelerate.Trafo.Substitution.Identity
         (Data.Array.Accelerate.Trafo.Substitution.IdxE
            acc env (aenv, s) t')
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ (acc :: * -> * -> *)
                   @ aenv
                   @ s
                   @ env
                   @ t'
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t')
                   (eta :: Data.Array.Accelerate.AST.Idx env t') ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity
                   @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                        acc env (aenv, s) t')
                   eta
                     `cast`
                   (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                             <acc>_P <env>_N <(aenv, s)>_P) <t'>_N)) -}
605e3a2bd32db21bc0a52b9fd247d4e6
  $fSyntacticExpPreOpenExp2 ::
    Data.Array.Accelerate.Array.Sugar.Arrays t' =>
    Data.Array.Accelerate.AST.Idx aenv t'
    -> Data.Array.Accelerate.Trafo.Substitution.Identity
         (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t')
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>m,
     Unfolding: InlineRule (2, True, True)
                (\ @ (acc :: * -> * -> *)
                   @ aenv
                   @ t'
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t')
                   (eta :: Data.Array.Accelerate.AST.Idx aenv t') ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity
                   @ (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t')
                   eta
                     `cast`
                   (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                             <acc>_P) <aenv>_N <t'>_N)) -}
8c7e27829a7a64538d6c1489070a1073
  $fSyntacticExpPreOpenExp3 ::
    Data.Array.Accelerate.Array.Sugar.Elt t' =>
    Data.Array.Accelerate.AST.Idx env t'
    -> Data.Array.Accelerate.Trafo.Substitution.Identity
         (Data.Array.Accelerate.Trafo.Substitution.IdxE
            acc (env, s) aenv t')
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ s
                   @ aenv
                   @ env
                   @ t'
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t')
                   (eta :: Data.Array.Accelerate.AST.Idx env t')[OneShot] ->
                 Data.Array.Accelerate.Trafo.Substitution.Identity
                   @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                        acc (env, s) aenv t')
                   (Data.Array.Accelerate.AST.SuccIdx
                      @ (env, s)
                      @ t'
                      @ env
                      @ s
                      @~ <(env, s)>_N
                      eta)
                     `cast`
                   (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                             <acc>_P <(env, s)>_N <aenv>_P) <t'>_N)) -}
71815beb33dd951eb783b664fdfce36d
  $fSyntacticExpPreOpenExp_$cexpOut ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t
                   @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ env
                   @ aenv
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (eta :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv t) ->
                 GHC.Base.id
                   @ (Data.Array.Accelerate.AST.PreOpenExp acc env aenv t)
                   eta) -}
b03a0f3567f6ce739efeaf7ddc919409
  $fSyntacticExpPreOpenExp_$cvarIn ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.AST.Idx env t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t
                   @ env
                   @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ aenv
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (eta :: Data.Array.Accelerate.AST.Idx env t) ->
                 Data.Array.Accelerate.AST.Var @ acc @ env @ aenv @ t $dElt eta) -}
e663f399948d952e68bb075b22643323
  $fSyntacticExpPreOpenExp_$cweakenExp ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> Data.Array.Accelerate.AST.PreOpenExp acc (env, s) aenv t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,C(C1(C1(C1(U))))><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ s
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (w1 :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (w2 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv t) ->
                 Data.Array.Accelerate.Trafo.Substitution.$w$cweakenExp
                   @ t
                   @ acc
                   @ env
                   @ aenv
                   @ s
                   w1
                   w2) -}
eef00fd4e249f50410efed337abf386d
  $fSyntacticExpPreOpenExp_$cweakenExpAcc ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env (aenv, s) t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,C(C1(C1(C1(U))))><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ s
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (w1 :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (w2 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv t) ->
                 Data.Array.Accelerate.Trafo.Substitution.$w$cweakenExpAcc
                   @ t
                   @ acc
                   @ env
                   @ aenv
                   @ s
                   w1
                   w2) -}
41598210dd790b415177e377c1dd1470
  $tc'C:Rebuildable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11088701425840750051##
                   941055984606715862##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'C:Rebuildable1) -}
87eaadc4da3936101b7fd5d52a0ba482
  $tc'C:Rebuildable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Rebuildable"#) -}
0df0060b81d18c0dba61318e49183285
  $tc'C:RebuildableExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11960248651541707016##
                   5048415297158979089##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'C:RebuildableExp1) -}
ae1f2818973956e58b2eed113f207903
  $tc'C:RebuildableExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:RebuildableExp"#) -}
93bfbccd76f6789e62e272077c7895d4
  $tc'C:Sink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4920059171178149586##
                   1921984006886960840##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'C:Sink1) -}
5bda860056b85942fa976d31d5234787
  $tc'C:Sink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Sink"#) -}
af9880bd13dc93a3dba81a0364d5d1f6
  $tc'C:SinkExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9645085059967945791##
                   5883013510350286141##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'C:SinkExp1) -}
feb550c8394ff35e6f729700e461c4d1
  $tc'C:SinkExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SinkExp"#) -}
e727b36ad8462a9f552332620e287801
  $tc'C:SyntacticAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9024334249671439872##
                   9937725734551017657##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'C:SyntacticAcc1) -}
d7c2caedd85f837104dd752d2953fbd4
  $tc'C:SyntacticAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SyntacticAcc"#) -}
1cc8409ecf68da3b2e9098a77851e930
  $tc'C:SyntacticExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13116912512550583242##
                   7024517240548856918##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'C:SyntacticExp1) -}
c1f40f5bdeeacfb85a43f769d8946a89
  $tc'C:SyntacticExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:SyntacticExp"#) -}
09e5d1d29ba14c3dd59fd5a8d8f99858
  $tc'IA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1349013956473864380##
                   12648016052669259552##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'IA1) -}
10955ae9f3056a0c9dfe462307bc6d20
  $tc'IA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IA"#) -}
cddb3842cf7ce0ee470c0bffc6534765
  $tc'IE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17331828299194996670##
                   1640417185876923284##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'IE1) -}
d85df88f08235ba2609a968be460b27c
  $tc'IE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IE"#) -}
2d48869b316a54bb22f2cc409caf3815
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10467428921571823060##
                   6956619938718863748##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'Identity1) -}
138dff699d326686cbe8ff8d163fd9c7
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
2597892957b57f1f19f785fd957bab84
  $tc'RebuildTup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1072116271008137094##
                   8851022279354900739##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tc'RebuildTup1) -}
17b8cfb2deb22af2d898ebc3b7b172ea
  $tc'RebuildTup1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RebuildTup"#) -}
f6004b7cda737e40fb7a038311ca2ae2
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10654649611615747438##
                   2008680579392914606##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcIdentity1) -}
d4ac5b20937efb751d74be90372ba407
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Identity"#) -}
f18837257ca1611e4da591a04b536146
  $tcIdxA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17327605977925596218##
                   17787045205119141783##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcIdxA1) -}
4c810ca87311de77f758aea90cd96d40
  $tcIdxA1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IdxA"#) -}
edbdd883a90c6fcdb8cc9ba6c5bd5e3c
  $tcIdxE :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16941399218585801783##
                   1240864678459589590##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcIdxE1) -}
e0155892eb3beb80da7d440a6d0b167c
  $tcIdxE1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IdxE"#) -}
f2e996f6d7314fbd7768f04fa8f18348
  $tcRebuildTup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16547093645556786423##
                   1829780926250376461##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcRebuildTup1) -}
5683bd3dc3d76a182e95bd275353547a
  $tcRebuildTup1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RebuildTup"#) -}
a3a3baa4d5dd97b21784b36b311b62d1
  $tcRebuildable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4809026351828029730##
                   6378896135662741035##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcRebuildable1) -}
1e4667415891abd326ed19ffc8d1193c
  $tcRebuildable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Rebuildable"#) -}
e560491bb71d98ba397998ed46031e02
  $tcRebuildableExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8417195363009426063##
                   2140394453209661627##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcRebuildableExp1) -}
c0e81b425dce1b971fc47806f40d073c
  $tcRebuildableExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "RebuildableExp"#) -}
3986250cd1695f32e9a8c3518d2782df
  $tcSink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4244682665040745163##
                   6389885041325140744##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcSink1) -}
77176f080212c0c7196bd0279038d5a3
  $tcSink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Sink"#) -}
cd2270f1a9fa4c8f0205c5becd325556
  $tcSinkExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11164568953916104419##
                   13703898540181682955##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcSinkExp1) -}
4abc127d0a5cd1ad462df794a1863937
  $tcSinkExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SinkExp"#) -}
05d891dac0ae0228c8c8498bfd676e2a
  $tcSyntacticAcc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   994650472232295014##
                   5302475969029607962##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcSyntacticAcc1) -}
cea21f90b8780d4c165687f5cf4b2d17
  $tcSyntacticAcc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SyntacticAcc"#) -}
4587b0b59f40dce9546f75737ea0b029
  $tcSyntacticExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14020590086258309669##
                   1450206589204928727##
                   Data.Array.Accelerate.Trafo.Substitution.$trModule
                   Data.Array.Accelerate.Trafo.Substitution.$tcSyntacticExp1) -}
0444e54e699a09c629ecfb3a7a9e287e
  $tcSyntacticExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SyntacticExp"#) -}
572f77131381c029050d64d8a9a4dbd2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Trafo.Substitution.$trModule2
                   Data.Array.Accelerate.Trafo.Substitution.$trModule1) -}
7ec0cb8311dc610e628ecf6dda3becd9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Trafo.Substitution"#) -}
62698539dc0e5314d2cb23876f8abd6c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
613cd5bc33d0d7cf492bbe92daddeb96
  $w$cweakenAcc ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
    -> Data.Array.Accelerate.AST.PreOpenAcc acc (aenv, s) t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(C1(C1(U))))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ t
                   @ (acc :: * -> * -> *)
                   @ aenv
                   @ s
                   (w :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (w1 :: Data.Array.Accelerate.AST.PreOpenAcc acc aenv t) ->
                 case Data.Array.Accelerate.Trafo.Substitution.$w$srebuildPreOpenAcc
                        @ acc
                        @ aenv
                        @ (aenv, s)
                        @ t
                        (\ @ aenv1
                           @ aenv'
                           @ (f :: * -> *)
                           @ (fa :: (* -> * -> *) -> * -> * -> *)
                           @ a
                           ($dApplicative :: GHC.Base.Applicative f)
                           ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                fa)[OneShot]
                           (ds :: forall a'.
                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                  -> f (fa acc aenv' a'))[OneShot] ->
                         w @ aenv1 @ aenv' @ f @ fa @ a $dApplicative $dSyntacticAcc ds)
                        (Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc1
                           @ acc
                           @ s
                           @ aenv)
                        w1 of ww { Unit# ww1 ->
                 ww1 }) -}
324c5a61630cf32ad6d49d0b734a2740
  $w$cweakenExp ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> Data.Array.Accelerate.AST.PreOpenExp acc (env, s) aenv t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(C1(C1(U))))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ t
                   @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ s
                   (w :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (w1 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv t) ->
                 case Data.Array.Accelerate.Trafo.Substitution.$w$srebuildPreOpenExp
                        @ acc
                        @ env
                        @ (env, s)
                        @ aenv
                        @ aenv
                        @ t
                        (\ @ aenv1
                           @ aenv'
                           @ (f :: * -> *)
                           @ (fa :: (* -> * -> *) -> * -> * -> *)
                           @ a
                           ($dApplicative :: GHC.Base.Applicative f)
                           ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                fa)[OneShot]
                           (ds :: forall a'.
                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                  -> f (fa acc aenv' a'))[OneShot] ->
                         w @ aenv1 @ aenv' @ f @ fa @ a $dApplicative $dSyntacticAcc ds)
                        (Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp3
                           @ acc
                           @ s
                           @ aenv
                           @ env)
                        (Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp2
                           @ acc
                           @ aenv)
                        w1 of ww { Unit# ww1 ->
                 ww1 }) -}
32554cf8b14864a770b6cfff938026ff
  $w$cweakenExpAcc ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env (aenv, s) t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(C1(C1(U))))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ t
                   @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ s
                   (w :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (w1 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv t) ->
                 case Data.Array.Accelerate.Trafo.Substitution.$w$srebuildPreOpenExp
                        @ acc
                        @ env
                        @ env
                        @ (aenv, s)
                        @ aenv
                        @ t
                        (\ @ aenv1
                           @ aenv'
                           @ (f :: * -> *)
                           @ (fa :: (* -> * -> *) -> * -> * -> *)
                           @ a
                           ($dApplicative :: GHC.Base.Applicative f)
                           ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                fa)[OneShot]
                           (ds :: forall a'.
                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                  -> f (fa acc aenv' a'))[OneShot] ->
                         w @ aenv1 @ aenv' @ f @ fa @ a $dApplicative $dSyntacticAcc ds)
                        (Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp1
                           @ acc
                           @ aenv
                           @ s
                           @ env)
                        (Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc1
                           @ acc
                           @ s
                           @ aenv)
                        w1 of ww { Unit# ww1 ->
                 ww1 }) -}
acc875bd21d37837f04f6a98d6ed424c
  $w$srebuildAfun ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenAfun acc aenv t
    -> (# Data.Array.Accelerate.AST.PreOpenAfun acc aenv' t #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(C(C(S)))),1*C1(C1(C1(C1(U))))><L,U><S,1*U>,
     Inline: [0] -}
7ca0b600e31289cb51c0d96665f352b4
  $w$srebuildAfun1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenAfun acc aenv t
    -> (# Data.Array.Accelerate.AST.PreOpenAfun acc aenv' t #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(C(C(S)))),C(C1(C1(C1(U))))><L,U><S,1*U>,
     Inline: [0] -}
428ca2ad4e13f66706488c1193627d7a
  $w$srebuildAtup ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv' t'))
    -> Data.Array.Accelerate.Array.Sugar.Atuple (acc aenv) t
    -> (# Data.Array.Accelerate.Array.Sugar.Atuple (acc aenv') t #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U><S,1*U>, Inline: [0] -}
ac19a8d59523a2dfcbc2df682bcdf7f0
  $w$srebuildAtup1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t'))
    -> Data.Array.Accelerate.Array.Sugar.Atuple (acc aenv) t
    -> (# Data.Array.Accelerate.Array.Sugar.Atuple (acc aenv') t #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U><S,1*U>, Inline: [0] -}
92e4958f3a94d09a87de59f68b91e5aa
  $w$srebuildBoundary ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreBoundary acc aenv t
    -> (# Data.Array.Accelerate.AST.PreBoundary acc aenv' t #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ aenv
                   @ aenv'
                   @ t
                   (w :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (w1 :: forall t'.
                          Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                          Data.Array.Accelerate.AST.Idx aenv t'
                          -> Data.Array.Accelerate.Trafo.Substitution.Identity
                               (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv' t'))
                   (w2 :: Data.Array.Accelerate.AST.PreBoundary acc aenv t) ->
                 case w2 of wild {
                   Data.Array.Accelerate.AST.Clamp
                   -> (# Data.Array.Accelerate.AST.Clamp @ acc @ aenv' @ t #)
                   Data.Array.Accelerate.AST.Mirror
                   -> (# Data.Array.Accelerate.AST.Mirror @ acc @ aenv' @ t #)
                   Data.Array.Accelerate.AST.Wrap
                   -> (# Data.Array.Accelerate.AST.Wrap @ acc @ aenv' @ t #)
                   Data.Array.Accelerate.AST.Constant e sh cobox0 $dElt v
                   -> (# (Data.Array.Accelerate.AST.Constant
                            @ acc
                            @ aenv'
                            @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                            @ e
                            @ sh
                            @~ <Data.Array.Accelerate.Array.Sugar.Array sh e>_N
                            $dElt
                            v)
                           `cast`
                         (Data.Array.Accelerate.AST.PreBoundary
                            <acc>_R <aenv'>_N (Sym cobox0))_R #)
                   Data.Array.Accelerate.AST.Function sh e cobox0 $dShape $dElt f
                   -> case GHC.Types.HEq_sc
                             @ GHC.Types.*
                             @ GHC.Types.*
                             @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                             @ Data.Array.Accelerate.Array.Sugar.Z
                             (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                     sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                      case GHC.Types.HEq_sc
                             @ GHC.Types.*
                             @ GHC.Types.*
                             @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                             @ sh
                             (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                     sh>_N <sh>_N) of cobox2 { DEFAULT ->
                      case GHC.Types.HEq_sc
                             @ GHC.Types.*
                             @ GHC.Types.*
                             @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                             @ sh
                             (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                     sh>_N <sh>_N) of cobox3 { DEFAULT ->
                      case Data.Array.Accelerate.Trafo.Substitution.$w$srebuildFun
                             @ acc
                             @ ()
                             @ ()
                             @ aenv'
                             @ aenv
                             @ (sh -> e)
                             (\ @ aenv1
                                @ aenv'1
                                @ (f1 :: * -> *)
                                @ (fa :: (* -> * -> *) -> * -> * -> *)
                                @ a
                                ($dApplicative :: GHC.Base.Applicative f1)
                                ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                     fa)[OneShot]
                                (ds :: forall a'.
                                       Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                       Data.Array.Accelerate.AST.Idx aenv1 a'
                                       -> f1 (fa acc aenv'1 a'))[OneShot] ->
                              w @ aenv1 @ aenv'1 @ f1 @ fa @ a $dApplicative $dSyntacticAcc ds)
                             (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc1
                                @ acc
                                @ aenv')
                             w1
                             f of ww { Unit# ww1 ->
                      (# (Data.Array.Accelerate.AST.$WFunction
                            @ acc
                            @ aenv'
                            @ sh
                            @ e
                            $dShape
                            $dElt
                            ww1)
                           `cast`
                         (Data.Array.Accelerate.AST.PreBoundary
                            <acc>_R <aenv'>_N (Sym cobox0))_R #) } } } } }) -}
eb75d96f493282d79f9a797e17f802d7
  $w$srebuildBoundary1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreBoundary acc aenv t
    -> (# Data.Array.Accelerate.AST.PreBoundary acc aenv' t #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ aenv
                   @ aenv'
                   @ t
                   (w :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                   (w1 :: forall t'.
                          Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                          Data.Array.Accelerate.AST.Idx aenv t'
                          -> Data.Array.Accelerate.Trafo.Substitution.Identity
                               (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t'))
                   (w2 :: Data.Array.Accelerate.AST.PreBoundary acc aenv t) ->
                 case w2 of wild {
                   Data.Array.Accelerate.AST.Clamp
                   -> (# Data.Array.Accelerate.AST.Clamp @ acc @ aenv' @ t #)
                   Data.Array.Accelerate.AST.Mirror
                   -> (# Data.Array.Accelerate.AST.Mirror @ acc @ aenv' @ t #)
                   Data.Array.Accelerate.AST.Wrap
                   -> (# Data.Array.Accelerate.AST.Wrap @ acc @ aenv' @ t #)
                   Data.Array.Accelerate.AST.Constant e sh cobox0 $dElt v
                   -> (# (Data.Array.Accelerate.AST.Constant
                            @ acc
                            @ aenv'
                            @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                            @ e
                            @ sh
                            @~ <Data.Array.Accelerate.Array.Sugar.Array sh e>_N
                            $dElt
                            v)
                           `cast`
                         (Data.Array.Accelerate.AST.PreBoundary
                            <acc>_R <aenv'>_N (Sym cobox0))_R #)
                   Data.Array.Accelerate.AST.Function sh e cobox0 $dShape $dElt f
                   -> case GHC.Types.HEq_sc
                             @ GHC.Types.*
                             @ GHC.Types.*
                             @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                             @ Data.Array.Accelerate.Array.Sugar.Z
                             (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                     sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                      case GHC.Types.HEq_sc
                             @ GHC.Types.*
                             @ GHC.Types.*
                             @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                             @ sh
                             (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                     sh>_N <sh>_N) of cobox2 { DEFAULT ->
                      case GHC.Types.HEq_sc
                             @ GHC.Types.*
                             @ GHC.Types.*
                             @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                             @ sh
                             (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                               `cast`
                             (Data.Type.Equality.N:~[0]
                                  <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                     sh>_N <sh>_N) of cobox3 { DEFAULT ->
                      case Data.Array.Accelerate.Trafo.Substitution.$w$srebuildFun1
                             @ acc
                             @ ()
                             @ ()
                             @ aenv'
                             @ aenv
                             @ (sh -> e)
                             (\ @ aenv1
                                @ aenv'1
                                @ (f1 :: * -> *)
                                @ (fa :: (* -> * -> *) -> * -> * -> *)
                                @ a
                                ($dApplicative :: GHC.Base.Applicative f1)
                                ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                     fa)[OneShot]
                                (ds :: forall a'.
                                       Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                       Data.Array.Accelerate.AST.Idx aenv1 a'
                                       -> f1 (fa acc aenv'1 a'))[OneShot] ->
                              w @ aenv1 @ aenv'1 @ f1 @ fa @ a $dApplicative $dSyntacticAcc ds)
                             (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc1
                                @ acc
                                @ aenv')
                             w1
                             f of ww { Unit# ww1 ->
                      (# (Data.Array.Accelerate.AST.$WFunction
                            @ acc
                            @ aenv'
                            @ sh
                            @ e
                            $dShape
                            $dElt
                            ww1)
                           `cast`
                         (Data.Array.Accelerate.AST.PreBoundary
                            <acc>_R <aenv'>_N (Sym cobox0))_R #) } } } } }) -}
d56f286c3597936abe834835bc59d399
  $w$srebuildFun ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv t
    -> (# Data.Array.Accelerate.AST.PreOpenFun acc env' aenv' t #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,C(C1(U(U)))><L,U><S,1*U>,
     Inline: [0] -}
5fd69acf72a31bb74aad6e7c1069ac4d
  $w$srebuildFun1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv t
    -> (# Data.Array.Accelerate.AST.PreOpenFun acc env' aenv' t #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,C(C1(U(U)))><L,U><S,1*U>,
     Inline: [0] -}
791e74d89daf485465e7250cea3d2447
  $w$srebuildOpenAcc ::
    (forall t'.
     Data.Array.Accelerate.Array.Sugar.Arrays t' =>
     Data.Array.Accelerate.AST.Idx aenv t'
     -> Data.Array.Accelerate.Trafo.Substitution.Identity
          (Data.Array.Accelerate.AST.PreOpenAcc
             Data.Array.Accelerate.AST.OpenAcc aenv' t'))
    -> Data.Array.Accelerate.AST.OpenAcc aenv t
    -> (# Data.Array.Accelerate.AST.OpenAcc aenv' t #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
613cd5bc33d0d7cf492bbe92daddeb96
  $w$srebuildPreOpenAcc ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
    -> (# Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,U><S,1*U>, Inline: [0] -}
ba372da9682cd5d2d3e2c1dc715a395d
  $w$srebuildPreOpenExp ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> (# Data.Array.Accelerate.AST.PreOpenExp acc env' aenv' t #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,C(C1(U(U)))><L,U><S,1*U>,
     Inline: [0] -}
bfa3497cdff5dfd796b9950799e894d6
  $w$srebuildPreOpenExp1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> (# Data.Array.Accelerate.AST.PreOpenExp acc env' aenv' t #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,C(C1(U(U)))><L,U><S,1*U>,
     Inline: [0] -}
c20ad7a1f80fa8c86876fa80edfeb815
  $w$srebuildTup ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv' t'))
    -> Data.Array.Accelerate.Array.Sugar.Tuple
         (Data.Array.Accelerate.AST.PreOpenExp acc env aenv) t
    -> (# Data.Array.Accelerate.Array.Sugar.Tuple
            (Data.Array.Accelerate.AST.PreOpenExp acc env' aenv') t #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,C(C1(U(U)))><L,U><S,1*U>,
     Inline: [0] -}
3f98944f30d1d0d205155905b27f9342
  $w$srebuildTup1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.Trafo.Substitution.IdxE acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t'
        -> Data.Array.Accelerate.Trafo.Substitution.Identity
             (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t'))
    -> Data.Array.Accelerate.Array.Sugar.Tuple
         (Data.Array.Accelerate.AST.PreOpenExp acc env aenv) t
    -> (# Data.Array.Accelerate.Array.Sugar.Tuple
            (Data.Array.Accelerate.AST.PreOpenExp acc env' aenv') t #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(C1(C1(U))))><L,C(C1(U(U)))><L,U><S,1*U>,
     Inline: [0] -}
89e728905931bf59b28285272b22ce92
  type (:>) env env' =
    forall t'.
    Data.Array.Accelerate.AST.Idx env t'
    -> Data.Array.Accelerate.AST.Idx env' t'
2b64de84c0275a0d31b32fb30e441ddc
  type (:?>) env env' =
    forall t'.
    Data.Array.Accelerate.AST.Idx env t'
    -> GHC.Base.Maybe (Data.Array.Accelerate.AST.Idx env' t')
53a762194c947b304399e52c30f834b9
  axiom D:R:AccCloOpenAcc::
      Data.Array.Accelerate.Trafo.Substitution.AccClo
        Data.Array.Accelerate.AST.OpenAcc
        = Data.Array.Accelerate.AST.OpenAcc
53a762194c947b304399e52c30f834b9
  axiom D:R:AccCloPreOpenAcc::
    [(acc :: * -> * -> *)]
      Data.Array.Accelerate.Trafo.Substitution.AccClo
        (Data.Array.Accelerate.AST.PreOpenAcc acc)
        = acc
53a762194c947b304399e52c30f834b9
  axiom D:R:AccCloPreOpenAfun::
    [(acc :: * -> * -> *)]
      Data.Array.Accelerate.Trafo.Substitution.AccClo
        (Data.Array.Accelerate.AST.PreOpenAfun acc)
        = acc
53a762194c947b304399e52c30f834b9
  axiom D:R:AccCloPreOpenExp::
    [env, (acc :: * -> * -> *)]
      Data.Array.Accelerate.Trafo.Substitution.AccClo
        (Data.Array.Accelerate.AST.PreOpenExp acc env)
        = acc
53a762194c947b304399e52c30f834b9
  axiom D:R:AccCloPreOpenFun::
    [env, (acc :: * -> * -> *)]
      Data.Array.Accelerate.Trafo.Substitution.AccClo
        (Data.Array.Accelerate.AST.PreOpenFun acc env)
        = acc
53a762194c947b304399e52c30f834b9
  axiom D:R:AccCloRebuildTup::
    [env, (acc :: * -> * -> *)]
      Data.Array.Accelerate.Trafo.Substitution.AccClo
        (Data.Array.Accelerate.Trafo.Substitution.RebuildTup acc env)
        = acc
64c64ba83d8ff28f2ecc4e662d8008d6
  data Identity a = Identity {runIdentity :: a}
c43d9cb5771b06ec2f53db4e5209aa68
  type role IdxA phantom nominal nominal
  newtype IdxA (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
               aenv
               t
    = IA {unIA :: Data.Array.Accelerate.AST.Idx aenv t}
3e15da73eae6cdd3e6f36049796b05be
  type role IdxE phantom nominal phantom nominal
  newtype IdxE (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
               env
               aenv
               t
    = IE {unIE :: Data.Array.Accelerate.AST.Idx env t}
613cd5bc33d0d7cf492bbe92daddeb96
  type RebuildAcc (acc :: * -> * -> *) =
    forall aenv aenv' (f :: * -> *) (fa :: (* -> * -> *)
                                           -> * -> * -> *) a.
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    (forall a'.
     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
     Data.Array.Accelerate.AST.Idx aenv a' -> f (fa acc aenv' a'))
    -> acc aenv a -> f (acc aenv' a)
788b5272aa73a783042f6bbfd6517eb9
  type role RebuildTup representational nominal nominal nominal
  newtype RebuildTup (acc :: GHC.Types.*
                             -> GHC.Types.* -> GHC.Types.*)
                     env
                     aenv
                     t
    = RebuildTup {unRTup :: Data.Array.Accelerate.Array.Sugar.Tuple
                              (Data.Array.Accelerate.AST.PreOpenExp acc env aenv) t}
53a762194c947b304399e52c30f834b9
  class Rebuildable (f :: * -> * -> *) where
    type family AccClo (f :: * -> * -> *)
                :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*
      open
    rebuildPartial :: (GHC.Base.Applicative f',
                       Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
                      (forall a'.
                       Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                       Data.Array.Accelerate.AST.Idx aenv a'
                       -> f' (fa (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                    f) aenv' a'))
                      -> f aenv a -> f' (f aenv' a)
    rebuildA :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                  fa =>
                (forall a'.
                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                 Data.Array.Accelerate.AST.Idx aenv a'
                 -> fa (Data.Array.Accelerate.Trafo.Substitution.AccClo f) aenv' a')
                -> f aenv a -> f aenv' a
    {-# MINIMAL rebuildPartial #-}
53a762194c947b304399e52c30f834b9
  type RebuildableAcc (acc :: * -> * -> *) =
    (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc,
     Data.Array.Accelerate.Trafo.Substitution.AccClo acc
     Data.Type.Equality.~ acc)
    :: GHC.Types.Constraint
36c7f0abc445c51e17e75229b06ca755
  class RebuildableExp (f :: * -> * -> * -> *) where
    rebuildPartialE :: (GHC.Base.Applicative f',
                        Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe) =>
                       (forall e'.
                        Data.Array.Accelerate.Array.Sugar.Elt e' =>
                        Data.Array.Accelerate.AST.Idx env e'
                        -> f' (fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                                     (f env)) env' aenv e'))
                       -> f env aenv e -> f' (f env' aenv e)
    rebuildE :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
                  fe =>
                (forall e'.
                 Data.Array.Accelerate.Array.Sugar.Elt e' =>
                 Data.Array.Accelerate.AST.Idx env e'
                 -> fe (Data.Array.Accelerate.Trafo.Substitution.AccClo
                          (f env)) env' aenv e')
                -> f env aenv e -> f env' aenv e
    {-# MINIMAL rebuildPartialE #-}
0f35c2a1006f7263a649bd2af71efd6f
  class Sink (f :: * -> * -> *) where
    weaken :: (env Data.Array.Accelerate.Trafo.Substitution.:> env')
              -> f env t -> f env' t
    {-# MINIMAL weaken #-}
7e4e88bc8e5a58e3e7fda427e66021c2
  class SinkExp (f :: * -> * -> * -> *) where
    weakenE :: (env Data.Array.Accelerate.Trafo.Substitution.:> env')
               -> f env aenv t -> f env' aenv t
    {-# MINIMAL weakenE #-}
613cd5bc33d0d7cf492bbe92daddeb96
  class SyntacticAcc (f :: (* -> * -> *) -> * -> * -> *) where
    avarIn :: Data.Array.Accelerate.Array.Sugar.Arrays t =>
              Data.Array.Accelerate.AST.Idx aenv t -> f acc aenv t
    accOut :: Data.Array.Accelerate.Array.Sugar.Arrays t =>
              f acc aenv t -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
    weakenAcc :: Data.Array.Accelerate.Array.Sugar.Arrays t =>
                 Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
                 -> f acc aenv t -> f acc (aenv, s) t
    RecFlag: Recursive
    {-# MINIMAL avarIn, accOut, weakenAcc #-}
90e16bd30079b2cf91854dd8dff762f0
  class SyntacticExp (f :: (GHC.Types.*
                            -> GHC.Types.* -> GHC.Types.*)
                           -> * -> * -> * -> *) where
    varIn :: Data.Array.Accelerate.Array.Sugar.Elt t =>
             Data.Array.Accelerate.AST.Idx env t -> f acc env aenv t
    expOut :: Data.Array.Accelerate.Array.Sugar.Elt t =>
              f acc env aenv t
              -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    weakenExp :: Data.Array.Accelerate.Array.Sugar.Elt t =>
                 Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
                 -> f acc env aenv t -> f acc (env, s) aenv t
    weakenExpAcc :: Data.Array.Accelerate.Array.Sugar.Elt t =>
                    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
                    -> f acc env aenv t -> f acc env (aenv, s) t
    {-# MINIMAL varIn, expOut, weakenExp, weakenExpAcc #-}
57346eea1004cfcf10fbe630964e32c1
  compose ::
    (Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc,
     Data.Array.Accelerate.Array.Sugar.Elt c) =>
    Data.Array.Accelerate.AST.PreOpenFun acc env aenv (b -> c)
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv (a -> b)
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv (a -> c)
  {- Arity: 4, Strictness: <S(LS(S)),U(U,U(U))><L,U><S,1*U><S,1*U>,
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ c
                   @ env
                   @ aenv
                   @ b
                   @ a
                   ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                 acc)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (eta :: Data.Array.Accelerate.AST.PreOpenFun acc env aenv (b -> c))
                   (eta1 :: Data.Array.Accelerate.AST.PreOpenFun
                              acc env aenv (a -> b)) ->
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           $d(%,%))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox0 { DEFAULT ->
                 case eta of wild {
                   Data.Array.Accelerate.AST.Body ipv ipv1
                   -> Data.Array.Accelerate.Trafo.Substitution.compose1
                        @ acc
                        @ env
                        @ aenv
                        @ c
                        @ a
                   Data.Array.Accelerate.AST.Lam a1 t cobox1 $dElt1 ds
                   -> case ds of wild1 {
                        Data.Array.Accelerate.AST.Body $dElt2 f
                        -> case eta1 of wild2 {
                             Data.Array.Accelerate.AST.Body ipv ipv1
                             -> Data.Array.Accelerate.Trafo.Substitution.compose1
                                  @ acc
                                  @ env
                                  @ aenv
                                  @ c
                                  @ a
                             Data.Array.Accelerate.AST.Lam a2 t1 cobox2 $dElt3 ds1
                             -> case ds1 of wild3 {
                                  Data.Array.Accelerate.AST.Body $dElt4 g
                                  -> (Data.Array.Accelerate.AST.Lam
                                        @ acc
                                        @ env
                                        @ aenv
                                        @ (a2 -> t)
                                        @ a2
                                        @ t
                                        @~ <a2 -> t>_N
                                        $dElt3
                                        (Data.Array.Accelerate.AST.Body
                                           @ acc
                                           @ (env, a2)
                                           @ aenv
                                           @ t
                                           $dElt
                                             `cast`
                                           (Data.Array.Accelerate.Array.Sugar.Elt (Nth:1 cobox1))_R
                                           (Data.Array.Accelerate.Trafo.Substitution.substitute
                                              @ acc
                                              @ a1
                                              @ t
                                              @ env
                                              @ aenv
                                              @ a2
                                              $d(%,%)
                                              $dElt1
                                              $dElt
                                                `cast`
                                              (Data.Array.Accelerate.Array.Sugar.Elt
                                                 (Nth:1 cobox1))_R
                                              f
                                              g `cast`
                                              (Data.Array.Accelerate.AST.PreOpenExp
                                                 <acc>_R
                                                 <(env, a2)>_N
                                                 <aenv>_N
                                                 (Trans (Nth:1 (Sym cobox2)) (Nth:0 cobox1)))_R)))
                                       `cast`
                                     (Data.Array.Accelerate.AST.PreOpenFun
                                        <acc>_R
                                        <env>_N
                                        <aenv>_N
                                        (Nth:0 (Sym cobox2) ->_N Nth:1 (Sym cobox1)))_R
                                  Data.Array.Accelerate.AST.Lam ipv0 ipv1 ipv ipv2 ipv3
                                  -> Data.Array.Accelerate.Trafo.Substitution.compose1
                                       @ acc
                                       @ env
                                       @ aenv
                                       @ c
                                       @ a } }
                        Data.Array.Accelerate.AST.Lam ipv0 ipv1 ipv ipv2 ipv3
                        -> Data.Array.Accelerate.Trafo.Substitution.compose1
                             @ acc
                             @ env
                             @ aenv
                             @ c
                             @ a } } }) -}
5526dd6559c44d5a37c030b012ef589c
  compose1 ::
    Data.Array.Accelerate.AST.PreOpenFun acc env aenv (a -> c)
  {- Strictness: x -}
0c6ca03756168e5ed82cdc99d67e19c9
  inline ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc =>
    Data.Array.Accelerate.AST.PreOpenExp acc (env, s) aenv t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv s
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><S,1*U><L,U>,
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ env
                   @ s
                   @ aenv
                   @ t
                   ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                 acc)
                   (eta :: Data.Array.Accelerate.AST.PreOpenExp acc (env, s) aenv t)
                   (eta1 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv s) ->
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           $d(%,%))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox0 { DEFAULT ->
                 Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenExp_$crebuildE
                   @ acc
                   $d(%,%)
                   @ Data.Array.Accelerate.AST.PreOpenExp
                   @ (env, s)
                   @ env
                   @ aenv
                   @ t
                   Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp
                   (\ @ e'
                      ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e')
                      (eta2 :: Data.Array.Accelerate.AST.Idx (env, s) e') ->
                    case eta2 of wild {
                      Data.Array.Accelerate.AST.ZeroIdx env1 cobox1
                      -> eta1
                           `cast`
                         (Data.Array.Accelerate.AST.PreOpenExp
                            <acc>_R <env>_N <aenv>_N (Nth:1 cobox1))_R
                      Data.Array.Accelerate.AST.SuccIdx env1 s1 cobox1 ix
                      -> (Data.Array.Accelerate.AST.Var
                            @ acc
                            @ env1
                            @ aenv
                            @ e'
                            $dElt
                            ix)
                           `cast`
                         (Data.Array.Accelerate.AST.PreOpenExp
                            <acc>_R (Nth:0 (Sym cobox1)) <aenv>_N <e'>_N)_R })
                     `cast`
                   (forall (e' :: <*>_N).
                    <Data.Array.Accelerate.Array.Sugar.Elt e'>_R
                    ->_R <Data.Array.Accelerate.AST.Idx (env, s) e'>_R
                    ->_R (Data.Array.Accelerate.AST.PreOpenExp
                            (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenExp[0]
                                           <(env, s)>_N <acc>_N)))
                            <env>_N
                            <aenv>_N
                            <e'>_N)_R)
                   eta }) -}
f4a63b9c66548f1ec35ff9f061c14484
  rebuildAfun ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenAfun acc aenv t
    -> f (Data.Array.Accelerate.AST.PreOpenAfun acc aenv' t)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLL),U(U(U,U),U,U,U,U)><L,U(U,U,U)><L,C(C1(C1(U)))><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (f :: * -> *)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ (acc :: * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ t
                                          ($dApplicative :: GHC.Base.Applicative f)
                                          ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                               fa)
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc
                                                    acc)
                                          (eta1 :: forall t'.
                                                   Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                                   Data.Array.Accelerate.AST.Idx aenv t'
                                                   -> f (fa acc aenv' t'))
                                          (eta2 :: Data.Array.Accelerate.AST.PreOpenAfun
                                                     acc aenv t) ->
                                        case eta2 of wild {
                                          Data.Array.Accelerate.AST.Abody $dArrays b
                                          -> Data.Functor.<$>
                                               @ f
                                               @ (acc aenv' t)
                                               @ (Data.Array.Accelerate.AST.PreOpenAfun acc aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.Abody
                                                  @ acc
                                                  @ aenv'
                                                  @ t
                                                  $dArrays)
                                               (eta
                                                  @ aenv
                                                  @ aenv'
                                                  @ f
                                                  @ fa
                                                  @ t
                                                  $dApplicative
                                                  $dSyntacticAcc
                                                  eta1
                                                  b)
                                          Data.Array.Accelerate.AST.Alam a t1 cobox0 $dArrays f1
                                          -> (Data.Functor.<$>
                                                @ f
                                                @ (Data.Array.Accelerate.AST.PreOpenAfun
                                                     acc (aenv', a) t1)
                                                @ (Data.Array.Accelerate.AST.PreOpenAfun
                                                     acc aenv' (a -> t1))
                                                (GHC.Base.$p1Applicative @ f $dApplicative)
                                                (Data.Array.Accelerate.AST.$WAlam
                                                   @ acc
                                                   @ aenv'
                                                   @ a
                                                   @ t1
                                                   $dArrays)
                                                (Data.Array.Accelerate.Trafo.Substitution.rebuildAfun
                                                   @ f
                                                   @ fa
                                                   @ acc
                                                   @ (aenv, a)
                                                   @ (aenv', a)
                                                   @ t1
                                                   $dApplicative
                                                   $dSyntacticAcc
                                                   (\ @ aenv1
                                                      @ aenv'1
                                                      @ (f2 :: * -> *)
                                                      @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                      @ a1
                                                      ($dApplicative1 :: GHC.Base.Applicative f2)
                                                      ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                            fa1)[OneShot]
                                                      (ds :: forall a'.
                                                             Data.Array.Accelerate.Array.Sugar.Arrays
                                                               a' =>
                                                             Data.Array.Accelerate.AST.Idx aenv1 a'
                                                             -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                    eta
                                                      @ aenv1
                                                      @ aenv'1
                                                      @ f2
                                                      @ fa1
                                                      @ a1
                                                      $dApplicative1
                                                      $dSyntacticAcc1
                                                      ds)
                                                   (\ @ t'
                                                      ($dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays
                                                                      t')
                                                      (eta3 :: Data.Array.Accelerate.AST.Idx
                                                                 (aenv, a) t') ->
                                                    Data.Array.Accelerate.Trafo.Substitution.shiftA
                                                      @ f
                                                      @ fa
                                                      @ t'
                                                      @ acc
                                                      @ aenv
                                                      @ aenv'
                                                      @ a
                                                      $dApplicative
                                                      $dSyntacticAcc
                                                      $dArrays1
                                                      (\ @ aenv1
                                                         @ aenv'1
                                                         @ (f2 :: * -> *)
                                                         @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                         @ a1
                                                         ($dApplicative1 :: GHC.Base.Applicative f2)
                                                         ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                               fa1)[OneShot]
                                                         (ds :: forall a'.
                                                                Data.Array.Accelerate.Array.Sugar.Arrays
                                                                  a' =>
                                                                Data.Array.Accelerate.AST.Idx
                                                                  aenv1 a'
                                                                -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                       eta
                                                         @ aenv1
                                                         @ aenv'1
                                                         @ f2
                                                         @ fa1
                                                         @ a1
                                                         $dApplicative1
                                                         $dSyntacticAcc1
                                                         ds)
                                                      eta1
                                                      eta3)
                                                   f1))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.AST.PreOpenAfun
                                                       <acc>_N <aenv'>_N (Sym cobox0))_N) }) -}
da2a7644cd7182ca89192ac86b1eccd6
  rebuildAtup ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
    -> Data.Array.Accelerate.Array.Sugar.Atuple (acc aenv) t
    -> f (Data.Array.Accelerate.Array.Sugar.Atuple (acc aenv') t)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,U(U(U,U),U,U,U,U)><L,U><L,C(C1(C1(C1(U))))><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (f :: * -> *)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ (acc :: * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ t
                                          ($dApplicative :: GHC.Base.Applicative f)
                                          ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                               fa)
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc
                                                    acc)
                                          (eta1 :: forall t'.
                                                   Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                                   Data.Array.Accelerate.AST.Idx aenv t'
                                                   -> f (fa acc aenv' t'))
                                          (eta2 :: Data.Array.Accelerate.Array.Sugar.Atuple
                                                     (acc aenv) t) ->
                                        case eta2 of wild {
                                          Data.Array.Accelerate.Array.Sugar.NilAtup cobox0
                                          -> (GHC.Base.pure
                                                @ f
                                                $dApplicative
                                                @ (Data.Array.Accelerate.Array.Sugar.Atuple
                                                     (acc aenv') ())
                                                (Data.Array.Accelerate.Array.Sugar.$WNilAtup
                                                   @ (acc aenv')))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.Array.Sugar.Atuple
                                                       <acc aenv'>_N (Sym cobox0))_N)
                                          Data.Array.Accelerate.Array.Sugar.SnocAtup a s cobox0 $dArrays t1 a1
                                          -> (GHC.Base.<*>
                                                @ f
                                                $dApplicative
                                                @ (acc aenv' a)
                                                @ (Data.Array.Accelerate.Array.Sugar.Atuple
                                                     (acc aenv') (s, a))
                                                (Data.Functor.<$>
                                                   @ f
                                                   @ (Data.Array.Accelerate.Array.Sugar.Atuple
                                                        (acc aenv') s)
                                                   @ (acc aenv' a
                                                      -> Data.Array.Accelerate.Array.Sugar.Atuple
                                                           (acc aenv') (s, a))
                                                   (GHC.Base.$p1Applicative @ f $dApplicative)
                                                   (Data.Array.Accelerate.Array.Sugar.$WSnocAtup
                                                      @ (acc aenv')
                                                      @ a
                                                      @ s
                                                      $dArrays)
                                                   (Data.Array.Accelerate.Trafo.Substitution.rebuildAtup
                                                      @ f
                                                      @ fa
                                                      @ acc
                                                      @ aenv
                                                      @ aenv'
                                                      @ s
                                                      $dApplicative
                                                      $dSyntacticAcc
                                                      (\ @ aenv1
                                                         @ aenv'1
                                                         @ (f1 :: * -> *)
                                                         @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                         @ a2
                                                         ($dApplicative1 :: GHC.Base.Applicative f1)
                                                         ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                               fa1)[OneShot]
                                                         (ds :: forall a'.
                                                                Data.Array.Accelerate.Array.Sugar.Arrays
                                                                  a' =>
                                                                Data.Array.Accelerate.AST.Idx
                                                                  aenv1 a'
                                                                -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                       eta
                                                         @ aenv1
                                                         @ aenv'1
                                                         @ f1
                                                         @ fa1
                                                         @ a2
                                                         $dApplicative1
                                                         $dSyntacticAcc1
                                                         ds)
                                                      eta1
                                                      t1))
                                                (eta
                                                   @ aenv
                                                   @ aenv'
                                                   @ f
                                                   @ fa
                                                   @ a
                                                   $dApplicative
                                                   $dSyntacticAcc
                                                   eta1
                                                   a1))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.Array.Sugar.Atuple
                                                       <acc aenv'>_N (Sym cobox0))_N) }) -}
6e7462a71e54aee43de984e5a5b5689e
  rebuildBoundary ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreBoundary acc aenv t
    -> f (Data.Array.Accelerate.AST.PreBoundary acc aenv' t)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,U(U(U,U),U,U,U,U)><L,U><L,C(C1(C1(U)))><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (f :: * -> *)
                            @ (fa :: (* -> * -> *) -> * -> * -> *)
                            @ (acc :: * -> * -> *)
                            @ aenv
                            @ aenv'
                            @ t
                            ($dApplicative :: GHC.Base.Applicative f)
                            ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                 fa)
                            (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                            (eta1 :: forall t'.
                                     Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                     Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
                            (eta2 :: Data.Array.Accelerate.AST.PreBoundary acc aenv t) ->
                          case eta2 of wild {
                            Data.Array.Accelerate.AST.Clamp
                            -> GHC.Base.pure
                                 @ f
                                 $dApplicative
                                 @ (Data.Array.Accelerate.AST.PreBoundary acc aenv' t)
                                 (Data.Array.Accelerate.AST.Clamp @ acc @ aenv' @ t)
                            Data.Array.Accelerate.AST.Mirror
                            -> GHC.Base.pure
                                 @ f
                                 $dApplicative
                                 @ (Data.Array.Accelerate.AST.PreBoundary acc aenv' t)
                                 (Data.Array.Accelerate.AST.Mirror @ acc @ aenv' @ t)
                            Data.Array.Accelerate.AST.Wrap
                            -> GHC.Base.pure
                                 @ f
                                 $dApplicative
                                 @ (Data.Array.Accelerate.AST.PreBoundary acc aenv' t)
                                 (Data.Array.Accelerate.AST.Wrap @ acc @ aenv' @ t)
                            Data.Array.Accelerate.AST.Constant e sh cobox0 $dElt v
                            -> (GHC.Base.pure
                                  @ f
                                  $dApplicative
                                  @ (Data.Array.Accelerate.AST.PreBoundary
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (Data.Array.Accelerate.AST.Constant
                                     @ acc
                                     @ aenv'
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                     @ e
                                     @ sh
                                     @~ <Data.Array.Accelerate.Array.Sugar.Array sh e>_N
                                     $dElt
                                     v))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreBoundary
                                         <acc>_N <aenv'>_N (Sym cobox0))_N)
                            Data.Array.Accelerate.AST.Function sh e cobox0 $dShape $dElt f1
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (Data.Functor.<$>
                                  @ f
                                  @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh -> e))
                                  @ (Data.Array.Accelerate.AST.PreBoundary
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                  (Data.Array.Accelerate.AST.$WFunction
                                     @ acc
                                     @ aenv'
                                     @ sh
                                     @ e
                                     $dShape
                                     $dElt)
                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                     @ f
                                     @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                     @ fa
                                     @ acc
                                     @ ()
                                     @ ()
                                     @ aenv'
                                     @ aenv
                                     @ (sh -> e)
                                     $dApplicative
                                     Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                     $dSyntacticAcc
                                     (\ @ aenv1
                                        @ aenv'1
                                        @ (f2 :: * -> *)
                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                        @ a
                                        ($dApplicative1 :: GHC.Base.Applicative f2)
                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                              fa1)[OneShot]
                                        (ds :: forall a'.
                                               Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                               Data.Array.Accelerate.AST.Idx aenv1 a'
                                               -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                      eta
                                        @ aenv1
                                        @ aenv'1
                                        @ f2
                                        @ fa1
                                        @ a
                                        $dApplicative1
                                        $dSyntacticAcc1
                                        ds)
                                     (\ @ t'
                                        ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                        (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                      GHC.Base.pure
                                        @ f
                                        $dApplicative
                                        @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                             acc () aenv' t')
                                        eta3
                                          `cast`
                                        (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                  <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                     eta1
                                     f1))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreBoundary
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } } }) -}
8073eefe3779996f352cf9288e187da8
  rebuildFun ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t' -> f (fe acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv t
    -> f (Data.Array.Accelerate.AST.PreOpenFun acc env' aenv' t)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLL),U(U(U,U),U,U,U,U)><L,U(C(C1(U)),C(U),C(C1(U)),A)><L,U><L,C(C1(C1(U)))><L,C(C1(U))><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (f :: * -> *)
                                          @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                                   -> * -> * -> * -> *)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ (acc :: * -> * -> *)
                                          @ env
                                          @ env'
                                          @ aenv'
                                          @ aenv
                                          @ t
                                          ($dApplicative :: GHC.Base.Applicative f)
                                          ($dSyntacticExp :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
                                                               fe)
                                          ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                               fa)
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc
                                                    acc)
                                          (eta1 :: forall t'.
                                                   Data.Array.Accelerate.Array.Sugar.Elt t' =>
                                                   Data.Array.Accelerate.AST.Idx env t'
                                                   -> f (fe acc env' aenv' t'))
                                          (eta2 :: forall t'.
                                                   Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                                   Data.Array.Accelerate.AST.Idx aenv t'
                                                   -> f (fa acc aenv' t'))
                                          (eta3 :: Data.Array.Accelerate.AST.PreOpenFun
                                                     acc env aenv t) ->
                                        case eta3 of wild {
                                          Data.Array.Accelerate.AST.Body $dElt e
                                          -> Data.Functor.<$>
                                               @ f
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               @ (Data.Array.Accelerate.AST.PreOpenFun
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.Body
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  $dElt)
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ t
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  e)
                                          Data.Array.Accelerate.AST.Lam a t1 cobox0 $dElt f1
                                          -> (Data.Functor.<$>
                                                @ f
                                                @ (Data.Array.Accelerate.AST.PreOpenFun
                                                     acc (env', a) aenv' t1)
                                                @ (Data.Array.Accelerate.AST.PreOpenFun
                                                     acc env' aenv' (a -> t1))
                                                (GHC.Base.$p1Applicative @ f $dApplicative)
                                                (Data.Array.Accelerate.AST.$WLam
                                                   @ acc
                                                   @ env'
                                                   @ aenv'
                                                   @ a
                                                   @ t1
                                                   $dElt)
                                                (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                                   @ f
                                                   @ fe
                                                   @ fa
                                                   @ acc
                                                   @ (env, a)
                                                   @ (env', a)
                                                   @ aenv'
                                                   @ aenv
                                                   @ t1
                                                   $dApplicative
                                                   $dSyntacticExp
                                                   $dSyntacticAcc
                                                   (\ @ aenv1
                                                      @ aenv'1
                                                      @ (f2 :: * -> *)
                                                      @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                      @ a1
                                                      ($dApplicative1 :: GHC.Base.Applicative f2)
                                                      ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                            fa1)[OneShot]
                                                      (ds :: forall a'.
                                                             Data.Array.Accelerate.Array.Sugar.Arrays
                                                               a' =>
                                                             Data.Array.Accelerate.AST.Idx aenv1 a'
                                                             -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                    eta
                                                      @ aenv1
                                                      @ aenv'1
                                                      @ f2
                                                      @ fa1
                                                      @ a1
                                                      $dApplicative1
                                                      $dSyntacticAcc1
                                                      ds)
                                                   (\ @ t'
                                                      ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                   t')
                                                      (eta4 :: Data.Array.Accelerate.AST.Idx
                                                                 (env, a) t')[OneShot] ->
                                                    Data.Array.Accelerate.Trafo.Substitution.shiftE
                                                      @ f
                                                      @ fe
                                                      @ t'
                                                      @ acc
                                                      @ env
                                                      @ env'
                                                      @ aenv'
                                                      @ a
                                                      $dApplicative
                                                      $dSyntacticExp
                                                      $dElt1
                                                      (\ @ aenv1
                                                         @ aenv'1
                                                         @ (f2 :: * -> *)
                                                         @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                         @ a1
                                                         ($dApplicative1 :: GHC.Base.Applicative f2)
                                                         ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                               fa1)[OneShot]
                                                         (ds :: forall a'.
                                                                Data.Array.Accelerate.Array.Sugar.Arrays
                                                                  a' =>
                                                                Data.Array.Accelerate.AST.Idx
                                                                  aenv1 a'
                                                                -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                       eta
                                                         @ aenv1
                                                         @ aenv'1
                                                         @ f2
                                                         @ fa1
                                                         @ a1
                                                         $dApplicative1
                                                         $dSyntacticAcc1
                                                         ds)
                                                      eta1
                                                      eta4)
                                                   eta2
                                                   f1))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.AST.PreOpenFun
                                                       <acc>_N
                                                       <env'>_N
                                                       <aenv'>_N
                                                       (Sym cobox0))_N) }) -}
a67754a5441d08cfa15487ef685fd1f8
  rebuildOpenAcc ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    (forall t'.
     Data.Array.Accelerate.Array.Sugar.Arrays t' =>
     Data.Array.Accelerate.AST.Idx aenv t'
     -> f (fa Data.Array.Accelerate.AST.OpenAcc aenv' t'))
    -> Data.Array.Accelerate.AST.OpenAcc aenv t
    -> f (Data.Array.Accelerate.AST.OpenAcc aenv' t)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLL),U(U(U,U),U,U,U,U)><L,U(U,U,U)><L,U><L,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (f :: * -> *)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ aenv
                                          @ aenv'
                                          @ t
                                          ($dApplicative :: GHC.Base.Applicative f)
                                          ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                               fa)
                                          (eta :: forall t'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                                  Data.Array.Accelerate.AST.Idx aenv t'
                                                  -> f (fa Data.Array.Accelerate.AST.OpenAcc aenv' t'))
                                          (eta1 :: Data.Array.Accelerate.AST.OpenAcc aenv t) ->
                                        Data.Functor.<$>
                                          @ f
                                          @ (Data.Array.Accelerate.AST.PreOpenAcc
                                               Data.Array.Accelerate.AST.OpenAcc aenv' t)
                                          @ (Data.Array.Accelerate.AST.OpenAcc aenv' t)
                                          (GHC.Base.$p1Applicative @ f $dApplicative)
                                          (\ (tpl :: Data.Array.Accelerate.AST.PreOpenAcc
                                                       Data.Array.Accelerate.AST.OpenAcc aenv' t) ->
                                           tpl)
                                            `cast`
                                          (<Data.Array.Accelerate.AST.PreOpenAcc
                                              Data.Array.Accelerate.AST.OpenAcc aenv' t>_R
                                           ->_R Sym (Data.Array.Accelerate.AST.N:OpenAcc[0]) <aenv'>_N <t>_N)
                                          (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenAcc
                                             @ f
                                             @ fa
                                             @ Data.Array.Accelerate.AST.OpenAcc
                                             @ aenv
                                             @ aenv'
                                             @ t
                                             $dApplicative
                                             $dSyntacticAcc
                                             (\ @ aenv1
                                                @ aenv'1
                                                @ (f1 :: * -> *)
                                                @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                @ a
                                                ($dApplicative1 :: GHC.Base.Applicative f1)
                                                ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                      fa1)[OneShot]
                                                (ds :: forall a'.
                                                       Data.Array.Accelerate.Array.Sugar.Arrays
                                                         a' =>
                                                       Data.Array.Accelerate.AST.Idx aenv1 a'
                                                       -> f1 (fa1 Data.Array.Accelerate.AST.OpenAcc aenv'1 a'))[OneShot]
                                                (eta2 :: Data.Array.Accelerate.AST.OpenAcc
                                                           aenv1 a) ->
                                              Data.Array.Accelerate.Trafo.Substitution.rebuildOpenAcc
                                                @ f1
                                                @ fa1
                                                @ aenv1
                                                @ aenv'1
                                                @ a
                                                $dApplicative1
                                                $dSyntacticAcc1
                                                ds
                                                eta2)
                                             eta
                                             eta1
                                               `cast`
                                             (Data.Array.Accelerate.AST.N:OpenAcc[0] <aenv>_N <t>_N))) -}
94ee62f11548f5e892339d5ad3836a9b
  rebuildPreOpenAcc ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
    -> f (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,U(U(U,U),U,U,U,U)><L,U(U,U,U)><L,C(C1(C1(U)))><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (f :: * -> *)
                            @ (fa :: (* -> * -> *) -> * -> * -> *)
                            @ (acc :: * -> * -> *)
                            @ aenv
                            @ aenv'
                            @ t
                            ($dApplicative :: GHC.Base.Applicative f)
                            ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                 fa)
                            (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                            (eta1 :: forall t'.
                                     Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                     Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
                            (eta2 :: Data.Array.Accelerate.AST.PreOpenAcc acc aenv t) ->
                          case eta2 of wild {
                            Data.Array.Accelerate.AST.Alet bndArrs $dArrays $dArrays1 a b
                            -> GHC.Base.<*>
                                 @ f
                                 $dApplicative
                                 @ (acc (aenv', bndArrs) t)
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (Data.Functor.<$>
                                    @ f
                                    @ (acc aenv' bndArrs)
                                    @ (acc (aenv', bndArrs) t
                                       -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                    (GHC.Base.$p1Applicative @ f $dApplicative)
                                    (Data.Array.Accelerate.AST.Alet
                                       @ acc
                                       @ aenv'
                                       @ t
                                       @ bndArrs
                                       $dArrays
                                       $dArrays1)
                                    (eta
                                       @ aenv
                                       @ aenv'
                                       @ f
                                       @ fa
                                       @ bndArrs
                                       $dApplicative
                                       $dSyntacticAcc
                                       eta1
                                       a))
                                 (eta
                                    @ (aenv, bndArrs)
                                    @ (aenv', bndArrs)
                                    @ f
                                    @ fa
                                    @ t
                                    $dApplicative
                                    $dSyntacticAcc
                                    (\ @ a'
                                       ($dArrays2 :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                                       (eta3 :: Data.Array.Accelerate.AST.Idx (aenv, bndArrs) a') ->
                                     Data.Array.Accelerate.Trafo.Substitution.shiftA
                                       @ f
                                       @ fa
                                       @ a'
                                       @ acc
                                       @ aenv
                                       @ aenv'
                                       @ bndArrs
                                       $dApplicative
                                       $dSyntacticAcc
                                       $dArrays2
                                       (\ @ aenv1
                                          @ aenv'1
                                          @ (f1 :: * -> *)
                                          @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                          @ a1
                                          ($dApplicative1 :: GHC.Base.Applicative f1)
                                          ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                fa1)[OneShot]
                                          (ds :: forall a'1.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a'1 =>
                                                 Data.Array.Accelerate.AST.Idx aenv1 a'1
                                                 -> f1 (fa1 acc aenv'1 a'1))[OneShot] ->
                                        eta
                                          @ aenv1
                                          @ aenv'1
                                          @ f1
                                          @ fa1
                                          @ a1
                                          $dApplicative1
                                          $dSyntacticAcc1
                                          ds)
                                       eta1
                                       eta3)
                                    b)
                            Data.Array.Accelerate.AST.Avar $dArrays ix
                            -> Data.Functor.<$>
                                 @ f
                                 @ (fa acc aenv' t)
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 (Data.Array.Accelerate.Trafo.Substitution.accOut
                                    @ fa
                                    $dSyntacticAcc
                                    @ t
                                    @ acc
                                    @ aenv'
                                    $dArrays)
                                 (eta1 @ t $dArrays ix)
                            Data.Array.Accelerate.AST.Atuple $dArrays $dIsProduct tup
                            -> Data.Functor.<$>
                                 @ f
                                 @ (Data.Array.Accelerate.Array.Sugar.Atuple
                                      (acc aenv') (Data.Array.Accelerate.Array.Sugar.TupleRepr t))
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 (Data.Array.Accelerate.AST.Atuple
                                    @ acc
                                    @ aenv'
                                    @ t
                                    $dArrays
                                    $dIsProduct)
                                 (Data.Array.Accelerate.Trafo.Substitution.rebuildAtup
                                    @ f
                                    @ fa
                                    @ acc
                                    @ aenv
                                    @ aenv'
                                    @ (Data.Array.Accelerate.Array.Sugar.TupleRepr t)
                                    $dApplicative
                                    $dSyntacticAcc
                                    (\ @ aenv1
                                       @ aenv'1
                                       @ (f1 :: * -> *)
                                       @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                       @ a
                                       ($dApplicative1 :: GHC.Base.Applicative f1)
                                       ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                             fa1)[OneShot]
                                       (ds :: forall a'.
                                              Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                              Data.Array.Accelerate.AST.Idx aenv1 a'
                                              -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                     eta
                                       @ aenv1
                                       @ aenv'1
                                       @ f1
                                       @ fa1
                                       @ a
                                       $dApplicative1
                                       $dSyntacticAcc1
                                       ds)
                                    eta1
                                    tup)
                            Data.Array.Accelerate.AST.Aprj arrs $dArrays $dIsProduct $dArrays1 tup a
                            -> Data.Functor.<$>
                                 @ f
                                 @ (acc aenv' arrs)
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 (Data.Array.Accelerate.AST.Aprj
                                    @ acc
                                    @ aenv'
                                    @ t
                                    @ arrs
                                    $dArrays
                                    $dIsProduct
                                    $dArrays1
                                    tup)
                                 (eta
                                    @ aenv
                                    @ aenv'
                                    @ f
                                    @ fa
                                    @ arrs
                                    $dApplicative
                                    $dSyntacticAcc
                                    eta1
                                    a)
                            Data.Array.Accelerate.AST.Apply arrs1 $dArrays $dArrays1 f1 a
                            -> GHC.Base.<*>
                                 @ f
                                 $dApplicative
                                 @ (acc aenv' arrs1)
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (Data.Functor.<$>
                                    @ f
                                    @ (Data.Array.Accelerate.AST.PreOpenAfun acc aenv' (arrs1 -> t))
                                    @ (acc aenv' arrs1
                                       -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                    (GHC.Base.$p1Applicative @ f $dApplicative)
                                    (Data.Array.Accelerate.AST.Apply
                                       @ acc
                                       @ aenv'
                                       @ t
                                       @ arrs1
                                       $dArrays
                                       $dArrays1)
                                    (Data.Array.Accelerate.Trafo.Substitution.rebuildAfun
                                       @ f
                                       @ fa
                                       @ acc
                                       @ aenv
                                       @ aenv'
                                       @ (arrs1 -> t)
                                       $dApplicative
                                       $dSyntacticAcc
                                       (\ @ aenv1
                                          @ aenv'1
                                          @ (f2 :: * -> *)
                                          @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                          @ a1
                                          ($dApplicative1 :: GHC.Base.Applicative f2)
                                          ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                fa1)[OneShot]
                                          (ds :: forall a'.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                 Data.Array.Accelerate.AST.Idx aenv1 a'
                                                 -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                        eta
                                          @ aenv1
                                          @ aenv'1
                                          @ f2
                                          @ fa1
                                          @ a1
                                          $dApplicative1
                                          $dSyntacticAcc1
                                          ds)
                                       eta1
                                       f1))
                                 (eta
                                    @ aenv
                                    @ aenv'
                                    @ f
                                    @ fa
                                    @ arrs1
                                    $dApplicative
                                    $dSyntacticAcc
                                    eta1
                                    a)
                            Data.Array.Accelerate.AST.Aforeign as asm $dArrays $dArrays1 $dForeign ff afun as1
                            -> Data.Functor.<$>
                                 @ f
                                 @ (acc aenv' as)
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 (Data.Array.Accelerate.AST.Aforeign
                                    @ acc
                                    @ aenv'
                                    @ t
                                    @ as
                                    @ asm
                                    $dArrays
                                    $dArrays1
                                    $dForeign
                                    ff
                                    afun)
                                 (eta
                                    @ aenv
                                    @ aenv'
                                    @ f
                                    @ fa
                                    @ as
                                    $dApplicative
                                    $dSyntacticAcc
                                    eta1
                                    as1)
                            Data.Array.Accelerate.AST.Acond $dArrays p t1 e
                            -> GHC.Base.<*>
                                 @ f
                                 $dApplicative
                                 @ (acc aenv' t)
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (GHC.Base.<*>
                                    @ f
                                    $dApplicative
                                    @ (acc aenv' t)
                                    @ (acc aenv' t
                                       -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                    (Data.Functor.<$>
                                       @ f
                                       @ (Data.Array.Accelerate.AST.PreExp acc aenv' GHC.Types.Bool)
                                       @ (acc aenv' t
                                          -> acc aenv' t
                                          -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                       (GHC.Base.$p1Applicative @ f $dApplicative)
                                       (Data.Array.Accelerate.AST.Acond @ acc @ aenv' @ t $dArrays)
                                       (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                          @ f
                                          @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                          @ fa
                                          @ acc
                                          @ ()
                                          @ ()
                                          @ aenv'
                                          @ aenv
                                          @ GHC.Types.Bool
                                          $dApplicative
                                          Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                          $dSyntacticAcc
                                          (\ @ aenv1
                                             @ aenv'1
                                             @ (f1 :: * -> *)
                                             @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                             @ a
                                             ($dApplicative1 :: GHC.Base.Applicative f1)
                                             ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                   fa1)[OneShot]
                                             (ds :: forall a'.
                                                    Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                    Data.Array.Accelerate.AST.Idx aenv1 a'
                                                    -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                           eta
                                             @ aenv1
                                             @ aenv'1
                                             @ f1
                                             @ fa1
                                             @ a
                                             $dApplicative1
                                             $dSyntacticAcc1
                                             ds)
                                          (\ @ t'
                                             ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                             (eta3 :: Data.Array.Accelerate.AST.Idx
                                                        () t')[OneShot] ->
                                           GHC.Base.pure
                                             @ f
                                             $dApplicative
                                             @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                  acc () aenv' t')
                                             eta3
                                               `cast`
                                             (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                       <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                          eta1
                                          p))
                                    (eta
                                       @ aenv
                                       @ aenv'
                                       @ f
                                       @ fa
                                       @ t
                                       $dApplicative
                                       $dSyntacticAcc
                                       eta1
                                       t1))
                                 (eta
                                    @ aenv
                                    @ aenv'
                                    @ f
                                    @ fa
                                    @ t
                                    $dApplicative
                                    $dSyntacticAcc
                                    eta1
                                    e)
                            Data.Array.Accelerate.AST.Awhile $dArrays p f1 a
                            -> GHC.Base.<*>
                                 @ f
                                 $dApplicative
                                 @ (acc aenv' t)
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (GHC.Base.<*>
                                    @ f
                                    $dApplicative
                                    @ (Data.Array.Accelerate.AST.PreOpenAfun acc aenv' (t -> t))
                                    @ (acc aenv' t
                                       -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                    (Data.Functor.<$>
                                       @ f
                                       @ (Data.Array.Accelerate.AST.PreOpenAfun
                                            acc
                                            aenv'
                                            (t
                                             -> Data.Array.Accelerate.Array.Sugar.Scalar
                                                  GHC.Types.Bool))
                                       @ (Data.Array.Accelerate.AST.PreOpenAfun acc aenv' (t -> t)
                                          -> acc aenv' t
                                          -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                       (GHC.Base.$p1Applicative @ f $dApplicative)
                                       (Data.Array.Accelerate.AST.Awhile @ acc @ aenv' @ t $dArrays)
                                       (Data.Array.Accelerate.Trafo.Substitution.rebuildAfun
                                          @ f
                                          @ fa
                                          @ acc
                                          @ aenv
                                          @ aenv'
                                          @ (t
                                             -> Data.Array.Accelerate.Array.Sugar.Scalar
                                                  GHC.Types.Bool)
                                          $dApplicative
                                          $dSyntacticAcc
                                          (\ @ aenv1
                                             @ aenv'1
                                             @ (f2 :: * -> *)
                                             @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                             @ a1
                                             ($dApplicative1 :: GHC.Base.Applicative f2)
                                             ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                   fa1)[OneShot]
                                             (ds :: forall a'.
                                                    Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                    Data.Array.Accelerate.AST.Idx aenv1 a'
                                                    -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                           eta
                                             @ aenv1
                                             @ aenv'1
                                             @ f2
                                             @ fa1
                                             @ a1
                                             $dApplicative1
                                             $dSyntacticAcc1
                                             ds)
                                          eta1
                                          p))
                                    (Data.Array.Accelerate.Trafo.Substitution.rebuildAfun
                                       @ f
                                       @ fa
                                       @ acc
                                       @ aenv
                                       @ aenv'
                                       @ (t -> t)
                                       $dApplicative
                                       $dSyntacticAcc
                                       (\ @ aenv1
                                          @ aenv'1
                                          @ (f2 :: * -> *)
                                          @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                          @ a1
                                          ($dApplicative1 :: GHC.Base.Applicative f2)
                                          ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                fa1)[OneShot]
                                          (ds :: forall a'.
                                                 Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                 Data.Array.Accelerate.AST.Idx aenv1 a'
                                                 -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                        eta
                                          @ aenv1
                                          @ aenv'1
                                          @ f2
                                          @ fa1
                                          @ a1
                                          $dApplicative1
                                          $dSyntacticAcc1
                                          ds)
                                       eta1
                                       f1))
                                 (eta
                                    @ aenv
                                    @ aenv'
                                    @ f
                                    @ fa
                                    @ t
                                    $dApplicative
                                    $dSyntacticAcc
                                    eta1
                                    a)
                            Data.Array.Accelerate.AST.Use $dArrays a
                            -> GHC.Base.pure
                                 @ f
                                 $dApplicative
                                 @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv' t)
                                 (Data.Array.Accelerate.AST.Use @ acc @ aenv' @ t $dArrays a)
                            Data.Array.Accelerate.AST.Unit e cobox0 $dElt e1
                            -> (Data.Functor.<$>
                                  @ f
                                  @ (Data.Array.Accelerate.AST.PreExp acc aenv' e)
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Scalar e))
                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                  (Data.Array.Accelerate.AST.$WUnit @ acc @ aenv' @ e $dElt)
                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                     @ f
                                     @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                     @ fa
                                     @ acc
                                     @ ()
                                     @ ()
                                     @ aenv'
                                     @ aenv
                                     @ e
                                     $dApplicative
                                     Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                     $dSyntacticAcc
                                     (\ @ aenv1
                                        @ aenv'1
                                        @ (f1 :: * -> *)
                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                        @ a
                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                              fa1)[OneShot]
                                        (ds :: forall a'.
                                               Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                               Data.Array.Accelerate.AST.Idx aenv1 a'
                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                      eta
                                        @ aenv1
                                        @ aenv'1
                                        @ f1
                                        @ fa1
                                        @ a
                                        $dApplicative1
                                        $dSyntacticAcc1
                                        ds)
                                     (\ @ t'
                                        ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                        (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                      GHC.Base.pure
                                        @ f
                                        $dApplicative
                                        @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                             acc () aenv' t')
                                        eta3
                                          `cast`
                                        (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                  <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                     eta1
                                     e1))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N)
                            Data.Array.Accelerate.AST.Reshape sh sh' e cobox0 $dShape $dShape1 $dElt e1 a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh')
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh'>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh')
                                      @ sh'
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh'>_N <sh'>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh')
                                      @ sh'
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh'>_N <sh'>_N) of cobox3 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox4 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox5 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox6 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh' e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (Data.Functor.<$>
                                     @ f
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' sh)
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh' e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     (Data.Array.Accelerate.AST.$WReshape
                                        @ acc
                                        @ aenv'
                                        @ sh
                                        @ sh'
                                        @ e
                                        $dShape
                                        $dShape1
                                        $dElt)
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ sh
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f1 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f1)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f1
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        e1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh' e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } } } } }
                            Data.Array.Accelerate.AST.Generate sh e cobox0 $dShape $dElt e1 f1
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh -> e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (Data.Functor.<$>
                                     @ f
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' sh)
                                     @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh -> e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     (Data.Array.Accelerate.AST.$WGenerate
                                        @ acc
                                        @ aenv'
                                        @ sh
                                        @ e
                                        $dShape
                                        $dElt)
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ sh
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        e1))
                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                     @ f
                                     @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                     @ fa
                                     @ acc
                                     @ ()
                                     @ ()
                                     @ aenv'
                                     @ aenv
                                     @ (sh -> e)
                                     $dApplicative
                                     Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                     $dSyntacticAcc
                                     (\ @ aenv1
                                        @ aenv'1
                                        @ (f2 :: * -> *)
                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                        @ a
                                        ($dApplicative1 :: GHC.Base.Applicative f2)
                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                              fa1)[OneShot]
                                        (ds :: forall a'.
                                               Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                               Data.Array.Accelerate.AST.Idx aenv1 a'
                                               -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                      eta
                                        @ aenv1
                                        @ aenv'1
                                        @ f2
                                        @ fa1
                                        @ a
                                        $dApplicative1
                                        $dSyntacticAcc1
                                        ds)
                                     (\ @ t'
                                        ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                        (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                      GHC.Base.pure
                                        @ f
                                        $dApplicative
                                        @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                             acc () aenv' t')
                                        eta3
                                          `cast`
                                        (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                  <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                     eta1
                                     f1))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Transform a b sh sh' cobox0 $dElt $dElt1 $dShape $dShape1 sh1 ix f1 a1
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh')
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh'>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh')
                                      @ sh'
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh'>_N <sh'>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh')
                                      @ sh'
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh'>_N <sh'>_N) of cobox3 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox4 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox5 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox6 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh a))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh' b))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreFun acc aenv' (a -> b))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh a)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh' b))
                                     (GHC.Base.<*>
                                        @ f
                                        $dApplicative
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh' -> sh))
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (a -> b)
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           sh a)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array sh' b))
                                        (Data.Functor.<$>
                                           @ f
                                           @ (Data.Array.Accelerate.AST.PreExp acc aenv' sh')
                                           @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh' -> sh)
                                              -> Data.Array.Accelerate.AST.PreFun acc aenv' (a -> b)
                                              -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                              sh a)
                                              -> Data.Array.Accelerate.AST.PreOpenAcc
                                                   acc
                                                   aenv'
                                                   (Data.Array.Accelerate.Array.Sugar.Array sh' b))
                                           (GHC.Base.$p1Applicative @ f $dApplicative)
                                           (Data.Array.Accelerate.AST.$WTransform
                                              @ acc
                                              @ aenv'
                                              @ a
                                              @ b
                                              @ sh
                                              @ sh'
                                              $dElt
                                              $dElt1
                                              $dShape
                                              $dShape1)
                                           (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                              @ f
                                              @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                              @ fa
                                              @ acc
                                              @ ()
                                              @ ()
                                              @ aenv'
                                              @ aenv
                                              @ sh'
                                              $dApplicative
                                              Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                              $dSyntacticAcc
                                              (\ @ aenv1
                                                 @ aenv'1
                                                 @ (f2 :: * -> *)
                                                 @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                 @ a2
                                                 ($dApplicative1 :: GHC.Base.Applicative f2)
                                                 ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                       fa1)[OneShot]
                                                 (ds :: forall a'.
                                                        Data.Array.Accelerate.Array.Sugar.Arrays
                                                          a' =>
                                                        Data.Array.Accelerate.AST.Idx aenv1 a'
                                                        -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                               eta
                                                 @ aenv1
                                                 @ aenv'1
                                                 @ f2
                                                 @ fa1
                                                 @ a2
                                                 $dApplicative1
                                                 $dSyntacticAcc1
                                                 ds)
                                              (\ @ t'
                                                 ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                              t')
                                                 (eta3 :: Data.Array.Accelerate.AST.Idx
                                                            () t')[OneShot] ->
                                               GHC.Base.pure
                                                 @ f
                                                 $dApplicative
                                                 @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                      acc () aenv' t')
                                                 eta3
                                                   `cast`
                                                 (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                           <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                              eta1
                                              sh1))
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (sh' -> sh)
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a2
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a2
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           ix))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ (a -> b)
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a2
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a2
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        f1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh a)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a1))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } } } } }
                            Data.Array.Accelerate.AST.Replicate sh sl slix e co cobox0 $dShape $dShape1 $dElt $dElt1 sl1 slix1 a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sl)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sl $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sl>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sl)
                                      @ sl
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sl $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sl>_N <sl>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sl)
                                      @ sl
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sl $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sl>_N <sl>_N) of cobox3 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox4 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox5 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox6 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sl e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (Data.Functor.<$>
                                     @ f
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' slix)
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sl e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     (Data.Array.Accelerate.AST.$WReplicate
                                        @ acc
                                        @ aenv'
                                        @ sh
                                        @ sl
                                        @ slix
                                        @ e
                                        @ co
                                        $dShape
                                        $dShape1
                                        $dElt
                                        $dElt1
                                        sl1)
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ slix
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f1 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f1)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f1
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        slix1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sl e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } } } } }
                            Data.Array.Accelerate.AST.Slice sh sl slix e co cobox0 $dShape $dShape1 $dElt $dElt1 sl1 a slix1
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sl)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sl $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sl>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sl)
                                      @ sl
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sl $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sl>_N <sl>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sl)
                                      @ sl
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sl $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sl>_N <sl>_N) of cobox3 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox4 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox5 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox6 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (Data.Array.Accelerate.AST.PreExp acc aenv' slix)
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sl e))
                                  (Data.Functor.<$>
                                     @ f
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' slix
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sl e))
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     (Data.Array.Accelerate.AST.$WSlice
                                        @ acc
                                        @ aenv'
                                        @ sh
                                        @ sl
                                        @ slix
                                        @ e
                                        @ co
                                        $dShape
                                        $dShape1
                                        $dElt
                                        $dElt1
                                        sl1)
                                     (eta
                                        @ aenv
                                        @ aenv'
                                        @ f
                                        @ fa
                                        @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                        $dApplicative
                                        $dSyntacticAcc
                                        eta1
                                        a))
                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                     @ f
                                     @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                     @ fa
                                     @ acc
                                     @ ()
                                     @ ()
                                     @ aenv'
                                     @ aenv
                                     @ slix
                                     $dApplicative
                                     Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                     $dSyntacticAcc
                                     (\ @ aenv1
                                        @ aenv'1
                                        @ (f1 :: * -> *)
                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                        @ a1
                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                              fa1)[OneShot]
                                        (ds :: forall a'.
                                               Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                               Data.Array.Accelerate.AST.Idx aenv1 a'
                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                      eta
                                        @ aenv1
                                        @ aenv'1
                                        @ f1
                                        @ fa1
                                        @ a1
                                        $dApplicative1
                                        $dSyntacticAcc1
                                        ds)
                                     (\ @ t'
                                        ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                        (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                      GHC.Base.pure
                                        @ f
                                        $dApplicative
                                        @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                             acc () aenv' t')
                                        eta3
                                          `cast`
                                        (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                  <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                     eta1
                                     slix1))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } } } } }
                            Data.Array.Accelerate.AST.Map sh e e' cobox0 $dShape $dElt $dElt1 f1 a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e'))
                                  (Data.Functor.<$>
                                     @ f
                                     @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e'))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e'))
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     (Data.Array.Accelerate.AST.$WMap
                                        @ acc
                                        @ aenv'
                                        @ sh
                                        @ e
                                        @ e'
                                        $dShape
                                        $dElt
                                        $dElt1)
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ (e -> e')
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        f1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.ZipWith sh e1 e2 e3 cobox0 $dShape $dElt $dElt1 $dElt2 f1 a1 a2
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e2))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e3))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e1))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e2)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e3))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreFun
                                             acc aenv' (e1 -> e2 -> e3))
                                        @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e1)
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           sh e2)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array sh e3))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WZipWith
                                           @ acc
                                           @ aenv'
                                           @ sh
                                           @ e1
                                           @ e2
                                           @ e3
                                           $dShape
                                           $dElt
                                           $dElt1
                                           $dElt2)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (e1 -> e2 -> e3)
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           f1))
                                     (eta
                                        @ aenv
                                        @ aenv'
                                        @ f
                                        @ fa
                                        @ (Data.Array.Accelerate.Array.Sugar.Array sh e1)
                                        $dApplicative
                                        $dSyntacticAcc
                                        eta1
                                        a1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh e2)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a2))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Fold sh e cobox0 $dShape $dElt f1 z a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                  (sh
                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                  e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' e)
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                        @ (Data.Array.Accelerate.AST.PreExp acc aenv' e
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           (sh
                                                            Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                           e)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WFold
                                           @ acc
                                           @ aenv'
                                           @ sh
                                           @ e
                                           $dShape
                                           $dElt)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (e -> e -> e)
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           f1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ e
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        z))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Fold1 sh e cobox0 $dShape $dElt f1 a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                  (sh
                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                  e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (Data.Functor.<$>
                                     @ f
                                     @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     (Data.Array.Accelerate.AST.$WFold1
                                        @ acc
                                        @ aenv'
                                        @ sh
                                        @ e
                                        $dShape
                                        $dElt)
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ (e -> e -> e)
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        f1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.FoldSeg sh e i cobox0 $dShape $dElt $dElt1 $dIsIntegral f1 z a s
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Segments i))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc
                                       aenv'
                                       (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                          e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Segments i)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                e))
                                     (GHC.Base.<*>
                                        @ f
                                        $dApplicative
                                        @ (Data.Array.Accelerate.AST.PreExp acc aenv' e)
                                        @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                        (sh
                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                        e)
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Segments
                                                           i)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array
                                                   (sh
                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                   e))
                                        (Data.Functor.<$>
                                           @ f
                                           @ (Data.Array.Accelerate.AST.PreFun
                                                acc aenv' (e -> e -> e))
                                           @ (Data.Array.Accelerate.AST.PreExp acc aenv' e
                                              -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                              (sh
                                                               Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                              e)
                                              -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Segments
                                                              i)
                                              -> Data.Array.Accelerate.AST.PreOpenAcc
                                                   acc
                                                   aenv'
                                                   (Data.Array.Accelerate.Array.Sugar.Array
                                                      (sh
                                                       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                      e))
                                           (GHC.Base.$p1Applicative @ f $dApplicative)
                                           (Data.Array.Accelerate.AST.$WFoldSeg
                                              @ acc
                                              @ aenv'
                                              @ sh
                                              @ e
                                              @ i
                                              $dShape
                                              $dElt
                                              $dElt1
                                              $dIsIntegral)
                                           (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                              @ f
                                              @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                              @ fa
                                              @ acc
                                              @ ()
                                              @ ()
                                              @ aenv'
                                              @ aenv
                                              @ (e -> e -> e)
                                              $dApplicative
                                              Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                              $dSyntacticAcc
                                              (\ @ aenv1
                                                 @ aenv'1
                                                 @ (f2 :: * -> *)
                                                 @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                 @ a1
                                                 ($dApplicative1 :: GHC.Base.Applicative f2)
                                                 ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                       fa1)[OneShot]
                                                 (ds :: forall a'.
                                                        Data.Array.Accelerate.Array.Sugar.Arrays
                                                          a' =>
                                                        Data.Array.Accelerate.AST.Idx aenv1 a'
                                                        -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                               eta
                                                 @ aenv1
                                                 @ aenv'1
                                                 @ f2
                                                 @ fa1
                                                 @ a1
                                                 $dApplicative1
                                                 $dSyntacticAcc1
                                                 ds)
                                              (\ @ t'
                                                 ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                              t')
                                                 (eta3 :: Data.Array.Accelerate.AST.Idx
                                                            () t')[OneShot] ->
                                               GHC.Base.pure
                                                 @ f
                                                 $dApplicative
                                                 @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                      acc () aenv' t')
                                                 eta3
                                                   `cast`
                                                 (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                           <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                              eta1
                                              f1))
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ e
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           z))
                                     (eta
                                        @ aenv
                                        @ aenv'
                                        @ f
                                        @ fa
                                        @ (Data.Array.Accelerate.Array.Sugar.Array
                                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                             e)
                                        $dApplicative
                                        $dSyntacticAcc
                                        eta1
                                        a))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Segments i)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     s))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Fold1Seg sh e i cobox0 $dShape $dElt $dElt1 $dIsIntegral f1 a s
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Segments i))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc
                                       aenv'
                                       (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                          e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Segments i)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                e))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                        @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                        (sh
                                                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                        e)
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Segments
                                                           i)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array
                                                   (sh
                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                   e))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WFold1Seg
                                           @ acc
                                           @ aenv'
                                           @ sh
                                           @ e
                                           @ i
                                           $dShape
                                           $dElt
                                           $dElt1
                                           $dIsIntegral)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (e -> e -> e)
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           f1))
                                     (eta
                                        @ aenv
                                        @ aenv'
                                        @ f
                                        @ fa
                                        @ (Data.Array.Accelerate.Array.Sugar.Array
                                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                             e)
                                        $dApplicative
                                        $dSyntacticAcc
                                        eta1
                                        a))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Segments i)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     s))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Scanl sh e cobox0 $dShape $dElt f1 z a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                  (sh
                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                  e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc
                                       aenv'
                                       (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                          e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' e)
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                e))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                        @ (Data.Array.Accelerate.AST.PreExp acc aenv' e
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           (sh
                                                            Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                           e)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array
                                                   (sh
                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                   e))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WScanl
                                           @ acc
                                           @ aenv'
                                           @ sh
                                           @ e
                                           $dShape
                                           $dElt)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (e -> e -> e)
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           f1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ e
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        z))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Scanl' sh e cobox0 $dShape $dElt f1 z a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                  (sh
                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                  e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc
                                       aenv'
                                       (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e,
                                        Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' e)
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                e,
                                              Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                        @ (Data.Array.Accelerate.AST.PreExp acc aenv' e
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           (sh
                                                            Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                           e)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array
                                                   (sh
                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                   e,
                                                 Data.Array.Accelerate.Array.Sugar.Array sh e))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WScanl'
                                           @ acc
                                           @ aenv'
                                           @ sh
                                           @ e
                                           $dShape
                                           $dElt)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (e -> e -> e)
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           f1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ e
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        z))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Scanl1 sh e cobox0 $dShape $dElt f1 a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                  (sh
                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                  e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc
                                       aenv'
                                       (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                          e))
                                  (Data.Functor.<$>
                                     @ f
                                     @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                e))
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     (Data.Array.Accelerate.AST.$WScanl1
                                        @ acc
                                        @ aenv'
                                        @ sh
                                        @ e
                                        $dShape
                                        $dElt)
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ (e -> e -> e)
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        f1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Scanr sh e cobox0 $dShape $dElt f1 z a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                  (sh
                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                  e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc
                                       aenv'
                                       (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                          e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' e)
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                e))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                        @ (Data.Array.Accelerate.AST.PreExp acc aenv' e
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           (sh
                                                            Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                           e)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array
                                                   (sh
                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                   e))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WScanr
                                           @ acc
                                           @ aenv'
                                           @ sh
                                           @ e
                                           $dShape
                                           $dElt)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (e -> e -> e)
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           f1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ e
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        z))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Scanr' sh e cobox0 $dShape $dElt f1 z a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                  (sh
                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                  e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc
                                       aenv'
                                       (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e,
                                        Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreExp acc aenv' e)
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                e,
                                              Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                        @ (Data.Array.Accelerate.AST.PreExp acc aenv' e
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           (sh
                                                            Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                           e)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array
                                                   (sh
                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                   e,
                                                 Data.Array.Accelerate.Array.Sugar.Array sh e))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WScanr'
                                           @ acc
                                           @ aenv'
                                           @ sh
                                           @ e
                                           $dShape
                                           $dElt)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (e -> e -> e)
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           f1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ e
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        z))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Scanr1 sh e cobox0 $dShape $dElt f1 a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                  (sh
                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                  e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc
                                       aenv'
                                       (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                          e))
                                  (Data.Functor.<$>
                                     @ f
                                     @ (Data.Array.Accelerate.AST.PreFun acc aenv' (e -> e -> e))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                     (sh
                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                     e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                e))
                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                     (Data.Array.Accelerate.AST.$WScanr1
                                        @ acc
                                        @ aenv'
                                        @ sh
                                        @ e
                                        $dShape
                                        $dElt)
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ (e -> e -> e)
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        f1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Permute sh sh' e cobox0 $dShape $dShape1 $dElt f1 a1 f2 a2
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh')
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh'>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh')
                                      @ sh'
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh'>_N <sh'>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh')
                                      @ sh'
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh'>_N <sh'>_N) of cobox3 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox4 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox5 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox6 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh' e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh -> sh'))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh' e))
                                     (GHC.Base.<*>
                                        @ f
                                        $dApplicative
                                        @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                        sh' e))
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh -> sh')
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           sh e)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array sh' e))
                                        (Data.Functor.<$>
                                           @ f
                                           @ (Data.Array.Accelerate.AST.PreFun
                                                acc aenv' (e -> e -> e))
                                           @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           sh' e)
                                              -> Data.Array.Accelerate.AST.PreFun
                                                   acc aenv' (sh -> sh')
                                              -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                              sh e)
                                              -> Data.Array.Accelerate.AST.PreOpenAcc
                                                   acc
                                                   aenv'
                                                   (Data.Array.Accelerate.Array.Sugar.Array sh' e))
                                           (GHC.Base.$p1Applicative @ f $dApplicative)
                                           (Data.Array.Accelerate.AST.$WPermute
                                              @ acc
                                              @ aenv'
                                              @ sh
                                              @ sh'
                                              @ e
                                              $dShape
                                              $dShape1
                                              $dElt)
                                           (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                              @ f
                                              @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                              @ fa
                                              @ acc
                                              @ ()
                                              @ ()
                                              @ aenv'
                                              @ aenv
                                              @ (e -> e -> e)
                                              $dApplicative
                                              Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                              $dSyntacticAcc
                                              (\ @ aenv1
                                                 @ aenv'1
                                                 @ (f4 :: * -> *)
                                                 @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                 @ a
                                                 ($dApplicative1 :: GHC.Base.Applicative f4)
                                                 ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                       fa1)[OneShot]
                                                 (ds :: forall a'.
                                                        Data.Array.Accelerate.Array.Sugar.Arrays
                                                          a' =>
                                                        Data.Array.Accelerate.AST.Idx aenv1 a'
                                                        -> f4 (fa1 acc aenv'1 a'))[OneShot] ->
                                               eta
                                                 @ aenv1
                                                 @ aenv'1
                                                 @ f4
                                                 @ fa1
                                                 @ a
                                                 $dApplicative1
                                                 $dSyntacticAcc1
                                                 ds)
                                              (\ @ t'
                                                 ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                              t')
                                                 (eta3 :: Data.Array.Accelerate.AST.Idx
                                                            () t')[OneShot] ->
                                               GHC.Base.pure
                                                 @ f
                                                 $dApplicative
                                                 @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                      acc () aenv' t')
                                                 eta3
                                                   `cast`
                                                 (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                           <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                              eta1
                                              f1))
                                        (eta
                                           @ aenv
                                           @ aenv'
                                           @ f
                                           @ fa
                                           @ (Data.Array.Accelerate.Array.Sugar.Array sh' e)
                                           $dApplicative
                                           $dSyntacticAcc
                                           eta1
                                           a1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ (sh -> sh')
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f4 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a
                                           ($dApplicative1 :: GHC.Base.Applicative f4)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f4 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f4
                                           @ fa1
                                           @ a
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        f2))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a2))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } } } } }
                            Data.Array.Accelerate.AST.Backpermute sh sh' e cobox0 $dShape $dShape1 $dElt sh1 f1 a
                            -> case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh')
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh'>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh')
                                      @ sh'
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh'>_N <sh'>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh')
                                      @ sh'
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh' $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh'>_N <sh'>_N) of cobox3 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox4 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox5 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox6 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh' e))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh' -> sh))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh' e))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreExp acc aenv' sh')
                                        @ (Data.Array.Accelerate.AST.PreFun acc aenv' (sh' -> sh)
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           sh e)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array sh' e))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WBackpermute
                                           @ acc
                                           @ aenv'
                                           @ sh
                                           @ sh'
                                           @ e
                                           $dShape
                                           $dShape1
                                           $dElt)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ sh'
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           sh1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                        @ f
                                        @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                        @ fa
                                        @ acc
                                        @ ()
                                        @ ()
                                        @ aenv'
                                        @ aenv
                                        @ (sh' -> sh)
                                        $dApplicative
                                        Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        (\ @ t'
                                           ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                           (eta3 :: Data.Array.Accelerate.AST.Idx () t')[OneShot] ->
                                         GHC.Base.pure
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                acc () aenv' t')
                                           eta3
                                             `cast`
                                           (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                     <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                        eta1
                                        f1))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } } } } }
                            Data.Array.Accelerate.AST.Stencil e e' sh stencil cobox0 $dElt $dElt1 $dStencil f1 b a
                            -> let {
                                 $dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh
                                 = Data.Array.Accelerate.AST.$p1Stencil @ sh @ e @ stencil $dStencil
                               } in
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e'))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreBoundary
                                          acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e'))
                                     (Data.Functor.<$>
                                        @ f
                                        @ (Data.Array.Accelerate.AST.PreFun
                                             acc aenv' (stencil -> e'))
                                        @ (Data.Array.Accelerate.AST.PreBoundary
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           sh e)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array sh e'))
                                        (GHC.Base.$p1Applicative @ f $dApplicative)
                                        (Data.Array.Accelerate.AST.$WStencil
                                           @ acc
                                           @ aenv'
                                           @ e
                                           @ e'
                                           @ sh
                                           @ stencil
                                           (Data.Array.Accelerate.AST.$p2Stencil
                                              @ sh
                                              @ e
                                              @ stencil
                                              $dStencil)
                                           $dElt1
                                           $dStencil)
                                        (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                           @ f
                                           @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                           @ fa
                                           @ acc
                                           @ ()
                                           @ ()
                                           @ aenv'
                                           @ aenv
                                           @ (stencil -> e')
                                           $dApplicative
                                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                           $dSyntacticAcc
                                           (\ @ aenv1
                                              @ aenv'1
                                              @ (f2 :: * -> *)
                                              @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                              @ a1
                                              ($dApplicative1 :: GHC.Base.Applicative f2)
                                              ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                    fa1)[OneShot]
                                              (ds :: forall a'.
                                                     Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                     Data.Array.Accelerate.AST.Idx aenv1 a'
                                                     -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                            eta
                                              @ aenv1
                                              @ aenv'1
                                              @ f2
                                              @ fa1
                                              @ a1
                                              $dApplicative1
                                              $dSyntacticAcc1
                                              ds)
                                           (\ @ t'
                                              ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt t')
                                              (eta3 :: Data.Array.Accelerate.AST.Idx
                                                         () t')[OneShot] ->
                                            GHC.Base.pure
                                              @ f
                                              $dApplicative
                                              @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                   acc () aenv' t')
                                              eta3
                                                `cast`
                                              (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                        <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                           eta1
                                           f1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildBoundary
                                        @ f
                                        @ fa
                                        @ acc
                                        @ aenv
                                        @ aenv'
                                        @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                        $dApplicative
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a1
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a1
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        eta1
                                        b))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh e)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } }
                            Data.Array.Accelerate.AST.Stencil2 a b c sh stencil1 stencil2 cobox0 $dElt $dElt1 $dElt2 $dStencil $dStencil1 f1 b1 a1 b2 a2
                            -> let {
                                 $dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh
                                 = Data.Array.Accelerate.AST.$p1Stencil
                                     @ sh
                                     @ b
                                     @ stencil2
                                     $dStencil1
                               } in
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox1 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox2 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                               let {
                                 $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape sh
                                 = Data.Array.Accelerate.AST.$p1Stencil
                                     @ sh
                                     @ a
                                     @ stencil1
                                     $dStencil
                               } in
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                              sh>_N <sh>_N) of cobox4 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                                      @ sh
                                      (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                              sh>_N <sh>_N) of cobox5 { DEFAULT ->
                               case GHC.Types.HEq_sc
                                      @ GHC.Types.*
                                      @ GHC.Types.*
                                      @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                                      @ Data.Array.Accelerate.Array.Sugar.Z
                                      (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape1)
                                        `cast`
                                      (Data.Type.Equality.N:~[0]
                                           <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                              sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox6 { DEFAULT ->
                               (GHC.Base.<*>
                                  @ f
                                  $dApplicative
                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh b))
                                  @ (Data.Array.Accelerate.AST.PreOpenAcc
                                       acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh c))
                                  (GHC.Base.<*>
                                     @ f
                                     $dApplicative
                                     @ (Data.Array.Accelerate.AST.PreBoundary
                                          acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh b))
                                     @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh b)
                                        -> Data.Array.Accelerate.AST.PreOpenAcc
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh c))
                                     (GHC.Base.<*>
                                        @ f
                                        $dApplicative
                                        @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array sh a))
                                        @ (Data.Array.Accelerate.AST.PreBoundary
                                             acc
                                             aenv'
                                             (Data.Array.Accelerate.Array.Sugar.Array sh b)
                                           -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           sh b)
                                           -> Data.Array.Accelerate.AST.PreOpenAcc
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array sh c))
                                        (GHC.Base.<*>
                                           @ f
                                           $dApplicative
                                           @ (Data.Array.Accelerate.AST.PreBoundary
                                                acc
                                                aenv'
                                                (Data.Array.Accelerate.Array.Sugar.Array sh a))
                                           @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                           sh a)
                                              -> Data.Array.Accelerate.AST.PreBoundary
                                                   acc
                                                   aenv'
                                                   (Data.Array.Accelerate.Array.Sugar.Array sh b)
                                              -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                              sh b)
                                              -> Data.Array.Accelerate.AST.PreOpenAcc
                                                   acc
                                                   aenv'
                                                   (Data.Array.Accelerate.Array.Sugar.Array sh c))
                                           (Data.Functor.<$>
                                              @ f
                                              @ (Data.Array.Accelerate.AST.PreFun
                                                   acc aenv' (stencil1 -> stencil2 -> c))
                                              @ (Data.Array.Accelerate.AST.PreBoundary
                                                   acc
                                                   aenv'
                                                   (Data.Array.Accelerate.Array.Sugar.Array sh a)
                                                 -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                                 sh a)
                                                 -> Data.Array.Accelerate.AST.PreBoundary
                                                      acc
                                                      aenv'
                                                      (Data.Array.Accelerate.Array.Sugar.Array sh b)
                                                 -> acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                                 sh b)
                                                 -> Data.Array.Accelerate.AST.PreOpenAcc
                                                      acc
                                                      aenv'
                                                      (Data.Array.Accelerate.Array.Sugar.Array
                                                         sh c))
                                              (GHC.Base.$p1Applicative @ f $dApplicative)
                                              (Data.Array.Accelerate.AST.$WStencil2
                                                 @ acc
                                                 @ aenv'
                                                 @ a
                                                 @ b
                                                 @ c
                                                 @ sh
                                                 @ stencil1
                                                 @ stencil2
                                                 (Data.Array.Accelerate.AST.$p2Stencil
                                                    @ sh
                                                    @ a
                                                    @ stencil1
                                                    $dStencil)
                                                 (Data.Array.Accelerate.AST.$p2Stencil
                                                    @ sh
                                                    @ b
                                                    @ stencil2
                                                    $dStencil1)
                                                 $dElt2
                                                 $dStencil
                                                 $dStencil1)
                                              (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                                 @ f
                                                 @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                 @ fa
                                                 @ acc
                                                 @ ()
                                                 @ ()
                                                 @ aenv'
                                                 @ aenv
                                                 @ (stencil1 -> stencil2 -> c)
                                                 $dApplicative
                                                 Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                                                 $dSyntacticAcc
                                                 (\ @ aenv1
                                                    @ aenv'1
                                                    @ (f2 :: * -> *)
                                                    @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                    @ a4
                                                    ($dApplicative1 :: GHC.Base.Applicative f2)
                                                    ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                          fa1)[OneShot]
                                                    (ds :: forall a'.
                                                           Data.Array.Accelerate.Array.Sugar.Arrays
                                                             a' =>
                                                           Data.Array.Accelerate.AST.Idx aenv1 a'
                                                           -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                  eta
                                                    @ aenv1
                                                    @ aenv'1
                                                    @ f2
                                                    @ fa1
                                                    @ a4
                                                    $dApplicative1
                                                    $dSyntacticAcc1
                                                    ds)
                                                 (\ @ t'
                                                    ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                 t')
                                                    (eta3 :: Data.Array.Accelerate.AST.Idx
                                                               () t')[OneShot] ->
                                                  GHC.Base.pure
                                                    @ f
                                                    $dApplicative
                                                    @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                                         acc () aenv' t')
                                                    eta3
                                                      `cast`
                                                    (Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                                              <acc>_P <()>_N <aenv'>_P) <t'>_N))
                                                 eta1
                                                 f1))
                                           (Data.Array.Accelerate.Trafo.Substitution.rebuildBoundary
                                              @ f
                                              @ fa
                                              @ acc
                                              @ aenv
                                              @ aenv'
                                              @ (Data.Array.Accelerate.Array.Sugar.Array sh a)
                                              $dApplicative
                                              $dSyntacticAcc
                                              (\ @ aenv1
                                                 @ aenv'1
                                                 @ (f2 :: * -> *)
                                                 @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                 @ a4
                                                 ($dApplicative1 :: GHC.Base.Applicative f2)
                                                 ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                       fa1)[OneShot]
                                                 (ds :: forall a'.
                                                        Data.Array.Accelerate.Array.Sugar.Arrays
                                                          a' =>
                                                        Data.Array.Accelerate.AST.Idx aenv1 a'
                                                        -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                               eta
                                                 @ aenv1
                                                 @ aenv'1
                                                 @ f2
                                                 @ fa1
                                                 @ a4
                                                 $dApplicative1
                                                 $dSyntacticAcc1
                                                 ds)
                                              eta1
                                              b1))
                                        (eta
                                           @ aenv
                                           @ aenv'
                                           @ f
                                           @ fa
                                           @ (Data.Array.Accelerate.Array.Sugar.Array sh a)
                                           $dApplicative
                                           $dSyntacticAcc
                                           eta1
                                           a1))
                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildBoundary
                                        @ f
                                        @ fa
                                        @ acc
                                        @ aenv
                                        @ aenv'
                                        @ (Data.Array.Accelerate.Array.Sugar.Array sh b)
                                        $dApplicative
                                        $dSyntacticAcc
                                        (\ @ aenv1
                                           @ aenv'1
                                           @ (f2 :: * -> *)
                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                           @ a4
                                           ($dApplicative1 :: GHC.Base.Applicative f2)
                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                 fa1)[OneShot]
                                           (ds :: forall a'.
                                                  Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                                  Data.Array.Accelerate.AST.Idx aenv1 a'
                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                         eta
                                           @ aenv1
                                           @ aenv'1
                                           @ f2
                                           @ fa1
                                           @ a4
                                           $dApplicative1
                                           $dSyntacticAcc1
                                           ds)
                                        eta1
                                        b2))
                                  (eta
                                     @ aenv
                                     @ aenv'
                                     @ f
                                     @ fa
                                     @ (Data.Array.Accelerate.Array.Sugar.Array sh b)
                                     $dApplicative
                                     $dSyntacticAcc
                                     eta1
                                     a2))
                                 `cast`
                               (<f>_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_N <aenv'>_N (Sym cobox0))_N) } } } } } } }) -}
8073eefe3779996f352cf9288e187da8
  rebuildPreOpenExp ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t' -> f (fe acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> f (Data.Array.Accelerate.AST.PreOpenExp acc env' aenv' t)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,U(U(U,U),U,U,U,U)><L,U(C(C1(U)),C(U),C(C1(U)),A)><L,U><L,C(C1(C1(U)))><L,C(C1(U))><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (f :: * -> *)
                                          @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                                   -> * -> * -> * -> *)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ (acc :: * -> * -> *)
                                          @ env
                                          @ env'
                                          @ aenv'
                                          @ aenv
                                          @ t
                                          ($dApplicative :: GHC.Base.Applicative f)
                                          ($dSyntacticExp :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
                                                               fe)
                                          ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                               fa)
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc
                                                    acc)
                                          (eta1 :: forall t'.
                                                   Data.Array.Accelerate.Array.Sugar.Elt t' =>
                                                   Data.Array.Accelerate.AST.Idx env t'
                                                   -> f (fe acc env' aenv' t'))
                                          (eta2 :: forall t'.
                                                   Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                                   Data.Array.Accelerate.AST.Idx aenv t'
                                                   -> f (fa acc aenv' t'))
                                          (eta3 :: Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env aenv t) ->
                                        case eta3 of wild {
                                          Data.Array.Accelerate.AST.Let bnd_t $dElt $dElt1 a b
                                          -> GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc (env', bnd_t) aenv' t)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Functor.<$>
                                                  @ f
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' bnd_t)
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc (env', bnd_t) aenv' t
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                                  (Data.Array.Accelerate.AST.Let
                                                     @ acc
                                                     @ env'
                                                     @ aenv'
                                                     @ t
                                                     @ bnd_t
                                                     $dElt
                                                     $dElt1)
                                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                     @ f
                                                     @ fe
                                                     @ fa
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ aenv
                                                     @ bnd_t
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dSyntacticAcc
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f1 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a1
                                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f1
                                                        @ fa1
                                                        @ a1
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta2
                                                     a))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ (env, bnd_t)
                                                  @ (env', bnd_t)
                                                  @ aenv'
                                                  @ aenv
                                                  @ t
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a1
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a1
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  (\ @ t'
                                                     ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                  t')
                                                     (eta4 :: Data.Array.Accelerate.AST.Idx
                                                                (env, bnd_t) t')[OneShot] ->
                                                   Data.Array.Accelerate.Trafo.Substitution.shiftE
                                                     @ f
                                                     @ fe
                                                     @ t'
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ bnd_t
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dElt2
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f1 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a1
                                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f1
                                                        @ fa1
                                                        @ a1
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta4)
                                                  eta2
                                                  b)
                                          Data.Array.Accelerate.AST.Var $dElt ix
                                          -> Data.Functor.<$>
                                               @ f
                                               @ (fe acc env' aenv' t)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.Trafo.Substitution.expOut
                                                  @ fe
                                                  $dSyntacticExp
                                                  @ t
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  $dElt)
                                               (eta1 @ t $dElt ix)
                                          Data.Array.Accelerate.AST.Foreign asm x $dForeign $dElt $dElt1 ff f1 e
                                          -> Data.Functor.<$>
                                               @ f
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' x)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.Foreign
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  @ asm
                                                  @ x
                                                  $dForeign
                                                  $dElt
                                                  $dElt1
                                                  ff
                                                  f1)
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ x
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f2 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f2)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f2
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  e)
                                          Data.Array.Accelerate.AST.Const $dElt c
                                          -> GHC.Base.pure
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Array.Accelerate.AST.Const
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  $dElt
                                                  c)
                                          Data.Array.Accelerate.AST.Tuple $dElt $dIsProduct tup
                                          -> Data.Functor.<$>
                                               @ f
                                               @ (Data.Array.Accelerate.Array.Sugar.Tuple
                                                    (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv')
                                                    (Data.Array.Accelerate.Array.Sugar.TupleRepr t))
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.Tuple
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  $dElt
                                                  $dIsProduct)
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildTup
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ (Data.Array.Accelerate.Array.Sugar.TupleRepr t)
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  tup)
                                          Data.Array.Accelerate.AST.Prj t1 $dElt $dIsProduct $dElt1 tup e
                                          -> Data.Functor.<$>
                                               @ f
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t1)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.Prj
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  @ t1
                                                  $dElt
                                                  $dIsProduct
                                                  $dElt1
                                                  tup)
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ t1
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  e)
                                          Data.Array.Accelerate.AST.IndexNil cobox0
                                          -> (GHC.Base.pure
                                                @ f
                                                $dApplicative
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc
                                                     env'
                                                     aenv'
                                                     Data.Array.Accelerate.Array.Sugar.Z)
                                                (Data.Array.Accelerate.AST.$WIndexNil
                                                   @ acc
                                                   @ env'
                                                   @ aenv'))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.AST.PreOpenExp
                                                       <acc>_N <env'>_N <aenv'>_N (Sym cobox0))_N)
                                          Data.Array.Accelerate.AST.IndexCons sl a cobox0 $dSlice $dElt sh sz
                                          -> let {
                                               $dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                               sl)
                                               = Data.Array.Accelerate.Array.Sugar.$p4Slice
                                                   @ sl
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                                         sl>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                                         sl>_N) of cobox2 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                                             let {
                                               $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                                             (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                sl)
                                               = Data.Array.Accelerate.Array.Sugar.$p3Slice
                                                   @ sl
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                                         sl>_N) of cobox4 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                                         sl>_N) of cobox5 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox6 { DEFAULT ->
                                             let {
                                               $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                                                             (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                sl)
                                               = Data.Array.Accelerate.Array.Sugar.$p2Slice
                                                   @ sl
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                                         sl>_N) of cobox7 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                                         sl>_N) of cobox8 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox9 { DEFAULT ->
                                             (GHC.Base.<*>
                                                @ f
                                                $dApplicative
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env' aenv' a)
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc
                                                     env'
                                                     aenv'
                                                     (sl Data.Array.Accelerate.Array.Sugar.:. a))
                                                (Data.Functor.<$>
                                                   @ f
                                                   @ (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env' aenv' sl)
                                                   @ (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env' aenv' a
                                                      -> Data.Array.Accelerate.AST.PreOpenExp
                                                           acc
                                                           env'
                                                           aenv'
                                                           (sl
                                                            Data.Array.Accelerate.Array.Sugar.:. a))
                                                   (GHC.Base.$p1Applicative @ f $dApplicative)
                                                   (Data.Array.Accelerate.AST.$WIndexCons
                                                      @ acc
                                                      @ env'
                                                      @ aenv'
                                                      @ sl
                                                      @ a
                                                      $dSlice
                                                      $dElt)
                                                   (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                      @ f
                                                      @ fe
                                                      @ fa
                                                      @ acc
                                                      @ env
                                                      @ env'
                                                      @ aenv'
                                                      @ aenv
                                                      @ sl
                                                      $dApplicative
                                                      $dSyntacticExp
                                                      $dSyntacticAcc
                                                      (\ @ aenv1
                                                         @ aenv'1
                                                         @ (f1 :: * -> *)
                                                         @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                         @ a1
                                                         ($dApplicative1 :: GHC.Base.Applicative f1)
                                                         ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                               fa1)[OneShot]
                                                         (ds :: forall a'.
                                                                Data.Array.Accelerate.Array.Sugar.Arrays
                                                                  a' =>
                                                                Data.Array.Accelerate.AST.Idx
                                                                  aenv1 a'
                                                                -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                       eta
                                                         @ aenv1
                                                         @ aenv'1
                                                         @ f1
                                                         @ fa1
                                                         @ a1
                                                         $dApplicative1
                                                         $dSyntacticAcc1
                                                         ds)
                                                      eta1
                                                      eta2
                                                      sh))
                                                (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                   @ f
                                                   @ fe
                                                   @ fa
                                                   @ acc
                                                   @ env
                                                   @ env'
                                                   @ aenv'
                                                   @ aenv
                                                   @ a
                                                   $dApplicative
                                                   $dSyntacticExp
                                                   $dSyntacticAcc
                                                   (\ @ aenv1
                                                      @ aenv'1
                                                      @ (f1 :: * -> *)
                                                      @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                      @ a1
                                                      ($dApplicative1 :: GHC.Base.Applicative f1)
                                                      ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                            fa1)[OneShot]
                                                      (ds :: forall a'.
                                                             Data.Array.Accelerate.Array.Sugar.Arrays
                                                               a' =>
                                                             Data.Array.Accelerate.AST.Idx aenv1 a'
                                                             -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                    eta
                                                      @ aenv1
                                                      @ aenv'1
                                                      @ f1
                                                      @ fa1
                                                      @ a1
                                                      $dApplicative1
                                                      $dSyntacticAcc1
                                                      ds)
                                                   eta1
                                                   eta2
                                                   sz))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.AST.PreOpenExp
                                                       <acc>_N
                                                       <env'>_N
                                                       <aenv'>_N
                                                       (Sym cobox0))_N) } } } } } } } } }
                                          Data.Array.Accelerate.AST.IndexHead sl $dSlice $dElt sh
                                          -> let {
                                               $dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                               sl)
                                               = Data.Array.Accelerate.Array.Sugar.$p4Slice
                                                   @ sl
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                                         sl>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                                         sl>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            sl)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox2 { DEFAULT ->
                                             let {
                                               $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                                             (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                sl)
                                               = Data.Array.Accelerate.Array.Sugar.$p3Slice
                                                   @ sl
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                                         sl>_N) of cobox3 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                                         sl>_N) of cobox4 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            sl)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox5 { DEFAULT ->
                                             let {
                                               $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                                                             (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                sl)
                                               = Data.Array.Accelerate.Array.Sugar.$p2Slice
                                                   @ sl
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                                         sl>_N) of cobox6 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl))
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         sl)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                                         sl>_N) of cobox7 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            sl)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               sl)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox8 { DEFAULT ->
                                             Data.Functor.<$>
                                               @ f
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc
                                                    env'
                                                    aenv'
                                                    (sl Data.Array.Accelerate.Array.Sugar.:. t))
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.IndexHead
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  @ sl
                                                  $dSlice
                                                  $dElt)
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ (sl Data.Array.Accelerate.Array.Sugar.:. t)
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  sh) } } } } } } } } }
                                          Data.Array.Accelerate.AST.IndexTail a $dSlice $dElt sh
                                          -> let {
                                               $dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                               t)
                                               = Data.Array.Accelerate.Array.Sugar.$p4Slice
                                                   @ t
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            t))
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         t)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            t)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                                        t>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            t))
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         t)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            t)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                                        t>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            t))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                            t)
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.FullShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox2 { DEFAULT ->
                                             let {
                                               $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                                             (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                t)
                                               = Data.Array.Accelerate.Array.Sugar.$p3Slice
                                                   @ t
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            t))
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         t)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            t)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                                        t>_N) of cobox3 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            t))
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         t)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            t)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                                        t>_N) of cobox4 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            t))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                            t)
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox5 { DEFAULT ->
                                             let {
                                               $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                                                             (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                t)
                                               = Data.Array.Accelerate.Array.Sugar.$p2Slice
                                                   @ t
                                                   $dSlice
                                             } in
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            t))
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         t)
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            t)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                                        t>_N) of cobox6 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            t))
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         t)
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            t)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                                        t>_N) of cobox7 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            t))
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                            t)
                                                       $dShape2)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                               t)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox8 { DEFAULT ->
                                             Data.Functor.<$>
                                               @ f
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc
                                                    env'
                                                    aenv'
                                                    (t Data.Array.Accelerate.Array.Sugar.:. a))
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.IndexTail
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  @ a
                                                  $dSlice
                                                  $dElt)
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ (t Data.Array.Accelerate.Array.Sugar.:. a)
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a1
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a1
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  sh) } } } } } } } } }
                                          Data.Array.Accelerate.AST.IndexAny sh cobox0 $dShape
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         sh)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         sh)
                                                    @ sh
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            sh>_N <sh>_N) of cobox2 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         sh)
                                                    @ sh
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            sh>_N <sh>_N) of cobox3 { DEFAULT ->
                                             (GHC.Base.pure
                                                @ f
                                                $dApplicative
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc
                                                     env'
                                                     aenv'
                                                     (Data.Array.Accelerate.Array.Sugar.Any sh))
                                                (Data.Array.Accelerate.AST.IndexAny
                                                   @ acc
                                                   @ env'
                                                   @ aenv'
                                                   @ (Data.Array.Accelerate.Array.Sugar.Any sh)
                                                   @ sh
                                                   @~ <Data.Array.Accelerate.Array.Sugar.Any sh>_N
                                                   $dShape))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.AST.PreOpenExp
                                                       <acc>_N
                                                       <env'>_N
                                                       <aenv'>_N
                                                       (Sym cobox0))_N) } } }
                                          Data.Array.Accelerate.AST.IndexSlice sh slix co $dShape $dShape1 $dElt x ix sh1
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         t)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ t
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            t>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ t
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            t>_N <t>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ t
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            t>_N <t>_N) of cobox2 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         sh)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         sh)
                                                    @ sh
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            sh>_N <sh>_N) of cobox4 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         sh)
                                                    @ sh
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            sh>_N <sh>_N) of cobox5 { DEFAULT ->
                                             GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' sh)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Functor.<$>
                                                  @ f
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' slix)
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' sh
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                                  (Data.Array.Accelerate.AST.IndexSlice
                                                     @ acc
                                                     @ env'
                                                     @ aenv'
                                                     @ t
                                                     @ sh
                                                     @ slix
                                                     @ co
                                                     $dShape
                                                     $dShape1
                                                     $dElt
                                                     x)
                                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                     @ f
                                                     @ fe
                                                     @ fa
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ aenv
                                                     @ slix
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dSyntacticAcc
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f1 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a
                                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f1
                                                        @ fa1
                                                        @ a
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta2
                                                     ix))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ sh
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  sh1) } } } } } }
                                          Data.Array.Accelerate.AST.IndexFull sl slix co $dShape $dShape1 $dElt x ix sl1
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         sl)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ sl
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            sl>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         sl)
                                                    @ sl
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ sl
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            sl>_N <sl>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         sl)
                                                    @ sl
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ sl
                                                       $dShape1)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            sl>_N <sl>_N) of cobox2 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         t)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            t>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            t>_N <t>_N) of cobox4 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            t>_N <t>_N) of cobox5 { DEFAULT ->
                                             GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' sl)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Functor.<$>
                                                  @ f
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' slix)
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' sl
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                                  (Data.Array.Accelerate.AST.IndexFull
                                                     @ acc
                                                     @ env'
                                                     @ aenv'
                                                     @ t
                                                     @ sl
                                                     @ slix
                                                     @ co
                                                     $dShape
                                                     $dShape1
                                                     $dElt
                                                     x)
                                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                     @ f
                                                     @ fe
                                                     @ fa
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ aenv
                                                     @ slix
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dSyntacticAcc
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f1 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a
                                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f1
                                                        @ fa1
                                                        @ a
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta2
                                                     ix))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ sl
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  sl1) } } } } } }
                                          Data.Array.Accelerate.AST.ToIndex sh cobox0 $dShape sh1 ix
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         sh)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         sh)
                                                    @ sh
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            sh>_N <sh>_N) of cobox2 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         sh)
                                                    @ sh
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ sh
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            sh>_N <sh>_N) of cobox3 { DEFAULT ->
                                             (GHC.Base.<*>
                                                @ f
                                                $dApplicative
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env' aenv' sh)
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env' aenv' GHC.Types.Int)
                                                (Data.Functor.<$>
                                                   @ f
                                                   @ (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env' aenv' sh)
                                                   @ (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env' aenv' sh
                                                      -> Data.Array.Accelerate.AST.PreOpenExp
                                                           acc env' aenv' GHC.Types.Int)
                                                   (GHC.Base.$p1Applicative @ f $dApplicative)
                                                   (Data.Array.Accelerate.AST.$WToIndex
                                                      @ acc
                                                      @ env'
                                                      @ aenv'
                                                      @ sh
                                                      $dShape)
                                                   (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                      @ f
                                                      @ fe
                                                      @ fa
                                                      @ acc
                                                      @ env
                                                      @ env'
                                                      @ aenv'
                                                      @ aenv
                                                      @ sh
                                                      $dApplicative
                                                      $dSyntacticExp
                                                      $dSyntacticAcc
                                                      (\ @ aenv1
                                                         @ aenv'1
                                                         @ (f1 :: * -> *)
                                                         @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                         @ a
                                                         ($dApplicative1 :: GHC.Base.Applicative f1)
                                                         ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                               fa1)[OneShot]
                                                         (ds :: forall a'.
                                                                Data.Array.Accelerate.Array.Sugar.Arrays
                                                                  a' =>
                                                                Data.Array.Accelerate.AST.Idx
                                                                  aenv1 a'
                                                                -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                       eta
                                                         @ aenv1
                                                         @ aenv'1
                                                         @ f1
                                                         @ fa1
                                                         @ a
                                                         $dApplicative1
                                                         $dSyntacticAcc1
                                                         ds)
                                                      eta1
                                                      eta2
                                                      sh1))
                                                (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                   @ f
                                                   @ fe
                                                   @ fa
                                                   @ acc
                                                   @ env
                                                   @ env'
                                                   @ aenv'
                                                   @ aenv
                                                   @ sh
                                                   $dApplicative
                                                   $dSyntacticExp
                                                   $dSyntacticAcc
                                                   (\ @ aenv1
                                                      @ aenv'1
                                                      @ (f1 :: * -> *)
                                                      @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                      @ a
                                                      ($dApplicative1 :: GHC.Base.Applicative f1)
                                                      ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                            fa1)[OneShot]
                                                      (ds :: forall a'.
                                                             Data.Array.Accelerate.Array.Sugar.Arrays
                                                               a' =>
                                                             Data.Array.Accelerate.AST.Idx aenv1 a'
                                                             -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                    eta
                                                      @ aenv1
                                                      @ aenv'1
                                                      @ f1
                                                      @ fa1
                                                      @ a
                                                      $dApplicative1
                                                      $dSyntacticAcc1
                                                      ds)
                                                   eta1
                                                   eta2
                                                   ix))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.AST.PreOpenExp
                                                       <acc>_N
                                                       <env'>_N
                                                       <aenv'>_N
                                                       (Sym cobox0))_N) } } }
                                          Data.Array.Accelerate.AST.FromIndex $dShape sh ix
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         t)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            t>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            t>_N <t>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            t>_N <t>_N) of cobox2 { DEFAULT ->
                                             GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' GHC.Types.Int)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Functor.<$>
                                                  @ f
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' t)
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' GHC.Types.Int
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                                  (Data.Array.Accelerate.AST.FromIndex
                                                     @ acc
                                                     @ env'
                                                     @ aenv'
                                                     @ t
                                                     $dShape)
                                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                     @ f
                                                     @ fe
                                                     @ fa
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ aenv
                                                     @ t
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dSyntacticAcc
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f1 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a
                                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f1
                                                        @ fa1
                                                        @ a
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta2
                                                     sh))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ GHC.Types.Int
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  ix) } } }
                                          Data.Array.Accelerate.AST.Cond $dElt p t1 e
                                          -> GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.<*>
                                                  @ f
                                                  $dApplicative
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' t)
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' t
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (Data.Functor.<$>
                                                     @ f
                                                     @ (Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' GHC.Types.Bool)
                                                     @ (Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t
                                                        -> Data.Array.Accelerate.AST.PreOpenExp
                                                             acc env' aenv' t
                                                        -> Data.Array.Accelerate.AST.PreOpenExp
                                                             acc env' aenv' t)
                                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                                     (Data.Array.Accelerate.AST.Cond
                                                        @ acc
                                                        @ env'
                                                        @ aenv'
                                                        @ t
                                                        $dElt)
                                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                        @ f
                                                        @ fe
                                                        @ fa
                                                        @ acc
                                                        @ env
                                                        @ env'
                                                        @ aenv'
                                                        @ aenv
                                                        @ GHC.Types.Bool
                                                        $dApplicative
                                                        $dSyntacticExp
                                                        $dSyntacticAcc
                                                        (\ @ aenv1
                                                           @ aenv'1
                                                           @ (f1 :: * -> *)
                                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                           @ a
                                                           ($dApplicative1 :: GHC.Base.Applicative
                                                                                f1)
                                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                                 fa1)[OneShot]
                                                           (ds :: forall a'.
                                                                  Data.Array.Accelerate.Array.Sugar.Arrays
                                                                    a' =>
                                                                  Data.Array.Accelerate.AST.Idx
                                                                    aenv1 a'
                                                                  -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                         eta
                                                           @ aenv1
                                                           @ aenv'1
                                                           @ f1
                                                           @ fa1
                                                           @ a
                                                           $dApplicative1
                                                           $dSyntacticAcc1
                                                           ds)
                                                        eta1
                                                        eta2
                                                        p))
                                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                     @ f
                                                     @ fe
                                                     @ fa
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ aenv
                                                     @ t
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dSyntacticAcc
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f1 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a
                                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f1
                                                        @ fa1
                                                        @ a
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta2
                                                     t1))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ t
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  e)
                                          Data.Array.Accelerate.AST.While $dElt p f1 x
                                          -> GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.<*>
                                                  @ f
                                                  $dApplicative
                                                  @ (Data.Array.Accelerate.AST.PreOpenFun
                                                       acc env' aenv' (t -> t))
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' t
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (Data.Functor.<$>
                                                     @ f
                                                     @ (Data.Array.Accelerate.AST.PreOpenFun
                                                          acc env' aenv' (t -> GHC.Types.Bool))
                                                     @ (Data.Array.Accelerate.AST.PreOpenFun
                                                          acc env' aenv' (t -> t)
                                                        -> Data.Array.Accelerate.AST.PreOpenExp
                                                             acc env' aenv' t
                                                        -> Data.Array.Accelerate.AST.PreOpenExp
                                                             acc env' aenv' t)
                                                     (GHC.Base.$p1Applicative @ f $dApplicative)
                                                     (Data.Array.Accelerate.AST.While
                                                        @ acc
                                                        @ env'
                                                        @ aenv'
                                                        @ t
                                                        $dElt)
                                                     (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                                        @ f
                                                        @ fe
                                                        @ fa
                                                        @ acc
                                                        @ env
                                                        @ env'
                                                        @ aenv'
                                                        @ aenv
                                                        @ (t -> GHC.Types.Bool)
                                                        $dApplicative
                                                        $dSyntacticExp
                                                        $dSyntacticAcc
                                                        (\ @ aenv1
                                                           @ aenv'1
                                                           @ (f2 :: * -> *)
                                                           @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                           @ a
                                                           ($dApplicative1 :: GHC.Base.Applicative
                                                                                f2)
                                                           ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                                 fa1)[OneShot]
                                                           (ds :: forall a'.
                                                                  Data.Array.Accelerate.Array.Sugar.Arrays
                                                                    a' =>
                                                                  Data.Array.Accelerate.AST.Idx
                                                                    aenv1 a'
                                                                  -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                         eta
                                                           @ aenv1
                                                           @ aenv'1
                                                           @ f2
                                                           @ fa1
                                                           @ a
                                                           $dApplicative1
                                                           $dSyntacticAcc1
                                                           ds)
                                                        eta1
                                                        eta2
                                                        p))
                                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildFun
                                                     @ f
                                                     @ fe
                                                     @ fa
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ aenv
                                                     @ (t -> t)
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dSyntacticAcc
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f2 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a
                                                        ($dApplicative1 :: GHC.Base.Applicative f2)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f2
                                                        @ fa1
                                                        @ a
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta2
                                                     f1))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ t
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f2 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f2)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f2
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  x)
                                          Data.Array.Accelerate.AST.PrimConst $dElt c
                                          -> GHC.Base.pure
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Array.Accelerate.AST.PrimConst
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  $dElt
                                                  c)
                                          Data.Array.Accelerate.AST.PrimApp a $dElt $dElt1 f1 x
                                          -> Data.Functor.<$>
                                               @ f
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' a)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.PrimApp
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  @ a
                                                  $dElt
                                                  $dElt1
                                                  f1)
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ a
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f2 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a1
                                                     ($dApplicative1 :: GHC.Base.Applicative f2)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f2 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f2
                                                     @ fa1
                                                     @ a1
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  x)
                                          Data.Array.Accelerate.AST.Index dim $dShape $dElt a sh
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         dim)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            dim>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         dim)
                                                    @ dim
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            dim>_N <dim>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         dim)
                                                    @ dim
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            dim>_N <dim>_N) of cobox2 { DEFAULT ->
                                             GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' dim)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Functor.<$>
                                                  @ f
                                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                                  dim t))
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' dim
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                                  (Data.Array.Accelerate.AST.Index
                                                     @ acc
                                                     @ env'
                                                     @ aenv'
                                                     @ t
                                                     @ dim
                                                     $dShape
                                                     $dElt)
                                                  (eta
                                                     @ aenv
                                                     @ aenv'
                                                     @ f
                                                     @ fa
                                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                                          dim t)
                                                     $dApplicative
                                                     $dSyntacticAcc
                                                     eta2
                                                     a))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ dim
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a1
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a1
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  sh) } } }
                                          Data.Array.Accelerate.AST.LinearIndex dim $dShape $dElt a i
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         dim)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            dim>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         dim)
                                                    @ dim
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            dim>_N <dim>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         dim)
                                                    @ dim
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            dim>_N <dim>_N) of cobox2 { DEFAULT ->
                                             GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' GHC.Types.Int)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Functor.<$>
                                                  @ f
                                                  @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                                  dim t))
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' GHC.Types.Int
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                                  (Data.Array.Accelerate.AST.LinearIndex
                                                     @ acc
                                                     @ env'
                                                     @ aenv'
                                                     @ t
                                                     @ dim
                                                     $dShape
                                                     $dElt)
                                                  (eta
                                                     @ aenv
                                                     @ aenv'
                                                     @ f
                                                     @ fa
                                                     @ (Data.Array.Accelerate.Array.Sugar.Array
                                                          dim t)
                                                     $dApplicative
                                                     $dSyntacticAcc
                                                     eta2
                                                     a))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ GHC.Types.Int
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a1
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a1
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  i) } } }
                                          Data.Array.Accelerate.AST.Shape e $dShape $dElt a
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         t)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            t>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            t>_N <t>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            t>_N <t>_N) of cobox2 { DEFAULT ->
                                             Data.Functor.<$>
                                               @ f
                                               @ (acc aenv' (Data.Array.Accelerate.Array.Sugar.Array
                                                               t e))
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (GHC.Base.$p1Applicative @ f $dApplicative)
                                               (Data.Array.Accelerate.AST.Shape
                                                  @ acc
                                                  @ env'
                                                  @ aenv'
                                                  @ t
                                                  @ e
                                                  $dShape
                                                  $dElt)
                                               (eta
                                                  @ aenv
                                                  @ aenv'
                                                  @ f
                                                  @ fa
                                                  @ (Data.Array.Accelerate.Array.Sugar.Array t e)
                                                  $dApplicative
                                                  $dSyntacticAcc
                                                  eta2
                                                  a) } } }
                                          Data.Array.Accelerate.AST.ShapeSize dim cobox0 $dShape sh
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         dim)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            dim>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         dim)
                                                    @ dim
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            dim>_N <dim>_N) of cobox2 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         dim)
                                                    @ dim
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ dim
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            dim>_N <dim>_N) of cobox3 { DEFAULT ->
                                             (Data.Functor.<$>
                                                @ f
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env' aenv' dim)
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env' aenv' GHC.Types.Int)
                                                (GHC.Base.$p1Applicative @ f $dApplicative)
                                                (Data.Array.Accelerate.AST.$WShapeSize
                                                   @ acc
                                                   @ env'
                                                   @ aenv'
                                                   @ dim
                                                   $dShape)
                                                (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                   @ f
                                                   @ fe
                                                   @ fa
                                                   @ acc
                                                   @ env
                                                   @ env'
                                                   @ aenv'
                                                   @ aenv
                                                   @ dim
                                                   $dApplicative
                                                   $dSyntacticExp
                                                   $dSyntacticAcc
                                                   (\ @ aenv1
                                                      @ aenv'1
                                                      @ (f1 :: * -> *)
                                                      @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                      @ a
                                                      ($dApplicative1 :: GHC.Base.Applicative f1)
                                                      ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                            fa1)[OneShot]
                                                      (ds :: forall a'.
                                                             Data.Array.Accelerate.Array.Sugar.Arrays
                                                               a' =>
                                                             Data.Array.Accelerate.AST.Idx aenv1 a'
                                                             -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                    eta
                                                      @ aenv1
                                                      @ aenv'1
                                                      @ f1
                                                      @ fa1
                                                      @ a
                                                      $dApplicative1
                                                      $dSyntacticAcc1
                                                      ds)
                                                   eta1
                                                   eta2
                                                   sh))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.AST.PreOpenExp
                                                       <acc>_N
                                                       <env'>_N
                                                       <aenv'>_N
                                                       (Sym cobox0))_N) } } }
                                          Data.Array.Accelerate.AST.Intersect $dShape s t1
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         t)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            t>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            t>_N <t>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            t>_N <t>_N) of cobox2 { DEFAULT ->
                                             GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Functor.<$>
                                                  @ f
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' t)
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' t
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                                  (Data.Array.Accelerate.AST.Intersect
                                                     @ acc
                                                     @ env'
                                                     @ aenv'
                                                     @ t
                                                     $dShape)
                                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                     @ f
                                                     @ fe
                                                     @ fa
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ aenv
                                                     @ t
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dSyntacticAcc
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f1 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a
                                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f1
                                                        @ fa1
                                                        @ a
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta2
                                                     s))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ t
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  t1) } } }
                                          Data.Array.Accelerate.AST.Union $dShape s t1
                                          -> case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                         t)
                                                    @ Data.Array.Accelerate.Array.Sugar.Z
                                                    (Data.Array.Accelerate.Array.Sugar.$p6Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                            t>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p5Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                            t>_N <t>_N) of cobox1 { DEFAULT ->
                                             case GHC.Types.HEq_sc
                                                    @ GHC.Types.*
                                                    @ GHC.Types.*
                                                    @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                                         t)
                                                    @ t
                                                    (Data.Array.Accelerate.Array.Sugar.$p4Shape
                                                       @ t
                                                       $dShape)
                                                      `cast`
                                                    (Data.Type.Equality.N:~[0]
                                                         <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                            t>_N <t>_N) of cobox2 { DEFAULT ->
                                             GHC.Base.<*>
                                               @ f
                                               $dApplicative
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               @ (Data.Array.Accelerate.AST.PreOpenExp
                                                    acc env' aenv' t)
                                               (Data.Functor.<$>
                                                  @ f
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' t)
                                                  @ (Data.Array.Accelerate.AST.PreOpenExp
                                                       acc env' aenv' t
                                                     -> Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv' t)
                                                  (GHC.Base.$p1Applicative @ f $dApplicative)
                                                  (Data.Array.Accelerate.AST.Union
                                                     @ acc
                                                     @ env'
                                                     @ aenv'
                                                     @ t
                                                     $dShape)
                                                  (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                     @ f
                                                     @ fe
                                                     @ fa
                                                     @ acc
                                                     @ env
                                                     @ env'
                                                     @ aenv'
                                                     @ aenv
                                                     @ t
                                                     $dApplicative
                                                     $dSyntacticExp
                                                     $dSyntacticAcc
                                                     (\ @ aenv1
                                                        @ aenv'1
                                                        @ (f1 :: * -> *)
                                                        @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                        @ a
                                                        ($dApplicative1 :: GHC.Base.Applicative f1)
                                                        ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                              fa1)[OneShot]
                                                        (ds :: forall a'.
                                                               Data.Array.Accelerate.Array.Sugar.Arrays
                                                                 a' =>
                                                               Data.Array.Accelerate.AST.Idx
                                                                 aenv1 a'
                                                               -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                      eta
                                                        @ aenv1
                                                        @ aenv'1
                                                        @ f1
                                                        @ fa1
                                                        @ a
                                                        $dApplicative1
                                                        $dSyntacticAcc1
                                                        ds)
                                                     eta1
                                                     eta2
                                                     s))
                                               (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                  @ f
                                                  @ fe
                                                  @ fa
                                                  @ acc
                                                  @ env
                                                  @ env'
                                                  @ aenv'
                                                  @ aenv
                                                  @ t
                                                  $dApplicative
                                                  $dSyntacticExp
                                                  $dSyntacticAcc
                                                  (\ @ aenv1
                                                     @ aenv'1
                                                     @ (f1 :: * -> *)
                                                     @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                     @ a
                                                     ($dApplicative1 :: GHC.Base.Applicative f1)
                                                     ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                           fa1)[OneShot]
                                                     (ds :: forall a'.
                                                            Data.Array.Accelerate.Array.Sugar.Arrays
                                                              a' =>
                                                            Data.Array.Accelerate.AST.Idx aenv1 a'
                                                            -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                   eta
                                                     @ aenv1
                                                     @ aenv'1
                                                     @ f1
                                                     @ fa1
                                                     @ a
                                                     $dApplicative1
                                                     $dSyntacticAcc1
                                                     ds)
                                                  eta1
                                                  eta2
                                                  t1) } } } }) -}
8073eefe3779996f352cf9288e187da8
  rebuildTup ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t' -> f (fe acc env' aenv' t'))
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
    -> Data.Array.Accelerate.Array.Sugar.Tuple
         (Data.Array.Accelerate.AST.PreOpenExp acc env aenv) t
    -> f (Data.Array.Accelerate.Array.Sugar.Tuple
            (Data.Array.Accelerate.AST.PreOpenExp acc env' aenv') t)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,U(U(U,U),U,U,U,U)><L,U(C(C1(U)),C(U),C(C1(U)),A)><L,U><L,C(C1(C1(U)))><L,C(C1(U))><L,U><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding(loop-breaker): <stable> (\ @ (f :: * -> *)
                                          @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                                   -> * -> * -> * -> *)
                                          @ (fa :: (* -> * -> *) -> * -> * -> *)
                                          @ (acc :: * -> * -> *)
                                          @ env
                                          @ env'
                                          @ aenv'
                                          @ aenv
                                          @ t
                                          ($dApplicative :: GHC.Base.Applicative f)
                                          ($dSyntacticExp :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
                                                               fe)
                                          ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                               fa)
                                          (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc
                                                    acc)
                                          (eta1 :: forall t'.
                                                   Data.Array.Accelerate.Array.Sugar.Elt t' =>
                                                   Data.Array.Accelerate.AST.Idx env t'
                                                   -> f (fe acc env' aenv' t'))
                                          (eta2 :: forall t'.
                                                   Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                                   Data.Array.Accelerate.AST.Idx aenv t'
                                                   -> f (fa acc aenv' t'))
                                          (eta3 :: Data.Array.Accelerate.Array.Sugar.Tuple
                                                     (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env aenv)
                                                     t) ->
                                        case eta3 of wild {
                                          Data.Array.Accelerate.Array.Sugar.NilTup cobox0
                                          -> (GHC.Base.pure
                                                @ f
                                                $dApplicative
                                                @ (Data.Array.Accelerate.Array.Sugar.Tuple
                                                     (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env' aenv')
                                                     ())
                                                (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                                   @ (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env' aenv')))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.Array.Sugar.Tuple
                                                       <Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv'>_N
                                                       (Sym cobox0))_N)
                                          Data.Array.Accelerate.Array.Sugar.SnocTup t1 s cobox0 $dElt t2 e
                                          -> (GHC.Base.<*>
                                                @ f
                                                $dApplicative
                                                @ (Data.Array.Accelerate.AST.PreOpenExp
                                                     acc env' aenv' t1)
                                                @ (Data.Array.Accelerate.Array.Sugar.Tuple
                                                     (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env' aenv')
                                                     (s, t1))
                                                (Data.Functor.<$>
                                                   @ f
                                                   @ (Data.Array.Accelerate.Array.Sugar.Tuple
                                                        (Data.Array.Accelerate.AST.PreOpenExp
                                                           acc env' aenv')
                                                        s)
                                                   @ (Data.Array.Accelerate.AST.PreOpenExp
                                                        acc env' aenv' t1
                                                      -> Data.Array.Accelerate.Array.Sugar.Tuple
                                                           (Data.Array.Accelerate.AST.PreOpenExp
                                                              acc env' aenv')
                                                           (s, t1))
                                                   (GHC.Base.$p1Applicative @ f $dApplicative)
                                                   (Data.Array.Accelerate.Array.Sugar.$WSnocTup
                                                      @ (Data.Array.Accelerate.AST.PreOpenExp
                                                           acc env' aenv')
                                                      @ t1
                                                      @ s
                                                      $dElt)
                                                   (Data.Array.Accelerate.Trafo.Substitution.rebuildTup
                                                      @ f
                                                      @ fe
                                                      @ fa
                                                      @ acc
                                                      @ env
                                                      @ env'
                                                      @ aenv'
                                                      @ aenv
                                                      @ s
                                                      $dApplicative
                                                      $dSyntacticExp
                                                      $dSyntacticAcc
                                                      (\ @ aenv1
                                                         @ aenv'1
                                                         @ (f1 :: * -> *)
                                                         @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                         @ a
                                                         ($dApplicative1 :: GHC.Base.Applicative f1)
                                                         ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                               fa1)[OneShot]
                                                         (ds :: forall a'.
                                                                Data.Array.Accelerate.Array.Sugar.Arrays
                                                                  a' =>
                                                                Data.Array.Accelerate.AST.Idx
                                                                  aenv1 a'
                                                                -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                       eta
                                                         @ aenv1
                                                         @ aenv'1
                                                         @ f1
                                                         @ fa1
                                                         @ a
                                                         $dApplicative1
                                                         $dSyntacticAcc1
                                                         ds)
                                                      eta1
                                                      eta2
                                                      t2))
                                                (Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenExp
                                                   @ f
                                                   @ fe
                                                   @ fa
                                                   @ acc
                                                   @ env
                                                   @ env'
                                                   @ aenv'
                                                   @ aenv
                                                   @ t1
                                                   $dApplicative
                                                   $dSyntacticExp
                                                   $dSyntacticAcc
                                                   (\ @ aenv1
                                                      @ aenv'1
                                                      @ (f1 :: * -> *)
                                                      @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                                      @ a
                                                      ($dApplicative1 :: GHC.Base.Applicative f1)
                                                      ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                            fa1)[OneShot]
                                                      (ds :: forall a'.
                                                             Data.Array.Accelerate.Array.Sugar.Arrays
                                                               a' =>
                                                             Data.Array.Accelerate.AST.Idx aenv1 a'
                                                             -> f1 (fa1 acc aenv'1 a'))[OneShot] ->
                                                    eta
                                                      @ aenv1
                                                      @ aenv'1
                                                      @ f1
                                                      @ fa1
                                                      @ a
                                                      $dApplicative1
                                                      $dSyntacticAcc1
                                                      ds)
                                                   eta1
                                                   eta2
                                                   e))
                                               `cast`
                                             (<f>_R (Data.Array.Accelerate.Array.Sugar.Tuple
                                                       <Data.Array.Accelerate.AST.PreOpenExp
                                                          acc env' aenv'>_N
                                                       (Sym cobox0))_N) }) -}
242550cf87bee8c4aaa947c5edb93b14
  runIdentity ::
    Data.Array.Accelerate.Trafo.Substitution.Identity a -> a
  RecSel Left Data.Array.Accelerate.Trafo.Substitution.Identity
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.Identity a) ->
                 case ds of wild { Data.Array.Accelerate.Trafo.Substitution.Identity ds1 ->
                 ds1 }) -}
ce17470d0100b82cc4ee815a0939b721
  shiftA ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc fa,
     Data.Array.Accelerate.Array.Sugar.Arrays t) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Arrays t' =>
        Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
    -> Data.Array.Accelerate.AST.Idx (aenv, s) t
    -> f (fa acc (aenv', s) t)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A)><L,1*U(1*C1(C1(U)),A,1*C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,1*C1(C1(U))><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (f :: * -> *)
                            @ (fa :: (* -> * -> *) -> * -> * -> *)
                            @ t
                            @ (acc :: * -> * -> *)
                            @ aenv
                            @ aenv'
                            @ s
                            ($dApplicative :: GHC.Base.Applicative f)
                            ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                 fa)
                            ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t)
                            (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                            (eta1 :: forall t'.
                                     Data.Array.Accelerate.Array.Sugar.Arrays t' =>
                                     Data.Array.Accelerate.AST.Idx aenv t' -> f (fa acc aenv' t'))
                            (eta2 :: Data.Array.Accelerate.AST.Idx (aenv, s) t) ->
                          case eta2 of wild {
                            Data.Array.Accelerate.AST.ZeroIdx env cobox0
                            -> GHC.Base.$
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (fa acc (aenv', s) s)
                                 @ (f (fa acc (aenv', s) t))
                                 (GHC.Base.pure @ f $dApplicative @ (fa acc (aenv', s) s))
                                   `cast`
                                 (<fa acc (aenv', s) s>_R
                                  ->_R <f>_R (<fa acc (aenv', s)>_N (Nth:1 cobox0)))
                                 (Data.Array.Accelerate.Trafo.Substitution.avarIn
                                    @ fa
                                    $dSyntacticAcc
                                    @ s
                                    @ (aenv', s)
                                    @ acc
                                    $dArrays
                                      `cast`
                                    (Data.Array.Accelerate.Array.Sugar.Arrays
                                       (Nth:1 (Sym cobox0)))_R
                                    (Data.Array.Accelerate.AST.$WZeroIdx @ s @ aenv'))
                            Data.Array.Accelerate.AST.SuccIdx env s1 cobox0 ix
                            -> Data.Functor.<$>
                                 @ f
                                 @ (fa acc aenv' t)
                                 @ (fa acc (aenv', s) t)
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 (Data.Array.Accelerate.Trafo.Substitution.weakenAcc
                                    @ fa
                                    $dSyntacticAcc
                                    @ t
                                    @ acc
                                    @ aenv'
                                    @ s
                                    $dArrays
                                    (\ @ aenv1
                                       @ aenv'1
                                       @ (f1 :: * -> *)
                                       @ (fa1 :: (* -> * -> *) -> * -> * -> *)
                                       @ a
                                       ($dApplicative1 :: GHC.Base.Applicative f1)
                                       ($dSyntacticAcc1 :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                             fa1)
                                       (ds :: forall a'.
                                              Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                              Data.Array.Accelerate.AST.Idx aenv1 a'
                                              -> f1 (fa1 acc aenv'1 a')) ->
                                     eta
                                       @ aenv1
                                       @ aenv'1
                                       @ f1
                                       @ fa1
                                       @ a
                                       $dApplicative1
                                       $dSyntacticAcc1
                                       ds))
                                 (eta1
                                    @ t
                                    $dArrays
                                    ix
                                      `cast`
                                    (Data.Array.Accelerate.AST.Idx
                                       (Nth:0 (Sym cobox0)) <t>_N)_R) }) -}
04301cd8e3c98d663c1d80ac2a6cc01d
  shiftE ::
    (GHC.Base.Applicative f,
     Data.Array.Accelerate.Trafo.Substitution.SyntacticExp fe,
     Data.Array.Accelerate.Array.Sugar.Elt t) =>
    Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc
    -> (forall t'.
        Data.Array.Accelerate.Array.Sugar.Elt t' =>
        Data.Array.Accelerate.AST.Idx env t' -> f (fe acc env' aenv t'))
    -> Data.Array.Accelerate.AST.Idx (env, s) t
    -> f (fe acc (env', s) aenv t)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A)><L,1*U(1*C1(C1(U)),A,1*C1(C1(U)),A)><L,U><L,C(C1(C1(U)))><L,1*C1(C1(U))><S,1*U>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (f :: * -> *)
                            @ (fe :: (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                                     -> * -> * -> * -> *)
                            @ t
                            @ (acc :: * -> * -> *)
                            @ env
                            @ env'
                            @ aenv
                            @ s
                            ($dApplicative :: GHC.Base.Applicative f)
                            ($dSyntacticExp :: Data.Array.Accelerate.Trafo.Substitution.SyntacticExp
                                                 fe)
                            ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                            (eta :: Data.Array.Accelerate.Trafo.Substitution.RebuildAcc acc)
                            (eta1 :: forall t'.
                                     Data.Array.Accelerate.Array.Sugar.Elt t' =>
                                     Data.Array.Accelerate.AST.Idx env t'
                                     -> f (fe acc env' aenv t'))
                            (eta2 :: Data.Array.Accelerate.AST.Idx (env, s) t) ->
                          case eta2 of wild {
                            Data.Array.Accelerate.AST.ZeroIdx env1 cobox0
                            -> GHC.Base.$
                                 @ 'GHC.Types.PtrRepLifted
                                 @ (fe acc (env', s) aenv s)
                                 @ (f (fe acc (env', s) aenv t))
                                 (GHC.Base.pure @ f $dApplicative @ (fe acc (env', s) aenv s))
                                   `cast`
                                 (<fe acc (env', s) aenv s>_R
                                  ->_R <f>_R (<fe acc (env', s) aenv>_N (Nth:1 cobox0)))
                                 (Data.Array.Accelerate.Trafo.Substitution.varIn
                                    @ fe
                                    $dSyntacticExp
                                    @ s
                                    @ (env', s)
                                    @ acc
                                    @ aenv
                                    $dElt
                                      `cast`
                                    (Data.Array.Accelerate.Array.Sugar.Elt (Nth:1 (Sym cobox0)))_R
                                    (Data.Array.Accelerate.AST.$WZeroIdx @ s @ env'))
                            Data.Array.Accelerate.AST.SuccIdx env1 s1 cobox0 ix
                            -> Data.Functor.<$>
                                 @ f
                                 @ (fe acc env' aenv t)
                                 @ (fe acc (env', s) aenv t)
                                 (GHC.Base.$p1Applicative @ f $dApplicative)
                                 (Data.Array.Accelerate.Trafo.Substitution.weakenExp
                                    @ fe
                                    $dSyntacticExp
                                    @ t
                                    @ acc
                                    @ env'
                                    @ aenv
                                    @ s
                                    $dElt
                                    (\ @ aenv1
                                       @ aenv'
                                       @ (f1 :: * -> *)
                                       @ (fa :: (* -> * -> *) -> * -> * -> *)
                                       @ a
                                       ($dApplicative1 :: GHC.Base.Applicative f1)
                                       ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                            fa)
                                       (ds :: forall a'.
                                              Data.Array.Accelerate.Array.Sugar.Arrays a' =>
                                              Data.Array.Accelerate.AST.Idx aenv1 a'
                                              -> f1 (fa acc aenv' a')) ->
                                     eta
                                       @ aenv1
                                       @ aenv'
                                       @ f1
                                       @ fa
                                       @ a
                                       $dApplicative1
                                       $dSyntacticAcc
                                       ds))
                                 (eta1
                                    @ t
                                    $dElt
                                    ix
                                      `cast`
                                    (Data.Array.Accelerate.AST.Idx
                                       (Nth:0 (Sym cobox0)) <t>_N)_R) }) -}
eaac26fa4ca759f5935d971ca87d5f51
  strengthen ::
    Data.Array.Accelerate.Trafo.Substitution.Rebuildable f =>
    (env Data.Array.Accelerate.Trafo.Substitution.:?> env')
    -> f env t -> GHC.Base.Maybe (f env' t)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(C(S)))L),1*U(1*C1(C1(C1(U))),A)><L,C(U)>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (f :: * -> * -> *)
                            @ env
                            @ env'
                            @ t
                            ($dRebuildable :: Data.Array.Accelerate.Trafo.Substitution.Rebuildable
                                                f)
                            (k :: env Data.Array.Accelerate.Trafo.Substitution.:?> env') ->
                          Data.Array.Accelerate.Trafo.Substitution.rebuildPartial
                            @ f
                            $dRebuildable
                            @ GHC.Base.Maybe
                            @ Data.Array.Accelerate.Trafo.Substitution.IdxA
                            @ env
                            @ env'
                            @ t
                            GHC.Base.$fApplicativeMaybe
                            Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA
                            (\ @ a'
                               ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                               (eta :: Data.Array.Accelerate.AST.Idx env a') ->
                             GHC.Base.$fApplicativeMaybe_$sliftM
                               @ (Data.Array.Accelerate.AST.Idx env' a')
                               @ (Data.Array.Accelerate.Trafo.Substitution.IdxA
                                    (Data.Array.Accelerate.Trafo.Substitution.AccClo f) env' a')
                               (\ (tpl :: Data.Array.Accelerate.AST.Idx env' a')[OneShot] -> tpl)
                                 `cast`
                               (<Data.Array.Accelerate.AST.Idx env' a'>_R
                                ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                                              <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                 f>_P) <env'>_N <a'>_N)
                               (k @ a' eta))) -}
7c365f2da7f822deaea8be02eb697c40
  strengthenE ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildableExp f =>
    (env Data.Array.Accelerate.Trafo.Substitution.:?> env')
    -> f env aenv t -> GHC.Base.Maybe (f env' aenv t)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(C(S)))L),1*U(1*C1(C1(C1(U))),A)><L,C(U)>,
     Inline: INLINABLE[ALWAYS],
     Unfolding: <stable> (\ @ (f :: * -> * -> * -> *)
                            @ env
                            @ env'
                            @ aenv
                            @ t
                            ($dRebuildableExp :: Data.Array.Accelerate.Trafo.Substitution.RebuildableExp
                                                   f)
                            (k :: env Data.Array.Accelerate.Trafo.Substitution.:?> env') ->
                          Data.Array.Accelerate.Trafo.Substitution.rebuildPartialE
                            @ f
                            $dRebuildableExp
                            @ GHC.Base.Maybe
                            @ Data.Array.Accelerate.Trafo.Substitution.IdxE
                            @ env
                            @ env'
                            @ aenv
                            @ t
                            GHC.Base.$fApplicativeMaybe
                            Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
                            (\ @ e'
                               ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e')
                               (eta :: Data.Array.Accelerate.AST.Idx env e') ->
                             GHC.Base.$fApplicativeMaybe_$sliftM
                               @ (Data.Array.Accelerate.AST.Idx env' e')
                               @ (Data.Array.Accelerate.Trafo.Substitution.IdxE
                                    (Data.Array.Accelerate.Trafo.Substitution.AccClo (f env))
                                    env'
                                    aenv
                                    e')
                               (\ (tpl :: Data.Array.Accelerate.AST.Idx env' e')[OneShot] -> tpl)
                                 `cast`
                               (<Data.Array.Accelerate.AST.Idx env' e'>_R
                                ->_R Sym (Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                                              <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                 (f env)>_P
                                              <env'>_N
                                              <aenv>_P) <e'>_N)
                               (k @ e' eta))) -}
e6bc0c2586c6e7948b537e1127b8779e
  subAtop ::
    Data.Array.Accelerate.Array.Sugar.Arrays t =>
    Data.Array.Accelerate.AST.PreOpenAcc acc aenv s
    -> Data.Array.Accelerate.AST.Idx (aenv, s) t
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   @ (acc :: * -> * -> *)
                   @ aenv
                   @ s
                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays t)
                   (t1 :: Data.Array.Accelerate.AST.PreOpenAcc acc aenv s)
                   (ds :: Data.Array.Accelerate.AST.Idx (aenv, s) t) ->
                 case ds of wild {
                   Data.Array.Accelerate.AST.ZeroIdx env cobox0
                   -> t1
                        `cast`
                      (Data.Array.Accelerate.AST.PreOpenAcc
                         <acc>_R <aenv>_N (Nth:1 cobox0))_R
                   Data.Array.Accelerate.AST.SuccIdx env s1 cobox0 idx
                   -> (Data.Array.Accelerate.AST.Avar @ acc @ env @ t $dArrays idx)
                        `cast`
                      (Data.Array.Accelerate.AST.PreOpenAcc
                         <acc>_R (Nth:0 (Sym cobox0)) <t>_N)_R }) -}
a62f3abd0f430ff0e102987e4ca3e542
  subTop ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.AST.PreOpenExp acc env aenv s
    -> Data.Array.Accelerate.AST.Idx (env, s) t
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ env
                   @ aenv
                   @ s
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (s1 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv s)
                   (ds :: Data.Array.Accelerate.AST.Idx (env, s) t) ->
                 case ds of wild {
                   Data.Array.Accelerate.AST.ZeroIdx env1 cobox0
                   -> s1
                        `cast`
                      (Data.Array.Accelerate.AST.PreOpenExp
                         <acc>_R <env>_N <aenv>_N (Nth:1 cobox0))_R
                   Data.Array.Accelerate.AST.SuccIdx env1 s2 cobox0 ix
                   -> (Data.Array.Accelerate.AST.Var @ acc @ env1 @ aenv @ t $dElt ix)
                        `cast`
                      (Data.Array.Accelerate.AST.PreOpenExp
                         <acc>_R (Nth:0 (Sym cobox0)) <aenv>_N <t>_N)_R }) -}
e6632526771ca5dcb63e18de4a087fc9
  substitute ::
    (Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc acc,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c) =>
    Data.Array.Accelerate.AST.PreOpenExp acc (env, b) aenv c
    -> Data.Array.Accelerate.AST.PreOpenExp acc (env, a) aenv b
    -> Data.Array.Accelerate.AST.PreOpenExp acc (env, a) aenv c
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LS(S)),U(U,U(U))><L,U><L,U><L,1*U><S,1*U>,
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ b
                   @ c
                   @ env
                   @ aenv
                   @ a
                   ($d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                 acc)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (eta :: Data.Array.Accelerate.AST.PreOpenExp acc (env, b) aenv c)
                   (eta1 :: Data.Array.Accelerate.AST.PreOpenExp
                              acc (env, a) aenv b) ->
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           $d(%,%))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox0 { DEFAULT ->
                 case eta1 of wild {
                   DEFAULT
                   -> Data.Array.Accelerate.AST.Let
                        @ acc
                        @ (env, a)
                        @ aenv
                        @ c
                        @ b
                        $dElt
                        $dElt1
                        wild
                        (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenExp_$crebuildE
                           @ acc
                           $d(%,%)
                           @ Data.Array.Accelerate.AST.PreOpenExp
                           @ (env, b)
                           @ ((env, a), b)
                           @ aenv
                           @ c
                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp
                           (Data.Array.Accelerate.Trafo.Substitution.substitute1
                              @ acc
                              @ a
                              @ aenv
                              @ env
                              @ b)
                             `cast`
                           (forall (e' :: <*>_N).
                            <Data.Array.Accelerate.Array.Sugar.Elt e'>_R
                            ->_R <Data.Array.Accelerate.AST.Idx (env, b) e'>_R
                            ->_R (Data.Array.Accelerate.AST.PreOpenExp
                                    (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenExp[0]
                                                   <(env, b)>_N <acc>_N)))
                                    <((env, a), b)>_N
                                    <aenv>_N
                                    <e'>_N)_R)
                           eta)
                   Data.Array.Accelerate.AST.Var $dElt2 ds
                   -> case ds of wild1 {
                        Data.Array.Accelerate.AST.ZeroIdx env1 cobox1
                        -> eta
                             `cast`
                           (Data.Array.Accelerate.AST.PreOpenExp
                              <acc>_R ((,) <env>_N (Nth:1 (Sym cobox1)))_N <aenv>_N <c>_N)_R
                        Data.Array.Accelerate.AST.SuccIdx ipv0 ipv1 ipv ipv2
                        -> Data.Array.Accelerate.AST.Let
                             @ acc
                             @ (env, a)
                             @ aenv
                             @ c
                             @ b
                             $dElt
                             $dElt1
                             wild
                             (Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenExp_$crebuildE
                                @ acc
                                $d(%,%)
                                @ Data.Array.Accelerate.AST.PreOpenExp
                                @ (env, b)
                                @ ((env, a), b)
                                @ aenv
                                @ c
                                Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp
                                (Data.Array.Accelerate.Trafo.Substitution.substitute1
                                   @ acc
                                   @ a
                                   @ aenv
                                   @ env
                                   @ b)
                                  `cast`
                                (forall (e' :: <*>_N).
                                 <Data.Array.Accelerate.Array.Sugar.Elt e'>_R
                                 ->_R <Data.Array.Accelerate.AST.Idx (env, b) e'>_R
                                 ->_R (Data.Array.Accelerate.AST.PreOpenExp
                                         (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenExp[0]
                                                        <(env, b)>_N <acc>_N)))
                                         <((env, a), b)>_N
                                         <aenv>_N
                                         <e'>_N)_R)
                                eta) } } }) -}
e2e2a369985cee5bc3a2331f486f9ba3
  substitute1 ::
    Data.Array.Accelerate.Array.Sugar.Elt e' =>
    Data.Array.Accelerate.AST.Idx (env, b) e'
    -> Data.Array.Accelerate.AST.PreOpenExp acc ((env, a), b) aenv e'
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ (acc :: * -> * -> *)
                   @ a
                   @ aenv
                   @ env
                   @ b
                   @ e'
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e')
                   (ds :: Data.Array.Accelerate.AST.Idx (env, b) e') ->
                 case ds of wild {
                   Data.Array.Accelerate.AST.ZeroIdx env1 cobox0
                   -> (Data.Array.Accelerate.AST.Var
                         @ acc
                         @ ((env, a), b)
                         @ aenv
                         @ b
                         $dElt
                           `cast`
                         (Data.Array.Accelerate.Array.Sugar.Elt (Nth:1 (Sym cobox0)))_R
                         (Data.Array.Accelerate.AST.$WZeroIdx @ b @ (env, a)))
                        `cast`
                      (Data.Array.Accelerate.AST.PreOpenExp
                         <acc>_R <((env, a), b)>_N <aenv>_N (Nth:1 cobox0))_R
                   Data.Array.Accelerate.AST.SuccIdx env1 s cobox0 ix
                   -> (Data.Array.Accelerate.AST.Var
                         @ acc
                         @ ((env1, a), b)
                         @ aenv
                         @ e'
                         $dElt
                         (Data.Array.Accelerate.AST.SuccIdx
                            @ ((env1, a), b)
                            @ e'
                            @ (env1, a)
                            @ b
                            @~ <((env1, a), b)>_N
                            (Data.Array.Accelerate.AST.$WSuccIdx @ e' @ env1 @ a ix)))
                        `cast`
                      (Data.Array.Accelerate.AST.PreOpenExp
                         <acc>_R
                         ((,) ((,) (Nth:0 (Sym cobox0)) <a>_N)_N <b>_N)_N
                         <aenv>_N
                         <e'>_N)_R }) -}
437db7c525bd51e3c71acffc2d3972e9
  unIA ::
    Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t
    -> Data.Array.Accelerate.AST.Idx aenv t
  RecSel Left Data.Array.Accelerate.Trafo.Substitution.IdxA
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Substitution.unIA1
                  `cast`
                (forall (acc :: <GHC.Types.*
                                 -> GHC.Types.* -> GHC.Types.*>_N) (aenv :: <*>_N) (t :: <*>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t>_R
                 ->_R Data.Array.Accelerate.Trafo.Substitution.N:IdxA[0]
                          <acc>_P <aenv>_N <t>_N) -}
8bcc3de2cd7d366ea7842cd08fddae13
  unIA1 ::
    Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ aenv
                   @ t
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.IdxA acc aenv t) ->
                 ds) -}
0a66e798c7ae0678cbaeb2ba54a1ccb1
  unIE ::
    Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
    -> Data.Array.Accelerate.AST.Idx env t
  RecSel Left Data.Array.Accelerate.Trafo.Substitution.IdxE
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Substitution.unIE1
                  `cast`
                (forall (acc :: <GHC.Types.*
                                 -> GHC.Types.*
                                 -> GHC.Types.*>_N) (env :: <*>_N) (aenv :: <*>_N) (t :: <*>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t>_R
                 ->_R Data.Array.Accelerate.Trafo.Substitution.N:IdxE[0]
                          <acc>_P <env>_N <aenv>_P <t>_N) -}
1351554bf6885bc6d135c6f037487682
  unIE1 ::
    Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.IdxE acc env aenv t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ env
                   @ aenv
                   @ t
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.IdxE
                            acc env aenv t) ->
                 ds) -}
7000fa875563a434497338a733d84b37
  unRTup ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildTup acc env aenv t
    -> Data.Array.Accelerate.Array.Sugar.Tuple
         (Data.Array.Accelerate.AST.PreOpenExp acc env aenv) t
  RecSel Left Data.Array.Accelerate.Trafo.Substitution.RebuildTup
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Trafo.Substitution.unRTup1
                  `cast`
                (forall (acc :: <GHC.Types.*
                                 -> GHC.Types.*
                                 -> GHC.Types.*>_N) (env :: <*>_N) (aenv :: <*>_N) (t :: <*>_N).
                 <Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                    acc env aenv t>_R
                 ->_R Data.Array.Accelerate.Trafo.Substitution.N:RebuildTup[0]
                          <acc>_R <env>_N <aenv>_N <t>_N) -}
bd10a5a883c769f196517dcae05debcc
  unRTup1 ::
    Data.Array.Accelerate.Trafo.Substitution.RebuildTup acc env aenv t
    -> Data.Array.Accelerate.Trafo.Substitution.RebuildTup
         acc env aenv t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ env
                   @ aenv
                   @ t
                   (ds :: Data.Array.Accelerate.Trafo.Substitution.RebuildTup
                            acc env aenv t) ->
                 ds) -}
instance GHC.Base.Applicative [Data.Array.Accelerate.Trafo.Substitution.Identity]
  = Data.Array.Accelerate.Trafo.Substitution.$fApplicativeIdentity
instance GHC.Base.Functor [Data.Array.Accelerate.Trafo.Substitution.Identity]
  = Data.Array.Accelerate.Trafo.Substitution.$fFunctorIdentity
instance Data.Array.Accelerate.Trafo.Substitution.RebuildableExp [Data.Array.Accelerate.AST.PreOpenExp]
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenExp
instance Data.Array.Accelerate.Trafo.Substitution.RebuildableExp [Data.Array.Accelerate.AST.PreOpenFun]
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableExpPreOpenFun
instance Data.Array.Accelerate.Trafo.Substitution.Rebuildable [Data.Array.Accelerate.AST.OpenAcc]
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc
instance Data.Array.Accelerate.Trafo.Substitution.Rebuildable [Data.Array.Accelerate.AST.PreOpenAcc]
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAcc
instance Data.Array.Accelerate.Trafo.Substitution.Rebuildable [Data.Array.Accelerate.AST.PreOpenAfun]
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAfun
instance Data.Array.Accelerate.Trafo.Substitution.Rebuildable [Data.Array.Accelerate.AST.PreOpenExp]
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenExp
instance Data.Array.Accelerate.Trafo.Substitution.Rebuildable [Data.Array.Accelerate.AST.PreOpenFun]
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenFun
instance Data.Array.Accelerate.Trafo.Substitution.Rebuildable [Data.Array.Accelerate.Trafo.Substitution.RebuildTup]
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableRebuildTup
instance Data.Array.Accelerate.Trafo.Substitution.SinkExp [Data.Array.Accelerate.AST.PreOpenExp]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkExpPreOpenExp
instance Data.Array.Accelerate.Trafo.Substitution.SinkExp [Data.Array.Accelerate.AST.PreOpenFun]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkExpPreOpenFun
instance Data.Array.Accelerate.Trafo.Substitution.Sink [Data.Array.Accelerate.AST.Idx]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkIdx
instance Data.Array.Accelerate.Trafo.Substitution.Sink [Data.Array.Accelerate.AST.OpenAcc]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkOpenAcc
instance Data.Array.Accelerate.Trafo.Substitution.Sink [Data.Array.Accelerate.AST.PreBoundary]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkPreBoundary
instance Data.Array.Accelerate.Trafo.Substitution.Sink [Data.Array.Accelerate.AST.PreOpenAcc]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkPreOpenAcc
instance Data.Array.Accelerate.Trafo.Substitution.Sink [Data.Array.Accelerate.AST.PreOpenAfun]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkPreOpenAfun
instance Data.Array.Accelerate.Trafo.Substitution.Sink [Data.Array.Accelerate.AST.PreOpenExp]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkPreOpenExp
instance Data.Array.Accelerate.Trafo.Substitution.Sink [Data.Array.Accelerate.AST.PreOpenFun]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkPreOpenFun
instance Data.Array.Accelerate.Trafo.Substitution.Sink [Data.Array.Accelerate.Trafo.Substitution.RebuildTup]
  = Data.Array.Accelerate.Trafo.Substitution.$fSinkRebuildTup
instance Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc [Data.Array.Accelerate.Trafo.Substitution.IdxA]
  = Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccIdxA
instance Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc [Data.Array.Accelerate.AST.PreOpenAcc]
  = Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc
instance Data.Array.Accelerate.Trafo.Substitution.SyntacticExp [Data.Array.Accelerate.Trafo.Substitution.IdxE]
  = Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpIdxE
instance Data.Array.Accelerate.Trafo.Substitution.SyntacticExp [Data.Array.Accelerate.AST.PreOpenExp]
  = Data.Array.Accelerate.Trafo.Substitution.$fSyntacticExpPreOpenExp
family instance Data.Array.Accelerate.Trafo.Substitution.AccClo [Data.Array.Accelerate.AST.PreOpenExp]
  = Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenExp
family instance Data.Array.Accelerate.Trafo.Substitution.AccClo [Data.Array.Accelerate.AST.PreOpenFun]
  = Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenFun
family instance Data.Array.Accelerate.Trafo.Substitution.AccClo [Data.Array.Accelerate.AST.PreOpenAcc]
  = Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenAcc
family instance Data.Array.Accelerate.Trafo.Substitution.AccClo [Data.Array.Accelerate.AST.PreOpenAfun]
  = Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenAfun
family instance Data.Array.Accelerate.Trafo.Substitution.AccClo [Data.Array.Accelerate.Trafo.Substitution.RebuildTup]
  = Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloRebuildTup
family instance Data.Array.Accelerate.Trafo.Substitution.AccClo [Data.Array.Accelerate.AST.OpenAcc]
  = Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloOpenAcc
"SPEC $crebuildA @ PreOpenAcc _ _ _" [ALWAYS] forall @ aenv
                                                     @ aenv'
                                                     @ a
                                                     ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                          Data.Array.Accelerate.AST.PreOpenAcc)
  Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc_$crebuildA @ Data.Array.Accelerate.AST.PreOpenAcc
                                                                           @ aenv
                                                                           @ aenv'
                                                                           @ a
                                                                           $dSyntacticAcc
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc_$s$crebuildA
      @ aenv
      @ aenv'
      @ a
"SPEC rebuildOpenAcc @ Identity @ PreOpenAcc _ _ _" [ALWAYS] forall @ aenv
                                                                    @ aenv'
                                                                    @ t
                                                                    ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                                         Data.Array.Accelerate.AST.PreOpenAcc)
                                                                    ($dApplicative :: GHC.Base.Applicative
                                                                                        Data.Array.Accelerate.Trafo.Substitution.Identity)
  Data.Array.Accelerate.Trafo.Substitution.rebuildOpenAcc @ Data.Array.Accelerate.Trafo.Substitution.Identity
                                                          @ Data.Array.Accelerate.AST.PreOpenAcc
                                                          @ aenv
                                                          @ aenv'
                                                          @ t
                                                          $dApplicative
                                                          $dSyntacticAcc
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc_$srebuildOpenAcc
      @ aenv
      @ aenv'
      @ t
"SPEC rebuildPreOpenAcc @ Identity @ PreOpenAcc _ _ _ _" [ALWAYS] forall @ (acc :: *
                                                                                   -> * -> *)
                                                                         @ aenv
                                                                         @ aenv'
                                                                         @ t
                                                                         ($dSyntacticAcc :: Data.Array.Accelerate.Trafo.Substitution.SyntacticAcc
                                                                                              Data.Array.Accelerate.AST.PreOpenAcc)
                                                                         ($dApplicative :: GHC.Base.Applicative
                                                                                             Data.Array.Accelerate.Trafo.Substitution.Identity)
  Data.Array.Accelerate.Trafo.Substitution.rebuildPreOpenAcc @ Data.Array.Accelerate.Trafo.Substitution.Identity
                                                             @ Data.Array.Accelerate.AST.PreOpenAcc
                                                             @ acc
                                                             @ aenv
                                                             @ aenv'
                                                             @ t
                                                             $dApplicative
                                                             $dSyntacticAcc
  = Data.Array.Accelerate.Trafo.Substitution.$fRebuildableOpenAcc_$srebuildPreOpenAcc1
      @ acc
      @ aenv
      @ aenv'
      @ t
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

