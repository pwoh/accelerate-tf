
==================== FINAL INTERFACE ====================
2017-08-29 05:27:35.922082 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Num [orphan module] 8002
  interface hash: 55762acc20208bd39ae775db65378835
  ABI hash: 5830cb8ce2e6617e88ff07c7f188117f
  export-list hash: 00b7c9e56019df3c44ef51ed8ebd4236
  orphan hash: d3900d9dfc8182a6f5228e252af213ec
  flag hash: 2158dc2d57e8bda6a28c5d022066f0d5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Array.Accelerate.Classes.Num.Num
  GHC.Num.Num|{GHC.Num.* GHC.Num.+ GHC.Num.- GHC.Num.abs GHC.Num.fromInteger GHC.Num.negate GHC.Num.signum}
module dependencies: Data.Array.Accelerate.AST
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Lifetime Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Smart Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Smart
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  Data.Array.Accelerate.Array.Sugar 1095a84a969562bd64b7800341e0d23c
  exports: a6dd551b39ab2a3a217fc8c2a6979cd5
  Elt 78f23e81404aaf1e43268a71a575425c
import  -/  Data.Array.Accelerate.Smart c6a471aeed497009ce791e94dc05d100
  exports: 1e3a20050ce25466608a82a26d24d5f0
  Exp dff601899922d9e86e5ab6941dfbac5f
  constant 8196d527ad9044191643ad6b39858685
  mkAbs 146da8e3bbdd1c01d5557d6f3e35453d
  mkAdd b89743f50d428ffba3f805803669fbeb
  mkMul fe1b10755b172fa8eb8c520061dd5494
  mkNeg d656caceb115b756a76dd9563c6936cd
  mkSig 4989a70c8055dc8903728209adc35e6c
  mkSub 7e432a4f7adad17dc7010a136ca1d970
import  -/  Data.Array.Accelerate.Type a1c7885f4a79193eaa1f192a9acbec78
  exports: 7aad7ca015788892b1349ebab929b71f
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
c0b39680ea32ffad04a04c82b7e20f3a
  $fNumExp ::
    GHC.Num.Num
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
                  Data.Array.Accelerate.Classes.Num.$fNumExp_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp_$cfromInteger -}
6310bdf8ab1448029999a52a8de18a29
  $fNumExp0 ::
    GHC.Num.Num
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
                  Data.Array.Accelerate.Classes.Num.$fNumExp0_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp0_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp0_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp0_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp0_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp0_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp0_$cfromInteger -}
562a9077798f1b88c8cd0ed6bc3fc742
  $fNumExp0_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp33
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
ab0ff9f298b1af992516b2c9fcb3364a
  $fNumExp0_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp35
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
c224a01e09b8a197d78042d8d28736c7
  $fNumExp0_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp34
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
1c4abb4dee6f0c64d676739ced5657fd
  $fNumExp0_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp31
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
979d93c06af33dc6a3ee7d24395cacc3
  $fNumExp0_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp29
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
9a8549f37f7261dfb46b3e13eeb42e78
  $fNumExp0_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp32
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
2667af73b5049c845c207d6622476d5f
  $fNumExp0_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp30
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
7f7049f06095cd4783e0d337067780d4
  $fNumExp0_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
       -> Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      -> Foreign.C.Types.CFloat)
                   @ Foreign.C.Types.CFloat
                   @~ <(Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                       -> Foreign.C.Types.CFloat>_N
                   Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType) -}
57f87248c541d8679e9e5b16fda1bf0d
  $fNumExp0_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat) -}
02d135245905585ae5d9d66639f4d350
  $fNumExp0_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
       -> Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      -> Foreign.C.Types.CFloat)
                   @ Foreign.C.Types.CFloat
                   @~ <(Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                       -> Foreign.C.Types.CFloat>_N
                   Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType) -}
6a41789da79d7668fb5235bc344f3230
  $fNumExp0_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat) -}
02252ae735cb936336f660893cf0c726
  $fNumExp0_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
       -> Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      -> Foreign.C.Types.CFloat)
                   @ Foreign.C.Types.CFloat
                   @~ <(Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                       -> Foreign.C.Types.CFloat>_N
                   Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType) -}
ee030f413b1aee8e05e9f0531ed78eab
  $fNumExp1 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
                  Data.Array.Accelerate.Classes.Num.$fNumExp1_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp1_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp1_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp1_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp1_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp1_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp1_$cfromInteger -}
b796e144bd324e4e8e81de5c93fb4a4e
  $fNumExp10 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt)
                  Data.Array.Accelerate.Classes.Num.$fNumExp10_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp10_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp10_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp10_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp10_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp10_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp10_$cfromInteger -}
200c4ca76046dc174aa9755b712d2a49
  $fNumExp100 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Int.Int16 -> GHC.Int.Int16)
                      @ GHC.Int.Int16
                      @~ <GHC.Int.Int16 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
31de46db3cbe4f9b6aa08540776a350c
  $fNumExp101 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Int.Int16 -> GHC.Int.Int16)
                      @ GHC.Int.Int16
                      @~ <GHC.Int.Int16 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
136d1f2f4b362b22d378c60772fc6add
  $fNumExp102 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Int.Int16 -> GHC.Int.Int16)
                      @ GHC.Int.Int16
                      @~ <GHC.Int.Int16 -> GHC.Int.Int16>_N
                      Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType)
                   x) -}
a26ed7c2fbc005d66b04e0823d88d2fa
  $fNumExp103 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ (GHC.Int.Int16, GHC.Int.Int16)
                   Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int16, GHC.Int.Int16)
                      Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int16), GHC.Int.Int16)
                         @ GHC.Int.Int16
                         @ ((), GHC.Int.Int16)
                         @~ <(((), GHC.Int.Int16), GHC.Int.Int16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int16)
                            @ GHC.Int.Int16
                            @ ()
                            @~ <((), GHC.Int.Int16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int16>_N <GHC.Int.Int16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int16,
                                                                 GHC.Int.Int16)>_N)) -}
1dcf0cdc9427840f0be771afeff04a42
  $fNumExp104 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ (GHC.Int.Int16, GHC.Int.Int16)
                   Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int16, GHC.Int.Int16)
                      Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int16), GHC.Int.Int16)
                         @ GHC.Int.Int16
                         @ ((), GHC.Int.Int16)
                         @~ <(((), GHC.Int.Int16), GHC.Int.Int16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int16)
                            @ GHC.Int.Int16
                            @ ()
                            @~ <((), GHC.Int.Int16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int16>_N <GHC.Int.Int16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int16,
                                                                 GHC.Int.Int16)>_N)) -}
327673a8e18dfc1d5d8eba257bffd896
  $fNumExp105 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   @ (GHC.Int.Int16, GHC.Int.Int16)
                   Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int16, GHC.Int.Int16)
                      Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp18_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int16), GHC.Int.Int16)
                         @ GHC.Int.Int16
                         @ ((), GHC.Int.Int16)
                         @~ <(((), GHC.Int.Int16), GHC.Int.Int16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int16)
                            @ GHC.Int.Int16
                            @ ()
                            @~ <((), GHC.Int.Int16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int16>_N <GHC.Int.Int16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int16,
                                                                 GHC.Int.Int16)>_N)) -}
1f3195a042ae043be2a11ea847205149
  $fNumExp106 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (GHC.Int.$fBitsInt8_$cfromInteger x)) -}
4baf5d1e3ddd673b38c6263909248b35
  $fNumExp107 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Int.Int8 -> GHC.Int.Int8)
                      @ GHC.Int.Int8
                      @~ <GHC.Int.Int8 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
e00153fffba4ff2a61a7c6d676317ba1
  $fNumExp108 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Int.Int8 -> GHC.Int.Int8)
                      @ GHC.Int.Int8
                      @~ <GHC.Int.Int8 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
cec36ccc0a6ff6ca6055de7f431348c0
  $fNumExp109 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Int.Int8 -> GHC.Int.Int8)
                      @ GHC.Int.Int8
                      @~ <GHC.Int.Int8 -> GHC.Int.Int8>_N
                      Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType)
                   x) -}
c302822dbcc7828d247c8b1fd3533b25
  $fNumExp10_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp47
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
c294e6ae4fd1058cbe16febfe8be8e13
  $fNumExp10_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp49
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
9196f905b1b40fc666939c6aa694e2f7
  $fNumExp10_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp48
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
0d0a464a09965c3d1e5951cb679efa8f
  $fNumExp10_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp45
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
de041265a685e651b32ae39581d3da01
  $fNumExp10_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp43
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
38e151a23cc9e4b00a4dccaf92d76cc9
  $fNumExp10_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp46
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
63d01fb680ea84c9dbee4ad328e16396
  $fNumExp10_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp44
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CInt>_N) -}
44febe0135d89e6ae3c0f971468d740f
  $fNumExp10_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CInt, Foreign.C.Types.CInt)
       -> Foreign.C.Types.CInt)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                      -> Foreign.C.Types.CInt)
                   @ Foreign.C.Types.CInt
                   @~ <(Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                       -> Foreign.C.Types.CInt>_N
                   Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType) -}
91e4d0215c2ed1a29948bea1f18b5c2d
  $fNumExp10_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt) -}
e416c6455a68f96ba12b58d3dcd3df53
  $fNumExp10_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CInt, Foreign.C.Types.CInt)
       -> Foreign.C.Types.CInt)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                      -> Foreign.C.Types.CInt)
                   @ Foreign.C.Types.CInt
                   @~ <(Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                       -> Foreign.C.Types.CInt>_N
                   Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType) -}
ae2daaf4bc8142e3a8cb5651cbde9684
  $fNumExp10_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt) -}
73842cf3719496fa0b3c32f75b210ad6
  $fNumExp10_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CInt, Foreign.C.Types.CInt)
       -> Foreign.C.Types.CInt)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                      -> Foreign.C.Types.CInt)
                   @ Foreign.C.Types.CInt
                   @~ <(Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                       -> Foreign.C.Types.CInt>_N
                   Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType) -}
653ce8087e23bc448cde32a175db3444
  $fNumExp11 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Word.Word64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Word.Word64)
                  Data.Array.Accelerate.Classes.Num.$fNumExp11_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp11_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp11_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp11_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp11_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp11_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp11_$cfromInteger -}
c14780a68d98910822f451a4fd82f8cf
  $fNumExp110 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ (GHC.Int.Int8, GHC.Int.Int8)
                   Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int8, GHC.Int.Int8)
                      Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int8), GHC.Int.Int8)
                         @ GHC.Int.Int8
                         @ ((), GHC.Int.Int8)
                         @~ <(((), GHC.Int.Int8), GHC.Int.Int8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int8)
                            @ GHC.Int.Int8
                            @ ()
                            @~ <((), GHC.Int.Int8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int8>_N <GHC.Int.Int8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int8,
                                                                 GHC.Int.Int8)>_N)) -}
f3326d041291fbacdda9050db1003796
  $fNumExp111 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ (GHC.Int.Int8, GHC.Int.Int8)
                   Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int8, GHC.Int.Int8)
                      Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int8), GHC.Int.Int8)
                         @ GHC.Int.Int8
                         @ ((), GHC.Int.Int8)
                         @~ <(((), GHC.Int.Int8), GHC.Int.Int8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int8)
                            @ GHC.Int.Int8
                            @ ()
                            @~ <((), GHC.Int.Int8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int8>_N <GHC.Int.Int8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int8,
                                                                 GHC.Int.Int8)>_N)) -}
1f4a055c99c5144372dc0f89ec6faefd
  $fNumExp112 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int8
                   @ (GHC.Int.Int8, GHC.Int.Int8)
                   Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int8, GHC.Int.Int8)
                      Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp19_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int8), GHC.Int.Int8)
                         @ GHC.Int.Int8
                         @ ((), GHC.Int.Int8)
                         @~ <(((), GHC.Int.Int8), GHC.Int.Int8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int8)
                            @ GHC.Int.Int8
                            @ ()
                            @~ <((), GHC.Int.Int8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int8>_N <GHC.Int.Int8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int8,
                                                                 GHC.Int.Int8)>_N)) -}
10c37c169a599277511bea02ef6f46c3
  $fNumExp113 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (GHC.Float.$fNumFloat_$cfromInteger x)) -}
d4741ad67cf2d941b32b6cb17b8d0087
  $fNumExp114 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Types.Float -> GHC.Types.Float)
                      @ GHC.Types.Float
                      @~ <GHC.Types.Float -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
4372b4842398f63317edfd1bc6253620
  $fNumExp115 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Types.Float -> GHC.Types.Float)
                      @ GHC.Types.Float
                      @~ <GHC.Types.Float -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
66c2a461324b72af695c1b0166b8353e
  $fNumExp116 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Types.Float -> GHC.Types.Float)
                      @ GHC.Types.Float
                      @~ <GHC.Types.Float -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType)
                   x) -}
eaca77a8c4b179e4d3bac8e94a578d31
  $fNumExp117 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Float, GHC.Types.Float)
                      Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Float), GHC.Types.Float)
                         @ GHC.Types.Float
                         @ ((), GHC.Types.Float)
                         @~ <(((), GHC.Types.Float), GHC.Types.Float)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Float)
                            @ GHC.Types.Float
                            @ ()
                            @~ <((), GHC.Types.Float)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Float>_N <GHC.Types.Float>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Float,
                                                                 GHC.Types.Float)>_N)) -}
aa30de9ffaeeb95a96ff44fd91ceff28
  $fNumExp118 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Float, GHC.Types.Float)
                      Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Float), GHC.Types.Float)
                         @ GHC.Types.Float
                         @ ((), GHC.Types.Float)
                         @~ <(((), GHC.Types.Float), GHC.Types.Float)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Float)
                            @ GHC.Types.Float
                            @ ()
                            @~ <((), GHC.Types.Float)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Float>_N <GHC.Types.Float>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Float,
                                                                 GHC.Types.Float)>_N)) -}
a40a0004231766b158bc15554b0d23d3
  $fNumExp119 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Float, GHC.Types.Float)
                      Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp2_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Float), GHC.Types.Float)
                         @ GHC.Types.Float
                         @ ((), GHC.Types.Float)
                         @~ <(((), GHC.Types.Float), GHC.Types.Float)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Float)
                            @ GHC.Types.Float
                            @ ()
                            @~ <((), GHC.Types.Float)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Float>_N <GHC.Types.Float>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Float,
                                                                 GHC.Types.Float)>_N)) -}
3fcb31bce47a791123bd9d6c2552b106
  $fNumExp11_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp54
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
d8e61018304ecbb2f94704c95df3ea26
  $fNumExp11_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp56
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
7b936505398bad691240a269868783c0
  $fNumExp11_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp55
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
5dc29aa15993b331a8bd6758e6bbeecc
  $fNumExp11_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp52
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
a24b1c434c277aa300dc1c058c168c15
  $fNumExp11_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp50
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
45b07da80d4f896865fb5928e4c0999c
  $fNumExp11_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp53
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
fa5171d88bd399cf41f2d963e88c2a27
  $fNumExp11_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp51
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word64>_N) -}
2cdaab5b9cc3d842f6056e2c728155a1
  $fNumExp11_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64)
                   @ GHC.Word.Word64
                   @~ <(GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64>_N
                   Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType) -}
6a75ce1d5895c62752e467df8e269703
  $fNumExp11_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word64, GHC.Word.Word64)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64) -}
c6b4e279b36ed0e65ffab4671dd12573
  $fNumExp11_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64)
                   @ GHC.Word.Word64
                   @~ <(GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64>_N
                   Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType) -}
0f8bfdc207acfd2fc6ec1db36ae42e54
  $fNumExp11_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word64, GHC.Word.Word64)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64) -}
d9719b49247af9edb1f00e72376a9009
  $fNumExp11_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64)
                   @ GHC.Word.Word64
                   @~ <(GHC.Word.Word64, GHC.Word.Word64) -> GHC.Word.Word64>_N
                   Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType) -}
1f3a1e1366f969ce0c79fc3a2bd34305
  $fNumExp12 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Word.Word32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Word.Word32)
                  Data.Array.Accelerate.Classes.Num.$fNumExp12_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp12_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp12_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp12_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp12_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp12_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp12_$cfromInteger -}
628403df6a8fdcb68fcf6c376b6a3b5e
  $fNumExp120 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (GHC.Num.$fNumInt_$cfromInteger x)) -}
4286c5b07aa5cd9af492fe0cb3af7f9f
  $fNumExp121 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Types.Int -> GHC.Types.Int)
                      @ GHC.Types.Int
                      @~ <GHC.Types.Int -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
ad865c836aeeb2c721f231f30208c7ac
  $fNumExp122 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Types.Int -> GHC.Types.Int)
                      @ GHC.Types.Int
                      @~ <GHC.Types.Int -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
75d34c1d980dcd8ce98ed3b2ea714de0
  $fNumExp123 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Types.Int -> GHC.Types.Int)
                      @ GHC.Types.Int
                      @~ <GHC.Types.Int -> GHC.Types.Int>_N
                      Data.Array.Accelerate.Type.$fIsNumInt_$cnumType)
                   x) -}
f327991786b3bedbc1c8697de57babed
  $fNumExp124 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ (GHC.Types.Int, GHC.Types.Int)
                   Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Int, GHC.Types.Int)
                      Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Int), GHC.Types.Int)
                         @ GHC.Types.Int
                         @ ((), GHC.Types.Int)
                         @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Int)
                            @ GHC.Types.Int
                            @ ()
                            @~ <((), GHC.Types.Int)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                 GHC.Types.Int)>_N)) -}
dcc7dd4fdbd380a915e0bcb3f21307e5
  $fNumExp125 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ (GHC.Types.Int, GHC.Types.Int)
                   Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Int, GHC.Types.Int)
                      Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Int), GHC.Types.Int)
                         @ GHC.Types.Int
                         @ ((), GHC.Types.Int)
                         @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Int)
                            @ GHC.Types.Int
                            @ ()
                            @~ <((), GHC.Types.Int)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                 GHC.Types.Int)>_N)) -}
93ac85be343839211736c05650acdee2
  $fNumExp126 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   @ (GHC.Types.Int, GHC.Types.Int)
                   Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Int, GHC.Types.Int)
                      Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Int), GHC.Types.Int)
                         @ GHC.Types.Int
                         @ ((), GHC.Types.Int)
                         @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Int)
                            @ GHC.Types.Int
                            @ ()
                            @~ <((), GHC.Types.Int)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                 GHC.Types.Int)>_N)) -}
280830196d4e9e2f2bd7fc4d1af58607
  $fNumExp127 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (GHC.Word.$fBitsWord16_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CUShort[0]))) -}
ecaed576e075c0e0bef3a8dab9044ce6
  $fNumExp128 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
fff2088e79fee48372bc0c5557e65cf8
  $fNumExp129 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
75fa1baade4959ac7b57b0fa1e094736
  $fNumExp12_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp61
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
8ba91bfc3ba213cc1fca5925db893607
  $fNumExp12_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp63
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
101a52d6823bcea728b470f35b3863c4
  $fNumExp12_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp62
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
a1c2ab6b5cf3130f65dafd7b037238ee
  $fNumExp12_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp59
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
a8f95e87c8bbad4e50947fcfd4207709
  $fNumExp12_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp57
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
a030f2b17e3e386bea631968c6736c40
  $fNumExp12_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp60
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
a70a28244d94cb2562037a3b2eb3babd
  $fNumExp12_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp58
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word32>_N) -}
f754a5abb1a60a41b9c889bf8f04c931
  $fNumExp12_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32)
                   @ GHC.Word.Word32
                   @~ <(GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32>_N
                   Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType) -}
7daae65b6433cfcfd252852cf4dc3f4a
  $fNumExp12_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word32, GHC.Word.Word32)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Word.Word32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32) -}
3c3276602d336121418cf99b8cbc4a3c
  $fNumExp12_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32)
                   @ GHC.Word.Word32
                   @~ <(GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32>_N
                   Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType) -}
043aec81f82321fce54e2f7ca638a91b
  $fNumExp12_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word32, GHC.Word.Word32)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Word.Word32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32) -}
ad22d687e4bc31628c272f71c4852ec4
  $fNumExp12_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32)
                   @ GHC.Word.Word32
                   @~ <(GHC.Word.Word32, GHC.Word.Word32) -> GHC.Word.Word32>_N
                   Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType) -}
627cbced6b168772e3fe7341a8837ec3
  $fNumExp13 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Word.Word16)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Word.Word16)
                  Data.Array.Accelerate.Classes.Num.$fNumExp13_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp13_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp13_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp13_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp13_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp13_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp13_$cfromInteger -}
607c8229d466c9f5dda48d4b51cabfb1
  $fNumExp130 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CUShort -> Foreign.C.Types.CUShort)
                      @ Foreign.C.Types.CUShort
                      @~ <Foreign.C.Types.CUShort -> Foreign.C.Types.CUShort>_N
                      Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType)
                   x) -}
fb10db97548133b01e88f6057c78c9c5
  $fNumExp131 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                   Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)
                         @ Foreign.C.Types.CUShort
                         @ ((), Foreign.C.Types.CUShort)
                         @~ <(((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUShort)
                            @ Foreign.C.Types.CUShort
                            @ ()
                            @~ <((), Foreign.C.Types.CUShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CUShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUShort,
                                                                 Foreign.C.Types.CUShort)>_N)) -}
747ba15d0e360ccafdbace943e1a3b22
  $fNumExp132 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                   Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)
                         @ Foreign.C.Types.CUShort
                         @ ((), Foreign.C.Types.CUShort)
                         @~ <(((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUShort)
                            @ Foreign.C.Types.CUShort
                            @ ()
                            @~ <((), Foreign.C.Types.CUShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CUShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUShort,
                                                                 Foreign.C.Types.CUShort)>_N)) -}
2125eb02cbd43fa0c08edc9c7752a771
  $fNumExp133 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUShort
                   @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                   Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp3_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)
                         @ Foreign.C.Types.CUShort
                         @ ((), Foreign.C.Types.CUShort)
                         @~ <(((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUShort)
                            @ Foreign.C.Types.CUShort
                            @ ()
                            @~ <((), Foreign.C.Types.CUShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CUShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUShort,
                                                                 Foreign.C.Types.CUShort)>_N)) -}
87e9ed8ae935f1be8319994126cd285f
  $fNumExp134 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (GHC.Int.$fBitsInt16_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CShort[0]))) -}
7ba031b295c1863bc2c1ce72f85a4f5e
  $fNumExp135 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
3982e9f200cc916ba19be1f10d1e54fc
  $fNumExp136 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
5d2d81ff17fd91945486b268e502c4ff
  $fNumExp137 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CShort -> Foreign.C.Types.CShort)
                      @ Foreign.C.Types.CShort
                      @~ <Foreign.C.Types.CShort -> Foreign.C.Types.CShort>_N
                      Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType)
                   x) -}
a57736275aff5081dedf25da4a867861
  $fNumExp138 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                   Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)
                         @ Foreign.C.Types.CShort
                         @ ((), Foreign.C.Types.CShort)
                         @~ <(((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CShort)
                            @ Foreign.C.Types.CShort
                            @ ()
                            @~ <((), Foreign.C.Types.CShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CShort>_N <Foreign.C.Types.CShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CShort,
                                                                 Foreign.C.Types.CShort)>_N)) -}
caa88e0347e246be9087ef60aadb9ca1
  $fNumExp139 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                   Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)
                         @ Foreign.C.Types.CShort
                         @ ((), Foreign.C.Types.CShort)
                         @~ <(((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CShort)
                            @ Foreign.C.Types.CShort
                            @ ()
                            @~ <((), Foreign.C.Types.CShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CShort>_N <Foreign.C.Types.CShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CShort,
                                                                 Foreign.C.Types.CShort)>_N)) -}
21c9be48e5fa348b616291104c2a443b
  $fNumExp13_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp68
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
16da743c68d8812c6905cc18ebbb2fe9
  $fNumExp13_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp70
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
b73ce8776ffe8d183bf71658d0198652
  $fNumExp13_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp69
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
6185135772d6d8ffa6117c08af1e8b2d
  $fNumExp13_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp66
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
40dfb979ef3c8167e651a37b298097da
  $fNumExp13_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp64
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
796d87b870d069bc96ef7c3dbb94d9a6
  $fNumExp13_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp67
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
a3f6cff8afc0e4cde1c93556de0e30d6
  $fNumExp13_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp65
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word16>_N) -}
8e8859b46e46d4a33b1b98410a534e1a
  $fNumExp13_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16)
                   @ GHC.Word.Word16
                   @~ <(GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16>_N
                   Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType) -}
59968b4957aba4341e689a0c02dab2fb
  $fNumExp13_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word16, GHC.Word.Word16)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Word.Word16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16) -}
a4f35627a8230c2e99f3630bf4afec16
  $fNumExp13_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16)
                   @ GHC.Word.Word16
                   @~ <(GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16>_N
                   Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType) -}
607d58b001de41029a80b6d413ab5fbc
  $fNumExp13_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word16, GHC.Word.Word16)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Word.Word16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16) -}
cd1876333112586698fdf89ec85cf7f2
  $fNumExp13_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16)
                   @ GHC.Word.Word16
                   @~ <(GHC.Word.Word16, GHC.Word.Word16) -> GHC.Word.Word16>_N
                   Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType) -}
38db3d50bbb79f190bcf56001278448a
  $fNumExp14 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Word.Word8)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Word.Word8)
                  Data.Array.Accelerate.Classes.Num.$fNumExp14_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp14_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp14_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp14_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp14_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp14_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp14_$cfromInteger -}
3eb1756a33b92974d320925f12fc9bb7
  $fNumExp140 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CShort
                   @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                   Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp4_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)
                         @ Foreign.C.Types.CShort
                         @ ((), Foreign.C.Types.CShort)
                         @~ <(((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CShort)
                            @ Foreign.C.Types.CShort
                            @ ()
                            @~ <((), Foreign.C.Types.CShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CShort>_N <Foreign.C.Types.CShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CShort,
                                                                 Foreign.C.Types.CShort)>_N)) -}
99e0fc4e721392f50eea957e433ceb5a
  $fNumExp141 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (GHC.Word.$fBitsWord64_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CULLong[0]))) -}
6cf16183f4b40bf1ff0f0b1add43e585
  $fNumExp142 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
7898f91a3d950a53f8363fcdcde9676f
  $fNumExp143 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
d0518ed766a6025ffac16d774c442b8f
  $fNumExp144 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CULLong -> Foreign.C.Types.CULLong)
                      @ Foreign.C.Types.CULLong
                      @~ <Foreign.C.Types.CULLong -> Foreign.C.Types.CULLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType)
                   x) -}
8325c1a67422fa5f71feddb0ddaddde8
  $fNumExp145 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)
                         @ Foreign.C.Types.CULLong
                         @ ((), Foreign.C.Types.CULLong)
                         @~ <(((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULLong)
                            @ Foreign.C.Types.CULLong
                            @ ()
                            @~ <((), Foreign.C.Types.CULLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CULLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULLong,
                                                                 Foreign.C.Types.CULLong)>_N)) -}
bd9bfbf7c88f40218b416a9d56dee900
  $fNumExp146 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)
                         @ Foreign.C.Types.CULLong
                         @ ((), Foreign.C.Types.CULLong)
                         @~ <(((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULLong)
                            @ Foreign.C.Types.CULLong
                            @ ()
                            @~ <((), Foreign.C.Types.CULLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CULLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULLong,
                                                                 Foreign.C.Types.CULLong)>_N)) -}
61eb7ba82b9395f5a8c42bd22c376131
  $fNumExp147 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULLong
                   @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp5_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)
                         @ Foreign.C.Types.CULLong
                         @ ((), Foreign.C.Types.CULLong)
                         @~ <(((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULLong)
                            @ Foreign.C.Types.CULLong
                            @ ()
                            @~ <((), Foreign.C.Types.CULLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CULLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULLong,
                                                                 Foreign.C.Types.CULLong)>_N)) -}
88e4508f2dff221442f97c5cef377fd0
  $fNumExp148 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (GHC.Int.$fBitsInt64_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CLLong[0]))) -}
3bcd465cf790d93c17c13da37e249638
  $fNumExp149 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
1d4c411d912dc8b7210171933f0ae1d0
  $fNumExp14_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp75
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
1ef21f42dab2dd8262b34fdf1b359fd2
  $fNumExp14_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp77
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
64daaacbcc14fcbe00b20645df400c96
  $fNumExp14_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp76
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
e92de39a66e3412488112c677eebce92
  $fNumExp14_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp73
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
4afac11e7e620bd6d2c9ef20f9ccaba7
  $fNumExp14_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp71
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
76b7123f4f685a9696ff65531d7b2e8c
  $fNumExp14_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp74
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
383b6d5d9946dd356732cd251f0250e5
  $fNumExp14_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp72
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Word.Word8>_N) -}
c0456462c21887ff3207a70f448aa133
  $fNumExp14_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8)
                   @ GHC.Word.Word8
                   @~ <(GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8>_N
                   Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType) -}
478afe742bb50e758f8dc4d806b4730c
  $fNumExp14_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word8, GHC.Word.Word8)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8) -}
6370495ac3a837f4bca126eb84f5bbc5
  $fNumExp14_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8)
                   @ GHC.Word.Word8
                   @~ <(GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8>_N
                   Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType) -}
47924df2ca9ed0cf8050e1e3cd76c835
  $fNumExp14_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word8, GHC.Word.Word8)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8) -}
327e13247dcb7d2264c09c0264266bd2
  $fNumExp14_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8)
                   @ GHC.Word.Word8
                   @~ <(GHC.Word.Word8, GHC.Word.Word8) -> GHC.Word.Word8>_N
                   Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType) -}
932029cfcf2d088406f4e40ef0a05526
  $fNumExp15 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Types.Word)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Types.Word)
                  Data.Array.Accelerate.Classes.Num.$fNumExp15_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp15_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp15_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp15_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp15_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp15_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp15_$cfromInteger -}
496698d06193f3cf3c0ef516815417b0
  $fNumExp150 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
a63c62dde8064c91f2a902f68ffbd5b3
  $fNumExp151 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CLLong -> Foreign.C.Types.CLLong)
                      @ Foreign.C.Types.CLLong
                      @~ <Foreign.C.Types.CLLong -> Foreign.C.Types.CLLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType)
                   x) -}
5593fcef885d30f48712678b29f4704d
  $fNumExp152 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)
                         @ Foreign.C.Types.CLLong
                         @ ((), Foreign.C.Types.CLLong)
                         @~ <(((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLLong)
                            @ Foreign.C.Types.CLLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CLLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLLong,
                                                                 Foreign.C.Types.CLLong)>_N)) -}
beffe4e7494bad231a7319994a484f3d
  $fNumExp153 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)
                         @ Foreign.C.Types.CLLong
                         @ ((), Foreign.C.Types.CLLong)
                         @~ <(((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLLong)
                            @ Foreign.C.Types.CLLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CLLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLLong,
                                                                 Foreign.C.Types.CLLong)>_N)) -}
10351607c7c77ecfc77894d675cff3c6
  $fNumExp154 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLLong
                   @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp6_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)
                         @ Foreign.C.Types.CLLong
                         @ ((), Foreign.C.Types.CLLong)
                         @~ <(((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLLong)
                            @ Foreign.C.Types.CLLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CLLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLLong,
                                                                 Foreign.C.Types.CLLong)>_N)) -}
e3674332c2e1ea9c6d88a0de8d1571fa
  $fNumExp155 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (GHC.Word.$fBitsWord64_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CULong[0]))) -}
24db24baee40447b7627c98bb1ef0b43
  $fNumExp156 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
cb643cf7a3fb07f7084b22bf90f73fa4
  $fNumExp157 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
d9c9702cd12810eced99ee6ff76b01f7
  $fNumExp158 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CULong -> Foreign.C.Types.CULong)
                      @ Foreign.C.Types.CULong
                      @~ <Foreign.C.Types.CULong -> Foreign.C.Types.CULong>_N
                      Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType)
                   x) -}
4fc9bd525d5e6034616fb81059a9379f
  $fNumExp159 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)
                         @ Foreign.C.Types.CULong
                         @ ((), Foreign.C.Types.CULong)
                         @~ <(((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULong)
                            @ Foreign.C.Types.CULong
                            @ ()
                            @~ <((), Foreign.C.Types.CULong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULong>_N <Foreign.C.Types.CULong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULong,
                                                                 Foreign.C.Types.CULong)>_N)) -}
f4d07f4b498d11ad3be47c63216e6230
  $fNumExp15_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp82
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
8d4b4171fa9f7ed0ca877c99413e48cc
  $fNumExp15_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp84
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
582e315d624c61cd9056a02cc43e7ec7
  $fNumExp15_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp83
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
b21ab06664d8870b94d86c469d006f31
  $fNumExp15_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp80
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
021180085389b35fad58cb2f7759e8f8
  $fNumExp15_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp78
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
a470ec50c271d4f65b293c2626c8af93
  $fNumExp15_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp81
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
b2dd81927c81e751a43576a0e9714d77
  $fNumExp15_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp79
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Word>_N) -}
c944b4f3fed33d1c9cf0b025ae28bc08
  $fNumExp15_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word)
                   @ GHC.Types.Word
                   @~ <(GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word>_N
                   Data.Array.Accelerate.Type.$fIsNumWord_$cnumType) -}
392ee042081c15f84965ed0b16c50e5f
  $fNumExp15_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Word, GHC.Types.Word)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Word
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord) -}
25f2a778195b467f5e4513b72e99cd7f
  $fNumExp15_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word)
                   @ GHC.Types.Word
                   @~ <(GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word>_N
                   Data.Array.Accelerate.Type.$fIsNumWord_$cnumType) -}
96a0dc88d402b0927a02f1fa7936fe45
  $fNumExp15_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Word, GHC.Types.Word)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Word
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord) -}
dc8c1c1e4b1fa97b41051afcf8c278c8
  $fNumExp15_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word)
                   @ GHC.Types.Word
                   @~ <(GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Word>_N
                   Data.Array.Accelerate.Type.$fIsNumWord_$cnumType) -}
d2fef9d640c8354a6909adac3e7569c3
  $fNumExp16 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Int.Int64)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Int.Int64)
                  Data.Array.Accelerate.Classes.Num.$fNumExp16_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp16_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp16_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp16_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp16_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp16_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp16_$cfromInteger -}
aef53e97eef89068f6fff6e9960504f3
  $fNumExp160 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)
                         @ Foreign.C.Types.CULong
                         @ ((), Foreign.C.Types.CULong)
                         @~ <(((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULong)
                            @ Foreign.C.Types.CULong
                            @ ()
                            @~ <((), Foreign.C.Types.CULong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULong>_N <Foreign.C.Types.CULong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULong,
                                                                 Foreign.C.Types.CULong)>_N)) -}
b2584a21638f17434d1d5bf8ab15fdc5
  $fNumExp161 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CULong
                   @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp7_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)
                         @ Foreign.C.Types.CULong
                         @ ((), Foreign.C.Types.CULong)
                         @~ <(((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULong)
                            @ Foreign.C.Types.CULong
                            @ ()
                            @~ <((), Foreign.C.Types.CULong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULong>_N <Foreign.C.Types.CULong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULong,
                                                                 Foreign.C.Types.CULong)>_N)) -}
4d8ce472b136043eac83e8dbea3c2b82
  $fNumExp162 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (GHC.Int.$fBitsInt64_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CLong[0]))) -}
3020e0fc3c23b4ae30b0ecd71950193d
  $fNumExp163 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
7ddf1d6f080021a827113714f20fcedc
  $fNumExp164 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
f90ab7f1587ab34911d30f84c0064fcb
  $fNumExp165 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CLong -> Foreign.C.Types.CLong)
                      @ Foreign.C.Types.CLong
                      @~ <Foreign.C.Types.CLong -> Foreign.C.Types.CLong>_N
                      Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType)
                   x) -}
bb22cf3995bccfcdec7d5642a98aa525
  $fNumExp166 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)
                         @ Foreign.C.Types.CLong
                         @ ((), Foreign.C.Types.CLong)
                         @~ <(((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLong)
                            @ Foreign.C.Types.CLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLong>_N <Foreign.C.Types.CLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLong,
                                                                 Foreign.C.Types.CLong)>_N)) -}
6e01bbb504713160e587c20c6d2ab785
  $fNumExp167 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)
                         @ Foreign.C.Types.CLong
                         @ ((), Foreign.C.Types.CLong)
                         @~ <(((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLong)
                            @ Foreign.C.Types.CLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLong>_N <Foreign.C.Types.CLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLong,
                                                                 Foreign.C.Types.CLong)>_N)) -}
7d5781ab9bd6126b99bda378c574c966
  $fNumExp168 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CLong
                   @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                   Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp8_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)
                         @ Foreign.C.Types.CLong
                         @ ((), Foreign.C.Types.CLong)
                         @~ <(((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLong)
                            @ Foreign.C.Types.CLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLong>_N <Foreign.C.Types.CLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLong,
                                                                 Foreign.C.Types.CLong)>_N)) -}
9b009f827f8f29ad7f8e45b543ce7265
  $fNumExp169 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (GHC.Word.$fBitsWord32_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CUInt[0]))) -}
82da0759466938e6dd2e9220a66f3486
  $fNumExp16_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp89
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
20be99b73131c5363a6e79de8c7e9c06
  $fNumExp16_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp91
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
f1146066dea380e9d80127bfec59bc1c
  $fNumExp16_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp90
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
87ecb2d6f492fc51e403810f78e98648
  $fNumExp16_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp87
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
fd6b36bb1e92b99e5813b0830031fe54
  $fNumExp16_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp85
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
6ef006011b3e2c20e474531707f6cc6e
  $fNumExp16_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp88
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
0063af9ccfd5fabb4e2c644d59fa76a1
  $fNumExp16_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp86
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int64>_N) -}
d7817e2c62ee05744ffd67e63d1c7def
  $fNumExp16_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64)
                   @ GHC.Int.Int64
                   @~ <(GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64>_N
                   Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType) -}
beefc0f3a6d5afff7817e13d8af517e1
  $fNumExp16_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int64, GHC.Int.Int64)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Int.Int64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64) -}
8870a8445816f6129a8e349324449c5d
  $fNumExp16_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64)
                   @ GHC.Int.Int64
                   @~ <(GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64>_N
                   Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType) -}
c612f6a2f5a0ffcc0ac9e1bd91bbc315
  $fNumExp16_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int64, GHC.Int.Int64)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Int.Int64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64) -}
7373ac5471f839b94735870c933768b4
  $fNumExp16_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64)
                   @ GHC.Int.Int64
                   @~ <(GHC.Int.Int64, GHC.Int.Int64) -> GHC.Int.Int64>_N
                   Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType) -}
fd04286807aa5fdeb9b336bf49c6f77b
  $fNumExp17 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Int.Int32)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Int.Int32)
                  Data.Array.Accelerate.Classes.Num.$fNumExp17_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp17_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp17_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp17_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp17_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp17_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp17_$cfromInteger -}
4dbded481936c4eb8bb5c3f8e542ed97
  $fNumExp170 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
4ed10964f893b8cb28850aae57dfabdc
  $fNumExp171 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
6f1aa681ea18947a00ed5dc97040dbf6
  $fNumExp172 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CUInt -> Foreign.C.Types.CUInt)
                      @ Foreign.C.Types.CUInt
                      @~ <Foreign.C.Types.CUInt -> Foreign.C.Types.CUInt>_N
                      Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType)
                   x) -}
e0852f5eedc8e13649572f595d8fbb09
  $fNumExp173 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                   Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)
                         @ Foreign.C.Types.CUInt
                         @ ((), Foreign.C.Types.CUInt)
                         @~ <(((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUInt)
                            @ Foreign.C.Types.CUInt
                            @ ()
                            @~ <((), Foreign.C.Types.CUInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CUInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUInt,
                                                                 Foreign.C.Types.CUInt)>_N)) -}
91ee9349aa50d95c4df3a8c340073f48
  $fNumExp174 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                   Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)
                         @ Foreign.C.Types.CUInt
                         @ ((), Foreign.C.Types.CUInt)
                         @~ <(((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUInt)
                            @ Foreign.C.Types.CUInt
                            @ ()
                            @~ <((), Foreign.C.Types.CUInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CUInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUInt,
                                                                 Foreign.C.Types.CUInt)>_N)) -}
aeb63b8f629a62717dd3f68e0c053e90
  $fNumExp175 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CUInt
                   @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                   Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp9_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)
                         @ Foreign.C.Types.CUInt
                         @ ((), Foreign.C.Types.CUInt)
                         @~ <(((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUInt)
                            @ Foreign.C.Types.CUInt
                            @ ()
                            @~ <((), Foreign.C.Types.CUInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CUInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUInt,
                                                                 Foreign.C.Types.CUInt)>_N)) -}
68e5f54c7e707f2745574fb3a47cf818
  $fNumExp17_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp96
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
703dc42ac5ff118868019e8765c97092
  $fNumExp17_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp98
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
34eb816647dab6b9d38bce0447917a16
  $fNumExp17_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp97
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
758d7f4f579e6708f7eb35ee33bafdf8
  $fNumExp17_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp94
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
77c234aab558dd5af782586383546442
  $fNumExp17_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp92
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
7aa01bde5e82cba49fb7a6570a9f5936
  $fNumExp17_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp95
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
74a96f6dac054ab484bc26670dda42b0
  $fNumExp17_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp93
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int32>_N) -}
bfdda4f3f34ec392be35ea318d82406b
  $fNumExp17_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32)
                   @ GHC.Int.Int32
                   @~ <(GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32>_N
                   Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType) -}
f5bd3e8b8a634750a89d68b9ff119dba
  $fNumExp17_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int32, GHC.Int.Int32)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32) -}
e6c61fafe1ed20143fd00b98373a5f2c
  $fNumExp17_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32)
                   @ GHC.Int.Int32
                   @~ <(GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32>_N
                   Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType) -}
f3d7043ff56441c0f66841b960b50443
  $fNumExp17_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int32, GHC.Int.Int32)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32) -}
c51718c1d331f89e2a14e96735a0efb3
  $fNumExp17_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32)
                   @ GHC.Int.Int32
                   @~ <(GHC.Int.Int32, GHC.Int.Int32) -> GHC.Int.Int32>_N
                   Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType) -}
47adb553f01a27167ed5273dc5c7af90
  $fNumExp18 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Int.Int16)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Int.Int16)
                  Data.Array.Accelerate.Classes.Num.$fNumExp18_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp18_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp18_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp18_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp18_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp18_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp18_$cfromInteger -}
2282359f7bfdd03ab8fb8ee8134250f8
  $fNumExp18_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp103
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
8ef2953163b1086d69e66018a1d9001c
  $fNumExp18_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp105
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
93dcdce02050289b041fc5b47ffbc326
  $fNumExp18_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp104
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
c57d559163427583bd8d8cbfe33ff8b6
  $fNumExp18_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp101
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
2250895fd6e06de8083f33106728b194
  $fNumExp18_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp99
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
6c33c3ab4bd83790e0df80ae87bb4a90
  $fNumExp18_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp102
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
f8508d1aa3ca857cabd4172d1fc2e1db
  $fNumExp18_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp100
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int16>_N) -}
d4cf3f5bbc075947b7a3e5e39f1cec53
  $fNumExp18_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16)
                   @ GHC.Int.Int16
                   @~ <(GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16>_N
                   Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType) -}
fc2cdbf0cbfb36b1e7db81d3a7713537
  $fNumExp18_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int16, GHC.Int.Int16)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Int.Int16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16) -}
ed7d6c03d44585da2093a42da73099c9
  $fNumExp18_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16)
                   @ GHC.Int.Int16
                   @~ <(GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16>_N
                   Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType) -}
fbb753a2aec1063e1ad9f8d5b3d46bdb
  $fNumExp18_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int16, GHC.Int.Int16)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Int.Int16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16) -}
3a39660643ebd4779024cef35f52a941
  $fNumExp18_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16)
                   @ GHC.Int.Int16
                   @~ <(GHC.Int.Int16, GHC.Int.Int16) -> GHC.Int.Int16>_N
                   Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType) -}
15f2269260601393b38300b62e683d63
  $fNumExp19 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Int.Int8)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Int.Int8)
                  Data.Array.Accelerate.Classes.Num.$fNumExp19_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp19_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp19_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp19_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp19_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp19_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp19_$cfromInteger -}
7ff97cdaf5b02b5ce403f2f0feec5313
  $fNumExp19_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp110
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
698a4f981f21d767b1ed7405961e7c63
  $fNumExp19_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp112
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
9b380875bdedc57d121cc941eb379123
  $fNumExp19_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp111
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
0433de341d7a925eb9271b872b56d79d
  $fNumExp19_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp108
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
ec2ee6fbaed0e6f896af7d7f31168d56
  $fNumExp19_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp106
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
f534407d400227b4c7a16bab8216d6cc
  $fNumExp19_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp109
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
1840265911a9377aed338717c351fee4
  $fNumExp19_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp107
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Int.Int8>_N) -}
2a5cdcaf4df210e040a24583d31e6565
  $fNumExp19_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8)
                   @ GHC.Int.Int8
                   @~ <(GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8>_N
                   Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType) -}
73411d372f38399ede730ad1c973630c
  $fNumExp19_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt (GHC.Int.Int8, GHC.Int.Int8)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Int.Int8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8) -}
1ba81639ca492bc722f499e55437c5a7
  $fNumExp19_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8)
                   @ GHC.Int.Int8
                   @~ <(GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8>_N
                   Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType) -}
88d933eb683086f5f86908ebc649ac98
  $fNumExp19_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt (GHC.Int.Int8, GHC.Int.Int8)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Int.Int8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8) -}
55346157f2574a28430bdeb4a0c2d9d6
  $fNumExp19_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8)
                   @ GHC.Int.Int8
                   @~ <(GHC.Int.Int8, GHC.Int.Int8) -> GHC.Int.Int8>_N
                   Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType) -}
86e81ad75e75b24e107868f029848086
  $fNumExp1_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp40
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
db3e538f4401ed5950c3467292cdc809
  $fNumExp1_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp42
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
16ecf9f34ff04f054a15b5b2d73d6280
  $fNumExp1_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp41
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
96db3a66eecd67a37279723368c38394
  $fNumExp1_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp38
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
376028895cdafa4307a2fba80208dfac
  $fNumExp1_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp36
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
962b10a88bee99713ae8e6a7a78e380c
  $fNumExp1_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp39
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
c3529085c5422ce55c3e640996846c62
  $fNumExp1_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp37
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
56fca8d215dafa6c19652c497e09a16c
  $fNumExp1_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double)
                   @ GHC.Types.Double
                   @~ <(GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double>_N
                   Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType) -}
bd5a0ac0fa075ccd5e899093b43a18c8
  $fNumExp1_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Double, GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble) -}
9bdf6d51b0a34bb6b925971ed797d4d4
  $fNumExp1_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double)
                   @ GHC.Types.Double
                   @~ <(GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double>_N
                   Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType) -}
247d47b06bc89aa504ede74c1d61a8f6
  $fNumExp1_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Double, GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble) -}
b008e9dbe34ddacdd62a78363fbebafe
  $fNumExp1_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double)
                   @ GHC.Types.Double
                   @~ <(GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double>_N
                   Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType) -}
133ac519b36046969cbcea08add3bd80
  $fNumExp2 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
                  Data.Array.Accelerate.Classes.Num.$fNumExp2_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp2_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp2_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp2_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp2_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp2_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp2_$cfromInteger -}
25261b972f6d8155ece1120389058a1f
  $fNumExp20 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
                  Data.Array.Accelerate.Classes.Num.$fNumExp20_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp20_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp20_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp20_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp20_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp20_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp20_$cfromInteger -}
ac7b12b824baabfbe680c319fce8c01e
  $fNumExp20_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp124
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
d654ba8e8737b92c71f90f0b9c2f1433
  $fNumExp20_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp126
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
f02a97e33f87c48f8013000e7ffd9fb1
  $fNumExp20_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp125
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
7f55939717fd8ebd11551e222b38cc78
  $fNumExp20_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp122
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
b7fbfd2afe5d3f08775fab117ddf7cf7
  $fNumExp20_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp120
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
904819548bac8ef8f05bed762908baf6
  $fNumExp20_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp123
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
0b45a13832ad937d46a08c74eef1fec6
  $fNumExp20_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp121
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) -}
68800776bcaa56dfc5485f40dfd514bd
  $fNumExp20_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int)
                   @ GHC.Types.Int
                   @~ <(GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int>_N
                   Data.Array.Accelerate.Type.$fIsNumInt_$cnumType) -}
fa46bee67799a7322ae046fe7db59a00
  $fNumExp20_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt) -}
c03477c43172ee3d7de2dfd6b90117f6
  $fNumExp20_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int)
                   @ GHC.Types.Int
                   @~ <(GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int>_N
                   Data.Array.Accelerate.Type.$fIsNumInt_$cnumType) -}
ae46a783cfa8e9750fe779fe61433b06
  $fNumExp20_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt) -}
a93a4b5164b67d10a1b5b1e53c72caf3
  $fNumExp20_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int)
                   @ GHC.Types.Int
                   @~ <(GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int>_N
                   Data.Array.Accelerate.Type.$fIsNumInt_$cnumType) -}
9d53587c6530f7aad17f46149f35f0dc
  $fNumExp22 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (GHC.Float.$fNumDouble_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CDouble[0]))) -}
42ae851ff5b250a4b33d2f7fc81a3117
  $fNumExp23 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CDouble -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CDouble -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
2cb6ba22d14c29b9888089009dd70f97
  $fNumExp24 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CDouble -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CDouble -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
57bd059f17a3b40b706e203e27f09bc9
  $fNumExp25 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CDouble -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CDouble -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType)
                   x) -}
df84cd9767d7efd10492770b0e2e4b23
  $fNumExp26 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                   Data.Array.Accelerate.Classes.Num.$fNumExp_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Classes.Num.$fNumExp_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      Data.Array.Accelerate.Classes.Num.$fNumExp_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)
                         @ Foreign.C.Types.CDouble
                         @ ((), Foreign.C.Types.CDouble)
                         @~ <(((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CDouble)
                            @ Foreign.C.Types.CDouble
                            @ ()
                            @~ <((), Foreign.C.Types.CDouble)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CDouble>_N <Foreign.C.Types.CDouble>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CDouble,
                                                                 Foreign.C.Types.CDouble)>_N)) -}
b238a4799ac9c91e1da141c2af74516f
  $fNumExp27 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                   Data.Array.Accelerate.Classes.Num.$fNumExp_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Classes.Num.$fNumExp_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      Data.Array.Accelerate.Classes.Num.$fNumExp_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)
                         @ Foreign.C.Types.CDouble
                         @ ((), Foreign.C.Types.CDouble)
                         @~ <(((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CDouble)
                            @ Foreign.C.Types.CDouble
                            @ ()
                            @~ <((), Foreign.C.Types.CDouble)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CDouble>_N <Foreign.C.Types.CDouble>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CDouble,
                                                                 Foreign.C.Types.CDouble)>_N)) -}
d5fea6f36228be4235e26eef6820a736
  $fNumExp28 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                   Data.Array.Accelerate.Classes.Num.$fNumExp_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Classes.Num.$fNumExp_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      Data.Array.Accelerate.Classes.Num.$fNumExp_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)
                         @ Foreign.C.Types.CDouble
                         @ ((), Foreign.C.Types.CDouble)
                         @~ <(((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CDouble)
                            @ Foreign.C.Types.CDouble
                            @ ()
                            @~ <((), Foreign.C.Types.CDouble)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CDouble>_N <Foreign.C.Types.CDouble>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CDouble,
                                                                 Foreign.C.Types.CDouble)>_N)) -}
9528ba9df83bea7d1de4daa997046753
  $fNumExp29 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (GHC.Float.$fNumFloat_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CFloat[0]))) -}
8a042bcf22db9490187c59a68f751dd9
  $fNumExp2_$c* ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp117
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
37ca8790a9202896fa1ddb58a1047abc
  $fNumExp2_$c+ ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp119
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
cc20b6c19b98f7b02b149636a92e1d00
  $fNumExp2_$c- ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp118
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
48d2662476bb3c9e0b460bfbc682ff6c
  $fNumExp2_$cabs ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp115
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
e3798eb5b12a46283d13aca5c054e0e0
  $fNumExp2_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp113
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
b0c6cc3036a1f5717e82e96a6ab6b3b6
  $fNumExp2_$cnegate ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp116
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
cd09531561d9cd53a1136b5f91b214f5
  $fNumExp2_$csignum ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp114
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
c83c5387a196f66de15eeb2f3374e691
  $fNumExp2_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float)
                   @ GHC.Types.Float
                   @~ <(GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float>_N
                   Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType) -}
19b2232d68eb00bb745969dc47a32fd7
  $fNumExp2_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat) -}
65498a421dbbb37748096cee9b409689
  $fNumExp2_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float)
                   @ GHC.Types.Float
                   @~ <(GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float>_N
                   Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType) -}
064068f8becc8185abcdfd7f2bde2933
  $fNumExp2_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat) -}
c3c270974725f730e6f7a8fd80005e3c
  $fNumExp2_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float)
                   @ GHC.Types.Float
                   @~ <(GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float>_N
                   Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType) -}
ececb64050536584b3bea4f6cdc86be5
  $fNumExp3 ::
    GHC.Num.Num
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort)
                  Data.Array.Accelerate.Classes.Num.$fNumExp3_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp3_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp3_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp3_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp3_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp3_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp3_$cfromInteger -}
cbb6f1901026af9151d67bc8ac2fa865
  $fNumExp30 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CFloat -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CFloat -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
6bea0223c5e223910adb9696e94dabc4
  $fNumExp31 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CFloat -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CFloat -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
369bb99182d65ceb9af0ad8f1c9f36e1
  $fNumExp32 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CFloat -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CFloat -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType)
                   x) -}
dc7f78544da28423fe8b08738043e0d4
  $fNumExp33 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                   Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)
                         @ Foreign.C.Types.CFloat
                         @ ((), Foreign.C.Types.CFloat)
                         @~ <(((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CFloat)
                            @ Foreign.C.Types.CFloat
                            @ ()
                            @~ <((), Foreign.C.Types.CFloat)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CFloat>_N <Foreign.C.Types.CFloat>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CFloat,
                                                                 Foreign.C.Types.CFloat)>_N)) -}
e2e4f346dd86179d2d6e8cd35f43b737
  $fNumExp34 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                   Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)
                         @ Foreign.C.Types.CFloat
                         @ ((), Foreign.C.Types.CFloat)
                         @~ <(((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CFloat)
                            @ Foreign.C.Types.CFloat
                            @ ()
                            @~ <((), Foreign.C.Types.CFloat)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CFloat>_N <Foreign.C.Types.CFloat>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CFloat,
                                                                 Foreign.C.Types.CFloat)>_N)) -}
ea5d84ab74db5b46407712f5ed3fa9ef
  $fNumExp35 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                   Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp0_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)
                         @ Foreign.C.Types.CFloat
                         @ ((), Foreign.C.Types.CFloat)
                         @~ <(((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CFloat)
                            @ Foreign.C.Types.CFloat
                            @ ()
                            @~ <((), Foreign.C.Types.CFloat)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CFloat>_N <Foreign.C.Types.CFloat>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CFloat,
                                                                 Foreign.C.Types.CFloat)>_N)) -}
9c16e9745b96dc59cc6062d07373a013
  $fNumExp36 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (GHC.Float.$fNumDouble_$cfromInteger x)) -}
c6383e2dbb657830e4148110c2b0a9a2
  $fNumExp37 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Types.Double -> GHC.Types.Double)
                      @ GHC.Types.Double
                      @~ <GHC.Types.Double -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
7d85dc931d5759fce42d5c26dd6d8c73
  $fNumExp38 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Types.Double -> GHC.Types.Double)
                      @ GHC.Types.Double
                      @~ <GHC.Types.Double -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
3351493453faedbfb6f96ce9a9fe84c9
  $fNumExp39 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Types.Double -> GHC.Types.Double)
                      @ GHC.Types.Double
                      @~ <GHC.Types.Double -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType)
                   x) -}
6265b4f6d97fc1a6ee3cbbc4eeea6c14
  $fNumExp3_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp131
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
30334cd3998da85b7aa4c9c5c8217506
  $fNumExp3_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp133
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
d4170cea9d25a67bccf6c1aa1ab66afe
  $fNumExp3_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp132
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
512390e0582ce2c4641524ab2d23742a
  $fNumExp3_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp129
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
a6b303f030699db08234fe6399acfa23
  $fNumExp3_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp127
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
2601466d4314ca2becb2eed43baf5a82
  $fNumExp3_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp130
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
663e27e022320f62d7afd628ba23f9c6
  $fNumExp3_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp128
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUShort>_N) -}
dbe6143899a4bc9e2ce539f938ac8dcf
  $fNumExp3_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
       -> Foreign.C.Types.CUShort)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      -> Foreign.C.Types.CUShort)
                   @ Foreign.C.Types.CUShort
                   @~ <(Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                       -> Foreign.C.Types.CUShort>_N
                   Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType) -}
a98d5448ae503875ba9c434b656677ef
  $fNumExp3_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort) -}
b0b20d045d8cf18fe34eadd60d4c0b95
  $fNumExp3_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
       -> Foreign.C.Types.CUShort)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      -> Foreign.C.Types.CUShort)
                   @ Foreign.C.Types.CUShort
                   @~ <(Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                       -> Foreign.C.Types.CUShort>_N
                   Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType) -}
8197898863e9658b43446f5a9d5796ec
  $fNumExp3_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort) -}
c397554f0e2d0ce65c271916658fde03
  $fNumExp3_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
       -> Foreign.C.Types.CUShort)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      -> Foreign.C.Types.CUShort)
                   @ Foreign.C.Types.CUShort
                   @~ <(Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                       -> Foreign.C.Types.CUShort>_N
                   Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType) -}
c30e70066b871153c9003a751b6e2e09
  $fNumExp4 ::
    GHC.Num.Num
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort)
                  Data.Array.Accelerate.Classes.Num.$fNumExp4_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp4_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp4_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp4_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp4_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp4_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp4_$cfromInteger -}
482a54887b80a9b0f1ba430f9fa59398
  $fNumExp40 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ (GHC.Types.Double, GHC.Types.Double)
                   Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Double, GHC.Types.Double)
                      Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Double), GHC.Types.Double)
                         @ GHC.Types.Double
                         @ ((), GHC.Types.Double)
                         @~ <(((), GHC.Types.Double), GHC.Types.Double)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Double)
                            @ GHC.Types.Double
                            @ ()
                            @~ <((), GHC.Types.Double)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Double>_N <GHC.Types.Double>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Double,
                                                                 GHC.Types.Double)>_N)) -}
a42d2cfec2d0c6d9d098676fda8a7c91
  $fNumExp41 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ (GHC.Types.Double, GHC.Types.Double)
                   Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Double, GHC.Types.Double)
                      Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Double), GHC.Types.Double)
                         @ GHC.Types.Double
                         @ ((), GHC.Types.Double)
                         @~ <(((), GHC.Types.Double), GHC.Types.Double)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Double)
                            @ GHC.Types.Double
                            @ ()
                            @~ <((), GHC.Types.Double)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Double>_N <GHC.Types.Double>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Double,
                                                                 GHC.Types.Double)>_N)) -}
90d7562ba5a69bd336b052d75c2bdc18
  $fNumExp42 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ (GHC.Types.Double, GHC.Types.Double)
                   Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Double, GHC.Types.Double)
                      Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp1_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Double), GHC.Types.Double)
                         @ GHC.Types.Double
                         @ ((), GHC.Types.Double)
                         @~ <(((), GHC.Types.Double), GHC.Types.Double)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Double)
                            @ GHC.Types.Double
                            @ ()
                            @~ <((), GHC.Types.Double)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Double>_N <GHC.Types.Double>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Double,
                                                                 GHC.Types.Double)>_N)) -}
04f45dec8093fddacb9470e30a68e2a8
  $fNumExp43 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (GHC.Int.$fBitsInt32_$cfromInteger x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CInt[0]))) -}
4162662553711380878696bbce6ffd1f
  $fNumExp44 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
8066058e214026d2488e9b4c6ca3a271
  $fNumExp45 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
d7667635e6701e06fdffd1eb63f0661a
  $fNumExp46 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (Foreign.C.Types.CInt -> Foreign.C.Types.CInt)
                      @ Foreign.C.Types.CInt
                      @~ <Foreign.C.Types.CInt -> Foreign.C.Types.CInt>_N
                      Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType)
                   x) -}
1d9de1e04ff813e49e09f4a47f8f4d5d
  $fNumExp47 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                   Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                      Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)
                         @ Foreign.C.Types.CInt
                         @ ((), Foreign.C.Types.CInt)
                         @~ <(((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CInt)
                            @ Foreign.C.Types.CInt
                            @ ()
                            @~ <((), Foreign.C.Types.CInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CInt>_N <Foreign.C.Types.CInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CInt,
                                                                 Foreign.C.Types.CInt)>_N)) -}
c6ed992e867f71869bf0c3e53c6a11e2
  $fNumExp48 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                   Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                      Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)
                         @ Foreign.C.Types.CInt
                         @ ((), Foreign.C.Types.CInt)
                         @~ <(((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CInt)
                            @ Foreign.C.Types.CInt
                            @ ()
                            @~ <((), Foreign.C.Types.CInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CInt>_N <Foreign.C.Types.CInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CInt,
                                                                 Foreign.C.Types.CInt)>_N)) -}
250098f85949cd2bc820d9c080d20eb7
  $fNumExp49 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CInt
                   @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                   Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                      Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp10_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)
                         @ Foreign.C.Types.CInt
                         @ ((), Foreign.C.Types.CInt)
                         @~ <(((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CInt)
                            @ Foreign.C.Types.CInt
                            @ ()
                            @~ <((), Foreign.C.Types.CInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CInt>_N <Foreign.C.Types.CInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CInt,
                                                                 Foreign.C.Types.CInt)>_N)) -}
d7e5364ea90c232afd629a98b435f5d3
  $fNumExp4_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp138
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
46ad4fc19089b8b0b0aa597c4b2c60af
  $fNumExp4_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp140
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
8bde6436ddf48a2a5b2af94b925176e5
  $fNumExp4_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp139
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
84d4ba499c24227b661aab40d9a8c6b8
  $fNumExp4_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp136
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
3f5475d2e374dd400f7324082876dae1
  $fNumExp4_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp134
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
59c7a7dc0b82e3d1b1e9354f032baa76
  $fNumExp4_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp137
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
17de2278f2088b8709e8a6fa145b00f2
  $fNumExp4_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp135
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CShort>_N) -}
b08a0db8113e47775bdb9d8c5fc064c0
  $fNumExp4_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
       -> Foreign.C.Types.CShort)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      -> Foreign.C.Types.CShort)
                   @ Foreign.C.Types.CShort
                   @~ <(Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                       -> Foreign.C.Types.CShort>_N
                   Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType) -}
1ced37cd9450cd88e3338c6d0a121b96
  $fNumExp4_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort) -}
20cede542c3ac4889185d2720158ba0b
  $fNumExp4_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
       -> Foreign.C.Types.CShort)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      -> Foreign.C.Types.CShort)
                   @ Foreign.C.Types.CShort
                   @~ <(Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                       -> Foreign.C.Types.CShort>_N
                   Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType) -}
338a101b5e5d6ada656a526fda37a800
  $fNumExp4_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort) -}
4c12cb2ab5785a2f66934f8c3e02f5dc
  $fNumExp4_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
       -> Foreign.C.Types.CShort)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      -> Foreign.C.Types.CShort)
                   @ Foreign.C.Types.CShort
                   @~ <(Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                       -> Foreign.C.Types.CShort>_N
                   Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType) -}
366a883836658fa96076f94263e64269
  $fNumExp5 ::
    GHC.Num.Num
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong)
                  Data.Array.Accelerate.Classes.Num.$fNumExp5_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp5_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp5_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp5_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp5_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp5_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp5_$cfromInteger -}
29a5d1f963a64f63066140c283f82c27
  $fNumExp50 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (GHC.Word.$fBitsWord64_$cfromInteger x)) -}
e2e632910468500463f40c2319b5eea9
  $fNumExp51 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Word.Word64 -> GHC.Word.Word64)
                      @ GHC.Word.Word64
                      @~ <GHC.Word.Word64 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
4b71bc1c634d6620e6322fa92df0ecaf
  $fNumExp52 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Word.Word64 -> GHC.Word.Word64)
                      @ GHC.Word.Word64
                      @~ <GHC.Word.Word64 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
5e06aff9473a4bcae52ce21d59c3a98d
  $fNumExp53 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Word.Word64 -> GHC.Word.Word64)
                      @ GHC.Word.Word64
                      @~ <GHC.Word.Word64 -> GHC.Word.Word64>_N
                      Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType)
                   x) -}
078e71836bfe3ad0e945905b7b418756
  $fNumExp54 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ (GHC.Word.Word64, GHC.Word.Word64)
                   Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word64, GHC.Word.Word64)
                      Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word64), GHC.Word.Word64)
                         @ GHC.Word.Word64
                         @ ((), GHC.Word.Word64)
                         @~ <(((), GHC.Word.Word64), GHC.Word.Word64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word64)
                            @ GHC.Word.Word64
                            @ ()
                            @~ <((), GHC.Word.Word64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word64>_N <GHC.Word.Word64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word64,
                                                                 GHC.Word.Word64)>_N)) -}
7ff9c4e1378705435783c6c57117f497
  $fNumExp55 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ (GHC.Word.Word64, GHC.Word.Word64)
                   Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word64, GHC.Word.Word64)
                      Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word64), GHC.Word.Word64)
                         @ GHC.Word.Word64
                         @ ((), GHC.Word.Word64)
                         @~ <(((), GHC.Word.Word64), GHC.Word.Word64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word64)
                            @ GHC.Word.Word64
                            @ ()
                            @~ <((), GHC.Word.Word64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word64>_N <GHC.Word.Word64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word64,
                                                                 GHC.Word.Word64)>_N)) -}
6484b5396d61bcd3834e63a5db01f92b
  $fNumExp56 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word64
                   @ (GHC.Word.Word64, GHC.Word.Word64)
                   Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word64, GHC.Word.Word64)
                      Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp11_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word64), GHC.Word.Word64)
                         @ GHC.Word.Word64
                         @ ((), GHC.Word.Word64)
                         @~ <(((), GHC.Word.Word64), GHC.Word.Word64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word64)
                            @ GHC.Word.Word64
                            @ ()
                            @~ <((), GHC.Word.Word64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word64>_N <GHC.Word.Word64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word64,
                                                                 GHC.Word.Word64)>_N)) -}
61365f460929f3a626365b40fde58ecc
  $fNumExp57 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (GHC.Word.$fBitsWord32_$cfromInteger x)) -}
449433e7af8d92621587a239a54d751b
  $fNumExp58 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Word.Word32 -> GHC.Word.Word32)
                      @ GHC.Word.Word32
                      @~ <GHC.Word.Word32 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
d310702b801bb5e63079c82db87314cf
  $fNumExp59 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Word.Word32 -> GHC.Word.Word32)
                      @ GHC.Word.Word32
                      @~ <GHC.Word.Word32 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
0cb04289db1a0c9fd307af13f1ea6e46
  $fNumExp5_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp145
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
f06c978986326114ca6126678251e9af
  $fNumExp5_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp147
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
0693a81ba7dd04d8e5907f02ada67a41
  $fNumExp5_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp146
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
af29525cf40d9fcef91802dec20ee09e
  $fNumExp5_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp143
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
facf5618efd9f06fe917ee7bb000ccb8
  $fNumExp5_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp141
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
db06130d52d9e17502128eb97751b469
  $fNumExp5_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp144
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
bcaf78cadd9d8b10333fdeed660640fa
  $fNumExp5_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp142
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULLong>_N) -}
bc3370adc2e1e4ccca81a2148d58c16f
  $fNumExp5_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
       -> Foreign.C.Types.CULLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      -> Foreign.C.Types.CULLong)
                   @ Foreign.C.Types.CULLong
                   @~ <(Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                       -> Foreign.C.Types.CULLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType) -}
d4fde6b86a46ac3c16a3496d79379957
  $fNumExp5_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong) -}
8b8f0aa491be3fc82cc59925feacc9cf
  $fNumExp5_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
       -> Foreign.C.Types.CULLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      -> Foreign.C.Types.CULLong)
                   @ Foreign.C.Types.CULLong
                   @~ <(Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                       -> Foreign.C.Types.CULLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType) -}
9278c06e40cc1e9a9223134cab7b49ca
  $fNumExp5_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong) -}
b451e6d5ba9f98af6cff0efd013598fd
  $fNumExp5_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
       -> Foreign.C.Types.CULLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      -> Foreign.C.Types.CULLong)
                   @ Foreign.C.Types.CULLong
                   @~ <(Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                       -> Foreign.C.Types.CULLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType) -}
aa9b5a21d78a99d4c70b506a209cdb24
  $fNumExp6 ::
    GHC.Num.Num
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong)
                  Data.Array.Accelerate.Classes.Num.$fNumExp6_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp6_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp6_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp6_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp6_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp6_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp6_$cfromInteger -}
a7460931638ceed3ba6c980cfe753977
  $fNumExp60 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Word.Word32 -> GHC.Word.Word32)
                      @ GHC.Word.Word32
                      @~ <GHC.Word.Word32 -> GHC.Word.Word32>_N
                      Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType)
                   x) -}
da1c0ff9c72bc1bc757f39db73f10bf2
  $fNumExp61 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ (GHC.Word.Word32, GHC.Word.Word32)
                   Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word32, GHC.Word.Word32)
                      Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word32), GHC.Word.Word32)
                         @ GHC.Word.Word32
                         @ ((), GHC.Word.Word32)
                         @~ <(((), GHC.Word.Word32), GHC.Word.Word32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word32)
                            @ GHC.Word.Word32
                            @ ()
                            @~ <((), GHC.Word.Word32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word32>_N <GHC.Word.Word32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word32,
                                                                 GHC.Word.Word32)>_N)) -}
459c450e2738a156abc7115e607f4a4a
  $fNumExp62 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ (GHC.Word.Word32, GHC.Word.Word32)
                   Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word32, GHC.Word.Word32)
                      Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word32), GHC.Word.Word32)
                         @ GHC.Word.Word32
                         @ ((), GHC.Word.Word32)
                         @~ <(((), GHC.Word.Word32), GHC.Word.Word32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word32)
                            @ GHC.Word.Word32
                            @ ()
                            @~ <((), GHC.Word.Word32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word32>_N <GHC.Word.Word32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word32,
                                                                 GHC.Word.Word32)>_N)) -}
764718e781de6284cf5f75bc5165bf35
  $fNumExp63 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word32
                   @ (GHC.Word.Word32, GHC.Word.Word32)
                   Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word32, GHC.Word.Word32)
                      Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp12_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word32), GHC.Word.Word32)
                         @ GHC.Word.Word32
                         @ ((), GHC.Word.Word32)
                         @~ <(((), GHC.Word.Word32), GHC.Word.Word32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word32)
                            @ GHC.Word.Word32
                            @ ()
                            @~ <((), GHC.Word.Word32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word32>_N <GHC.Word.Word32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word32,
                                                                 GHC.Word.Word32)>_N)) -}
1d15d06973ab5d38e9390e70ae71b8d5
  $fNumExp64 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (GHC.Word.$fBitsWord16_$cfromInteger x)) -}
436bf8d45abd91bd5adb80a3c04f07e8
  $fNumExp65 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Word.Word16 -> GHC.Word.Word16)
                      @ GHC.Word.Word16
                      @~ <GHC.Word.Word16 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
9ce867152adf56a63f42c23ddc36841f
  $fNumExp66 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Word.Word16 -> GHC.Word.Word16)
                      @ GHC.Word.Word16
                      @~ <GHC.Word.Word16 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
4ae168755cf12c575b94eab5387e782f
  $fNumExp67 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Word.Word16 -> GHC.Word.Word16)
                      @ GHC.Word.Word16
                      @~ <GHC.Word.Word16 -> GHC.Word.Word16>_N
                      Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType)
                   x) -}
ad0891b5c06ebc7fcd759085f3073337
  $fNumExp68 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ (GHC.Word.Word16, GHC.Word.Word16)
                   Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word16, GHC.Word.Word16)
                      Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word16), GHC.Word.Word16)
                         @ GHC.Word.Word16
                         @ ((), GHC.Word.Word16)
                         @~ <(((), GHC.Word.Word16), GHC.Word.Word16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word16)
                            @ GHC.Word.Word16
                            @ ()
                            @~ <((), GHC.Word.Word16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word16>_N <GHC.Word.Word16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word16,
                                                                 GHC.Word.Word16)>_N)) -}
8f754fd0138e4e52a052ccc79f71d4ca
  $fNumExp69 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ (GHC.Word.Word16, GHC.Word.Word16)
                   Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word16, GHC.Word.Word16)
                      Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word16), GHC.Word.Word16)
                         @ GHC.Word.Word16
                         @ ((), GHC.Word.Word16)
                         @~ <(((), GHC.Word.Word16), GHC.Word.Word16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word16)
                            @ GHC.Word.Word16
                            @ ()
                            @~ <((), GHC.Word.Word16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word16>_N <GHC.Word.Word16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word16,
                                                                 GHC.Word.Word16)>_N)) -}
f4e1ba8189afbf058ee5e2501822d4c0
  $fNumExp6_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp152
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
fcd2dfe6677cf9474e9de070905b6c1d
  $fNumExp6_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp154
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
89ed12a9970d266750c78c652ffc9b6f
  $fNumExp6_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp153
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
13b387068cef5f81763655b7f2ad623c
  $fNumExp6_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp150
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
e9448b302bdf85e4b8607562f82e6487
  $fNumExp6_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp148
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
2a63c88862f81a5b5ba70020856a59d8
  $fNumExp6_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp151
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
192f9c049d3e38ad27cac746c17b3d17
  $fNumExp6_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp149
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLLong>_N) -}
bc436cba4f34468a12ef271647be6af8
  $fNumExp6_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
       -> Foreign.C.Types.CLLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      -> Foreign.C.Types.CLLong)
                   @ Foreign.C.Types.CLLong
                   @~ <(Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                       -> Foreign.C.Types.CLLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType) -}
851e1356282e0671a35decd77deef6e9
  $fNumExp6_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong) -}
ddf5ebbf5ff20661e8e2ed3a09337a7d
  $fNumExp6_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
       -> Foreign.C.Types.CLLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      -> Foreign.C.Types.CLLong)
                   @ Foreign.C.Types.CLLong
                   @~ <(Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                       -> Foreign.C.Types.CLLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType) -}
23e9f4ee1a53099d40d090040a7a2918
  $fNumExp6_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong) -}
be001958a67cf77e517ae8673cd73d20
  $fNumExp6_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
       -> Foreign.C.Types.CLLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      -> Foreign.C.Types.CLLong)
                   @ Foreign.C.Types.CLLong
                   @~ <(Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                       -> Foreign.C.Types.CLLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType) -}
1862ae481cb867bc618c0939df81f22f
  $fNumExp7 ::
    GHC.Num.Num
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong)
                  Data.Array.Accelerate.Classes.Num.$fNumExp7_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp7_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp7_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp7_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp7_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp7_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp7_$cfromInteger -}
3456d400acf3dab654371b874d786b88
  $fNumExp70 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word16
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word16
                   @ (GHC.Word.Word16, GHC.Word.Word16)
                   Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word16, GHC.Word.Word16)
                      Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp13_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word16), GHC.Word.Word16)
                         @ GHC.Word.Word16
                         @ ((), GHC.Word.Word16)
                         @~ <(((), GHC.Word.Word16), GHC.Word.Word16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word16)
                            @ GHC.Word.Word16
                            @ ()
                            @~ <((), GHC.Word.Word16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word16>_N <GHC.Word.Word16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word16,
                                                                 GHC.Word.Word16)>_N)) -}
be652530b7cf9d0ffb621355556a4cc0
  $fNumExp71 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (GHC.Word.$fBitsWord8_$cfromInteger x)) -}
89de3cf0da3be93d4305b2515e25c7b4
  $fNumExp72 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Word.Word8 -> GHC.Word.Word8)
                      @ GHC.Word.Word8
                      @~ <GHC.Word.Word8 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
a3553c93753d2972f17bbcffe2bca571
  $fNumExp73 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Word.Word8 -> GHC.Word.Word8)
                      @ GHC.Word.Word8
                      @~ <GHC.Word.Word8 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
e4a2345ceac7939031f17452d6028506
  $fNumExp74 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Word.Word8 -> GHC.Word.Word8)
                      @ GHC.Word.Word8
                      @~ <GHC.Word.Word8 -> GHC.Word.Word8>_N
                      Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType)
                   x) -}
29f7fe44ecd12c4b387f2d9b303ea6ca
  $fNumExp75 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ (GHC.Word.Word8, GHC.Word.Word8)
                   Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word8, GHC.Word.Word8)
                      Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word8), GHC.Word.Word8)
                         @ GHC.Word.Word8
                         @ ((), GHC.Word.Word8)
                         @~ <(((), GHC.Word.Word8), GHC.Word.Word8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word8)
                            @ GHC.Word.Word8
                            @ ()
                            @~ <((), GHC.Word.Word8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word8>_N <GHC.Word.Word8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word8,
                                                                 GHC.Word.Word8)>_N)) -}
b3b036bafbd5b47f9229a1507ab1bba3
  $fNumExp76 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ (GHC.Word.Word8, GHC.Word.Word8)
                   Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word8, GHC.Word.Word8)
                      Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word8), GHC.Word.Word8)
                         @ GHC.Word.Word8
                         @ ((), GHC.Word.Word8)
                         @~ <(((), GHC.Word.Word8), GHC.Word.Word8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word8)
                            @ GHC.Word.Word8
                            @ ()
                            @~ <((), GHC.Word.Word8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word8>_N <GHC.Word.Word8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word8,
                                                                 GHC.Word.Word8)>_N)) -}
ac2d254a614b7ba1a65d12cebe73ef89
  $fNumExp77 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Word.Word8
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Word.Word8
                   @ (GHC.Word.Word8, GHC.Word.Word8)
                   Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word8, GHC.Word.Word8)
                      Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp14_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word8), GHC.Word.Word8)
                         @ GHC.Word.Word8
                         @ ((), GHC.Word.Word8)
                         @~ <(((), GHC.Word.Word8), GHC.Word.Word8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word8)
                            @ GHC.Word.Word8
                            @ ()
                            @~ <((), GHC.Word.Word8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word8>_N <GHC.Word.Word8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word8,
                                                                 GHC.Word.Word8)>_N)) -}
9bbb69c9d02f025a3c478a5bc43d758c
  $fNumExp78 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (GHC.Num.$fNumWord_$cfromInteger x)) -}
eea0ca7d7aa51da8eb33ef0f8bdf68c2
  $fNumExp79 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Types.Word -> GHC.Types.Word)
                      @ GHC.Types.Word
                      @~ <GHC.Types.Word -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
ed9b1a725731af1472e18359ccb79992
  $fNumExp7_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp159
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
3d9dd7cc9b5ae608bad4898c70e65d4c
  $fNumExp7_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp161
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
65deac7d83f0894ec53820a474eb1dc3
  $fNumExp7_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp160
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
1bb5e337e43c5f02ed595b5c0ba4b53e
  $fNumExp7_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp157
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
0905583898291c8dc10c95b047532d8a
  $fNumExp7_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp155
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
f3402c38c3ce44788b037d253f07676a
  $fNumExp7_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp158
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
8b85a300ca3bdc2244de414360940b8c
  $fNumExp7_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp156
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CULong>_N) -}
07763da9d35998f2a55d140523994cb3
  $fNumExp7_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
       -> Foreign.C.Types.CULong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      -> Foreign.C.Types.CULong)
                   @ Foreign.C.Types.CULong
                   @~ <(Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                       -> Foreign.C.Types.CULong>_N
                   Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType) -}
60976772ef4234c58327863f6810f75c
  $fNumExp7_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong) -}
ef1ad47b19a1e4c8772f5a36af492856
  $fNumExp7_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
       -> Foreign.C.Types.CULong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      -> Foreign.C.Types.CULong)
                   @ Foreign.C.Types.CULong
                   @~ <(Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                       -> Foreign.C.Types.CULong>_N
                   Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType) -}
d977a2c111640acf47570154a77644e6
  $fNumExp7_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong) -}
f58b7c17ff7a1f180769903590c38ceb
  $fNumExp7_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
       -> Foreign.C.Types.CULong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      -> Foreign.C.Types.CULong)
                   @ Foreign.C.Types.CULong
                   @~ <(Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                       -> Foreign.C.Types.CULong>_N
                   Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType) -}
5b9fc1a4262f9c1404a16b483800a749
  $fNumExp8 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong)
                  Data.Array.Accelerate.Classes.Num.$fNumExp8_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp8_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp8_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp8_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp8_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp8_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp8_$cfromInteger -}
91f5a7bb8667cbbc2cd88036289688af
  $fNumExp80 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Types.Word -> GHC.Types.Word)
                      @ GHC.Types.Word
                      @~ <GHC.Types.Word -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
00d34039d5fbb8f15174405895773738
  $fNumExp81 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Types.Word -> GHC.Types.Word)
                      @ GHC.Types.Word
                      @~ <GHC.Types.Word -> GHC.Types.Word>_N
                      Data.Array.Accelerate.Type.$fIsNumWord_$cnumType)
                   x) -}
315932d1bd267baa4df896013f0c9ba2
  $fNumExp82 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ (GHC.Types.Word, GHC.Types.Word)
                   Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Word, GHC.Types.Word)
                      Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Word), GHC.Types.Word)
                         @ GHC.Types.Word
                         @ ((), GHC.Types.Word)
                         @~ <(((), GHC.Types.Word), GHC.Types.Word)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Word)
                            @ GHC.Types.Word
                            @ ()
                            @~ <((), GHC.Types.Word)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Word>_N <GHC.Types.Word>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Word,
                                                                 GHC.Types.Word)>_N)) -}
7bb53d5871277e75d0234d14c3ea82b6
  $fNumExp83 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ (GHC.Types.Word, GHC.Types.Word)
                   Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Word, GHC.Types.Word)
                      Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Word), GHC.Types.Word)
                         @ GHC.Types.Word
                         @ ((), GHC.Types.Word)
                         @~ <(((), GHC.Types.Word), GHC.Types.Word)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Word)
                            @ GHC.Types.Word
                            @ ()
                            @~ <((), GHC.Types.Word)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Word>_N <GHC.Types.Word>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Word,
                                                                 GHC.Types.Word)>_N)) -}
5230e9571de8eb1e1c1ff8b7ab4ecf52
  $fNumExp84 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Word
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Word
                   @ (GHC.Types.Word, GHC.Types.Word)
                   Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Word, GHC.Types.Word)
                      Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp15_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Word), GHC.Types.Word)
                         @ GHC.Types.Word
                         @ ((), GHC.Types.Word)
                         @~ <(((), GHC.Types.Word), GHC.Types.Word)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Word)
                            @ GHC.Types.Word
                            @ ()
                            @~ <((), GHC.Types.Word)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Word>_N <GHC.Types.Word>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Word,
                                                                 GHC.Types.Word)>_N)) -}
7f6e400e073d3a0d4592b91def5f7938
  $fNumExp85 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (GHC.Int.$fBitsInt64_$cfromInteger x)) -}
6ae707c379139c47587cb42073c31602
  $fNumExp86 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Int.Int64 -> GHC.Int.Int64)
                      @ GHC.Int.Int64
                      @~ <GHC.Int.Int64 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
5903b4adc70819b1978eacd3e0f3ae69
  $fNumExp87 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Int.Int64 -> GHC.Int.Int64)
                      @ GHC.Int.Int64
                      @~ <GHC.Int.Int64 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
23a3523f181713d1176dce719a21ef17
  $fNumExp88 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Int.Int64 -> GHC.Int.Int64)
                      @ GHC.Int.Int64
                      @~ <GHC.Int.Int64 -> GHC.Int.Int64>_N
                      Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType)
                   x) -}
1a5cab5e3e4b4a9b81703aa93d8c1752
  $fNumExp89 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ (GHC.Int.Int64, GHC.Int.Int64)
                   Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int64, GHC.Int.Int64)
                      Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int64), GHC.Int.Int64)
                         @ GHC.Int.Int64
                         @ ((), GHC.Int.Int64)
                         @~ <(((), GHC.Int.Int64), GHC.Int.Int64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int64)
                            @ GHC.Int.Int64
                            @ ()
                            @~ <((), GHC.Int.Int64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int64>_N <GHC.Int.Int64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int64,
                                                                 GHC.Int.Int64)>_N)) -}
f68429480f58540c94486a2811970717
  $fNumExp8_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp166
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
16346666d00fb5aab22ea9d1047f80c5
  $fNumExp8_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp168
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
2541bfed718430ca5b61004195421bd4
  $fNumExp8_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp167
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
90833f13f05b9ae5609d750e6aff6d01
  $fNumExp8_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp164
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
c5e50ed5677484652ad364e00224d97a
  $fNumExp8_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp162
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
1659845fd26cd562c0c21d735452b5ff
  $fNumExp8_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp165
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
8d306b381be8f654b3b80702eecbf932
  $fNumExp8_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp163
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CLong>_N) -}
830d943ae49c1a728b7ef4b0d843590b
  $fNumExp8_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLong, Foreign.C.Types.CLong)
       -> Foreign.C.Types.CLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      -> Foreign.C.Types.CLong)
                   @ Foreign.C.Types.CLong
                   @~ <(Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                       -> Foreign.C.Types.CLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType) -}
29c066ad74b3dd14b49321365b37315d
  $fNumExp8_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong) -}
fddcac9d08ba38ca7a0b6f486f91c4a4
  $fNumExp8_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLong, Foreign.C.Types.CLong)
       -> Foreign.C.Types.CLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      -> Foreign.C.Types.CLong)
                   @ Foreign.C.Types.CLong
                   @~ <(Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                       -> Foreign.C.Types.CLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType) -}
7e7ee5343d843b77f414de09c5d308a6
  $fNumExp8_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong) -}
413454cd332454b535c99238ee33f830
  $fNumExp8_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLong, Foreign.C.Types.CLong)
       -> Foreign.C.Types.CLong)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      -> Foreign.C.Types.CLong)
                   @ Foreign.C.Types.CLong
                   @~ <(Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                       -> Foreign.C.Types.CLong>_N
                   Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType) -}
a04f27ed626d65ab0cc24cf3f48cf07a
  $fNumExp9 ::
    GHC.Num.Num (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt)
                  Data.Array.Accelerate.Classes.Num.$fNumExp9_$c+
                  Data.Array.Accelerate.Classes.Num.$fNumExp9_$c-
                  Data.Array.Accelerate.Classes.Num.$fNumExp9_$c*
                  Data.Array.Accelerate.Classes.Num.$fNumExp9_$cnegate
                  Data.Array.Accelerate.Classes.Num.$fNumExp9_$cabs
                  Data.Array.Accelerate.Classes.Num.$fNumExp9_$csignum
                  Data.Array.Accelerate.Classes.Num.$fNumExp9_$cfromInteger -}
42d753288ad653ef72905914104706b2
  $fNumExp90 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ (GHC.Int.Int64, GHC.Int.Int64)
                   Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int64, GHC.Int.Int64)
                      Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int64), GHC.Int.Int64)
                         @ GHC.Int.Int64
                         @ ((), GHC.Int.Int64)
                         @~ <(((), GHC.Int.Int64), GHC.Int.Int64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int64)
                            @ GHC.Int.Int64
                            @ ()
                            @~ <((), GHC.Int.Int64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int64>_N <GHC.Int.Int64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int64,
                                                                 GHC.Int.Int64)>_N)) -}
9730ba499be295176276c7a47bc0e61b
  $fNumExp91 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int64
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int64
                   @ (GHC.Int.Int64, GHC.Int.Int64)
                   Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int64, GHC.Int.Int64)
                      Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp16_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int64), GHC.Int.Int64)
                         @ GHC.Int.Int64
                         @ ((), GHC.Int.Int64)
                         @~ <(((), GHC.Int.Int64), GHC.Int.Int64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int64)
                            @ GHC.Int.Int64
                            @ ()
                            @~ <((), GHC.Int.Int64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int64>_N <GHC.Int.Int64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int64,
                                                                 GHC.Int.Int64)>_N)) -}
0cd8c06b3bb6dfce2b7eaba54f3d7fca
  $fNumExp92 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (GHC.Int.$fBitsInt32_$cfromInteger x)) -}
51f9b6b905b80aa533bcaea75075151f
  $fNumExp93 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimSig
                      @ (GHC.Int.Int32 -> GHC.Int.Int32)
                      @ GHC.Int.Int32
                      @~ <GHC.Int.Int32 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
af8601fcc461c8226eaaf5d5dad0b2aa
  $fNumExp94 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimAbs
                      @ (GHC.Int.Int32 -> GHC.Int.Int32)
                      @ GHC.Int.Int32
                      @~ <GHC.Int.Int32 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
3ddcb3896597c2ad86c349aebc595586
  $fNumExp95 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   (Data.Array.Accelerate.AST.PrimNeg
                      @ (GHC.Int.Int32 -> GHC.Int.Int32)
                      @ GHC.Int.Int32
                      @~ <GHC.Int.Int32 -> GHC.Int.Int32>_N
                      Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType)
                   x) -}
0d59548ff73cec99d520f59a723390e1
  $fNumExp96 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ (GHC.Int.Int32, GHC.Int.Int32)
                   Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int32, GHC.Int.Int32)
                      Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int32), GHC.Int.Int32)
                         @ GHC.Int.Int32
                         @ ((), GHC.Int.Int32)
                         @~ <(((), GHC.Int.Int32), GHC.Int.Int32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int32)
                            @ GHC.Int.Int32
                            @ ()
                            @~ <((), GHC.Int.Int32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int32>_N <GHC.Int.Int32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int32,
                                                                 GHC.Int.Int32)>_N)) -}
d0f3bd363dcfde5ec93d332e38fa439b
  $fNumExp97 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ (GHC.Int.Int32, GHC.Int.Int32)
                   Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int32, GHC.Int.Int32)
                      Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int32), GHC.Int.Int32)
                         @ GHC.Int.Int32
                         @ ((), GHC.Int.Int32)
                         @~ <(((), GHC.Int.Int32), GHC.Int.Int32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int32)
                            @ GHC.Int.Int32
                            @ ()
                            @~ <((), GHC.Int.Int32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int32>_N <GHC.Int.Int32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int32,
                                                                 GHC.Int.Int32)>_N)) -}
15dae68fac83dd1471e3e5bf391554d9
  $fNumExp98 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int32
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int32
                   @ (GHC.Int.Int32, GHC.Int.Int32)
                   Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl2
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int32, GHC.Int.Int32)
                      Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl196
                      Data.Array.Accelerate.Classes.Num.$fNumExp17_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int32), GHC.Int.Int32)
                         @ GHC.Int.Int32
                         @ ((), GHC.Int.Int32)
                         @~ <(((), GHC.Int.Int32), GHC.Int.Int32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int32)
                            @ GHC.Int.Int32
                            @ ()
                            @~ <((), GHC.Int.Int32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int32>_N <GHC.Int.Int32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int32,
                                                                 GHC.Int.Int32)>_N)) -}
4e5fc2138988a20c0bf6dc9ba998d243
  $fNumExp99 ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Int.Int16
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Integer.Type.Integer) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   (GHC.Int.$fBitsInt16_$cfromInteger x)) -}
8956f8a61ffb8d5e028963a32c481059
  $fNumExp9_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp173
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
9c3f3fc6aac9b220fa6afc4987d61225
  $fNumExp9_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp175
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
2fc27469b201e9c1277c1030cb89bd0d
  $fNumExp9_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp174
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
e2d0f9bf0c52f3bbb95782f0bdc6dda3
  $fNumExp9_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp171
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
3d6c87139f29a2421f7c05d667bd0c18
  $fNumExp9_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp169
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
75d1006de80303226e319c20edee94dc
  $fNumExp9_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp172
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
cbbd510d8acc3940ac3572d2d10ea5d5
  $fNumExp9_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp170
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CUInt>_N) -}
dcf69cae1de2db1c258d89e94c934d0f
  $fNumExp9_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
       -> Foreign.C.Types.CUInt)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      -> Foreign.C.Types.CUInt)
                   @ Foreign.C.Types.CUInt
                   @~ <(Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                       -> Foreign.C.Types.CUInt>_N
                   Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType) -}
2af88d89e79cdb9de789d0fd589771aa
  $fNumExp9_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt) -}
40f4c2bab6ea7f71eec52ec40afe4ab2
  $fNumExp9_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
       -> Foreign.C.Types.CUInt)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      -> Foreign.C.Types.CUInt)
                   @ Foreign.C.Types.CUInt
                   @~ <(Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                       -> Foreign.C.Types.CUInt>_N
                   Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType) -}
cf678bddad2d18635a945a19e240e1cc
  $fNumExp9_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt) -}
a1b4e9603589bfaf440efcb2006b7f39
  $fNumExp9_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
       -> Foreign.C.Types.CUInt)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      -> Foreign.C.Types.CUInt)
                   @ Foreign.C.Types.CUInt
                   @~ <(Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                       -> Foreign.C.Types.CUInt>_N
                   Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType) -}
6590ff298f492587ca06fb5e9a923ecc
  $fNumExp_$c* ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp26
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
0c39d26864ae58b91015297d4748ce5a
  $fNumExp_$c+ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp28
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
54c05627936803d808d6cc0a1fba9842
  $fNumExp_$c- ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp27
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
a7f6be5049d282c130469d2612c40c3f
  $fNumExp_$cabs ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp24
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
96b443b8a4975cb2b07dd21d3c9fb054
  $fNumExp_$cfromInteger ::
    GHC.Integer.Type.Integer
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp22
                  `cast`
                (<GHC.Integer.Type.Integer>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
58bb730361a0ef3d30ef5dd222447703
  $fNumExp_$cnegate ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp25
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
9a79b2dfde7003b73103cb306297ed7e
  $fNumExp_$csignum ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Num.$fNumExp23
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
2ff824a9b8424e46f89735207c919228
  $fNumExp_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
       -> Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimSub
                   @ ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      -> Foreign.C.Types.CDouble)
                   @ Foreign.C.Types.CDouble
                   @~ <(Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                       -> Foreign.C.Types.CDouble>_N
                   Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType) -}
569315252cae11c8ffb3a8662b4b4268
  $fNumExp_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble) -}
42a60cd10e2481d6e1bb2c42f07c12d2
  $fNumExp_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
       -> Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimMul
                   @ ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      -> Foreign.C.Types.CDouble)
                   @ Foreign.C.Types.CDouble
                   @~ <(Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                       -> Foreign.C.Types.CDouble>_N
                   Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType) -}
d664233ce4d3092b505ec34976cf5722
  $fNumExp_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble) -}
61283fa143876d5c7cb160317bc46ee7
  $fNumExp_lvl2 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
       -> Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimAdd
                   @ ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      -> Foreign.C.Types.CDouble)
                   @ Foreign.C.Types.CDouble
                   @~ <(Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                       -> Foreign.C.Types.CDouble>_N
                   Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType) -}
3f7e08ea0c166d2bef6f4c18d7c9de6f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Classes.Num.$trModule2
                   Data.Array.Accelerate.Classes.Num.$trModule1) -}
9345a817c081ab2cdd7836c75c5efe27
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Classes.Num"#) -}
0cd269c8193d4f44f21eaeea03c23df0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
13b6af1dd60ee5505ca10fef83916e95
  type Num a =
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     GHC.Num.Num (Data.Array.Accelerate.Smart.Exp a))
    :: GHC.Types.Constraint
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp0
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp1
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp10
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp11
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp12
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp13
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp14
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp15
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp16
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp17
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp18
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp19
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp2
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp20
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp3
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp4
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp5
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp6
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp7
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp8
instance GHC.Num.Num [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Num.$fNumExp9
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

