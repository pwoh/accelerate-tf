
==================== FINAL INTERFACE ====================
2017-08-29 05:27:34.44111 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Eq [orphan module] 8002
  interface hash: 5ef48294eaad4a66314388bd65139c85
  ABI hash: b5abcb6d2b1b2f77926ba32e74c56bfd
  export-list hash: 6d08b503170f674ec3fef36c5a59035f
  orphan hash: fdd7f0024e31041f06c33af0a882b981
  flag hash: c41c39962105214f56b6dd8e7f4e3036
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Array.Accelerate.Classes.Eq.&&
  Data.Array.Accelerate.Classes.Eq.not
  Data.Array.Accelerate.Classes.Eq.||
  Data.Array.Accelerate.Classes.Eq.Eq{Data.Array.Accelerate.Classes.Eq./= Data.Array.Accelerate.Classes.Eq.==}
module dependencies: Data.Array.Accelerate.AST
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Lifetime Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Smart Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Smart
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  Data.Array.Accelerate.Array.Sugar 1095a84a969562bd64b7800341e0d23c
  exports: a6dd551b39ab2a3a217fc8c2a6979cd5
  Elt 78f23e81404aaf1e43268a71a575425c
import  -/  Data.Array.Accelerate.Smart c6a471aeed497009ce791e94dc05d100
  exports: 1e3a20050ce25466608a82a26d24d5f0
  Exp dff601899922d9e86e5ab6941dfbac5f
  constant 8196d527ad9044191643ad6b39858685
  mkEq 90e1ed86e72a78d0f0082bd33d5ba7bf
  mkLAnd 798ead6aca319f206fbbbb0619ddd6b1
  mkLNot f6251b81ef12d3453b22310a1f63f623
  mkLOr 25641fa0821f75f0394fe3c237b60164
  mkNEq 731b5b22105274937502f82a2cde0f0e
  untup10 a022de08a40a3c1cd1559cce6e2e2925
  untup11 6f92be26603f19815c2724581cd0c085
  untup12 d4b1721b33b6d8adf456af3b57267e31
  untup13 e08123e796ea1be9528c69797eef1d9b
  untup14 376aac23be3b16c15f70eaf2b58edbbd
  untup15 3bc1328dd9dca030056a1a420628da79
  untup2 751a423afd0ba14775d3a5cf0fe0a975
  untup3 a872de1aa1e286d98d4e71dcdc0df473
  untup4 cb63a01d60f4388f017c9803c0e2b1d6
  untup5 c19d9e4d60fba99f2fccca66405b465f
  untup6 8333449942fab95e0eeedec4679cd9db
  untup7 a2c1f2a23de830761b93c418b5b86727
  untup8 0f86d7b9c7d25ede27d69adc758ee7bc
  untup9 23d0fa95217da76f4c89ac24fbae9a2e
import  -/  Data.Array.Accelerate.Type a1c7885f4a79193eaa1f192a9acbec78
  exports: 7aad7ca015788892b1349ebab929b71f
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
fixities infixr 3 &&, infix 4 /=, infix 4 ==, infixr 2 ||
aa6ade5404fdf8d267a0575cddd02c69
  $dm/= ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3, Strictness: <L,1*U(A,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (x :: Data.Array.Accelerate.Smart.Exp a)
                   (y :: Data.Array.Accelerate.Smart.Exp a) ->
                 Data.Array.Accelerate.Smart.mkLNot
                   (Data.Array.Accelerate.Classes.Eq.== @ a $dEq x y)) -}
b55f17a4cb92adf096ce8097154ff78e
  $dm== ::
    Data.Array.Accelerate.Classes.Eq.Eq a =>
    Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3, Strictness: <L,1*U(A,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ a
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (x :: Data.Array.Accelerate.Smart.Exp a)
                   (y :: Data.Array.Accelerate.Smart.Exp a) ->
                 Data.Array.Accelerate.Smart.mkLNot
                   (Data.Array.Accelerate.Classes.Eq./= @ a $dEq x y)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq() :: Data.Array.Accelerate.Classes.Eq.Eq ()
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ()
                  Data.Array.Accelerate.Array.Sugar.$fElt()
                  Data.Array.Accelerate.Classes.Eq.$fEq()_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEq()_$c/= -}
876b85a9a4c96f351483dd36445932e2
  $fEq()1 ::
    Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Data.Array.Accelerate.Smart.Exp ())
                   (ds1 :: Data.Array.Accelerate.Smart.Exp ()) ->
                 Data.Array.Accelerate.Classes.Eq.$fEq()2) -}
13b358fe78644420208ac8bda72696bc
  $fEq()2 ::
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   GHC.Types.False) -}
0510148e198d508380aad272575459ce
  $fEq()3 ::
    Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Data.Array.Accelerate.Smart.Exp ())
                   (ds1 :: Data.Array.Accelerate.Smart.Exp ()) ->
                 Data.Array.Accelerate.Classes.Eq.$fEq()4) -}
09b353cff2c8319ae4dbee7dec55403f
  $fEq()4 ::
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   GHC.Types.True) -}
0a4b88d8432795eb8e48bbc3d3684fb2
  $fEq()_$c/= ::
    Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq()1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp ()>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp ()>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
57503aa0f41d6fe2affd488153fb74ab
  $fEq()_$c== ::
    Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp ()
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq()3
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp ()>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp ()>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b).
                  @ (a, b)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,)_$cp1Eq
                     @ a
                     @ b
                     $dEq
                     $dEq1)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,)_$c== @ a @ b $dEq $dEq1)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,)_$c/=
                     @ a
                     @ b
                     $dEq
                     $dEq1) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b)) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Smart.$s$fElt(,)
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.AST.$WPrimLOr
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Smart.$s$fElt(,)
                      Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                      (let {
                         $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                       } in
                       let {
                         $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1
                       } in
                       let {
                         $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b)
                         = Data.Array.Accelerate.Array.Sugar.$fElt(,) @ a @ b $dElt $dElt1
                       } in
                       let {
                         $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple (a, b)
                         = Data.Array.Accelerate.Product.$fIsProductcst(,)
                             @ Data.Array.Accelerate.Array.Sugar.Elt
                             @ a
                             @ b
                             $dElt
                             $dElt1
                       } in
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Bool), GHC.Types.Bool)
                          @ GHC.Types.Bool
                          @ ((), GHC.Types.Bool)
                          @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Bool)
                             @ GHC.Types.Bool
                             @ ()
                             @~ <((), GHC.Types.Bool)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Classes.Eq./=
                                @ a
                                $dEq
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b)
                                   $dElt2
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix1 @ () @ a @ b)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                <b>_N <a>_N))
                                      <a>_N)_R
                                   eta)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b)
                                   $dElt2
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix1 @ () @ a @ b)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                <b>_N <a>_N))
                                      <a>_N)_R
                                   eta1)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))
                          (Data.Array.Accelerate.Classes.Eq./=
                             @ b
                             $dEq1
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ b
                                @ (a, b)
                                $dElt2
                                $dIsProduct
                                $dElt1
                                (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), a))
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <b>_N <a>_N))
                                   <b>_N)_R
                                eta)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ b
                                @ (a, b)
                                $dElt2
                                $dIsProduct
                                $dElt1
                                (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), a))
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <b>_N <a>_N))
                                   <b>_N)_R
                                eta1)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b)) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Smart.$s$fElt(,)
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.AST.$WPrimLAnd
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Smart.$s$fElt(,)
                      Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                      (let {
                         $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                       } in
                       let {
                         $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1
                       } in
                       let {
                         $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b)
                         = Data.Array.Accelerate.Array.Sugar.$fElt(,) @ a @ b $dElt $dElt1
                       } in
                       let {
                         $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple (a, b)
                         = Data.Array.Accelerate.Product.$fIsProductcst(,)
                             @ Data.Array.Accelerate.Array.Sugar.Elt
                             @ a
                             @ b
                             $dElt
                             $dElt1
                       } in
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Bool), GHC.Types.Bool)
                          @ GHC.Types.Bool
                          @ ((), GHC.Types.Bool)
                          @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Bool)
                             @ GHC.Types.Bool
                             @ ()
                             @~ <((), GHC.Types.Bool)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Classes.Eq.==
                                @ a
                                $dEq
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b)
                                   $dElt2
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix1 @ () @ a @ b)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                <b>_N <a>_N))
                                      <a>_N)_R
                                   eta)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b)
                                   $dElt2
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix1 @ () @ a @ b)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                <b>_N <a>_N))
                                      <a>_N)_R
                                   eta1)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))
                          (Data.Array.Accelerate.Classes.Eq.==
                             @ b
                             $dEq1
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ b
                                @ (a, b)
                                $dElt2
                                $dIsProduct
                                $dElt1
                                (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), a))
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <b>_N <a>_N))
                                   <b>_N)_R
                                eta)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                             (Data.Array.Accelerate.Smart.Prj
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ b
                                @ (a, b)
                                $dElt2
                                $dIsProduct
                                $dElt1
                                (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), a))
                                  `cast`
                                (Data.Array.Accelerate.Product.TupleIdx
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <b>_N <a>_N))
                                   <b>_N)_R
                                eta1)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b) =>
    Data.Array.Accelerate.Array.Sugar.Elt (a, b)
  {- Arity: 2,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b) ->
                 Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ a
                   @ b
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq)
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b, c)
  DFunId
  {- Arity: 3,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c).
                  @ (a, b, c)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     $dEq
                     $dEq1
                     $dEq2)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,)_$c==
                     @ a
                     @ b
                     @ c
                     $dEq
                     $dEq1
                     $dEq2)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,)_$c/=
                     @ a
                     @ b
                     @ c
                     $dEq
                     $dEq1
                     $dEq2) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 5,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b, c))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b, c)) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Smart.$s$fElt(,)
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.AST.$WPrimLOr
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Smart.$s$fElt(,)
                      Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                      (let {
                         $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                       } in
                       let {
                         $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1
                       } in
                       let {
                         $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ c $dEq2
                       } in
                       let {
                         $dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c)
                         = Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                             @ a
                             @ b
                             @ c
                             $dElt
                             $dElt1
                             $dElt2
                       } in
                       let {
                         $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple (a, b, c)
                         = Data.Array.Accelerate.Product.$fIsProductcst(,,)
                             @ Data.Array.Accelerate.Array.Sugar.Elt
                             @ a
                             @ b
                             @ c
                             $dElt
                             $dElt1
                             $dElt2
                       } in
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Bool), GHC.Types.Bool)
                          @ GHC.Types.Bool
                          @ ((), GHC.Types.Bool)
                          @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Bool)
                             @ GHC.Types.Bool
                             @ ()
                             @~ <((), GHC.Types.Bool)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Classes.Eq./=
                                @ a
                                $dEq
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c)
                                   $dElt3
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix2 @ () @ a @ b @ c)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                        <b>_N <a>_N))
                                              <c>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                     <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c)
                                   $dElt3
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix2 @ () @ a @ b @ c)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                        <b>_N <a>_N))
                                              <c>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                     <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta1)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))
                          (Data.Array.Accelerate.Smart.PrimApp
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ GHC.Types.Bool
                             @ (GHC.Types.Bool, GHC.Types.Bool)
                             Data.Array.Accelerate.Smart.$s$fElt(,)
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             Data.Array.Accelerate.AST.$WPrimLOr
                             (Data.Array.Accelerate.Smart.Tuple
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ (GHC.Types.Bool, GHC.Types.Bool)
                                Data.Array.Accelerate.Smart.$s$fElt(,)
                                Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                (Data.Array.Accelerate.Array.Sugar.SnocTup
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                   @ GHC.Types.Bool
                                   @ ((), GHC.Types.Bool)
                                   @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                                   (Data.Array.Accelerate.Array.Sugar.SnocTup
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ ((), GHC.Types.Bool)
                                      @ GHC.Types.Bool
                                      @ ()
                                      @~ <((), GHC.Types.Bool)>_N
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                         @ Data.Array.Accelerate.Smart.Exp)
                                      (Data.Array.Accelerate.Classes.Eq./=
                                         @ b
                                         $dEq1
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c)
                                            $dElt3
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix1 @ ((), a) @ b @ c)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                 <b>_N <a>_N))
                                                       <c>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                              <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c)
                                            $dElt3
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix1 @ ((), a) @ b @ c)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                 <b>_N <a>_N))
                                                       <c>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                              <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta1)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)))
                                   (Data.Array.Accelerate.Classes.Eq./=
                                      @ c
                                      $dEq2
                                      (Data.Array.Accelerate.Smart.Prj
                                         @ Data.Array.Accelerate.Smart.Acc
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ c
                                         @ (a, b, c)
                                         $dElt3
                                         $dIsProduct
                                         $dElt2
                                         (Data.Array.Accelerate.Product.$WZeroTupIdx
                                            @ c
                                            @ (((), a), b))
                                           `cast`
                                         (Data.Array.Accelerate.Product.TupleIdx
                                            (Trans
                                                 ((,)
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                              <b>_N <a>_N))
                                                    <c>_N)_N
                                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                           <c>_N <b>_N <a>_N)))
                                            <c>_N)_R
                                         eta)
                                        `cast`
                                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                                      (Data.Array.Accelerate.Smart.Prj
                                         @ Data.Array.Accelerate.Smart.Acc
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ c
                                         @ (a, b, c)
                                         $dElt3
                                         $dIsProduct
                                         $dElt2
                                         (Data.Array.Accelerate.Product.$WZeroTupIdx
                                            @ c
                                            @ (((), a), b))
                                           `cast`
                                         (Data.Array.Accelerate.Product.TupleIdx
                                            (Trans
                                                 ((,)
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                              <b>_N <a>_N))
                                                    <c>_N)_N
                                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                           <c>_N <b>_N <a>_N)))
                                            <c>_N)_R
                                         eta1)
                                        `cast`
                                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)))
                                  `cast`
                                (Data.Array.Accelerate.Array.Sugar.Tuple
                                   <Data.Array.Accelerate.Smart.Exp>_R
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                           GHC.Types.Bool)>_N))
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 5,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b, c))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b, c)) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Smart.$s$fElt(,)
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.AST.$WPrimLAnd
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Smart.$s$fElt(,)
                      Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                      (let {
                         $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                       } in
                       let {
                         $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1
                       } in
                       let {
                         $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ c $dEq2
                       } in
                       let {
                         $dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c)
                         = Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                             @ a
                             @ b
                             @ c
                             $dElt
                             $dElt1
                             $dElt2
                       } in
                       let {
                         $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple (a, b, c)
                         = Data.Array.Accelerate.Product.$fIsProductcst(,,)
                             @ Data.Array.Accelerate.Array.Sugar.Elt
                             @ a
                             @ b
                             @ c
                             $dElt
                             $dElt1
                             $dElt2
                       } in
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Bool), GHC.Types.Bool)
                          @ GHC.Types.Bool
                          @ ((), GHC.Types.Bool)
                          @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Bool)
                             @ GHC.Types.Bool
                             @ ()
                             @~ <((), GHC.Types.Bool)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Classes.Eq.==
                                @ a
                                $dEq
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c)
                                   $dElt3
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix2 @ () @ a @ b @ c)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                        <b>_N <a>_N))
                                              <c>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                     <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c)
                                   $dElt3
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix2 @ () @ a @ b @ c)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                        <b>_N <a>_N))
                                              <c>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                     <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta1)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))
                          (Data.Array.Accelerate.Smart.PrimApp
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ GHC.Types.Bool
                             @ (GHC.Types.Bool, GHC.Types.Bool)
                             Data.Array.Accelerate.Smart.$s$fElt(,)
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             Data.Array.Accelerate.AST.$WPrimLAnd
                             (Data.Array.Accelerate.Smart.Tuple
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ (GHC.Types.Bool, GHC.Types.Bool)
                                Data.Array.Accelerate.Smart.$s$fElt(,)
                                Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                (Data.Array.Accelerate.Array.Sugar.SnocTup
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                   @ GHC.Types.Bool
                                   @ ((), GHC.Types.Bool)
                                   @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                                   (Data.Array.Accelerate.Array.Sugar.SnocTup
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ ((), GHC.Types.Bool)
                                      @ GHC.Types.Bool
                                      @ ()
                                      @~ <((), GHC.Types.Bool)>_N
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                         @ Data.Array.Accelerate.Smart.Exp)
                                      (Data.Array.Accelerate.Classes.Eq.==
                                         @ b
                                         $dEq1
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c)
                                            $dElt3
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix1 @ ((), a) @ b @ c)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                 <b>_N <a>_N))
                                                       <c>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                              <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c)
                                            $dElt3
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix1 @ ((), a) @ b @ c)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                 <b>_N <a>_N))
                                                       <c>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                              <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta1)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)))
                                   (Data.Array.Accelerate.Classes.Eq.==
                                      @ c
                                      $dEq2
                                      (Data.Array.Accelerate.Smart.Prj
                                         @ Data.Array.Accelerate.Smart.Acc
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ c
                                         @ (a, b, c)
                                         $dElt3
                                         $dIsProduct
                                         $dElt2
                                         (Data.Array.Accelerate.Product.$WZeroTupIdx
                                            @ c
                                            @ (((), a), b))
                                           `cast`
                                         (Data.Array.Accelerate.Product.TupleIdx
                                            (Trans
                                                 ((,)
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                              <b>_N <a>_N))
                                                    <c>_N)_N
                                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                           <c>_N <b>_N <a>_N)))
                                            <c>_N)_R
                                         eta)
                                        `cast`
                                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                                      (Data.Array.Accelerate.Smart.Prj
                                         @ Data.Array.Accelerate.Smart.Acc
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ c
                                         @ (a, b, c)
                                         $dElt3
                                         $dIsProduct
                                         $dElt2
                                         (Data.Array.Accelerate.Product.$WZeroTupIdx
                                            @ c
                                            @ (((), a), b))
                                           `cast`
                                         (Data.Array.Accelerate.Product.TupleIdx
                                            (Trans
                                                 ((,)
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                              <b>_N <a>_N))
                                                    <c>_N)_N
                                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                           <c>_N <b>_N <a>_N)))
                                            <c>_N)_R
                                         eta1)
                                        `cast`
                                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)))
                                  `cast`
                                (Data.Array.Accelerate.Array.Sugar.Tuple
                                   <Data.Array.Accelerate.Smart.Exp>_R
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                           GHC.Types.Bool)>_N))
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 5,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 5,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c) =>
    Data.Array.Accelerate.Array.Sugar.Elt (a, b, c)
  {- Arity: 3,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c) ->
                 Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                   @ a
                   @ b
                   @ c
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq)
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1)
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq @ c $dEq2)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b, c, d)
  DFunId
  {- Arity: 4,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d).
                  @ (a, b, c, d)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 6,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b, c, d))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Smart.$s$fElt(,)
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.AST.$WPrimLOr
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Smart.$s$fElt(,)
                      Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                      (let {
                         $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                       } in
                       let {
                         $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1
                       } in
                       let {
                         $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ c $dEq2
                       } in
                       let {
                         $dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ d $dEq3
                       } in
                       let {
                         $dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d)
                         = Data.Array.Accelerate.Array.Sugar.$fElt(,,,)
                             @ a
                             @ b
                             @ c
                             @ d
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                       } in
                       let {
                         $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                          (a, b, c, d)
                         = Data.Array.Accelerate.Product.$fIsProductcst(,,,)
                             @ Data.Array.Accelerate.Array.Sugar.Elt
                             @ a
                             @ b
                             @ c
                             @ d
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                       } in
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Bool), GHC.Types.Bool)
                          @ GHC.Types.Bool
                          @ ((), GHC.Types.Bool)
                          @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Bool)
                             @ GHC.Types.Bool
                             @ ()
                             @~ <((), GHC.Types.Bool)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Classes.Eq./=
                                @ a
                                $dEq
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c, d)
                                   $dElt4
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix3 @ () @ a @ b @ c @ d)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c, d)
                                   $dElt4
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix3 @ () @ a @ b @ c @ d)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta1)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))
                          (Data.Array.Accelerate.Smart.PrimApp
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ GHC.Types.Bool
                             @ (GHC.Types.Bool, GHC.Types.Bool)
                             Data.Array.Accelerate.Smart.$s$fElt(,)
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             Data.Array.Accelerate.AST.$WPrimLOr
                             (Data.Array.Accelerate.Smart.Tuple
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ (GHC.Types.Bool, GHC.Types.Bool)
                                Data.Array.Accelerate.Smart.$s$fElt(,)
                                Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                (Data.Array.Accelerate.Array.Sugar.SnocTup
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                   @ GHC.Types.Bool
                                   @ ((), GHC.Types.Bool)
                                   @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                                   (Data.Array.Accelerate.Array.Sugar.SnocTup
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ ((), GHC.Types.Bool)
                                      @ GHC.Types.Bool
                                      @ ()
                                      @~ <((), GHC.Types.Bool)>_N
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                         @ Data.Array.Accelerate.Smart.Exp)
                                      (Data.Array.Accelerate.Classes.Eq./=
                                         @ b
                                         $dEq1
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c, d)
                                            $dElt4
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix2 @ ((), a) @ b @ c @ d)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                         <b>_N <a>_N))
                                                               <c>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                      <c>_N <b>_N <a>_N)))
                                                       <d>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                              <d>_N <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c, d)
                                            $dElt4
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix2 @ ((), a) @ b @ c @ d)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                         <b>_N <a>_N))
                                                               <c>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                      <c>_N <b>_N <a>_N)))
                                                       <d>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                              <d>_N <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta1)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)))
                                   (Data.Array.Accelerate.Smart.PrimApp
                                      @ Data.Array.Accelerate.Smart.Acc
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ GHC.Types.Bool
                                      @ (GHC.Types.Bool, GHC.Types.Bool)
                                      Data.Array.Accelerate.Smart.$s$fElt(,)
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      Data.Array.Accelerate.AST.$WPrimLOr
                                      (Data.Array.Accelerate.Smart.Tuple
                                         @ Data.Array.Accelerate.Smart.Acc
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ (GHC.Types.Bool, GHC.Types.Bool)
                                         Data.Array.Accelerate.Smart.$s$fElt(,)
                                         Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                            @ GHC.Types.Bool
                                            @ ((), GHC.Types.Bool)
                                            @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                            Data.Array.Accelerate.Array.Sugar.$fEltBool
                                            (Data.Array.Accelerate.Array.Sugar.SnocTup
                                               @ Data.Array.Accelerate.Smart.Exp
                                               @ ((), GHC.Types.Bool)
                                               @ GHC.Types.Bool
                                               @ ()
                                               @~ <((), GHC.Types.Bool)>_N
                                               Data.Array.Accelerate.Array.Sugar.$fEltBool
                                               (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                                  @ Data.Array.Accelerate.Smart.Exp)
                                               (Data.Array.Accelerate.Classes.Eq./=
                                                  @ c
                                                  $dEq2
                                                  (Data.Array.Accelerate.Smart.Prj
                                                     @ Data.Array.Accelerate.Smart.Acc
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ c
                                                     @ (a, b, c, d)
                                                     $dElt4
                                                     $dIsProduct
                                                     $dElt2
                                                     (Data.Array.Accelerate.Smart.tix1
                                                        @ (((), a), b)
                                                        @ c
                                                        @ d)
                                                       `cast`
                                                     (Data.Array.Accelerate.Product.TupleIdx
                                                        (Trans
                                                             ((,)
                                                                (Trans
                                                                     ((,)
                                                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                  <b>_N <a>_N))
                                                                        <c>_N)_N
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                               <c>_N <b>_N <a>_N)))
                                                                <d>_N)_N
                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                       <d>_N <c>_N <b>_N <a>_N)))
                                                        <c>_N)_R
                                                     eta)
                                                    `cast`
                                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                                                  (Data.Array.Accelerate.Smart.Prj
                                                     @ Data.Array.Accelerate.Smart.Acc
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ c
                                                     @ (a, b, c, d)
                                                     $dElt4
                                                     $dIsProduct
                                                     $dElt2
                                                     (Data.Array.Accelerate.Smart.tix1
                                                        @ (((), a), b)
                                                        @ c
                                                        @ d)
                                                       `cast`
                                                     (Data.Array.Accelerate.Product.TupleIdx
                                                        (Trans
                                                             ((,)
                                                                (Trans
                                                                     ((,)
                                                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                  <b>_N <a>_N))
                                                                        <c>_N)_N
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                               <c>_N <b>_N <a>_N)))
                                                                <d>_N)_N
                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                       <d>_N <c>_N <b>_N <a>_N)))
                                                        <c>_N)_R
                                                     eta1)
                                                    `cast`
                                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)))
                                            (Data.Array.Accelerate.Classes.Eq./=
                                               @ d
                                               $dEq3
                                               (Data.Array.Accelerate.Smart.Prj
                                                  @ Data.Array.Accelerate.Smart.Acc
                                                  @ Data.Array.Accelerate.Smart.Exp
                                                  @ d
                                                  @ (a, b, c, d)
                                                  $dElt4
                                                  $dIsProduct
                                                  $dElt3
                                                  (Data.Array.Accelerate.Product.$WZeroTupIdx
                                                     @ d
                                                     @ ((((), a), b), c))
                                                    `cast`
                                                  (Data.Array.Accelerate.Product.TupleIdx
                                                     (Trans
                                                          ((,)
                                                             (Trans
                                                                  ((,)
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                               <b>_N <a>_N))
                                                                     <c>_N)_N
                                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                            <c>_N <b>_N <a>_N)))
                                                             <d>_N)_N
                                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                    <d>_N <c>_N <b>_N <a>_N)))
                                                     <d>_N)_R
                                                  eta)
                                                 `cast`
                                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)
                                               (Data.Array.Accelerate.Smart.Prj
                                                  @ Data.Array.Accelerate.Smart.Acc
                                                  @ Data.Array.Accelerate.Smart.Exp
                                                  @ d
                                                  @ (a, b, c, d)
                                                  $dElt4
                                                  $dIsProduct
                                                  $dElt3
                                                  (Data.Array.Accelerate.Product.$WZeroTupIdx
                                                     @ d
                                                     @ ((((), a), b), c))
                                                    `cast`
                                                  (Data.Array.Accelerate.Product.TupleIdx
                                                     (Trans
                                                          ((,)
                                                             (Trans
                                                                  ((,)
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                               <b>_N <a>_N))
                                                                     <c>_N)_N
                                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                            <c>_N <b>_N <a>_N)))
                                                             <d>_N)_N
                                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                    <d>_N <c>_N <b>_N <a>_N)))
                                                     <d>_N)_R
                                                  eta1)
                                                 `cast`
                                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)))
                                           `cast`
                                         (Data.Array.Accelerate.Array.Sugar.Tuple
                                            <Data.Array.Accelerate.Smart.Exp>_R
                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                      <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                                        `cast`
                                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                                    GHC.Types.Bool)>_N))
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                                  `cast`
                                (Data.Array.Accelerate.Array.Sugar.Tuple
                                   <Data.Array.Accelerate.Smart.Exp>_R
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                           GHC.Types.Bool)>_N))
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 6,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b, c, d))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Smart.$s$fElt(,)
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.AST.$WPrimLAnd
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Smart.$s$fElt(,)
                      Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                      (let {
                         $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                       } in
                       let {
                         $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1
                       } in
                       let {
                         $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ c $dEq2
                       } in
                       let {
                         $dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ d $dEq3
                       } in
                       let {
                         $dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d)
                         = Data.Array.Accelerate.Array.Sugar.$fElt(,,,)
                             @ a
                             @ b
                             @ c
                             @ d
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                       } in
                       let {
                         $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                          (a, b, c, d)
                         = Data.Array.Accelerate.Product.$fIsProductcst(,,,)
                             @ Data.Array.Accelerate.Array.Sugar.Elt
                             @ a
                             @ b
                             @ c
                             @ d
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                       } in
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Bool), GHC.Types.Bool)
                          @ GHC.Types.Bool
                          @ ((), GHC.Types.Bool)
                          @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Bool)
                             @ GHC.Types.Bool
                             @ ()
                             @~ <((), GHC.Types.Bool)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Classes.Eq.==
                                @ a
                                $dEq
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c, d)
                                   $dElt4
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix3 @ () @ a @ b @ c @ d)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c, d)
                                   $dElt4
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix3 @ () @ a @ b @ c @ d)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                <b>_N <a>_N))
                                                      <c>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                             <c>_N <b>_N <a>_N)))
                                              <d>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                     <d>_N <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta1)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))
                          (Data.Array.Accelerate.Smart.PrimApp
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ GHC.Types.Bool
                             @ (GHC.Types.Bool, GHC.Types.Bool)
                             Data.Array.Accelerate.Smart.$s$fElt(,)
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             Data.Array.Accelerate.AST.$WPrimLAnd
                             (Data.Array.Accelerate.Smart.Tuple
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ (GHC.Types.Bool, GHC.Types.Bool)
                                Data.Array.Accelerate.Smart.$s$fElt(,)
                                Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                (Data.Array.Accelerate.Array.Sugar.SnocTup
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                   @ GHC.Types.Bool
                                   @ ((), GHC.Types.Bool)
                                   @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                                   (Data.Array.Accelerate.Array.Sugar.SnocTup
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ ((), GHC.Types.Bool)
                                      @ GHC.Types.Bool
                                      @ ()
                                      @~ <((), GHC.Types.Bool)>_N
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                         @ Data.Array.Accelerate.Smart.Exp)
                                      (Data.Array.Accelerate.Classes.Eq.==
                                         @ b
                                         $dEq1
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c, d)
                                            $dElt4
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix2 @ ((), a) @ b @ c @ d)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                         <b>_N <a>_N))
                                                               <c>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                      <c>_N <b>_N <a>_N)))
                                                       <d>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                              <d>_N <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c, d)
                                            $dElt4
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix2 @ ((), a) @ b @ c @ d)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                         <b>_N <a>_N))
                                                               <c>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                      <c>_N <b>_N <a>_N)))
                                                       <d>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                              <d>_N <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta1)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)))
                                   (Data.Array.Accelerate.Smart.PrimApp
                                      @ Data.Array.Accelerate.Smart.Acc
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ GHC.Types.Bool
                                      @ (GHC.Types.Bool, GHC.Types.Bool)
                                      Data.Array.Accelerate.Smart.$s$fElt(,)
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      Data.Array.Accelerate.AST.$WPrimLAnd
                                      (Data.Array.Accelerate.Smart.Tuple
                                         @ Data.Array.Accelerate.Smart.Acc
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ (GHC.Types.Bool, GHC.Types.Bool)
                                         Data.Array.Accelerate.Smart.$s$fElt(,)
                                         Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                            @ GHC.Types.Bool
                                            @ ((), GHC.Types.Bool)
                                            @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                            Data.Array.Accelerate.Array.Sugar.$fEltBool
                                            (Data.Array.Accelerate.Array.Sugar.SnocTup
                                               @ Data.Array.Accelerate.Smart.Exp
                                               @ ((), GHC.Types.Bool)
                                               @ GHC.Types.Bool
                                               @ ()
                                               @~ <((), GHC.Types.Bool)>_N
                                               Data.Array.Accelerate.Array.Sugar.$fEltBool
                                               (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                                  @ Data.Array.Accelerate.Smart.Exp)
                                               (Data.Array.Accelerate.Classes.Eq.==
                                                  @ c
                                                  $dEq2
                                                  (Data.Array.Accelerate.Smart.Prj
                                                     @ Data.Array.Accelerate.Smart.Acc
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ c
                                                     @ (a, b, c, d)
                                                     $dElt4
                                                     $dIsProduct
                                                     $dElt2
                                                     (Data.Array.Accelerate.Smart.tix1
                                                        @ (((), a), b)
                                                        @ c
                                                        @ d)
                                                       `cast`
                                                     (Data.Array.Accelerate.Product.TupleIdx
                                                        (Trans
                                                             ((,)
                                                                (Trans
                                                                     ((,)
                                                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                  <b>_N <a>_N))
                                                                        <c>_N)_N
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                               <c>_N <b>_N <a>_N)))
                                                                <d>_N)_N
                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                       <d>_N <c>_N <b>_N <a>_N)))
                                                        <c>_N)_R
                                                     eta)
                                                    `cast`
                                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                                                  (Data.Array.Accelerate.Smart.Prj
                                                     @ Data.Array.Accelerate.Smart.Acc
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ c
                                                     @ (a, b, c, d)
                                                     $dElt4
                                                     $dIsProduct
                                                     $dElt2
                                                     (Data.Array.Accelerate.Smart.tix1
                                                        @ (((), a), b)
                                                        @ c
                                                        @ d)
                                                       `cast`
                                                     (Data.Array.Accelerate.Product.TupleIdx
                                                        (Trans
                                                             ((,)
                                                                (Trans
                                                                     ((,)
                                                                        (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                  <b>_N <a>_N))
                                                                        <c>_N)_N
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                               <c>_N <b>_N <a>_N)))
                                                                <d>_N)_N
                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                       <d>_N <c>_N <b>_N <a>_N)))
                                                        <c>_N)_R
                                                     eta1)
                                                    `cast`
                                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)))
                                            (Data.Array.Accelerate.Classes.Eq.==
                                               @ d
                                               $dEq3
                                               (Data.Array.Accelerate.Smart.Prj
                                                  @ Data.Array.Accelerate.Smart.Acc
                                                  @ Data.Array.Accelerate.Smart.Exp
                                                  @ d
                                                  @ (a, b, c, d)
                                                  $dElt4
                                                  $dIsProduct
                                                  $dElt3
                                                  (Data.Array.Accelerate.Product.$WZeroTupIdx
                                                     @ d
                                                     @ ((((), a), b), c))
                                                    `cast`
                                                  (Data.Array.Accelerate.Product.TupleIdx
                                                     (Trans
                                                          ((,)
                                                             (Trans
                                                                  ((,)
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                               <b>_N <a>_N))
                                                                     <c>_N)_N
                                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                            <c>_N <b>_N <a>_N)))
                                                             <d>_N)_N
                                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                    <d>_N <c>_N <b>_N <a>_N)))
                                                     <d>_N)_R
                                                  eta)
                                                 `cast`
                                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)
                                               (Data.Array.Accelerate.Smart.Prj
                                                  @ Data.Array.Accelerate.Smart.Acc
                                                  @ Data.Array.Accelerate.Smart.Exp
                                                  @ d
                                                  @ (a, b, c, d)
                                                  $dElt4
                                                  $dIsProduct
                                                  $dElt3
                                                  (Data.Array.Accelerate.Product.$WZeroTupIdx
                                                     @ d
                                                     @ ((((), a), b), c))
                                                    `cast`
                                                  (Data.Array.Accelerate.Product.TupleIdx
                                                     (Trans
                                                          ((,)
                                                             (Trans
                                                                  ((,)
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                               <b>_N <a>_N))
                                                                     <c>_N)_N
                                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                            <c>_N <b>_N <a>_N)))
                                                             <d>_N)_N
                                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                    <d>_N <c>_N <b>_N <a>_N)))
                                                     <d>_N)_R
                                                  eta1)
                                                 `cast`
                                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)))
                                           `cast`
                                         (Data.Array.Accelerate.Array.Sugar.Tuple
                                            <Data.Array.Accelerate.Smart.Exp>_R
                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                      <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                                        `cast`
                                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                                    GHC.Types.Bool)>_N))
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                                  `cast`
                                (Data.Array.Accelerate.Array.Sugar.Tuple
                                   <Data.Array.Accelerate.Smart.Exp>_R
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                           GHC.Types.Bool)>_N))
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 6,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 6,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d) =>
    Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq
                        @ a
                        @ b
                        @ c
                        @ d
                        w
                        w1
                        w2
                        w3 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b, c, d, e)
  DFunId
  {- Arity: 5,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e).
                  @ (a, b, c, d, e)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 7,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Smart.$s$fElt(,)
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.AST.$WPrimLOr
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Smart.$s$fElt(,)
                      Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                      (let {
                         $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                       } in
                       let {
                         $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1
                       } in
                       let {
                         $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ c $dEq2
                       } in
                       let {
                         $dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ d $dEq3
                       } in
                       let {
                         $dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ e $dEq4
                       } in
                       let {
                         $dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e)
                         = Data.Array.Accelerate.Array.Sugar.$fElt(,,,,)
                             @ a
                             @ b
                             @ c
                             @ d
                             @ e
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                             $dElt4
                       } in
                       let {
                         $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                          (a, b, c, d, e)
                         = Data.Array.Accelerate.Product.$fIsProductcst(,,,,)
                             @ Data.Array.Accelerate.Array.Sugar.Elt
                             @ a
                             @ b
                             @ c
                             @ d
                             @ e
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                             $dElt4
                       } in
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Bool), GHC.Types.Bool)
                          @ GHC.Types.Bool
                          @ ((), GHC.Types.Bool)
                          @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Bool)
                             @ GHC.Types.Bool
                             @ ()
                             @~ <((), GHC.Types.Bool)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Classes.Eq./=
                                @ a
                                $dEq
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c, d, e)
                                   $dElt5
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix4 @ () @ a @ b @ c @ d @ e)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Trans
                                                           ((,)
                                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                        <b>_N <a>_N))
                                                              <c>_N)_N
                                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                     <c>_N <b>_N <a>_N)))
                                                      <d>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                             <d>_N <c>_N <b>_N <a>_N)))
                                              <e>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                     <e>_N <d>_N <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c, d, e)
                                   $dElt5
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix4 @ () @ a @ b @ c @ d @ e)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Trans
                                                           ((,)
                                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                        <b>_N <a>_N))
                                                              <c>_N)_N
                                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                     <c>_N <b>_N <a>_N)))
                                                      <d>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                             <d>_N <c>_N <b>_N <a>_N)))
                                              <e>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                     <e>_N <d>_N <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta1)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))
                          (Data.Array.Accelerate.Smart.PrimApp
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ GHC.Types.Bool
                             @ (GHC.Types.Bool, GHC.Types.Bool)
                             Data.Array.Accelerate.Smart.$s$fElt(,)
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             Data.Array.Accelerate.AST.$WPrimLOr
                             (Data.Array.Accelerate.Smart.Tuple
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ (GHC.Types.Bool, GHC.Types.Bool)
                                Data.Array.Accelerate.Smart.$s$fElt(,)
                                Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                (Data.Array.Accelerate.Array.Sugar.SnocTup
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                   @ GHC.Types.Bool
                                   @ ((), GHC.Types.Bool)
                                   @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                                   (Data.Array.Accelerate.Array.Sugar.SnocTup
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ ((), GHC.Types.Bool)
                                      @ GHC.Types.Bool
                                      @ ()
                                      @~ <((), GHC.Types.Bool)>_N
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                         @ Data.Array.Accelerate.Smart.Exp)
                                      (Data.Array.Accelerate.Classes.Eq./=
                                         @ b
                                         $dEq1
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c, d, e)
                                            $dElt5
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix3
                                               @ ((), a)
                                               @ b
                                               @ c
                                               @ d
                                               @ e)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Trans
                                                                    ((,)
                                                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                 <b>_N <a>_N))
                                                                       <c>_N)_N
                                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                              <c>_N <b>_N <a>_N)))
                                                               <d>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                      <d>_N <c>_N <b>_N <a>_N)))
                                                       <e>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                              <e>_N <d>_N <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c, d, e)
                                            $dElt5
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix3
                                               @ ((), a)
                                               @ b
                                               @ c
                                               @ d
                                               @ e)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Trans
                                                                    ((,)
                                                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                 <b>_N <a>_N))
                                                                       <c>_N)_N
                                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                              <c>_N <b>_N <a>_N)))
                                                               <d>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                      <d>_N <c>_N <b>_N <a>_N)))
                                                       <e>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                              <e>_N <d>_N <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta1)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)))
                                   (Data.Array.Accelerate.Smart.PrimApp
                                      @ Data.Array.Accelerate.Smart.Acc
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ GHC.Types.Bool
                                      @ (GHC.Types.Bool, GHC.Types.Bool)
                                      Data.Array.Accelerate.Smart.$s$fElt(,)
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      Data.Array.Accelerate.AST.$WPrimLOr
                                      (Data.Array.Accelerate.Smart.Tuple
                                         @ Data.Array.Accelerate.Smart.Acc
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ (GHC.Types.Bool, GHC.Types.Bool)
                                         Data.Array.Accelerate.Smart.$s$fElt(,)
                                         Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                            @ GHC.Types.Bool
                                            @ ((), GHC.Types.Bool)
                                            @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                            Data.Array.Accelerate.Array.Sugar.$fEltBool
                                            (Data.Array.Accelerate.Array.Sugar.SnocTup
                                               @ Data.Array.Accelerate.Smart.Exp
                                               @ ((), GHC.Types.Bool)
                                               @ GHC.Types.Bool
                                               @ ()
                                               @~ <((), GHC.Types.Bool)>_N
                                               Data.Array.Accelerate.Array.Sugar.$fEltBool
                                               (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                                  @ Data.Array.Accelerate.Smart.Exp)
                                               (Data.Array.Accelerate.Classes.Eq./=
                                                  @ c
                                                  $dEq2
                                                  (Data.Array.Accelerate.Smart.Prj
                                                     @ Data.Array.Accelerate.Smart.Acc
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ c
                                                     @ (a, b, c, d, e)
                                                     $dElt5
                                                     $dIsProduct
                                                     $dElt2
                                                     (Data.Array.Accelerate.Smart.tix2
                                                        @ (((), a), b)
                                                        @ c
                                                        @ d
                                                        @ e)
                                                       `cast`
                                                     (Data.Array.Accelerate.Product.TupleIdx
                                                        (Trans
                                                             ((,)
                                                                (Trans
                                                                     ((,)
                                                                        (Trans
                                                                             ((,)
                                                                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                          <b>_N
                                                                                          <a>_N))
                                                                                <c>_N)_N
                                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                       <c>_N
                                                                                       <b>_N
                                                                                       <a>_N)))
                                                                        <d>_N)_N
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                               <d>_N
                                                                               <c>_N
                                                                               <b>_N
                                                                               <a>_N)))
                                                                <e>_N)_N
                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                       <e>_N
                                                                       <d>_N
                                                                       <c>_N
                                                                       <b>_N
                                                                       <a>_N)))
                                                        <c>_N)_R
                                                     eta)
                                                    `cast`
                                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                                                  (Data.Array.Accelerate.Smart.Prj
                                                     @ Data.Array.Accelerate.Smart.Acc
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ c
                                                     @ (a, b, c, d, e)
                                                     $dElt5
                                                     $dIsProduct
                                                     $dElt2
                                                     (Data.Array.Accelerate.Smart.tix2
                                                        @ (((), a), b)
                                                        @ c
                                                        @ d
                                                        @ e)
                                                       `cast`
                                                     (Data.Array.Accelerate.Product.TupleIdx
                                                        (Trans
                                                             ((,)
                                                                (Trans
                                                                     ((,)
                                                                        (Trans
                                                                             ((,)
                                                                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                          <b>_N
                                                                                          <a>_N))
                                                                                <c>_N)_N
                                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                       <c>_N
                                                                                       <b>_N
                                                                                       <a>_N)))
                                                                        <d>_N)_N
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                               <d>_N
                                                                               <c>_N
                                                                               <b>_N
                                                                               <a>_N)))
                                                                <e>_N)_N
                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                       <e>_N
                                                                       <d>_N
                                                                       <c>_N
                                                                       <b>_N
                                                                       <a>_N)))
                                                        <c>_N)_R
                                                     eta1)
                                                    `cast`
                                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)))
                                            (Data.Array.Accelerate.Smart.PrimApp
                                               @ Data.Array.Accelerate.Smart.Acc
                                               @ Data.Array.Accelerate.Smart.Exp
                                               @ GHC.Types.Bool
                                               @ (GHC.Types.Bool, GHC.Types.Bool)
                                               Data.Array.Accelerate.Smart.$s$fElt(,)
                                               Data.Array.Accelerate.Array.Sugar.$fEltBool
                                               Data.Array.Accelerate.AST.$WPrimLOr
                                               (Data.Array.Accelerate.Smart.Tuple
                                                  @ Data.Array.Accelerate.Smart.Acc
                                                  @ Data.Array.Accelerate.Smart.Exp
                                                  @ (GHC.Types.Bool, GHC.Types.Bool)
                                                  Data.Array.Accelerate.Smart.$s$fElt(,)
                                                  Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                                  (Data.Array.Accelerate.Array.Sugar.SnocTup
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                                     @ GHC.Types.Bool
                                                     @ ((), GHC.Types.Bool)
                                                     @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                                     Data.Array.Accelerate.Array.Sugar.$fEltBool
                                                     (Data.Array.Accelerate.Array.Sugar.SnocTup
                                                        @ Data.Array.Accelerate.Smart.Exp
                                                        @ ((), GHC.Types.Bool)
                                                        @ GHC.Types.Bool
                                                        @ ()
                                                        @~ <((), GHC.Types.Bool)>_N
                                                        Data.Array.Accelerate.Array.Sugar.$fEltBool
                                                        (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                                           @ Data.Array.Accelerate.Smart.Exp)
                                                        (Data.Array.Accelerate.Classes.Eq./=
                                                           @ d
                                                           $dEq3
                                                           (Data.Array.Accelerate.Smart.Prj
                                                              @ Data.Array.Accelerate.Smart.Acc
                                                              @ Data.Array.Accelerate.Smart.Exp
                                                              @ d
                                                              @ (a, b, c, d, e)
                                                              $dElt5
                                                              $dIsProduct
                                                              $dElt3
                                                              (Data.Array.Accelerate.Smart.tix1
                                                                 @ ((((), a), b), c)
                                                                 @ d
                                                                 @ e)
                                                                `cast`
                                                              (Data.Array.Accelerate.Product.TupleIdx
                                                                 (Trans
                                                                      ((,)
                                                                         (Trans
                                                                              ((,)
                                                                                 (Trans
                                                                                      ((,)
                                                                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                                   <b>_N
                                                                                                   <a>_N))
                                                                                         <c>_N)_N
                                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                                <c>_N
                                                                                                <b>_N
                                                                                                <a>_N)))
                                                                                 <d>_N)_N
                                                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                        <d>_N
                                                                                        <c>_N
                                                                                        <b>_N
                                                                                        <a>_N)))
                                                                         <e>_N)_N
                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                                <e>_N
                                                                                <d>_N
                                                                                <c>_N
                                                                                <b>_N
                                                                                <a>_N)))
                                                                 <d>_N)_R
                                                              eta)
                                                             `cast`
                                                           (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)
                                                           (Data.Array.Accelerate.Smart.Prj
                                                              @ Data.Array.Accelerate.Smart.Acc
                                                              @ Data.Array.Accelerate.Smart.Exp
                                                              @ d
                                                              @ (a, b, c, d, e)
                                                              $dElt5
                                                              $dIsProduct
                                                              $dElt3
                                                              (Data.Array.Accelerate.Smart.tix1
                                                                 @ ((((), a), b), c)
                                                                 @ d
                                                                 @ e)
                                                                `cast`
                                                              (Data.Array.Accelerate.Product.TupleIdx
                                                                 (Trans
                                                                      ((,)
                                                                         (Trans
                                                                              ((,)
                                                                                 (Trans
                                                                                      ((,)
                                                                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                                   <b>_N
                                                                                                   <a>_N))
                                                                                         <c>_N)_N
                                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                                <c>_N
                                                                                                <b>_N
                                                                                                <a>_N)))
                                                                                 <d>_N)_N
                                                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                        <d>_N
                                                                                        <c>_N
                                                                                        <b>_N
                                                                                        <a>_N)))
                                                                         <e>_N)_N
                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                                <e>_N
                                                                                <d>_N
                                                                                <c>_N
                                                                                <b>_N
                                                                                <a>_N)))
                                                                 <d>_N)_R
                                                              eta1)
                                                             `cast`
                                                           (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)))
                                                     (Data.Array.Accelerate.Classes.Eq./=
                                                        @ e
                                                        $dEq4
                                                        (Data.Array.Accelerate.Smart.Prj
                                                           @ Data.Array.Accelerate.Smart.Acc
                                                           @ Data.Array.Accelerate.Smart.Exp
                                                           @ e
                                                           @ (a, b, c, d, e)
                                                           $dElt5
                                                           $dIsProduct
                                                           $dElt4
                                                           (Data.Array.Accelerate.Product.$WZeroTupIdx
                                                              @ e
                                                              @ (((((), a), b), c), d))
                                                             `cast`
                                                           (Data.Array.Accelerate.Product.TupleIdx
                                                              (Trans
                                                                   ((,)
                                                                      (Trans
                                                                           ((,)
                                                                              (Trans
                                                                                   ((,)
                                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                                <b>_N
                                                                                                <a>_N))
                                                                                      <c>_N)_N
                                                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                             <c>_N
                                                                                             <b>_N
                                                                                             <a>_N)))
                                                                              <d>_N)_N
                                                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                     <d>_N
                                                                                     <c>_N
                                                                                     <b>_N
                                                                                     <a>_N)))
                                                                      <e>_N)_N
                                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                             <e>_N
                                                                             <d>_N
                                                                             <c>_N
                                                                             <b>_N
                                                                             <a>_N)))
                                                              <e>_N)_R
                                                           eta)
                                                          `cast`
                                                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N)
                                                        (Data.Array.Accelerate.Smart.Prj
                                                           @ Data.Array.Accelerate.Smart.Acc
                                                           @ Data.Array.Accelerate.Smart.Exp
                                                           @ e
                                                           @ (a, b, c, d, e)
                                                           $dElt5
                                                           $dIsProduct
                                                           $dElt4
                                                           (Data.Array.Accelerate.Product.$WZeroTupIdx
                                                              @ e
                                                              @ (((((), a), b), c), d))
                                                             `cast`
                                                           (Data.Array.Accelerate.Product.TupleIdx
                                                              (Trans
                                                                   ((,)
                                                                      (Trans
                                                                           ((,)
                                                                              (Trans
                                                                                   ((,)
                                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                                <b>_N
                                                                                                <a>_N))
                                                                                      <c>_N)_N
                                                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                             <c>_N
                                                                                             <b>_N
                                                                                             <a>_N)))
                                                                              <d>_N)_N
                                                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                     <d>_N
                                                                                     <c>_N
                                                                                     <b>_N
                                                                                     <a>_N)))
                                                                      <e>_N)_N
                                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                             <e>_N
                                                                             <d>_N
                                                                             <c>_N
                                                                             <b>_N
                                                                             <a>_N)))
                                                              <e>_N)_R
                                                           eta1)
                                                          `cast`
                                                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N)))
                                                    `cast`
                                                  (Data.Array.Accelerate.Array.Sugar.Tuple
                                                     <Data.Array.Accelerate.Smart.Exp>_R
                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                               <GHC.Types.Bool>_N
                                                               <GHC.Types.Bool>_N)))_R)
                                                 `cast`
                                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                                             GHC.Types.Bool)>_N))
                                              `cast`
                                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                                           `cast`
                                         (Data.Array.Accelerate.Array.Sugar.Tuple
                                            <Data.Array.Accelerate.Smart.Exp>_R
                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                      <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                                        `cast`
                                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                                    GHC.Types.Bool)>_N))
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                                  `cast`
                                (Data.Array.Accelerate.Array.Sugar.Tuple
                                   <Data.Array.Accelerate.Smart.Exp>_R
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                           GHC.Types.Bool)>_N))
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 7,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (eta :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e))
                   (eta1 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Smart.$s$fElt(,)
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.AST.$WPrimLAnd
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Smart.$s$fElt(,)
                      Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                      (let {
                         $dElt :: Data.Array.Accelerate.Array.Sugar.Elt a
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ a $dEq
                       } in
                       let {
                         $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ b $dEq1
                       } in
                       let {
                         $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ c $dEq2
                       } in
                       let {
                         $dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ d $dEq3
                       } in
                       let {
                         $dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e
                         = Data.Array.Accelerate.Classes.Eq.$p1Eq @ e $dEq4
                       } in
                       let {
                         $dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e)
                         = Data.Array.Accelerate.Array.Sugar.$fElt(,,,,)
                             @ a
                             @ b
                             @ c
                             @ d
                             @ e
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                             $dElt4
                       } in
                       let {
                         $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple
                                          (a, b, c, d, e)
                         = Data.Array.Accelerate.Product.$fIsProductcst(,,,,)
                             @ Data.Array.Accelerate.Array.Sugar.Elt
                             @ a
                             @ b
                             @ c
                             @ d
                             @ e
                             $dElt
                             $dElt1
                             $dElt2
                             $dElt3
                             $dElt4
                       } in
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Bool), GHC.Types.Bool)
                          @ GHC.Types.Bool
                          @ ((), GHC.Types.Bool)
                          @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Bool)
                             @ GHC.Types.Bool
                             @ ()
                             @~ <((), GHC.Types.Bool)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Classes.Eq.==
                                @ a
                                $dEq
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c, d, e)
                                   $dElt5
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix4 @ () @ a @ b @ c @ d @ e)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Trans
                                                           ((,)
                                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                        <b>_N <a>_N))
                                                              <c>_N)_N
                                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                     <c>_N <b>_N <a>_N)))
                                                      <d>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                             <d>_N <c>_N <b>_N <a>_N)))
                                              <e>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                     <e>_N <d>_N <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                                (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (a, b, c, d, e)
                                   $dElt5
                                   $dIsProduct
                                   $dElt
                                   (Data.Array.Accelerate.Smart.tix4 @ () @ a @ b @ c @ d @ e)
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Trans
                                           ((,)
                                              (Trans
                                                   ((,)
                                                      (Trans
                                                           ((,)
                                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                        <b>_N <a>_N))
                                                              <c>_N)_N
                                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                     <c>_N <b>_N <a>_N)))
                                                      <d>_N)_N
                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                             <d>_N <c>_N <b>_N <a>_N)))
                                              <e>_N)_N
                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                     <e>_N <d>_N <c>_N <b>_N <a>_N)))
                                      <a>_N)_R
                                   eta1)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)))
                          (Data.Array.Accelerate.Smart.PrimApp
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ GHC.Types.Bool
                             @ (GHC.Types.Bool, GHC.Types.Bool)
                             Data.Array.Accelerate.Smart.$s$fElt(,)
                             Data.Array.Accelerate.Array.Sugar.$fEltBool
                             Data.Array.Accelerate.AST.$WPrimLAnd
                             (Data.Array.Accelerate.Smart.Tuple
                                @ Data.Array.Accelerate.Smart.Acc
                                @ Data.Array.Accelerate.Smart.Exp
                                @ (GHC.Types.Bool, GHC.Types.Bool)
                                Data.Array.Accelerate.Smart.$s$fElt(,)
                                Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                (Data.Array.Accelerate.Array.Sugar.SnocTup
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                   @ GHC.Types.Bool
                                   @ ((), GHC.Types.Bool)
                                   @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                                   (Data.Array.Accelerate.Array.Sugar.SnocTup
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ ((), GHC.Types.Bool)
                                      @ GHC.Types.Bool
                                      @ ()
                                      @~ <((), GHC.Types.Bool)>_N
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                         @ Data.Array.Accelerate.Smart.Exp)
                                      (Data.Array.Accelerate.Classes.Eq.==
                                         @ b
                                         $dEq1
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c, d, e)
                                            $dElt5
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix3
                                               @ ((), a)
                                               @ b
                                               @ c
                                               @ d
                                               @ e)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Trans
                                                                    ((,)
                                                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                 <b>_N <a>_N))
                                                                       <c>_N)_N
                                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                              <c>_N <b>_N <a>_N)))
                                                               <d>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                      <d>_N <c>_N <b>_N <a>_N)))
                                                       <e>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                              <e>_N <d>_N <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                                         (Data.Array.Accelerate.Smart.Prj
                                            @ Data.Array.Accelerate.Smart.Acc
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ b
                                            @ (a, b, c, d, e)
                                            $dElt5
                                            $dIsProduct
                                            $dElt1
                                            (Data.Array.Accelerate.Smart.tix3
                                               @ ((), a)
                                               @ b
                                               @ c
                                               @ d
                                               @ e)
                                              `cast`
                                            (Data.Array.Accelerate.Product.TupleIdx
                                               (Trans
                                                    ((,)
                                                       (Trans
                                                            ((,)
                                                               (Trans
                                                                    ((,)
                                                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                 <b>_N <a>_N))
                                                                       <c>_N)_N
                                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                              <c>_N <b>_N <a>_N)))
                                                               <d>_N)_N
                                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                      <d>_N <c>_N <b>_N <a>_N)))
                                                       <e>_N)_N
                                                    (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                              <e>_N <d>_N <c>_N <b>_N <a>_N)))
                                               <b>_N)_R
                                            eta1)
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)))
                                   (Data.Array.Accelerate.Smart.PrimApp
                                      @ Data.Array.Accelerate.Smart.Acc
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ GHC.Types.Bool
                                      @ (GHC.Types.Bool, GHC.Types.Bool)
                                      Data.Array.Accelerate.Smart.$s$fElt(,)
                                      Data.Array.Accelerate.Array.Sugar.$fEltBool
                                      Data.Array.Accelerate.AST.$WPrimLAnd
                                      (Data.Array.Accelerate.Smart.Tuple
                                         @ Data.Array.Accelerate.Smart.Acc
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ (GHC.Types.Bool, GHC.Types.Bool)
                                         Data.Array.Accelerate.Smart.$s$fElt(,)
                                         Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                            @ GHC.Types.Bool
                                            @ ((), GHC.Types.Bool)
                                            @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                            Data.Array.Accelerate.Array.Sugar.$fEltBool
                                            (Data.Array.Accelerate.Array.Sugar.SnocTup
                                               @ Data.Array.Accelerate.Smart.Exp
                                               @ ((), GHC.Types.Bool)
                                               @ GHC.Types.Bool
                                               @ ()
                                               @~ <((), GHC.Types.Bool)>_N
                                               Data.Array.Accelerate.Array.Sugar.$fEltBool
                                               (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                                  @ Data.Array.Accelerate.Smart.Exp)
                                               (Data.Array.Accelerate.Classes.Eq.==
                                                  @ c
                                                  $dEq2
                                                  (Data.Array.Accelerate.Smart.Prj
                                                     @ Data.Array.Accelerate.Smart.Acc
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ c
                                                     @ (a, b, c, d, e)
                                                     $dElt5
                                                     $dIsProduct
                                                     $dElt2
                                                     (Data.Array.Accelerate.Smart.tix2
                                                        @ (((), a), b)
                                                        @ c
                                                        @ d
                                                        @ e)
                                                       `cast`
                                                     (Data.Array.Accelerate.Product.TupleIdx
                                                        (Trans
                                                             ((,)
                                                                (Trans
                                                                     ((,)
                                                                        (Trans
                                                                             ((,)
                                                                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                          <b>_N
                                                                                          <a>_N))
                                                                                <c>_N)_N
                                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                       <c>_N
                                                                                       <b>_N
                                                                                       <a>_N)))
                                                                        <d>_N)_N
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                               <d>_N
                                                                               <c>_N
                                                                               <b>_N
                                                                               <a>_N)))
                                                                <e>_N)_N
                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                       <e>_N
                                                                       <d>_N
                                                                       <c>_N
                                                                       <b>_N
                                                                       <a>_N)))
                                                        <c>_N)_R
                                                     eta)
                                                    `cast`
                                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                                                  (Data.Array.Accelerate.Smart.Prj
                                                     @ Data.Array.Accelerate.Smart.Acc
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ c
                                                     @ (a, b, c, d, e)
                                                     $dElt5
                                                     $dIsProduct
                                                     $dElt2
                                                     (Data.Array.Accelerate.Smart.tix2
                                                        @ (((), a), b)
                                                        @ c
                                                        @ d
                                                        @ e)
                                                       `cast`
                                                     (Data.Array.Accelerate.Product.TupleIdx
                                                        (Trans
                                                             ((,)
                                                                (Trans
                                                                     ((,)
                                                                        (Trans
                                                                             ((,)
                                                                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                          <b>_N
                                                                                          <a>_N))
                                                                                <c>_N)_N
                                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                       <c>_N
                                                                                       <b>_N
                                                                                       <a>_N)))
                                                                        <d>_N)_N
                                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                               <d>_N
                                                                               <c>_N
                                                                               <b>_N
                                                                               <a>_N)))
                                                                <e>_N)_N
                                                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                       <e>_N
                                                                       <d>_N
                                                                       <c>_N
                                                                       <b>_N
                                                                       <a>_N)))
                                                        <c>_N)_R
                                                     eta1)
                                                    `cast`
                                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)))
                                            (Data.Array.Accelerate.Smart.PrimApp
                                               @ Data.Array.Accelerate.Smart.Acc
                                               @ Data.Array.Accelerate.Smart.Exp
                                               @ GHC.Types.Bool
                                               @ (GHC.Types.Bool, GHC.Types.Bool)
                                               Data.Array.Accelerate.Smart.$s$fElt(,)
                                               Data.Array.Accelerate.Array.Sugar.$fEltBool
                                               Data.Array.Accelerate.AST.$WPrimLAnd
                                               (Data.Array.Accelerate.Smart.Tuple
                                                  @ Data.Array.Accelerate.Smart.Acc
                                                  @ Data.Array.Accelerate.Smart.Exp
                                                  @ (GHC.Types.Bool, GHC.Types.Bool)
                                                  Data.Array.Accelerate.Smart.$s$fElt(,)
                                                  Data.Array.Accelerate.Smart.$s$fIsProductcst(,)
                                                  (Data.Array.Accelerate.Array.Sugar.SnocTup
                                                     @ Data.Array.Accelerate.Smart.Exp
                                                     @ (((), GHC.Types.Bool), GHC.Types.Bool)
                                                     @ GHC.Types.Bool
                                                     @ ((), GHC.Types.Bool)
                                                     @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                                                     Data.Array.Accelerate.Array.Sugar.$fEltBool
                                                     (Data.Array.Accelerate.Array.Sugar.SnocTup
                                                        @ Data.Array.Accelerate.Smart.Exp
                                                        @ ((), GHC.Types.Bool)
                                                        @ GHC.Types.Bool
                                                        @ ()
                                                        @~ <((), GHC.Types.Bool)>_N
                                                        Data.Array.Accelerate.Array.Sugar.$fEltBool
                                                        (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                                           @ Data.Array.Accelerate.Smart.Exp)
                                                        (Data.Array.Accelerate.Classes.Eq.==
                                                           @ d
                                                           $dEq3
                                                           (Data.Array.Accelerate.Smart.Prj
                                                              @ Data.Array.Accelerate.Smart.Acc
                                                              @ Data.Array.Accelerate.Smart.Exp
                                                              @ d
                                                              @ (a, b, c, d, e)
                                                              $dElt5
                                                              $dIsProduct
                                                              $dElt3
                                                              (Data.Array.Accelerate.Smart.tix1
                                                                 @ ((((), a), b), c)
                                                                 @ d
                                                                 @ e)
                                                                `cast`
                                                              (Data.Array.Accelerate.Product.TupleIdx
                                                                 (Trans
                                                                      ((,)
                                                                         (Trans
                                                                              ((,)
                                                                                 (Trans
                                                                                      ((,)
                                                                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                                   <b>_N
                                                                                                   <a>_N))
                                                                                         <c>_N)_N
                                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                                <c>_N
                                                                                                <b>_N
                                                                                                <a>_N)))
                                                                                 <d>_N)_N
                                                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                        <d>_N
                                                                                        <c>_N
                                                                                        <b>_N
                                                                                        <a>_N)))
                                                                         <e>_N)_N
                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                                <e>_N
                                                                                <d>_N
                                                                                <c>_N
                                                                                <b>_N
                                                                                <a>_N)))
                                                                 <d>_N)_R
                                                              eta)
                                                             `cast`
                                                           (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)
                                                           (Data.Array.Accelerate.Smart.Prj
                                                              @ Data.Array.Accelerate.Smart.Acc
                                                              @ Data.Array.Accelerate.Smart.Exp
                                                              @ d
                                                              @ (a, b, c, d, e)
                                                              $dElt5
                                                              $dIsProduct
                                                              $dElt3
                                                              (Data.Array.Accelerate.Smart.tix1
                                                                 @ ((((), a), b), c)
                                                                 @ d
                                                                 @ e)
                                                                `cast`
                                                              (Data.Array.Accelerate.Product.TupleIdx
                                                                 (Trans
                                                                      ((,)
                                                                         (Trans
                                                                              ((,)
                                                                                 (Trans
                                                                                      ((,)
                                                                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                                   <b>_N
                                                                                                   <a>_N))
                                                                                         <c>_N)_N
                                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                                <c>_N
                                                                                                <b>_N
                                                                                                <a>_N)))
                                                                                 <d>_N)_N
                                                                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                        <d>_N
                                                                                        <c>_N
                                                                                        <b>_N
                                                                                        <a>_N)))
                                                                         <e>_N)_N
                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                                <e>_N
                                                                                <d>_N
                                                                                <c>_N
                                                                                <b>_N
                                                                                <a>_N)))
                                                                 <d>_N)_R
                                                              eta1)
                                                             `cast`
                                                           (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)))
                                                     (Data.Array.Accelerate.Classes.Eq.==
                                                        @ e
                                                        $dEq4
                                                        (Data.Array.Accelerate.Smart.Prj
                                                           @ Data.Array.Accelerate.Smart.Acc
                                                           @ Data.Array.Accelerate.Smart.Exp
                                                           @ e
                                                           @ (a, b, c, d, e)
                                                           $dElt5
                                                           $dIsProduct
                                                           $dElt4
                                                           (Data.Array.Accelerate.Product.$WZeroTupIdx
                                                              @ e
                                                              @ (((((), a), b), c), d))
                                                             `cast`
                                                           (Data.Array.Accelerate.Product.TupleIdx
                                                              (Trans
                                                                   ((,)
                                                                      (Trans
                                                                           ((,)
                                                                              (Trans
                                                                                   ((,)
                                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                                <b>_N
                                                                                                <a>_N))
                                                                                      <c>_N)_N
                                                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                             <c>_N
                                                                                             <b>_N
                                                                                             <a>_N)))
                                                                              <d>_N)_N
                                                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                     <d>_N
                                                                                     <c>_N
                                                                                     <b>_N
                                                                                     <a>_N)))
                                                                      <e>_N)_N
                                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                             <e>_N
                                                                             <d>_N
                                                                             <c>_N
                                                                             <b>_N
                                                                             <a>_N)))
                                                              <e>_N)_R
                                                           eta)
                                                          `cast`
                                                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N)
                                                        (Data.Array.Accelerate.Smart.Prj
                                                           @ Data.Array.Accelerate.Smart.Acc
                                                           @ Data.Array.Accelerate.Smart.Exp
                                                           @ e
                                                           @ (a, b, c, d, e)
                                                           $dElt5
                                                           $dIsProduct
                                                           $dElt4
                                                           (Data.Array.Accelerate.Product.$WZeroTupIdx
                                                              @ e
                                                              @ (((((), a), b), c), d))
                                                             `cast`
                                                           (Data.Array.Accelerate.Product.TupleIdx
                                                              (Trans
                                                                   ((,)
                                                                      (Trans
                                                                           ((,)
                                                                              (Trans
                                                                                   ((,)
                                                                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                                                                <b>_N
                                                                                                <a>_N))
                                                                                      <c>_N)_N
                                                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                                                             <c>_N
                                                                                             <b>_N
                                                                                             <a>_N)))
                                                                              <d>_N)_N
                                                                           (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                                                     <d>_N
                                                                                     <c>_N
                                                                                     <b>_N
                                                                                     <a>_N)))
                                                                      <e>_N)_N
                                                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                                                             <e>_N
                                                                             <d>_N
                                                                             <c>_N
                                                                             <b>_N
                                                                             <a>_N)))
                                                              <e>_N)_R
                                                           eta1)
                                                          `cast`
                                                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N)))
                                                    `cast`
                                                  (Data.Array.Accelerate.Array.Sugar.Tuple
                                                     <Data.Array.Accelerate.Smart.Exp>_R
                                                     (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                               <GHC.Types.Bool>_N
                                                               <GHC.Types.Bool>_N)))_R)
                                                 `cast`
                                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                                             GHC.Types.Bool)>_N))
                                              `cast`
                                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                                           `cast`
                                         (Data.Array.Accelerate.Array.Sugar.Tuple
                                            <Data.Array.Accelerate.Smart.Exp>_R
                                            (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                      <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                                        `cast`
                                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                                    GHC.Types.Bool)>_N))
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                                  `cast`
                                (Data.Array.Accelerate.Array.Sugar.Tuple
                                   <Data.Array.Accelerate.Smart.Exp>_R
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                             <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                               `cast`
                             (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                           GHC.Types.Bool)>_N))
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 7,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 7,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e) =>
    Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq1
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        w
                        w1
                        w2
                        w3
                        w4 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b, c, d, e, f)
  DFunId
  {- Arity: 6,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f).
                  @ (a, b, c, d, e, f)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 8,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 8,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 8,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 8,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f) =>
    Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e, f)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq2
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b, c, d, e, f, g)
  DFunId
  {- Arity: 7,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g).
                  @ (a, b, c, d, e, f, g)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 9,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 9,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 9,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 9,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g) =>
    Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e, f, g)
  {- Arity: 7,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq3
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b, c, d, e, f, g, h)
  DFunId
  {- Arity: 8,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                      ($dEq7 :: Data.Array.Accelerate.Classes.Eq.Eq h).
                  @ (a, b, c, d, e, f, g, h)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 10,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 10,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 10,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 10,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h) =>
    Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e, f, g, h)
  {- Arity: 8,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (8, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                   (w7 :: Data.Array.Accelerate.Classes.Eq.Eq h) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq4
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g, h)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b, c, d, e, f, g, h, i)
  DFunId
  {- Arity: 9,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                      ($dEq7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                      ($dEq8 :: Data.Array.Accelerate.Classes.Eq.Eq i).
                  @ (a, b, c, d, e, f, g, h, i)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 11,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 11,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 11,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 11,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i) =>
    Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e, f, g, h, i)
  {- Arity: 9,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (9, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                   (w7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                   (w8 :: Data.Array.Accelerate.Classes.Eq.Eq i) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq5
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g, h, i)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j) =>
    Data.Array.Accelerate.Classes.Eq.Eq (a, b, c, d, e, f, g, h, i, j)
  DFunId
  {- Arity: 10,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                      ($dEq7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                      ($dEq8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                      ($dEq9 :: Data.Array.Accelerate.Classes.Eq.Eq j).
                  @ (a, b, c, d, e, f, g, h, i, j)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 12,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 12,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 12,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j)
    -> Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 12,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (a, b, c, d, e, f, g, h, i, j)
  {- Arity: 10,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (10, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                   (w7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                   (w8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                   (w9 :: Data.Array.Accelerate.Classes.Eq.Eq j) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq6
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8
                        w9 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g, h, i, j)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k) =>
    Data.Array.Accelerate.Classes.Eq.Eq
      (a, b, c, d, e, f, g, h, i, j, k)
  DFunId
  {- Arity: 11,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                      ($dEq7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                      ($dEq8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                      ($dEq9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                      ($dEq10 :: Data.Array.Accelerate.Classes.Eq.Eq k).
                  @ (a, b, c, d, e, f, g, h, i, j, k)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j, k)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 13,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j, k)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 13,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j, k)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 13,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k) =>
    Data.Array.Accelerate.Smart.Exp (a, b, c, d, e, f, g, h, i, j, k)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 13,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (a, b, c, d, e, f, g, h, i, j, k)
  {- Arity: 11,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (11, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                   (w7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                   (w8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                   (w9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                   (w10 :: Data.Array.Accelerate.Classes.Eq.Eq k) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq7
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8
                        w9
                        w10 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g, h, i, j, k)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l) =>
    Data.Array.Accelerate.Classes.Eq.Eq
      (a, b, c, d, e, f, g, h, i, j, k, l)
  DFunId
  {- Arity: 12,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                      ($dEq7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                      ($dEq8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                      ($dEq9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                      ($dEq10 :: Data.Array.Accelerate.Classes.Eq.Eq k)
                      ($dEq11 :: Data.Array.Accelerate.Classes.Eq.Eq l).
                  @ (a, b, c, d, e, f, g, h, i, j, k, l)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 14,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 14,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 14,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N) (l :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq l>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 14,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N) (l :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq l>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (a, b, c, d, e, f, g, h, i, j, k, l)
  {- Arity: 12,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (12, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                   (w7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                   (w8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                   (w9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                   (w10 :: Data.Array.Accelerate.Classes.Eq.Eq k)
                   (w11 :: Data.Array.Accelerate.Classes.Eq.Eq l) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq8
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8
                        w9
                        w10
                        w11 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g, h, i, j, k, l)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m) =>
    Data.Array.Accelerate.Classes.Eq.Eq
      (a, b, c, d, e, f, g, h, i, j, k, l, m)
  DFunId
  {- Arity: 13,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                      ($dEq7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                      ($dEq8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                      ($dEq9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                      ($dEq10 :: Data.Array.Accelerate.Classes.Eq.Eq k)
                      ($dEq11 :: Data.Array.Accelerate.Classes.Eq.Eq l)
                      ($dEq12 :: Data.Array.Accelerate.Classes.Eq.Eq m).
                  @ (a, b, c, d, e, f, g, h, i, j, k, l, m)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 15,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 15,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 15,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N) (l :: <*>_N) (m :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq l>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq m>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 15,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N) (l :: <*>_N) (m :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq l>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq m>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (a, b, c, d, e, f, g, h, i, j, k, l, m)
  {- Arity: 13,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (13, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                   (w7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                   (w8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                   (w9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                   (w10 :: Data.Array.Accelerate.Classes.Eq.Eq k)
                   (w11 :: Data.Array.Accelerate.Classes.Eq.Eq l)
                   (w12 :: Data.Array.Accelerate.Classes.Eq.Eq m) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq9
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        @ m
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8
                        w9
                        w10
                        w11
                        w12 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g, h, i, j, k, l, m)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n) =>
    Data.Array.Accelerate.Classes.Eq.Eq
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
  DFunId
  {- Arity: 14,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                      ($dEq7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                      ($dEq8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                      ($dEq9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                      ($dEq10 :: Data.Array.Accelerate.Classes.Eq.Eq k)
                      ($dEq11 :: Data.Array.Accelerate.Classes.Eq.Eq l)
                      ($dEq12 :: Data.Array.Accelerate.Classes.Eq.Eq m)
                      ($dEq13 :: Data.Array.Accelerate.Classes.Eq.Eq n).
                  @ (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 16,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 16,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 16,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N) (l :: <*>_N) (m :: <*>_N) (n :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq l>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq m>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq n>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 16,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N) (l :: <*>_N) (m :: <*>_N) (n :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq l>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq m>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq n>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
  {- Arity: 14,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (14, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                   (w7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                   (w8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                   (w9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                   (w10 :: Data.Array.Accelerate.Classes.Eq.Eq k)
                   (w11 :: Data.Array.Accelerate.Classes.Eq.Eq l)
                   (w12 :: Data.Array.Accelerate.Classes.Eq.Eq m)
                   (w13 :: Data.Array.Accelerate.Classes.Eq.Eq n) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq10
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        @ m
                        @ n
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8
                        w9
                        w10
                        w11
                        w12
                        w13 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,,) ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n,
     Data.Array.Accelerate.Classes.Eq.Eq o) =>
    Data.Array.Accelerate.Classes.Eq.Eq
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
  DFunId
  {- Arity: 15,
     Strictness: <L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))><L,U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),C(C1(U)),C(C1(U)))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      @ j
                      @ k
                      @ l
                      @ m
                      @ n
                      @ o
                      ($dEq :: Data.Array.Accelerate.Classes.Eq.Eq a)
                      ($dEq1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                      ($dEq2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                      ($dEq3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                      ($dEq4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                      ($dEq5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                      ($dEq6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                      ($dEq7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                      ($dEq8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                      ($dEq9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                      ($dEq10 :: Data.Array.Accelerate.Classes.Eq.Eq k)
                      ($dEq11 :: Data.Array.Accelerate.Classes.Eq.Eq l)
                      ($dEq12 :: Data.Array.Accelerate.Classes.Eq.Eq m)
                      ($dEq13 :: Data.Array.Accelerate.Classes.Eq.Eq n)
                      ($dEq14 :: Data.Array.Accelerate.Classes.Eq.Eq o).
                  @ (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,,)_$cp1Eq
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,,)_$c==
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14)
                  (Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,,)_$c/=
                     @ a
                     @ b
                     @ c
                     @ d
                     @ e
                     @ f
                     @ g
                     @ h
                     @ i
                     @ j
                     @ k
                     @ l
                     @ m
                     @ n
                     @ o
                     $dEq
                     $dEq1
                     $dEq2
                     $dEq3
                     $dEq4
                     $dEq5
                     $dEq6
                     $dEq7
                     $dEq8
                     $dEq9
                     $dEq10
                     $dEq11
                     $dEq12
                     $dEq13
                     $dEq14) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,,)1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n,
     Data.Array.Accelerate.Classes.Eq.Eq o) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 17,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,,)2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n,
     Data.Array.Accelerate.Classes.Eq.Eq o) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 17,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U> -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,,)_$c/= ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n,
     Data.Array.Accelerate.Classes.Eq.Eq o) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 17,
     Strictness: <L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U(1*U,A,1*C1(C1(U)))><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,,)1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N) (l :: <*>_N) (m :: <*>_N) (n :: <*>_N) (o :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq l>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq m>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq n>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq o>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,,)_$c== ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n,
     Data.Array.Accelerate.Classes.Eq.Eq o) =>
    Data.Array.Accelerate.Smart.Exp
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    -> Data.Array.Accelerate.Smart.Exp
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 17,
     Strictness: <L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U(1*U,1*C1(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,,)2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N) (d :: <*>_N) (e :: <*>_N) (f :: <*>_N) (g :: <*>_N) (h :: <*>_N) (i :: <*>_N) (j :: <*>_N) (k :: <*>_N) (l :: <*>_N) (m :: <*>_N) (n :: <*>_N) (o :: <*>_N).
                 <Data.Array.Accelerate.Classes.Eq.Eq a>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq b>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq c>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq d>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq e>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq f>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq g>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq h>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq i>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq j>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq k>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq l>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq m>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq n>_R
                 ->_R <Data.Array.Accelerate.Classes.Eq.Eq o>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp
                         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  $fEq(,,,,,,,,,,,,,,)_$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n,
     Data.Array.Accelerate.Classes.Eq.Eq o) =>
    Data.Array.Accelerate.Array.Sugar.Elt
      (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
  {- Arity: 15,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (15, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ j
                   @ k
                   @ l
                   @ m
                   @ n
                   @ o
                   (w :: Data.Array.Accelerate.Classes.Eq.Eq a)
                   (w1 :: Data.Array.Accelerate.Classes.Eq.Eq b)
                   (w2 :: Data.Array.Accelerate.Classes.Eq.Eq c)
                   (w3 :: Data.Array.Accelerate.Classes.Eq.Eq d)
                   (w4 :: Data.Array.Accelerate.Classes.Eq.Eq e)
                   (w5 :: Data.Array.Accelerate.Classes.Eq.Eq f)
                   (w6 :: Data.Array.Accelerate.Classes.Eq.Eq g)
                   (w7 :: Data.Array.Accelerate.Classes.Eq.Eq h)
                   (w8 :: Data.Array.Accelerate.Classes.Eq.Eq i)
                   (w9 :: Data.Array.Accelerate.Classes.Eq.Eq j)
                   (w10 :: Data.Array.Accelerate.Classes.Eq.Eq k)
                   (w11 :: Data.Array.Accelerate.Classes.Eq.Eq l)
                   (w12 :: Data.Array.Accelerate.Classes.Eq.Eq m)
                   (w13 :: Data.Array.Accelerate.Classes.Eq.Eq n)
                   (w14 :: Data.Array.Accelerate.Classes.Eq.Eq o) ->
                 case Data.Array.Accelerate.Classes.Eq.$w$cp1Eq11
                        @ a
                        @ b
                        @ c
                        @ d
                        @ e
                        @ f
                        @ g
                        @ h
                        @ i
                        @ j
                        @ k
                        @ l
                        @ m
                        @ n
                        @ o
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7
                        w8
                        w9
                        w10
                        w11
                        w12
                        w13
                        w14 of ww { (#,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqBool :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Types.Bool
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  Data.Array.Accelerate.Array.Sugar.$fEltBool
                  Data.Array.Accelerate.Classes.Eq.$fEqBool_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqBool_$c/= -}
7d83d109d087bc10e0b5be19e169a4dd
  $fEqBool1 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Bool) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Classes.Eq.$fEqBool_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqBool_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Classes.Eq.$fEqBool_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqBool_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Bool), GHC.Types.Bool)
                         @ GHC.Types.Bool
                         @ ((), GHC.Types.Bool)
                         @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltBool
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Bool)
                            @ GHC.Types.Bool
                            @ ()
                            @~ <((), GHC.Types.Bool)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltBool
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
4fe80fae2c981a8ff43bfecfeffb2e71
  $fEqBool2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Bool) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Bool, GHC.Types.Bool)
                   Data.Array.Accelerate.Classes.Eq.$fEqBool_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqBool_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Bool, GHC.Types.Bool)
                      Data.Array.Accelerate.Classes.Eq.$fEqBool_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqBool_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Bool), GHC.Types.Bool)
                         @ GHC.Types.Bool
                         @ ((), GHC.Types.Bool)
                         @~ <(((), GHC.Types.Bool), GHC.Types.Bool)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltBool
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Bool)
                            @ GHC.Types.Bool
                            @ ()
                            @~ <((), GHC.Types.Bool)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltBool
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Bool>_N <GHC.Types.Bool>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Bool,
                                                                 GHC.Types.Bool)>_N)) -}
0e03663392b1f93a8d54c7103ecac091
  $fEqBool_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqBool1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
c3c9a214f4d8895f7b88fd0f9b8d409b
  $fEqBool_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqBool2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
48f62c2e2ab5c8838bb48a1267d28cd2
  $fEqBool_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Bool, GHC.Types.Bool) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Types.Bool, GHC.Types.Bool) -> GHC.Types.Bool)
                   @ GHC.Types.Bool
                   @~ <(GHC.Types.Bool, GHC.Types.Bool) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarBool_$cscalarType) -}
5a16e745c7d36105458dd064735fae67
  $fEqBool_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Bool, GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Array.Sugar.$fEltBool) -}
4820b7bf0e95289ee40e8de2eb2d450f
  $fEqBool_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Bool, GHC.Types.Bool) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Types.Bool, GHC.Types.Bool) -> GHC.Types.Bool)
                   @ GHC.Types.Bool
                   @~ <(GHC.Types.Bool, GHC.Types.Bool) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarBool_$cscalarType) -}
4d866101246f45ee79bec39570d15bfd
  $fEqBool_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Bool, GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Bool
                   @ GHC.Types.Bool
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Array.Sugar.$fEltBool) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCChar ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CChar
                  Data.Array.Accelerate.Array.Sugar.$fEltCChar
                  Data.Array.Accelerate.Classes.Eq.$fEqCChar_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCChar_$c/= -}
6c342f6a991ee14ccaff7ba814710ce1
  $fEqCChar1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CChar, Foreign.C.Types.CChar)
                   Data.Array.Accelerate.Classes.Eq.$fEqCChar_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCChar_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CChar, Foreign.C.Types.CChar)
                      Data.Array.Accelerate.Classes.Eq.$fEqCChar_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCChar_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CChar), Foreign.C.Types.CChar)
                         @ Foreign.C.Types.CChar
                         @ ((), Foreign.C.Types.CChar)
                         @~ <(((), Foreign.C.Types.CChar), Foreign.C.Types.CChar)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCChar
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CChar)
                            @ Foreign.C.Types.CChar
                            @ ()
                            @~ <((), Foreign.C.Types.CChar)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCChar
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CChar>_N <Foreign.C.Types.CChar>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CChar,
                                                                 Foreign.C.Types.CChar)>_N)) -}
aaac06f258229a0db122cc0a6fca5515
  $fEqCChar2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CChar, Foreign.C.Types.CChar)
                   Data.Array.Accelerate.Classes.Eq.$fEqCChar_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCChar_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CChar, Foreign.C.Types.CChar)
                      Data.Array.Accelerate.Classes.Eq.$fEqCChar_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCChar_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CChar), Foreign.C.Types.CChar)
                         @ Foreign.C.Types.CChar
                         @ ((), Foreign.C.Types.CChar)
                         @~ <(((), Foreign.C.Types.CChar), Foreign.C.Types.CChar)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCChar
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CChar)
                            @ Foreign.C.Types.CChar
                            @ ()
                            @~ <((), Foreign.C.Types.CChar)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCChar
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CChar>_N <Foreign.C.Types.CChar>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CChar,
                                                                 Foreign.C.Types.CChar)>_N)) -}
62c447bfd833b644bead0a48a232a492
  $fEqCChar_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCChar1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
2d248b4fbc9d9818b515746553e8fdaa
  $fEqCChar_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCChar2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CChar>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
d15a2e1a97b8e15b71c5fee5b0b0b061
  $fEqCChar_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CChar, Foreign.C.Types.CChar) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CChar, Foreign.C.Types.CChar)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CChar
                   @~ <(Foreign.C.Types.CChar, Foreign.C.Types.CChar)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCChar_$cscalarType) -}
ee428b346d544949407ffcad9a2e5f19
  $fEqCChar_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CChar, Foreign.C.Types.CChar)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CChar
                   @ Foreign.C.Types.CChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCChar) -}
9953e37c5169474dc24e6f294b08ec5f
  $fEqCChar_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CChar, Foreign.C.Types.CChar) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CChar, Foreign.C.Types.CChar)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CChar
                   @~ <(Foreign.C.Types.CChar, Foreign.C.Types.CChar)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCChar_$cscalarType) -}
0ff42885ee1f3ee152604f931d558074
  $fEqCChar_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CChar, Foreign.C.Types.CChar)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CChar
                   @ Foreign.C.Types.CChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCChar) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCDouble ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CDouble
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CDouble
                  Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                  Data.Array.Accelerate.Classes.Eq.$fEqCDouble_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCDouble_$c/= -}
1c6d5b72ca208386fc361f16aed973a7
  $fEqCDouble1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                   Data.Array.Accelerate.Classes.Eq.$fEqCDouble_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCDouble_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      Data.Array.Accelerate.Classes.Eq.$fEqCDouble_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCDouble_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)
                         @ Foreign.C.Types.CDouble
                         @ ((), Foreign.C.Types.CDouble)
                         @~ <(((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CDouble)
                            @ Foreign.C.Types.CDouble
                            @ ()
                            @~ <((), Foreign.C.Types.CDouble)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CDouble>_N <Foreign.C.Types.CDouble>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CDouble,
                                                                 Foreign.C.Types.CDouble)>_N)) -}
5b1fe80d2187deae3c1f377a36fe6a5c
  $fEqCDouble2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                   Data.Array.Accelerate.Classes.Eq.$fEqCDouble_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCDouble_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      Data.Array.Accelerate.Classes.Eq.$fEqCDouble_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCDouble_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)
                         @ Foreign.C.Types.CDouble
                         @ ((), Foreign.C.Types.CDouble)
                         @~ <(((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CDouble)
                            @ Foreign.C.Types.CDouble
                            @ ()
                            @~ <((), Foreign.C.Types.CDouble)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CDouble>_N <Foreign.C.Types.CDouble>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CDouble,
                                                                 Foreign.C.Types.CDouble)>_N)) -}
3daaf045569c00ad1e666a84fb16d0a4
  $fEqCDouble_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCDouble1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
a5c0656d442202c5b974725c06185110
  $fEqCDouble_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCDouble2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
4c56d153f1ff0e4e6941c6ceb6bc6aa9
  $fEqCDouble_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CDouble
                   @~ <(Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCDouble_$cscalarType) -}
157fd9526821afbc99c39bc41dd556c6
  $fEqCDouble_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble) -}
e3197fd64338d7ace10a6bdf5cf63c76
  $fEqCDouble_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CDouble
                   @~ <(Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCDouble_$cscalarType) -}
199d78c9a4c78d52a2d43807ff2e6e24
  $fEqCDouble_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCFloat ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CFloat
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CFloat
                  Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                  Data.Array.Accelerate.Classes.Eq.$fEqCFloat_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCFloat_$c/= -}
aef7434cde5d94db96bfd94af827eb74
  $fEqCFloat1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                   Data.Array.Accelerate.Classes.Eq.$fEqCFloat_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCFloat_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      Data.Array.Accelerate.Classes.Eq.$fEqCFloat_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCFloat_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)
                         @ Foreign.C.Types.CFloat
                         @ ((), Foreign.C.Types.CFloat)
                         @~ <(((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CFloat)
                            @ Foreign.C.Types.CFloat
                            @ ()
                            @~ <((), Foreign.C.Types.CFloat)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CFloat>_N <Foreign.C.Types.CFloat>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CFloat,
                                                                 Foreign.C.Types.CFloat)>_N)) -}
864be49fb10d75c181e0848c19e95372
  $fEqCFloat2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                   Data.Array.Accelerate.Classes.Eq.$fEqCFloat_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCFloat_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      Data.Array.Accelerate.Classes.Eq.$fEqCFloat_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCFloat_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)
                         @ Foreign.C.Types.CFloat
                         @ ((), Foreign.C.Types.CFloat)
                         @~ <(((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CFloat)
                            @ Foreign.C.Types.CFloat
                            @ ()
                            @~ <((), Foreign.C.Types.CFloat)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CFloat>_N <Foreign.C.Types.CFloat>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CFloat,
                                                                 Foreign.C.Types.CFloat)>_N)) -}
40f33b1b55c5ce88e61ddec9fd4c0573
  $fEqCFloat_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCFloat1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
f459e6399fb393e7e22e64296a9ecbd1
  $fEqCFloat_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCFloat2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
c6b8ba39f57a933451150cf066177b0c
  $fEqCFloat_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CFloat
                   @~ <(Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCFloat_$cscalarType) -}
1b75058e1c44fabf5f3a2679730337b8
  $fEqCFloat_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat) -}
1e7e0118aa28c7e7215ce13c00fb5c74
  $fEqCFloat_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CFloat
                   @~ <(Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCFloat_$cscalarType) -}
8ad79e5888bba0eb0918d5212d4da087
  $fEqCFloat_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCInt ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CInt
                  Data.Array.Accelerate.Array.Sugar.$fEltCInt
                  Data.Array.Accelerate.Classes.Eq.$fEqCInt_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCInt_$c/= -}
05873baac9c956c9ce4743a1f0a0defa
  $fEqCInt1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                   Data.Array.Accelerate.Classes.Eq.$fEqCInt_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCInt_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                      Data.Array.Accelerate.Classes.Eq.$fEqCInt_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCInt_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)
                         @ Foreign.C.Types.CInt
                         @ ((), Foreign.C.Types.CInt)
                         @~ <(((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CInt)
                            @ Foreign.C.Types.CInt
                            @ ()
                            @~ <((), Foreign.C.Types.CInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CInt>_N <Foreign.C.Types.CInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CInt,
                                                                 Foreign.C.Types.CInt)>_N)) -}
f7885b817a336c206d25d3180b7f60f0
  $fEqCInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                   Data.Array.Accelerate.Classes.Eq.$fEqCInt_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCInt_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                      Data.Array.Accelerate.Classes.Eq.$fEqCInt_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCInt_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)
                         @ Foreign.C.Types.CInt
                         @ ((), Foreign.C.Types.CInt)
                         @~ <(((), Foreign.C.Types.CInt), Foreign.C.Types.CInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CInt)
                            @ Foreign.C.Types.CInt
                            @ ()
                            @~ <((), Foreign.C.Types.CInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CInt>_N <Foreign.C.Types.CInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CInt,
                                                                 Foreign.C.Types.CInt)>_N)) -}
d19b19e0f6bee3d467b92f516ce916ff
  $fEqCInt_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCInt1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
8189248b1539065df341d1c0b5574abf
  $fEqCInt_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCInt2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
28fc5b7d15a68d319c12cd23cd89f6ac
  $fEqCInt_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CInt, Foreign.C.Types.CInt) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CInt, Foreign.C.Types.CInt) -> GHC.Types.Bool)
                   @ Foreign.C.Types.CInt
                   @~ <(Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCInt_$cscalarType) -}
e10a97dbad88ae04096dc32724ea6819
  $fEqCInt_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt) -}
bb028b3ecfd8bd2110bddafd9b3d5bf9
  $fEqCInt_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CInt, Foreign.C.Types.CInt) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CInt, Foreign.C.Types.CInt) -> GHC.Types.Bool)
                   @ Foreign.C.Types.CInt
                   @~ <(Foreign.C.Types.CInt, Foreign.C.Types.CInt)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCInt_$cscalarType) -}
a1a26d8198cb105a1774fcde55768d35
  $fEqCInt_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CInt, Foreign.C.Types.CInt)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CInt
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCInt) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCLLong ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CLLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLLong
                  Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                  Data.Array.Accelerate.Classes.Eq.$fEqCLLong_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCLLong_$c/= -}
7012bef9538ce46b13690af250273feb
  $fEqCLLong1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                   Data.Array.Accelerate.Classes.Eq.$fEqCLLong_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCLLong_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      Data.Array.Accelerate.Classes.Eq.$fEqCLLong_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCLLong_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)
                         @ Foreign.C.Types.CLLong
                         @ ((), Foreign.C.Types.CLLong)
                         @~ <(((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLLong)
                            @ Foreign.C.Types.CLLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CLLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLLong,
                                                                 Foreign.C.Types.CLLong)>_N)) -}
6c1897778ddef2a52957e56ff3e848c0
  $fEqCLLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                   Data.Array.Accelerate.Classes.Eq.$fEqCLLong_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCLLong_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      Data.Array.Accelerate.Classes.Eq.$fEqCLLong_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCLLong_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)
                         @ Foreign.C.Types.CLLong
                         @ ((), Foreign.C.Types.CLLong)
                         @~ <(((), Foreign.C.Types.CLLong), Foreign.C.Types.CLLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLLong)
                            @ Foreign.C.Types.CLLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLLong>_N <Foreign.C.Types.CLLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLLong,
                                                                 Foreign.C.Types.CLLong)>_N)) -}
594006703652bdff636ef8c17611af1d
  $fEqCLLong_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCLLong1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
bba914dbdb07efe57dae977e8fc4ddc4
  $fEqCLLong_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCLLong2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
b9e9bf1d13fcaa0347f7c77ab736fc5a
  $fEqCLLong_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CLLong
                   @~ <(Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCLLong_$cscalarType) -}
971e958295c7cd9bc944877a52f97ef2
  $fEqCLLong_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong) -}
1fedacbbf931a8826e90c3ac52c2f630
  $fEqCLLong_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CLLong
                   @~ <(Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCLLong_$cscalarType) -}
4b0e46ec3ea00739609b792f5b0edf77
  $fEqCLLong_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CLLong, Foreign.C.Types.CLLong)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CLLong
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLLong) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCLong ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLong
                  Data.Array.Accelerate.Array.Sugar.$fEltCLong
                  Data.Array.Accelerate.Classes.Eq.$fEqCLong_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCLong_$c/= -}
04b02be1127604d8d7616b8f8f3cdf95
  $fEqCLong1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                   Data.Array.Accelerate.Classes.Eq.$fEqCLong_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCLong_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      Data.Array.Accelerate.Classes.Eq.$fEqCLong_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCLong_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)
                         @ Foreign.C.Types.CLong
                         @ ((), Foreign.C.Types.CLong)
                         @~ <(((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLong)
                            @ Foreign.C.Types.CLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLong>_N <Foreign.C.Types.CLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLong,
                                                                 Foreign.C.Types.CLong)>_N)) -}
fb4712d2c8afd2420a786cfaebe9c0e2
  $fEqCLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                   Data.Array.Accelerate.Classes.Eq.$fEqCLong_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCLong_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      Data.Array.Accelerate.Classes.Eq.$fEqCLong_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCLong_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)
                         @ Foreign.C.Types.CLong
                         @ ((), Foreign.C.Types.CLong)
                         @~ <(((), Foreign.C.Types.CLong), Foreign.C.Types.CLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CLong)
                            @ Foreign.C.Types.CLong
                            @ ()
                            @~ <((), Foreign.C.Types.CLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CLong>_N <Foreign.C.Types.CLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CLong,
                                                                 Foreign.C.Types.CLong)>_N)) -}
daf55d9435b98b1dc8ead1793f95220b
  $fEqCLong_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCLong1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
6283ade5ea62c666355f6bd356054757
  $fEqCLong_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCLong2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
ea13d03b35df281341037add66a703eb
  $fEqCLong_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLong, Foreign.C.Types.CLong) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CLong
                   @~ <(Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCLong_$cscalarType) -}
eb232f13edda0a9d56ae691a43bf8d3c
  $fEqCLong_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong) -}
6868f6dc6f13e875d8cf2ece66ef7b3a
  $fEqCLong_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CLong, Foreign.C.Types.CLong) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CLong
                   @~ <(Foreign.C.Types.CLong, Foreign.C.Types.CLong)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCLong_$cscalarType) -}
097bf3d940ddd0d79262922bb8372948
  $fEqCLong_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CLong, Foreign.C.Types.CLong)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CLong
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCLong) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCSChar ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CSChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CSChar
                  Data.Array.Accelerate.Array.Sugar.$fEltCSChar
                  Data.Array.Accelerate.Classes.Eq.$fEqCSChar_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCSChar_$c/= -}
66c9575f4748476c82dc42e8886c525b
  $fEqCSChar1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
                   Data.Array.Accelerate.Classes.Eq.$fEqCSChar_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCSChar_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
                      Data.Array.Accelerate.Classes.Eq.$fEqCSChar_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCSChar_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CSChar), Foreign.C.Types.CSChar)
                         @ Foreign.C.Types.CSChar
                         @ ((), Foreign.C.Types.CSChar)
                         @~ <(((), Foreign.C.Types.CSChar), Foreign.C.Types.CSChar)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCSChar
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CSChar)
                            @ Foreign.C.Types.CSChar
                            @ ()
                            @~ <((), Foreign.C.Types.CSChar)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCSChar
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CSChar>_N <Foreign.C.Types.CSChar>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CSChar,
                                                                 Foreign.C.Types.CSChar)>_N)) -}
738b2969b2667935f8b027509458ce1e
  $fEqCSChar2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
                   Data.Array.Accelerate.Classes.Eq.$fEqCSChar_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCSChar_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
                      Data.Array.Accelerate.Classes.Eq.$fEqCSChar_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCSChar_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CSChar), Foreign.C.Types.CSChar)
                         @ Foreign.C.Types.CSChar
                         @ ((), Foreign.C.Types.CSChar)
                         @~ <(((), Foreign.C.Types.CSChar), Foreign.C.Types.CSChar)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCSChar
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CSChar)
                            @ Foreign.C.Types.CSChar
                            @ ()
                            @~ <((), Foreign.C.Types.CSChar)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCSChar
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CSChar>_N <Foreign.C.Types.CSChar>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CSChar,
                                                                 Foreign.C.Types.CSChar)>_N)) -}
5b297a2b6c4e51344f93cf50b2d1f011
  $fEqCSChar_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCSChar1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
fa4d0cb2fd88260e03abd410e9d5c9e9
  $fEqCSChar_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCSChar2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CSChar>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
de6b4ba0e464df23d3606d8b4798737a
  $fEqCSChar_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CSChar
                   @~ <(Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCSChar_$cscalarType) -}
055b69bb67fdf8a9197577fc721fab06
  $fEqCSChar_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CSChar
                   @ Foreign.C.Types.CSChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCSChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCSChar) -}
47347d0b143fe2022b1a5bb265a8a618
  $fEqCSChar_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CSChar
                   @~ <(Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCSChar_$cscalarType) -}
30040b86aca2345e2ea2748e1978100f
  $fEqCSChar_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CSChar, Foreign.C.Types.CSChar)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CSChar
                   @ Foreign.C.Types.CSChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCSChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCSChar) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCShort ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CShort
                  Data.Array.Accelerate.Array.Sugar.$fEltCShort
                  Data.Array.Accelerate.Classes.Eq.$fEqCShort_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCShort_$c/= -}
99c363efbb44e9deb918ea56f5e61f67
  $fEqCShort1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                   Data.Array.Accelerate.Classes.Eq.$fEqCShort_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCShort_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      Data.Array.Accelerate.Classes.Eq.$fEqCShort_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCShort_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)
                         @ Foreign.C.Types.CShort
                         @ ((), Foreign.C.Types.CShort)
                         @~ <(((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CShort)
                            @ Foreign.C.Types.CShort
                            @ ()
                            @~ <((), Foreign.C.Types.CShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CShort>_N <Foreign.C.Types.CShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CShort,
                                                                 Foreign.C.Types.CShort)>_N)) -}
d4cd8aa3833bce9dd15c8aba451e3260
  $fEqCShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                   Data.Array.Accelerate.Classes.Eq.$fEqCShort_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCShort_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      Data.Array.Accelerate.Classes.Eq.$fEqCShort_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCShort_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)
                         @ Foreign.C.Types.CShort
                         @ ((), Foreign.C.Types.CShort)
                         @~ <(((), Foreign.C.Types.CShort), Foreign.C.Types.CShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CShort)
                            @ Foreign.C.Types.CShort
                            @ ()
                            @~ <((), Foreign.C.Types.CShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CShort>_N <Foreign.C.Types.CShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CShort,
                                                                 Foreign.C.Types.CShort)>_N)) -}
2a3dd32cf8bb7518c23709744edce6ef
  $fEqCShort_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCShort1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
517d6d4fc96cbc6a3e8a9ef13d622f87
  $fEqCShort_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCShort2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
8ea11d6bcd648166ffe776ceba27462a
  $fEqCShort_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CShort
                   @~ <(Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCShort_$cscalarType) -}
644993665adf9fc5967060e74ba30af7
  $fEqCShort_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort) -}
33391e6f1cd0007d87cc63191b4237ca
  $fEqCShort_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CShort
                   @~ <(Foreign.C.Types.CShort, Foreign.C.Types.CShort)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCShort_$cscalarType) -}
b0aef219e0bdb68583358dec61a5344b
  $fEqCShort_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CShort, Foreign.C.Types.CShort)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CShort
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCShort) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCUChar ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CUChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUChar
                  Data.Array.Accelerate.Array.Sugar.$fEltCUChar
                  Data.Array.Accelerate.Classes.Eq.$fEqCUChar_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCUChar_$c/= -}
1e5af9b9c67c3bc03f2e524731d2787b
  $fEqCUChar1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
                   Data.Array.Accelerate.Classes.Eq.$fEqCUChar_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCUChar_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
                      Data.Array.Accelerate.Classes.Eq.$fEqCUChar_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCUChar_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUChar), Foreign.C.Types.CUChar)
                         @ Foreign.C.Types.CUChar
                         @ ((), Foreign.C.Types.CUChar)
                         @~ <(((), Foreign.C.Types.CUChar), Foreign.C.Types.CUChar)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUChar
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUChar)
                            @ Foreign.C.Types.CUChar
                            @ ()
                            @~ <((), Foreign.C.Types.CUChar)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUChar
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUChar>_N <Foreign.C.Types.CUChar>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUChar,
                                                                 Foreign.C.Types.CUChar)>_N)) -}
116b3c187dbbd580056606ebe48e48ad
  $fEqCUChar2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
                   Data.Array.Accelerate.Classes.Eq.$fEqCUChar_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCUChar_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
                      Data.Array.Accelerate.Classes.Eq.$fEqCUChar_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCUChar_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUChar), Foreign.C.Types.CUChar)
                         @ Foreign.C.Types.CUChar
                         @ ((), Foreign.C.Types.CUChar)
                         @~ <(((), Foreign.C.Types.CUChar), Foreign.C.Types.CUChar)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUChar
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUChar)
                            @ Foreign.C.Types.CUChar
                            @ ()
                            @~ <((), Foreign.C.Types.CUChar)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUChar
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUChar>_N <Foreign.C.Types.CUChar>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUChar,
                                                                 Foreign.C.Types.CUChar)>_N)) -}
bbbb4519511b0e91ab77d775d9ce1282
  $fEqCUChar_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCUChar1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
0020aacdb4b194ce3342efe88ba81b4a
  $fEqCUChar_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCUChar2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUChar>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
66c8b83e2b0188529b021be3ea699ed9
  $fEqCUChar_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CUChar
                   @~ <(Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCUChar_$cscalarType) -}
84060d664e8bc9e5f3e5ab2f3fac9d80
  $fEqCUChar_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CUChar
                   @ Foreign.C.Types.CUChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCUChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCUChar) -}
a8fb8a9638a528cc115ac724a0ebee45
  $fEqCUChar_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CUChar
                   @~ <(Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCUChar_$cscalarType) -}
290c2b7276fd20a5ee736658db290530
  $fEqCUChar_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUChar, Foreign.C.Types.CUChar)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CUChar
                   @ Foreign.C.Types.CUChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCUChar
                   Data.Array.Accelerate.Array.Sugar.$fEltCUChar) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCUInt ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CUInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUInt
                  Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                  Data.Array.Accelerate.Classes.Eq.$fEqCUInt_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCUInt_$c/= -}
a9e6deb75702c1bd16c4f81142f212c8
  $fEqCUInt1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                   Data.Array.Accelerate.Classes.Eq.$fEqCUInt_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCUInt_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      Data.Array.Accelerate.Classes.Eq.$fEqCUInt_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCUInt_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)
                         @ Foreign.C.Types.CUInt
                         @ ((), Foreign.C.Types.CUInt)
                         @~ <(((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUInt)
                            @ Foreign.C.Types.CUInt
                            @ ()
                            @~ <((), Foreign.C.Types.CUInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CUInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUInt,
                                                                 Foreign.C.Types.CUInt)>_N)) -}
761a454c9a21647d951268a1c03e26b6
  $fEqCUInt2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                   Data.Array.Accelerate.Classes.Eq.$fEqCUInt_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCUInt_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      Data.Array.Accelerate.Classes.Eq.$fEqCUInt_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCUInt_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)
                         @ Foreign.C.Types.CUInt
                         @ ((), Foreign.C.Types.CUInt)
                         @~ <(((), Foreign.C.Types.CUInt), Foreign.C.Types.CUInt)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUInt)
                            @ Foreign.C.Types.CUInt
                            @ ()
                            @~ <((), Foreign.C.Types.CUInt)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUInt>_N <Foreign.C.Types.CUInt>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUInt,
                                                                 Foreign.C.Types.CUInt)>_N)) -}
0ec2a1e418aa6a00f4382db822aef52a
  $fEqCUInt_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCUInt1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
7a533947e013c76ba63fc20b2c10235d
  $fEqCUInt_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCUInt2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUInt>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
6612b10af65881db8597f1806e319255
  $fEqCUInt_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CUInt
                   @~ <(Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCUInt_$cscalarType) -}
f4eb45c05a84c3e859c93859d2b5a6d2
  $fEqCUInt_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt) -}
e3db7a4d8a738388eb2db05e4bd66ce5
  $fEqCUInt_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CUInt
                   @~ <(Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCUInt_$cscalarType) -}
587caf432ee9cc2f426ddf214032aa6c
  $fEqCUInt_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUInt, Foreign.C.Types.CUInt)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CUInt
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt
                   Data.Array.Accelerate.Array.Sugar.$fEltCUInt) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCULLong ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CULLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULLong
                  Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                  Data.Array.Accelerate.Classes.Eq.$fEqCULLong_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCULLong_$c/= -}
142117657ab795f42b76e8163cf90390
  $fEqCULLong1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                   Data.Array.Accelerate.Classes.Eq.$fEqCULLong_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCULLong_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      Data.Array.Accelerate.Classes.Eq.$fEqCULLong_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCULLong_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)
                         @ Foreign.C.Types.CULLong
                         @ ((), Foreign.C.Types.CULLong)
                         @~ <(((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULLong)
                            @ Foreign.C.Types.CULLong
                            @ ()
                            @~ <((), Foreign.C.Types.CULLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CULLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULLong,
                                                                 Foreign.C.Types.CULLong)>_N)) -}
feda2ddf5d86c8ebc9a829b9c45ccf2c
  $fEqCULLong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                   Data.Array.Accelerate.Classes.Eq.$fEqCULLong_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCULLong_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      Data.Array.Accelerate.Classes.Eq.$fEqCULLong_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCULLong_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)
                         @ Foreign.C.Types.CULLong
                         @ ((), Foreign.C.Types.CULLong)
                         @~ <(((), Foreign.C.Types.CULLong), Foreign.C.Types.CULLong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULLong)
                            @ Foreign.C.Types.CULLong
                            @ ()
                            @~ <((), Foreign.C.Types.CULLong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULLong>_N <Foreign.C.Types.CULLong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULLong,
                                                                 Foreign.C.Types.CULLong)>_N)) -}
6bc911a70f415f0f64c24304ccdbe0d7
  $fEqCULLong_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCULLong1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
3b9a107cd15a10ad24c0ce002aa917f2
  $fEqCULLong_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCULLong2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULLong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
d01d47abc7dff640f8a1c44fdf354e1e
  $fEqCULLong_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CULLong
                   @~ <(Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCULLong_$cscalarType) -}
cc9da4277c81becd7ad395bf9c9afff4
  $fEqCULLong_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong) -}
6a76295a60b9822f61ac9673155f7619
  $fEqCULLong_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CULLong
                   @~ <(Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCULLong_$cscalarType) -}
66224dc0c5a27ddcff83073675de407c
  $fEqCULLong_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CULLong, Foreign.C.Types.CULLong)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CULLong
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULLong) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCULong ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CULong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULong
                  Data.Array.Accelerate.Array.Sugar.$fEltCULong
                  Data.Array.Accelerate.Classes.Eq.$fEqCULong_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCULong_$c/= -}
212ebd209e504c6c3cdd1eb4dadb38e9
  $fEqCULong1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                   Data.Array.Accelerate.Classes.Eq.$fEqCULong_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCULong_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      Data.Array.Accelerate.Classes.Eq.$fEqCULong_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCULong_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)
                         @ Foreign.C.Types.CULong
                         @ ((), Foreign.C.Types.CULong)
                         @~ <(((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULong)
                            @ Foreign.C.Types.CULong
                            @ ()
                            @~ <((), Foreign.C.Types.CULong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULong>_N <Foreign.C.Types.CULong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULong,
                                                                 Foreign.C.Types.CULong)>_N)) -}
f2407ce4545a73f75bb8c595c9ef5ba9
  $fEqCULong2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                   Data.Array.Accelerate.Classes.Eq.$fEqCULong_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCULong_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      Data.Array.Accelerate.Classes.Eq.$fEqCULong_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCULong_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)
                         @ Foreign.C.Types.CULong
                         @ ((), Foreign.C.Types.CULong)
                         @~ <(((), Foreign.C.Types.CULong), Foreign.C.Types.CULong)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCULong
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CULong)
                            @ Foreign.C.Types.CULong
                            @ ()
                            @~ <((), Foreign.C.Types.CULong)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCULong
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CULong>_N <Foreign.C.Types.CULong>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CULong,
                                                                 Foreign.C.Types.CULong)>_N)) -}
f3cc1df2d7ec7c93645a5dfefb168a50
  $fEqCULong_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCULong1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
0196c197c860e8227c2af4cb33afee98
  $fEqCULong_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCULong2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CULong>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
ba28d2e1a069f711706408e0763ab1e6
  $fEqCULong_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CULong
                   @~ <(Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCULong_$cscalarType) -}
4ec8a44f04de9c1726bf41aa76b60266
  $fEqCULong_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong) -}
ed148425ce49dea87f6b0b042c9ca3bf
  $fEqCULong_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CULong
                   @~ <(Foreign.C.Types.CULong, Foreign.C.Types.CULong)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCULong_$cscalarType) -}
707a5d63ad087c94a6fd889cf063d290
  $fEqCULong_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CULong, Foreign.C.Types.CULong)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CULong
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong
                   Data.Array.Accelerate.Array.Sugar.$fEltCULong) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqCUShort ::
    Data.Array.Accelerate.Classes.Eq.Eq Foreign.C.Types.CUShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUShort
                  Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                  Data.Array.Accelerate.Classes.Eq.$fEqCUShort_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqCUShort_$c/= -}
efe0d9588fc506e583f28a39e25924b1
  $fEqCUShort1 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                   Data.Array.Accelerate.Classes.Eq.$fEqCUShort_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCUShort_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      Data.Array.Accelerate.Classes.Eq.$fEqCUShort_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCUShort_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)
                         @ Foreign.C.Types.CUShort
                         @ ((), Foreign.C.Types.CUShort)
                         @~ <(((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUShort)
                            @ Foreign.C.Types.CUShort
                            @ ()
                            @~ <((), Foreign.C.Types.CUShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CUShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUShort,
                                                                 Foreign.C.Types.CUShort)>_N)) -}
0cb24f385d0cb283d1b0562e0a6cd112
  $fEqCUShort2 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                   Data.Array.Accelerate.Classes.Eq.$fEqCUShort_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqCUShort_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      Data.Array.Accelerate.Classes.Eq.$fEqCUShort_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqCUShort_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)
                         @ Foreign.C.Types.CUShort
                         @ ((), Foreign.C.Types.CUShort)
                         @~ <(((), Foreign.C.Types.CUShort), Foreign.C.Types.CUShort)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CUShort)
                            @ Foreign.C.Types.CUShort
                            @ ()
                            @~ <((), Foreign.C.Types.CUShort)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CUShort>_N <Foreign.C.Types.CUShort>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CUShort,
                                                                 Foreign.C.Types.CUShort)>_N)) -}
da866723e95d58baa5eb100031e102c9
  $fEqCUShort_$c/= ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCUShort1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
37db5ceaae32cab12adc9366768ca55c
  $fEqCUShort_$c== ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqCUShort2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CUShort>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
69fe6057e29a4c687fc9f8a482c6e417
  $fEqCUShort_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CUShort
                   @~ <(Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCUShort_$cscalarType) -}
3665d8110d9e52dea27f1f6de08e080b
  $fEqCUShort_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort) -}
b714dfb2e622d3e57bee70bd6d7632a3
  $fEqCUShort_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
       -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                      -> GHC.Types.Bool)
                   @ Foreign.C.Types.CUShort
                   @~ <(Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
                       -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarCUShort_$cscalarType) -}
28911309577a1451031c4c4b04de947e
  $fEqCUShort_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CUShort, Foreign.C.Types.CUShort)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CUShort
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort
                   Data.Array.Accelerate.Array.Sugar.$fEltCUShort) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqChar :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Types.Char
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  Data.Array.Accelerate.Array.Sugar.$fEltChar
                  Data.Array.Accelerate.Classes.Eq.$fEqChar_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqChar_$c/= -}
dab63e06fee8247ea8a3581660337ca4
  $fEqChar1 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Char
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Char
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Char)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Char) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Char, GHC.Types.Char)
                   Data.Array.Accelerate.Classes.Eq.$fEqChar_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqChar_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Char, GHC.Types.Char)
                      Data.Array.Accelerate.Classes.Eq.$fEqChar_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqChar_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Char), GHC.Types.Char)
                         @ GHC.Types.Char
                         @ ((), GHC.Types.Char)
                         @~ <(((), GHC.Types.Char), GHC.Types.Char)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltChar
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Char)
                            @ GHC.Types.Char
                            @ ()
                            @~ <((), GHC.Types.Char)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltChar
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Char>_N <GHC.Types.Char>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Char,
                                                                 GHC.Types.Char)>_N)) -}
cd6c47402dfaa92c48b0d7b9d1d1ca5c
  $fEqChar2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Char
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Char
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Char)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Char) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Char, GHC.Types.Char)
                   Data.Array.Accelerate.Classes.Eq.$fEqChar_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqChar_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Char, GHC.Types.Char)
                      Data.Array.Accelerate.Classes.Eq.$fEqChar_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqChar_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Char), GHC.Types.Char)
                         @ GHC.Types.Char
                         @ ((), GHC.Types.Char)
                         @~ <(((), GHC.Types.Char), GHC.Types.Char)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltChar
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Char)
                            @ GHC.Types.Char
                            @ ()
                            @~ <((), GHC.Types.Char)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltChar
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Char>_N <GHC.Types.Char>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Char,
                                                                 GHC.Types.Char)>_N)) -}
869cdd855c1c7b468dc8d35ab29ff8ca
  $fEqChar_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Char
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Char
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqChar1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Char>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Char>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
d2fe7728e80c934b244fab622f66c08b
  $fEqChar_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Char
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Char
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqChar2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Char>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Char>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
200cda3478b74e249a126184061a09a3
  $fEqChar_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Char, GHC.Types.Char) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Types.Char, GHC.Types.Char) -> GHC.Types.Bool)
                   @ GHC.Types.Char
                   @~ <(GHC.Types.Char, GHC.Types.Char) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarChar_$cscalarType) -}
180e19cd057f371db222c55d2177d88a
  $fEqChar_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Char, GHC.Types.Char)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Data.Array.Accelerate.Array.Sugar.$fEltChar
                   Data.Array.Accelerate.Array.Sugar.$fEltChar) -}
49c9028c16ca26629a6bd8cd8e96d1f6
  $fEqChar_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Char, GHC.Types.Char) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Types.Char, GHC.Types.Char) -> GHC.Types.Bool)
                   @ GHC.Types.Char
                   @~ <(GHC.Types.Char, GHC.Types.Char) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarChar_$cscalarType) -}
59b341de43fde5a15a617eca16aaa1fd
  $fEqChar_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Char, GHC.Types.Char)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Data.Array.Accelerate.Array.Sugar.$fEltChar
                   Data.Array.Accelerate.Array.Sugar.$fEltChar) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqDouble :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Types.Double
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Data.Array.Accelerate.Array.Sugar.$fEltDouble
                  Data.Array.Accelerate.Classes.Eq.$fEqDouble_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqDouble_$c/= -}
017d047e4648e4d88df9fc08b35a9666
  $fEqDouble1 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Double, GHC.Types.Double)
                   Data.Array.Accelerate.Classes.Eq.$fEqDouble_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqDouble_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Double, GHC.Types.Double)
                      Data.Array.Accelerate.Classes.Eq.$fEqDouble_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqDouble_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Double), GHC.Types.Double)
                         @ GHC.Types.Double
                         @ ((), GHC.Types.Double)
                         @~ <(((), GHC.Types.Double), GHC.Types.Double)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Double)
                            @ GHC.Types.Double
                            @ ()
                            @~ <((), GHC.Types.Double)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Double>_N <GHC.Types.Double>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Double,
                                                                 GHC.Types.Double)>_N)) -}
fa90ae73cad144e51c747f4886637f84
  $fEqDouble2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Double, GHC.Types.Double)
                   Data.Array.Accelerate.Classes.Eq.$fEqDouble_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqDouble_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Double, GHC.Types.Double)
                      Data.Array.Accelerate.Classes.Eq.$fEqDouble_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqDouble_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Double), GHC.Types.Double)
                         @ GHC.Types.Double
                         @ ((), GHC.Types.Double)
                         @~ <(((), GHC.Types.Double), GHC.Types.Double)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Double)
                            @ GHC.Types.Double
                            @ ()
                            @~ <((), GHC.Types.Double)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Double>_N <GHC.Types.Double>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Double,
                                                                 GHC.Types.Double)>_N)) -}
63dd5b05bef4f10489a5c474df628c80
  $fEqDouble_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqDouble1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
666e9543c80dc0f439525b0cff3a5aa6
  $fEqDouble_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqDouble2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
8d708efb58495db1cf60da2fe38dc43b
  $fEqDouble_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Bool)
                   @ GHC.Types.Double
                   @~ <(GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarDouble_$cscalarType) -}
1fd81621a4bbb6a983e142ab865a9b9f
  $fEqDouble_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Double, GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble) -}
9da981a6f602ff8d08871f5ecca3c277
  $fEqDouble_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Bool)
                   @ GHC.Types.Double
                   @~ <(GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarDouble_$cscalarType) -}
70d9e9f4df9e01cec9822834bd78b22b
  $fEqDouble_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Double, GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble) -}
9d10ddf52d8794bbbfc6e6874f9c7e80
  $fEqExp :: GHC.Classes.Eq (Data.Array.Accelerate.Smart.Exp a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Array.Accelerate.Smart.Exp a)
                  (Data.Array.Accelerate.Classes.Eq.$fEqExp_$c== @ a)
                  (Data.Array.Accelerate.Classes.Eq.$fEqExp_$c/= @ a) -}
32bfbd905cb485c78e3169dc6461da52
  $fEqExp_$c/= ::
    Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Exp a -> GHC.Types.Bool
  {- Strictness: x -}
6be37fe692f8a580c116b3c6f5c9fe69
  $fEqExp_$c== ::
    Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Exp a -> GHC.Types.Bool
  {- Strictness: x -}
52ed39f384f936d7cab795259d55d4b0
  $fEqFloat :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Types.Float
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  Data.Array.Accelerate.Array.Sugar.$fEltFloat
                  Data.Array.Accelerate.Classes.Eq.$fEqFloat_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqFloat_$c/= -}
537a491c7520f1752f248b917370ab96
  $fEqFloat1 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Data.Array.Accelerate.Classes.Eq.$fEqFloat_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqFloat_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Float, GHC.Types.Float)
                      Data.Array.Accelerate.Classes.Eq.$fEqFloat_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqFloat_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Float), GHC.Types.Float)
                         @ GHC.Types.Float
                         @ ((), GHC.Types.Float)
                         @~ <(((), GHC.Types.Float), GHC.Types.Float)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Float)
                            @ GHC.Types.Float
                            @ ()
                            @~ <((), GHC.Types.Float)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Float>_N <GHC.Types.Float>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Float,
                                                                 GHC.Types.Float)>_N)) -}
f2be1fcfd48af3c9d708617bc410b0bd
  $fEqFloat2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Data.Array.Accelerate.Classes.Eq.$fEqFloat_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqFloat_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Float, GHC.Types.Float)
                      Data.Array.Accelerate.Classes.Eq.$fEqFloat_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqFloat_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Float), GHC.Types.Float)
                         @ GHC.Types.Float
                         @ ((), GHC.Types.Float)
                         @~ <(((), GHC.Types.Float), GHC.Types.Float)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Float)
                            @ GHC.Types.Float
                            @ ()
                            @~ <((), GHC.Types.Float)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Float>_N <GHC.Types.Float>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Float,
                                                                 GHC.Types.Float)>_N)) -}
3d20661dd1a20978e22f37348e9096d6
  $fEqFloat_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqFloat1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
ea2be582805fe99834bc7918e1f891ef
  $fEqFloat_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqFloat2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
e7d46731c0cacff570c08302f8a2fb36
  $fEqFloat_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Bool)
                   @ GHC.Types.Float
                   @~ <(GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarFloat_$cscalarType) -}
b7d3640d461da6205803aee9322069a7
  $fEqFloat_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat) -}
c39b4463b2421bb49d0a9cbb857f5033
  $fEqFloat_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Bool)
                   @ GHC.Types.Float
                   @~ <(GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarFloat_$cscalarType) -}
77c45de14f6c342f01fa6b145371f0c0
  $fEqFloat_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqInt :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Types.Int
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  Data.Array.Accelerate.Array.Sugar.$fEltInt
                  Data.Array.Accelerate.Classes.Eq.$fEqInt_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqInt_$c/= -}
d76fb52544d2a7f55323fc1a08ced6e3
  $fEqInt1 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Int, GHC.Types.Int)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Int, GHC.Types.Int)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Int), GHC.Types.Int)
                         @ GHC.Types.Int
                         @ ((), GHC.Types.Int)
                         @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Int)
                            @ GHC.Types.Int
                            @ ()
                            @~ <((), GHC.Types.Int)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                 GHC.Types.Int)>_N)) -}
2e5b9f434d59310d9b648874363b0fc4
  $fEqInt10 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Int.Int8, GHC.Int.Int8)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt8_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt8_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int8, GHC.Int.Int8)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt8_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt8_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int8), GHC.Int.Int8)
                         @ GHC.Int.Int8
                         @ ((), GHC.Int.Int8)
                         @~ <(((), GHC.Int.Int8), GHC.Int.Int8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int8)
                            @ GHC.Int.Int8
                            @ ()
                            @~ <((), GHC.Int.Int8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int8>_N <GHC.Int.Int8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int8,
                                                                 GHC.Int.Int8)>_N)) -}
2b0eb2ddb6e86d8352139ee0930e8662
  $fEqInt11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Int.Int8, GHC.Int.Int8)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt8_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt8_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int8, GHC.Int.Int8)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt8_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt8_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int8), GHC.Int.Int8)
                         @ GHC.Int.Int8
                         @ ((), GHC.Int.Int8)
                         @~ <(((), GHC.Int.Int8), GHC.Int.Int8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int8)
                            @ GHC.Int.Int8
                            @ ()
                            @~ <((), GHC.Int.Int8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int8>_N <GHC.Int.Int8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int8,
                                                                 GHC.Int.Int8)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqInt16 :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Int.Int16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int16
                  Data.Array.Accelerate.Array.Sugar.$fEltInt16
                  Data.Array.Accelerate.Classes.Eq.$fEqInt16_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqInt16_$c/= -}
f74969d5c40bfe9346df76900026660a
  $fEqInt16_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt3
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
0eb7619000fa13be1c8e4a95ed01cfb4
  $fEqInt16_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt4
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
90aab97fcdcccdb390f0c7c430454862
  $fEqInt16_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Bool)
                   @ GHC.Int.Int16
                   @~ <(GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt16_$cscalarType) -}
3b5ee617a2070e92bf7c1daf48eae548
  $fEqInt16_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int16, GHC.Int.Int16)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Int.Int16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16) -}
405cf0f7d40951f234a669b72b2274d5
  $fEqInt16_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Bool)
                   @ GHC.Int.Int16
                   @~ <(GHC.Int.Int16, GHC.Int.Int16) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt16_$cscalarType) -}
2b7f610f17b7d433dc9cda934f3856c2
  $fEqInt16_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int16, GHC.Int.Int16)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Int.Int16
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16
                   Data.Array.Accelerate.Array.Sugar.$fEltInt16) -}
7a29d597404aa5cc8698f4efca3bce77
  $fEqInt2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Int, GHC.Types.Int)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Int, GHC.Types.Int)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Int), GHC.Types.Int)
                         @ GHC.Types.Int
                         @ ((), GHC.Types.Int)
                         @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Int)
                            @ GHC.Types.Int
                            @ ()
                            @~ <((), GHC.Types.Int)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                 GHC.Types.Int)>_N)) -}
cd587ad9fbe958e65fd5766a2726e364
  $fEqInt3 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Int.Int16, GHC.Int.Int16)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt16_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt16_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int16, GHC.Int.Int16)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt16_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt16_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int16), GHC.Int.Int16)
                         @ GHC.Int.Int16
                         @ ((), GHC.Int.Int16)
                         @~ <(((), GHC.Int.Int16), GHC.Int.Int16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int16)
                            @ GHC.Int.Int16
                            @ ()
                            @~ <((), GHC.Int.Int16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int16>_N <GHC.Int.Int16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int16,
                                                                 GHC.Int.Int16)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqInt32 :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Int.Int32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  Data.Array.Accelerate.Array.Sugar.$fEltInt32
                  Data.Array.Accelerate.Classes.Eq.$fEqInt32_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqInt32_$c/= -}
ed31366864559f2f0c3fdfd40728bc1a
  $fEqInt32_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt5
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
7625627d608249c2eb0d2c96a123fd82
  $fEqInt32_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt6
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
8c3314198c39a700e88be9acbc5669b4
  $fEqInt32_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Bool)
                   @ GHC.Int.Int32
                   @~ <(GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt32_$cscalarType) -}
aafe275fb417709819f5c8b2897558d2
  $fEqInt32_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int32, GHC.Int.Int32)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32) -}
6135ddbd70e6c692c87f69b5524c3d1e
  $fEqInt32_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Bool)
                   @ GHC.Int.Int32
                   @~ <(GHC.Int.Int32, GHC.Int.Int32) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt32_$cscalarType) -}
f1181bdb7a7e7c8689d115419989af18
  $fEqInt32_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int32, GHC.Int.Int32)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Int.Int32
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32
                   Data.Array.Accelerate.Array.Sugar.$fEltInt32) -}
1db90f0d30a93549f0a6004cfecf81f3
  $fEqInt4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Int.Int16, GHC.Int.Int16)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt16_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt16_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int16, GHC.Int.Int16)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt16_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt16_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int16), GHC.Int.Int16)
                         @ GHC.Int.Int16
                         @ ((), GHC.Int.Int16)
                         @~ <(((), GHC.Int.Int16), GHC.Int.Int16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int16)
                            @ GHC.Int.Int16
                            @ ()
                            @~ <((), GHC.Int.Int16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int16>_N <GHC.Int.Int16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int16,
                                                                 GHC.Int.Int16)>_N)) -}
35bed28dabebab7206417d6b5347f095
  $fEqInt5 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Int.Int32, GHC.Int.Int32)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt32_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt32_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int32, GHC.Int.Int32)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt32_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt32_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int32), GHC.Int.Int32)
                         @ GHC.Int.Int32
                         @ ((), GHC.Int.Int32)
                         @~ <(((), GHC.Int.Int32), GHC.Int.Int32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int32)
                            @ GHC.Int.Int32
                            @ ()
                            @~ <((), GHC.Int.Int32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int32>_N <GHC.Int.Int32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int32,
                                                                 GHC.Int.Int32)>_N)) -}
491db63caf756e1b4d19def074faf29f
  $fEqInt6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Int.Int32, GHC.Int.Int32)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt32_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt32_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int32, GHC.Int.Int32)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt32_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt32_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int32), GHC.Int.Int32)
                         @ GHC.Int.Int32
                         @ ((), GHC.Int.Int32)
                         @~ <(((), GHC.Int.Int32), GHC.Int.Int32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int32)
                            @ GHC.Int.Int32
                            @ ()
                            @~ <((), GHC.Int.Int32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int32>_N <GHC.Int.Int32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int32,
                                                                 GHC.Int.Int32)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqInt64 :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Int.Int64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int64
                  Data.Array.Accelerate.Array.Sugar.$fEltInt64
                  Data.Array.Accelerate.Classes.Eq.$fEqInt64_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqInt64_$c/= -}
970dbc2cbe7ddcb99100762cda9299c0
  $fEqInt64_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt7
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
f88e92265d17b5b9a7ea84b6542aeeea
  $fEqInt64_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt9
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
fb17d6d87b896c3cba1122f119cdbc47
  $fEqInt64_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Bool)
                   @ GHC.Int.Int64
                   @~ <(GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt64_$cscalarType) -}
a1f9ddfaea782140d31ae35d255f7fbf
  $fEqInt64_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int64, GHC.Int.Int64)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Int.Int64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64) -}
83c94cfba96a989bd8f9de4981738d14
  $fEqInt64_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Bool)
                   @ GHC.Int.Int64
                   @~ <(GHC.Int.Int64, GHC.Int.Int64) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt64_$cscalarType) -}
4ad0655c6666de9e1b9e13ce458284d9
  $fEqInt64_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Int.Int64, GHC.Int.Int64)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Int.Int64
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64
                   Data.Array.Accelerate.Array.Sugar.$fEltInt64) -}
96382cf1fc21c3c11ecd2391ebeee56c
  $fEqInt7 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Int.Int64, GHC.Int.Int64)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt64_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt64_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int64, GHC.Int.Int64)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt64_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt64_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int64), GHC.Int.Int64)
                         @ GHC.Int.Int64
                         @ ((), GHC.Int.Int64)
                         @~ <(((), GHC.Int.Int64), GHC.Int.Int64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int64)
                            @ GHC.Int.Int64
                            @ ()
                            @~ <((), GHC.Int.Int64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int64>_N <GHC.Int.Int64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int64,
                                                                 GHC.Int.Int64)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqInt8 :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Int.Int8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int8
                  Data.Array.Accelerate.Array.Sugar.$fEltInt8
                  Data.Array.Accelerate.Classes.Eq.$fEqInt8_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqInt8_$c/= -}
f4d21f0febf9092f6ecb2f4c9e8ee81a
  $fEqInt8_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt10
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
634b7986bb63f7f35b2f8f34efea6148
  $fEqInt8_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt11
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Int.Int8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
61e6fd5d9ef423a73297a938f08e3939
  $fEqInt8_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Bool)
                   @ GHC.Int.Int8
                   @~ <(GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt8_$cscalarType) -}
0d2a36c5c1d67a76c111985b02e173b5
  $fEqInt8_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt (GHC.Int.Int8, GHC.Int.Int8)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Int.Int8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8) -}
eedad9ba526984dd14680db405b4eed6
  $fEqInt8_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Bool)
                   @ GHC.Int.Int8
                   @~ <(GHC.Int.Int8, GHC.Int.Int8) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt8_$cscalarType) -}
ee72be6ae6a2e0322c220535985baebe
  $fEqInt8_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt (GHC.Int.Int8, GHC.Int.Int8)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Int.Int8
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8
                   Data.Array.Accelerate.Array.Sugar.$fEltInt8) -}
421b3a4f76b13322d7465a1bfaa7e766
  $fEqInt9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.Exp GHC.Int.Int64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Int.Int64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Int.Int64, GHC.Int.Int64)
                   Data.Array.Accelerate.Classes.Eq.$fEqInt64_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqInt64_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Int.Int64, GHC.Int.Int64)
                      Data.Array.Accelerate.Classes.Eq.$fEqInt64_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqInt64_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Int.Int64), GHC.Int.Int64)
                         @ GHC.Int.Int64
                         @ ((), GHC.Int.Int64)
                         @~ <(((), GHC.Int.Int64), GHC.Int.Int64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltInt64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Int.Int64)
                            @ GHC.Int.Int64
                            @ ()
                            @~ <((), GHC.Int.Int64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltInt64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Int.Int64>_N <GHC.Int.Int64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Int.Int64,
                                                                 GHC.Int.Int64)>_N)) -}
f0b8454be3bdc659422b0d8adc8c74b7
  $fEqInt_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
b7717d198329c4ffd453d88e66225e1a
  $fEqInt_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqInt2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
38c06c4a12c3ecb8023ab19370a8fadc
  $fEqInt_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool)
                   @ GHC.Types.Int
                   @~ <(GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt_$cscalarType) -}
0e58fef5485b0c532d06c22c33bdd88e
  $fEqInt_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt) -}
984886e145113023e0737d0528eaf1fc
  $fEqInt_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool)
                   @ GHC.Types.Int
                   @~ <(GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarInt_$cscalarType) -}
551b15412cc9816c3817b4f3ae38da7b
  $fEqInt_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Int, GHC.Types.Int)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fEltInt) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqWord :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Types.Word
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Word
                  Data.Array.Accelerate.Array.Sugar.$fEltWord
                  Data.Array.Accelerate.Classes.Eq.$fEqWord_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqWord_$c/= -}
30049e7b0cc632f67a78e060b790bf34
  $fEqWord1 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Word, GHC.Types.Word)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Word, GHC.Types.Word)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Word), GHC.Types.Word)
                         @ GHC.Types.Word
                         @ ((), GHC.Types.Word)
                         @~ <(((), GHC.Types.Word), GHC.Types.Word)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Word)
                            @ GHC.Types.Word
                            @ ()
                            @~ <((), GHC.Types.Word)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Word>_N <GHC.Types.Word>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Word,
                                                                 GHC.Types.Word)>_N)) -}
8925dcbd84bfc052e1a259bb1cf2fddd
  $fEqWord10 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Word.Word8, GHC.Word.Word8)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord8_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord8_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word8, GHC.Word.Word8)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord8_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord8_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word8), GHC.Word.Word8)
                         @ GHC.Word.Word8
                         @ ((), GHC.Word.Word8)
                         @~ <(((), GHC.Word.Word8), GHC.Word.Word8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word8)
                            @ GHC.Word.Word8
                            @ ()
                            @~ <((), GHC.Word.Word8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word8>_N <GHC.Word.Word8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word8,
                                                                 GHC.Word.Word8)>_N)) -}
ae715c67b79518ea6ddf2ba5b903fce1
  $fEqWord11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word8) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Word.Word8, GHC.Word.Word8)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord8_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord8_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word8, GHC.Word.Word8)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord8_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord8_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word8), GHC.Word.Word8)
                         @ GHC.Word.Word8
                         @ ((), GHC.Word.Word8)
                         @~ <(((), GHC.Word.Word8), GHC.Word.Word8)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord8
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word8)
                            @ GHC.Word.Word8
                            @ ()
                            @~ <((), GHC.Word.Word8)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord8
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word8>_N <GHC.Word.Word8>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word8,
                                                                 GHC.Word.Word8)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqWord16 :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Word.Word16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word16
                  Data.Array.Accelerate.Array.Sugar.$fEltWord16
                  Data.Array.Accelerate.Classes.Eq.$fEqWord16_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqWord16_$c/= -}
319eeb802d2c730585d02158b48390ca
  $fEqWord16_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord3
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
481b21c40e075f8b78d9a52f3f7793c0
  $fEqWord16_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord4
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word16>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
18536349cdede4ebd73ff6fe5157948b
  $fEqWord16_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Bool)
                   @ GHC.Word.Word16
                   @~ <(GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord16_$cscalarType) -}
ef4bb2790df374b0ce9d9782faac7d70
  $fEqWord16_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word16, GHC.Word.Word16)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Word.Word16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16) -}
4776ceb6e7c2c622c7e16b67298d70dd
  $fEqWord16_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Bool)
                   @ GHC.Word.Word16
                   @~ <(GHC.Word.Word16, GHC.Word.Word16) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord16_$cscalarType) -}
98408c5d8a19eaaca189858f94750934
  $fEqWord16_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word16, GHC.Word.Word16)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Word.Word16
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16
                   Data.Array.Accelerate.Array.Sugar.$fEltWord16) -}
5d272d537f90855437e4f020ac335ea1
  $fEqWord2 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Word) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Types.Word, GHC.Types.Word)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Word, GHC.Types.Word)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Word), GHC.Types.Word)
                         @ GHC.Types.Word
                         @ ((), GHC.Types.Word)
                         @~ <(((), GHC.Types.Word), GHC.Types.Word)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Word)
                            @ GHC.Types.Word
                            @ ()
                            @~ <((), GHC.Types.Word)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Word>_N <GHC.Types.Word>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Word,
                                                                 GHC.Types.Word)>_N)) -}
c16ec376f329aaac7ac1df422e2ef5bf
  $fEqWord3 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Word.Word16, GHC.Word.Word16)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord16_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord16_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word16, GHC.Word.Word16)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord16_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord16_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word16), GHC.Word.Word16)
                         @ GHC.Word.Word16
                         @ ((), GHC.Word.Word16)
                         @~ <(((), GHC.Word.Word16), GHC.Word.Word16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word16)
                            @ GHC.Word.Word16
                            @ ()
                            @~ <((), GHC.Word.Word16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word16>_N <GHC.Word.Word16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word16,
                                                                 GHC.Word.Word16)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqWord32 :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Word.Word32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word32
                  Data.Array.Accelerate.Array.Sugar.$fEltWord32
                  Data.Array.Accelerate.Classes.Eq.$fEqWord32_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqWord32_$c/= -}
ed9c4a0b79eaedf1ef2bbac41b64872b
  $fEqWord32_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord5
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
412c9aeb46fa77cb94731f7a2914bce8
  $fEqWord32_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord6
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word32>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
c8c206d0ca37a6037e361e2a2331a840
  $fEqWord32_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Bool)
                   @ GHC.Word.Word32
                   @~ <(GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord32_$cscalarType) -}
9b1ce4563814e026943563a37ebc05b9
  $fEqWord32_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word32, GHC.Word.Word32)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Word.Word32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32) -}
512fd00a14631bf8617803799f52172c
  $fEqWord32_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Bool)
                   @ GHC.Word.Word32
                   @~ <(GHC.Word.Word32, GHC.Word.Word32) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord32_$cscalarType) -}
f5a31c76042aa9fc7f1a6f5ca410d865
  $fEqWord32_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word32, GHC.Word.Word32)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Word.Word32
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32
                   Data.Array.Accelerate.Array.Sugar.$fEltWord32) -}
65f0d3738260dcf2db1fc30f5c5dc8d8
  $fEqWord4 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word16
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word16) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Word.Word16, GHC.Word.Word16)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord16_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord16_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word16, GHC.Word.Word16)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord16_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord16_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word16), GHC.Word.Word16)
                         @ GHC.Word.Word16
                         @ ((), GHC.Word.Word16)
                         @~ <(((), GHC.Word.Word16), GHC.Word.Word16)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord16
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word16)
                            @ GHC.Word.Word16
                            @ ()
                            @~ <((), GHC.Word.Word16)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord16
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word16>_N <GHC.Word.Word16>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word16,
                                                                 GHC.Word.Word16)>_N)) -}
6a27f2ff06eb0d7980c956e22b2140b3
  $fEqWord5 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Word.Word32, GHC.Word.Word32)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord32_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord32_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word32, GHC.Word.Word32)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord32_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord32_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word32), GHC.Word.Word32)
                         @ GHC.Word.Word32
                         @ ((), GHC.Word.Word32)
                         @~ <(((), GHC.Word.Word32), GHC.Word.Word32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word32)
                            @ GHC.Word.Word32
                            @ ()
                            @~ <((), GHC.Word.Word32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word32>_N <GHC.Word.Word32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word32,
                                                                 GHC.Word.Word32)>_N)) -}
c51992d53861b4f2537c1f3095b550dc
  $fEqWord6 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word32
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word32) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Word.Word32, GHC.Word.Word32)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord32_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord32_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word32, GHC.Word.Word32)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord32_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord32_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word32), GHC.Word.Word32)
                         @ GHC.Word.Word32
                         @ ((), GHC.Word.Word32)
                         @~ <(((), GHC.Word.Word32), GHC.Word.Word32)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord32
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word32)
                            @ GHC.Word.Word32
                            @ ()
                            @~ <((), GHC.Word.Word32)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord32
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word32>_N <GHC.Word.Word32>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word32,
                                                                 GHC.Word.Word32)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqWord64 :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Word.Word64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word64
                  Data.Array.Accelerate.Array.Sugar.$fEltWord64
                  Data.Array.Accelerate.Classes.Eq.$fEqWord64_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqWord64_$c/= -}
94084844629707c5df3d1fb351a49e7f
  $fEqWord64_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord7
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
2a5f70ab7213476513a046d85d70284a
  $fEqWord64_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord9
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word64>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
c9ff2177aa904257f3775272cd569971
  $fEqWord64_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Bool)
                   @ GHC.Word.Word64
                   @~ <(GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord64_$cscalarType) -}
592b6782158dfb62b90fdffd15b4567d
  $fEqWord64_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word64, GHC.Word.Word64)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64) -}
5a90f811b371c2a8640178fff80d4397
  $fEqWord64_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Bool)
                   @ GHC.Word.Word64
                   @~ <(GHC.Word.Word64, GHC.Word.Word64) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord64_$cscalarType) -}
61dfad6b841c8af9728904507c90cd4a
  $fEqWord64_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word64, GHC.Word.Word64)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64
                   Data.Array.Accelerate.Array.Sugar.$fEltWord64) -}
121e225181aa91098062ec75c7e1892d
  $fEqWord7 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Word.Word64, GHC.Word.Word64)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord64_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord64_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word64, GHC.Word.Word64)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord64_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord64_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word64), GHC.Word.Word64)
                         @ GHC.Word.Word64
                         @ ((), GHC.Word.Word64)
                         @~ <(((), GHC.Word.Word64), GHC.Word.Word64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word64)
                            @ GHC.Word.Word64
                            @ ()
                            @~ <((), GHC.Word.Word64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word64>_N <GHC.Word.Word64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word64,
                                                                 GHC.Word.Word64)>_N)) -}
52ed39f384f936d7cab795259d55d4b0
  $fEqWord8 :: Data.Array.Accelerate.Classes.Eq.Eq GHC.Word.Word8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word8
                  Data.Array.Accelerate.Array.Sugar.$fEltWord8
                  Data.Array.Accelerate.Classes.Eq.$fEqWord8_$c==
                  Data.Array.Accelerate.Classes.Eq.$fEqWord8_$c/= -}
4a88f70044fd5a1c8facf28bcd995e36
  $fEqWord8_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord10
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
7f7ae2755cdce32e86090ca0b24b2ab0
  $fEqWord8_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word8
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord11
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Word.Word8>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
9f529b26d3df364ead1772534f618884
  $fEqWord8_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Bool)
                   @ GHC.Word.Word8
                   @~ <(GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord8_$cscalarType) -}
e3d875b32d4ca06e8c46b608ad9ea61e
  $fEqWord8_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word8, GHC.Word.Word8)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8) -}
dfd58840ecc00455d087e88d04a74bd0
  $fEqWord8_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Bool)
                   @ GHC.Word.Word8
                   @~ <(GHC.Word.Word8, GHC.Word.Word8) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord8_$cscalarType) -}
89e0b7b6a090e96f5d2af47337075b56
  $fEqWord8_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Word.Word8, GHC.Word.Word8)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Word.Word8
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8
                   Data.Array.Accelerate.Array.Sugar.$fEltWord8) -}
88eb8d0f57da003e057042fd6dcce38d
  $fEqWord9 ::
    Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.Exp GHC.Word.Word64
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Word.Word64) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   @ (GHC.Word.Word64, GHC.Word.Word64)
                   Data.Array.Accelerate.Classes.Eq.$fEqWord64_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Classes.Eq.$fEqWord64_lvl1
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Word.Word64, GHC.Word.Word64)
                      Data.Array.Accelerate.Classes.Eq.$fEqWord64_lvl196
                      Data.Array.Accelerate.Classes.Eq.$fEqWord64_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Word.Word64), GHC.Word.Word64)
                         @ GHC.Word.Word64
                         @ ((), GHC.Word.Word64)
                         @~ <(((), GHC.Word.Word64), GHC.Word.Word64)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltWord64
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Word.Word64)
                            @ GHC.Word.Word64
                            @ ()
                            @~ <((), GHC.Word.Word64)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltWord64
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Word.Word64>_N <GHC.Word.Word64>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Word.Word64,
                                                                 GHC.Word.Word64)>_N)) -}
112ad44c8c412099024a5e1ee35bc8b3
  $fEqWord_$c/= ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
4c6c23d32fcc368cb5e9e2a705fb3699
  $fEqWord_$c== ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Word
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Eq.$fEqWord2
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Word>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
9fc6607c3fa54885c5d27077cdefb704
  $fEqWord_lvl1 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimEq
                   @ ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Bool)
                   @ GHC.Types.Word
                   @~ <(GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord_$cscalarType) -}
46fbaadf8e3741a9eb0894c99b8bfb8a
  $fEqWord_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Word, GHC.Types.Word)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Word
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord) -}
ef67e2f1fa75f43d1539a382f6c6fbae
  $fEqWord_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Bool)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimNEq
                   @ ((GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Bool)
                   @ GHC.Types.Word
                   @~ <(GHC.Types.Word, GHC.Types.Word) -> GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsScalarWord_$cscalarType) -}
e1bfce78fb474bc5058a09c89e7b9dd9
  $fEqWord_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Word, GHC.Types.Word)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Word
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Array.Sugar.$fEltWord
                   Data.Array.Accelerate.Array.Sugar.$fEltWord) -}
9b62a4ba35a017c67ec5102ffd9884f0
  $s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat ::
    [GHC.Types.Char] -> Text.Printf.ModifierParser
  {- Arity: 2, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: [GHC.Types.Char]) (ds2 :: [GHC.Types.Char]) ->
                 case ds2 of wild {
                   [] -> Text.Printf.errorShortFormat @ Text.Printf.FormatParse
                   : c1 cs
                   -> Text.Printf.FormatParse
                        (GHC.Types.[] @ GHC.Types.Char)
                        c1
                        cs }) -}
f5de5c7b677de6d8f98864e720923460
  $sprintf3 ::
    GHC.Base.String -> [Text.Printf.UPrintf] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (fmts :: GHC.Base.String)
                   (args :: [Text.Printf.UPrintf]) ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Text.Printf.$fIsCharChar_$cfromChar
                   (Text.Printf.uprintfs
                      fmts
                      (GHC.List.reverse1
                         @ Text.Printf.UPrintf
                         args
                         (GHC.Types.[] @ Text.Printf.UPrintf))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
c77b797927cc3bf25bce31fc11c9e7b1
  $tc'C:Eq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8243846129579237596##
                   14763487934581110453##
                   Data.Array.Accelerate.Classes.Eq.$trModule
                   Data.Array.Accelerate.Classes.Eq.$tc'C:Eq1) -}
9dc1b9f128a304103127338bf70ef41c
  $tc'C:Eq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Eq"#) -}
ae2d771a09a32e7ebf68916cd4ab0f3e
  $tcEq :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3215648262606190427##
                   11998009468570941260##
                   Data.Array.Accelerate.Classes.Eq.$trModule
                   Data.Array.Accelerate.Classes.Eq.$tcEq1) -}
14b1431dba1b50b1544cb0990f8761e1
  $tcEq1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Eq"#) -}
4a9e2e6e00760c6b31c8d48fb00fdf32
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Classes.Eq.$trModule2
                   Data.Array.Accelerate.Classes.Eq.$trModule1) -}
03a79690eaf8d5ada6949eae019892d1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Classes.Eq"#) -}
6c31fd286698a2e124cb7709ab124af2
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d) =>
    (# GHC.Show.Show (a, b, c, d),
       Data.Typeable.Internal.Typeable (a, b, c, d),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d)),
       (a, b, c, d)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d)),
       (a, b, c, d)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d),
       Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d)
       -> (a, b, c, d) #)
  {- Arity: 4,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq1 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e) =>
    (# GHC.Show.Show (a, b, c, d, e),
       Data.Typeable.Internal.Typeable (a, b, c, d, e),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e)),
       (a, b, c, d, e)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e)),
       (a, b, c, d, e)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e),
       Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e)
       -> (a, b, c, d, e) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq10 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n),
       Data.Typeable.Internal.Typeable
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m, n)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m, n)),
       (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (a, b, c, d, e, f, g, h, i, j, k, l, m, n)),
       (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m, n),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n)
       -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n) #)
  {- Arity: 14,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq11 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m,
     Data.Array.Accelerate.Classes.Eq.Eq n,
     Data.Array.Accelerate.Classes.Eq.Eq o) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o),
       Data.Typeable.Internal.Typeable
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)),
       (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)),
       (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o)
       -> (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) #)
  {- Arity: 15,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq2 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f) =>
    (# GHC.Show.Show (a, b, c, d, e, f),
       Data.Typeable.Internal.Typeable (a, b, c, d, e, f),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f)),
       (a, b, c, d, e, f)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f)),
       (a, b, c, d, e, f)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f),
       Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f)
       -> (a, b, c, d, e, f) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq3 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g),
       Data.Typeable.Internal.Typeable (a, b, c, d, e, f, g),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f, g)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f, g)),
       (a, b, c, d, e, f, g)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f, g)),
       (a, b, c, d, e, f, g)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f, g),
       Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f, g)
       -> (a, b, c, d, e, f, g) #)
  {- Arity: 7,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq4 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g, h),
       Data.Typeable.Internal.Typeable (a, b, c, d, e, f, g, h),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h)),
       (a, b, c, d, e, f, g, h)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (a, b, c, d, e, f, g, h)),
       (a, b, c, d, e, f, g, h)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h),
       Data.Array.Accelerate.Array.Sugar.EltRepr (a, b, c, d, e, f, g, h)
       -> (a, b, c, d, e, f, g, h) #)
  {- Arity: 8,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq5 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g, h, i),
       Data.Typeable.Internal.Typeable (a, b, c, d, e, f, g, h, i),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i)),
       (a, b, c, d, e, f, g, h, i)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (a, b, c, d, e, f, g, h, i)),
       (a, b, c, d, e, f, g, h, i)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (a, b, c, d, e, f, g, h, i)
       -> (a, b, c, d, e, f, g, h, i) #)
  {- Arity: 9,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq6 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g, h, i, j),
       Data.Typeable.Internal.Typeable (a, b, c, d, e, f, g, h, i, j),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j)),
       (a, b, c, d, e, f, g, h, i, j)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (a, b, c, d, e, f, g, h, i, j)),
       (a, b, c, d, e, f, g, h, i, j)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (a, b, c, d, e, f, g, h, i, j)
       -> (a, b, c, d, e, f, g, h, i, j) #)
  {- Arity: 10,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq7 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k),
       Data.Typeable.Internal.Typeable (a, b, c, d, e, f, g, h, i, j, k),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k)),
       (a, b, c, d, e, f, g, h, i, j, k)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (a, b, c, d, e, f, g, h, i, j, k)),
       (a, b, c, d, e, f, g, h, i, j, k)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (a, b, c, d, e, f, g, h, i, j, k)
       -> (a, b, c, d, e, f, g, h, i, j, k) #)
  {- Arity: 11,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq8 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l),
       Data.Typeable.Internal.Typeable
         (a, b, c, d, e, f, g, h, i, j, k, l),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l)),
       (a, b, c, d, e, f, g, h, i, j, k, l)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (a, b, c, d, e, f, g, h, i, j, k, l)),
       (a, b, c, d, e, f, g, h, i, j, k, l)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (a, b, c, d, e, f, g, h, i, j, k, l)
       -> (a, b, c, d, e, f, g, h, i, j, k, l) #)
  {- Arity: 12,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
52ed39f384f936d7cab795259d55d4b0
  $w$cp1Eq9 ::
    (Data.Array.Accelerate.Classes.Eq.Eq a,
     Data.Array.Accelerate.Classes.Eq.Eq b,
     Data.Array.Accelerate.Classes.Eq.Eq c,
     Data.Array.Accelerate.Classes.Eq.Eq d,
     Data.Array.Accelerate.Classes.Eq.Eq e,
     Data.Array.Accelerate.Classes.Eq.Eq f,
     Data.Array.Accelerate.Classes.Eq.Eq g,
     Data.Array.Accelerate.Classes.Eq.Eq h,
     Data.Array.Accelerate.Classes.Eq.Eq i,
     Data.Array.Accelerate.Classes.Eq.Eq j,
     Data.Array.Accelerate.Classes.Eq.Eq k,
     Data.Array.Accelerate.Classes.Eq.Eq l,
     Data.Array.Accelerate.Classes.Eq.Eq m) =>
    (# GHC.Show.Show (a, b, c, d, e, f, g, h, i, j, k, l, m),
       Data.Typeable.Internal.Typeable
         (a, b, c, d, e, f, g, h, i, j, k, l, m),
       Data.Typeable.Internal.Typeable
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m)),
       Data.Array.Accelerate.Array.Data.ArrayElt
         (Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m)),
       (a, b, c, d, e, f, g, h, i, j, k, l, m)
       -> Data.Array.Accelerate.Type.TupleType
            (Data.Array.Accelerate.Array.Sugar.EltRepr
               (a, b, c, d, e, f, g, h, i, j, k, l, m)),
       (a, b, c, d, e, f, g, h, i, j, k, l, m)
       -> Data.Array.Accelerate.Array.Sugar.EltRepr
            (a, b, c, d, e, f, g, h, i, j, k, l, m),
       Data.Array.Accelerate.Array.Sugar.EltRepr
         (a, b, c, d, e, f, g, h, i, j, k, l, m)
       -> (a, b, c, d, e, f, g, h, i, j, k, l, m) #)
  {- Arity: 13,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)><L,1*U(1*U(1*U(C(C1(U)),A,A),1*C1(U),1*C1(U),1*U(U,U,U,U,U,U,U,U,U),1*C1(U),C(U),C(U)),A,A)>,
     Inline: [0] -}
fd3fbc575278d01240f55b5285c81d9c
  (&&) ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Smart.mkLAnd1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
52ed39f384f936d7cab795259d55d4b0
  class Data.Array.Accelerate.Array.Sugar.Elt a => Eq a where
    (==) :: Data.Array.Accelerate.Smart.Exp a
            -> Data.Array.Accelerate.Smart.Exp a
            -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    (/=) :: Data.Array.Accelerate.Smart.Exp a
            -> Data.Array.Accelerate.Smart.Exp a
            -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    {-# MINIMAL (==) | (/=) #-}
a442d284a248c70a10c21df510baefef
  not ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Smart.mkLNot1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
385cac0096364cd1168d80272fce6db4
  (||) ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Smart.mkLOr1
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) -}
instance Data.Array.Accelerate.Classes.Eq.Eq [()]
  = Data.Array.Accelerate.Classes.Eq.$fEq()
instance Data.Array.Accelerate.Classes.Eq.Eq [(,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,,,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [(,,,,,,,,,,,,,,)]
  = Data.Array.Accelerate.Classes.Eq.$fEq(,,,,,,,,,,,,,,)
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Types.Bool]
  = Data.Array.Accelerate.Classes.Eq.$fEqBool
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CChar]
  = Data.Array.Accelerate.Classes.Eq.$fEqCChar
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Classes.Eq.$fEqCDouble
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Classes.Eq.$fEqCFloat
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Classes.Eq.$fEqCInt
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Classes.Eq.$fEqCLLong
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Classes.Eq.$fEqCLong
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CSChar]
  = Data.Array.Accelerate.Classes.Eq.$fEqCSChar
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Classes.Eq.$fEqCShort
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CUChar]
  = Data.Array.Accelerate.Classes.Eq.$fEqCUChar
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Classes.Eq.$fEqCUInt
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Classes.Eq.$fEqCULLong
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Classes.Eq.$fEqCULong
instance Data.Array.Accelerate.Classes.Eq.Eq [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Classes.Eq.$fEqCUShort
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Types.Char]
  = Data.Array.Accelerate.Classes.Eq.$fEqChar
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Types.Double]
  = Data.Array.Accelerate.Classes.Eq.$fEqDouble
instance GHC.Classes.Eq [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Eq.$fEqExp
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Types.Float]
  = Data.Array.Accelerate.Classes.Eq.$fEqFloat
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Types.Int]
  = Data.Array.Accelerate.Classes.Eq.$fEqInt
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Int.Int16]
  = Data.Array.Accelerate.Classes.Eq.$fEqInt16
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Int.Int32]
  = Data.Array.Accelerate.Classes.Eq.$fEqInt32
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Int.Int64]
  = Data.Array.Accelerate.Classes.Eq.$fEqInt64
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Int.Int8]
  = Data.Array.Accelerate.Classes.Eq.$fEqInt8
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Types.Word]
  = Data.Array.Accelerate.Classes.Eq.$fEqWord
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Word.Word16]
  = Data.Array.Accelerate.Classes.Eq.$fEqWord16
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Word.Word32]
  = Data.Array.Accelerate.Classes.Eq.$fEqWord32
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Word.Word64]
  = Data.Array.Accelerate.Classes.Eq.$fEqWord64
instance Data.Array.Accelerate.Classes.Eq.Eq [GHC.Word.Word8]
  = Data.Array.Accelerate.Classes.Eq.$fEqWord8
"SPEC/Data.Array.Accelerate.Classes.Eq $fPrintfArg[]_$cparseFormat @ Char" [ALWAYS] forall ($dIsChar :: Text.Printf.IsChar
                                                                                                          GHC.Types.Char)
  Text.Printf.$fPrintfArg[]_$cparseFormat @ GHC.Types.Char $dIsChar
  = Data.Array.Accelerate.Classes.Eq.$s$fPrintfArg[]_$s$fPrintfArg[]_$cparseFormat
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

