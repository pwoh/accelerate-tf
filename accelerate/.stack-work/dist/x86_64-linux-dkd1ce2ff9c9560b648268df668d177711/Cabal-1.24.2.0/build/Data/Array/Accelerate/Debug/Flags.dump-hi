
==================== FINAL INTERFACE ====================
2017-08-29 05:26:55.241407 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Debug.Flags 8002
  interface hash: 4be0cd39fdfd523d2d75e43ae3012b69
  ABI hash: 4ae65d880031597019ea1d1d62ef661e
  export-list hash: 13ef378da3ed97cd263f65489c45c172
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ad36ffe46a8c39d6e8b97a014c2c20ae
  sig of: Nothing
  used TH splices: True
  where
exports:
  Data.Array.Accelerate.Debug.Flags.accInit
  Data.Array.Accelerate.Debug.Flags.acc_sharing
  Data.Array.Accelerate.Debug.Flags.clearFlag
  Data.Array.Accelerate.Debug.Flags.clearFlags
  Data.Array.Accelerate.Debug.Flags.debug_cc
  Data.Array.Accelerate.Debug.Flags.dump_asm
  Data.Array.Accelerate.Debug.Flags.dump_cc
  Data.Array.Accelerate.Debug.Flags.dump_dot
  Data.Array.Accelerate.Debug.Flags.dump_exec
  Data.Array.Accelerate.Debug.Flags.dump_gc
  Data.Array.Accelerate.Debug.Flags.dump_gc_stats
  Data.Array.Accelerate.Debug.Flags.dump_ld
  Data.Array.Accelerate.Debug.Flags.dump_phases
  Data.Array.Accelerate.Debug.Flags.dump_sched
  Data.Array.Accelerate.Debug.Flags.dump_sharing
  Data.Array.Accelerate.Debug.Flags.dump_simpl_dot
  Data.Array.Accelerate.Debug.Flags.dump_simpl_iterations
  Data.Array.Accelerate.Debug.Flags.dump_simpl_stats
  Data.Array.Accelerate.Debug.Flags.dump_vectorisation
  Data.Array.Accelerate.Debug.Flags.exp_sharing
  Data.Array.Accelerate.Debug.Flags.fast_math
  Data.Array.Accelerate.Debug.Flags.flush_cache
  Data.Array.Accelerate.Debug.Flags.force_recomp
  Data.Array.Accelerate.Debug.Flags.fusion
  Data.Array.Accelerate.Debug.Flags.queryFlag
  Data.Array.Accelerate.Debug.Flags.setFlag
  Data.Array.Accelerate.Debug.Flags.setFlag'
  Data.Array.Accelerate.Debug.Flags.setFlags
  Data.Array.Accelerate.Debug.Flags.simplify
  Data.Array.Accelerate.Debug.Flags.unless
  Data.Array.Accelerate.Debug.Flags.verbose
  Data.Array.Accelerate.Debug.Flags.when
  Data.Array.Accelerate.Debug.Flags.Flags
  Data.Array.Accelerate.Debug.Flags.Mode
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  base-4.9.1.0:Control.Arrow 70754b538e7d75521cd68162917b6946
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:Foreign.C b8d6c8cd5e89ba05da67379943abaffb
import  -/  base-4.9.1.0:Foreign.Marshal 579ac8972d0a4fda781ca1fbdb25505c
import  -/  base-4.9.1.0:Foreign.Ptr 436587875917047a95f3be0fc1891fc4
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Foreign de3d96134515831e87168a99ec5c2e52
import  -/  base-4.9.1.0:GHC.IO.Encoding 769a34cfd2ddd67e5ee95d457338990e
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.Environment 08cb808e8e6a7821e6f8cfa76a977431
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label e5964c9ce00d5161debc75a9bffb2e5a
import  -/  fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Derive a1ed0bdd1f132cc946e007c28e792e0b
import  -/  fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Mono 2dbcd97b552dbc8a721b271958d4507e
import  -/  fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point 70a2109ae2a79ff5372a0122b66e2506
import  -/  fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Poly 959bbcc2db1f1faa59a9f8ccac55ca4b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint abe8aeb00d775221281f89090d9fbe2a
addDependentFile "/home/pwoh/.stack/programs/x86_64-linux-dkd1ce2ff9c9560b648268df668d177711/ghc-8.0.2/lib/ghc-8.0.2/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux-dkd1ce2ff9c9560b648268df668d177711/Cabal-1.24.2.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
8ae2c1bf85c0900ed8a2da1e5f2f622b
  $fDebugFlagBool ::
    Data.Array.Accelerate.Debug.Flags.DebugFlag GHC.Types.Bool
  DFunId
  {- HasNoCafRefs, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GHC.Types.False
                  `cast`
                (Sym (Data.Array.Accelerate.Debug.Flags.N:DebugFlag[0]
                          <GHC.Types.Bool>_N)) -}
8ae2c1bf85c0900ed8a2da1e5f2f622b
  $fDebugFlagMaybe ::
    Data.Array.Accelerate.Debug.Flags.DebugFlag (GHC.Base.Maybe a)
  DFunId
  {- HasNoCafRefs, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                GHC.Base.Nothing
                  `cast`
                (forall (a :: <*>_N).
                 Sym (Data.Array.Accelerate.Debug.Flags.N:DebugFlag[0]
                          <GHC.Base.Maybe a>_N)) -}
1a85031ddd8d41e61ad6009ec5145f8e
  $tc'C:DebugFlag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5492453155399758778##
                   2640089457112037904##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tc'C:DebugFlag1) -}
4e47a1acbb4df8177154682d7d222917
  $tc'C:DebugFlag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:DebugFlag"#) -}
51707914d9943a4ef2bbfaa18193a8ab
  $tc'Flags :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18305393245202054182##
                   878351987639251738##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tc'Flags1) -}
0d7d041965ab9326cdc1454e1bce2875
  $tc'Flags1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Flags"#) -}
430afcecba00c2d3a529aa79f9f68154
  $tc'IntArg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11176359070865461333##
                   9579211758866364318##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tc'IntArg1) -}
3e4946c6c6c8398f2774789b464a2a18
  $tc'IntArg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntArg"#) -}
7a388dface21d39bf412eb3455af08dd
  $tc'NoArg :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10761083977210492031##
                   14049578067797354251##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tc'NoArg1) -}
86e1dd5acbf255dbfad6748a0952d7b6
  $tc'NoArg1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NoArg"#) -}
f73a5cab529fb9474eca6d8968d7553f
  $tc'Option :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1453051127300277220##
                   1995306033842893467##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tc'Option1) -}
8f478ab20050a7a5b1bd25360bf979f2
  $tc'Option1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Option"#) -}
c0c523427045139bc7b8e0fba107b24e
  $tcDebugFlag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10228695239949172061##
                   10354783276542602762##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tcDebugFlag1) -}
14b3361770fabf1721b243026b906e2f
  $tcDebugFlag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "DebugFlag"#) -}
ff9ef1cc6215ccb79e67792bdac71974
  $tcFlagSpec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8078329400672333108##
                   14310732965494233841##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tcFlagSpec1) -}
3b2919ce02c7502da681c4c507bb57ed
  $tcFlagSpec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FlagSpec"#) -}
e5b686444660c856427d11d5a885777f
  $tcFlags :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13501884397588113586##
                   17074125924425350886##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tcFlags1) -}
ceea6306d1d954403d9f76b7861a2c0c
  $tcFlags1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Flags"#) -}
a0f5762fe92a6b3ea42daf167afec7b2
  $tcOptKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9660608916473086568##
                   2075801403690399415##
                   Data.Array.Accelerate.Debug.Flags.$trModule
                   Data.Array.Accelerate.Debug.Flags.$tcOptKind1) -}
992d8a9bc5e31389478651694e026b94
  $tcOptKind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "OptKind"#) -}
27f07f5f891de895d6fdde8117d4913b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Debug.Flags.$trModule2
                   Data.Array.Accelerate.Debug.Flags.$trModule1) -}
bab44fb23fe8dd708981883ad9d1a5df
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Debug.Flags"#) -}
bff641c00c8075d645d108df7a1f3ff6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
43063853f36757b5b1a9c4ee0346edf8
  $wunless :: Control.Monad.IO.Class.MonadIO m => m () -> m ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),U(1*U,1*C1(U))><L,U>,
     Inline: INLINABLE[0],
     Unfolding: <stable> (\ @ (m :: * -> *)
                            (w :: Control.Monad.IO.Class.MonadIO m)
                            (w1 :: m ()) ->
                          let {
                            $dMonad :: GHC.Base.Monad m
                            = Control.Monad.IO.Class.$p1MonadIO @ m w
                          } in
                          let {
                            $dApplicative :: GHC.Base.Applicative m
                            = GHC.Base.$p1Monad @ m $dMonad
                          } in
                          GHC.Base.>>=
                            @ m
                            $dMonad
                            @ GHC.Types.Bool
                            @ ()
                            (Control.Monad.IO.Class.liftIO
                               @ m
                               w
                               @ GHC.Types.Bool
                               (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                (# eta, GHC.Types.False #))
                                 `cast`
                               (Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)))
                            (\ (yes :: GHC.Types.Bool) ->
                             Control.Monad.unless @ m $dApplicative yes w1)) -}
3ef4eed324f97595a05904a36cf1ca71
  $wwhen :: Control.Monad.IO.Class.MonadIO m => m () -> m ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SL),U(1*U,1*C1(U))><L,U>,
     Inline: INLINABLE[0],
     Unfolding: <stable> (\ @ (m :: * -> *)
                            (w :: Control.Monad.IO.Class.MonadIO m)
                            (w1 :: m ()) ->
                          let {
                            $dMonad :: GHC.Base.Monad m
                            = Control.Monad.IO.Class.$p1MonadIO @ m w
                          } in
                          let {
                            $dApplicative :: GHC.Base.Applicative m
                            = GHC.Base.$p1Monad @ m $dMonad
                          } in
                          GHC.Base.>>=
                            @ m
                            $dMonad
                            @ GHC.Types.Bool
                            @ ()
                            (Control.Monad.IO.Class.liftIO
                               @ m
                               w
                               @ GHC.Types.Bool
                               (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                (# eta, GHC.Types.False #))
                                 `cast`
                               (Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)))
                            (\ (yes :: GHC.Types.Bool) ->
                             GHC.Base.when @ m $dApplicative yes w1)) -}
8ae2c1bf85c0900ed8a2da1e5f2f622b
  class DebugFlag a where
    def :: a
    {-# MINIMAL def #-}
730a743c0225f4f1a68568a4e145ecf0
  data FlagSpec flag = Option GHC.Base.String flag
711239a36849d22f019b79bd00d7bb37
  data Flags
    = Flags {_acc_sharing :: !GHC.Base.Maybe GHC.Types.Bool,
             _exp_sharing :: !GHC.Base.Maybe GHC.Types.Bool,
             _fusion :: !GHC.Base.Maybe GHC.Types.Bool,
             _simplify :: !GHC.Base.Maybe GHC.Types.Bool,
             _unfolding_use_threshold :: !GHC.Base.Maybe GHC.Types.Int,
             _flush_cache :: !GHC.Base.Maybe GHC.Types.Bool,
             _force_recomp :: !GHC.Base.Maybe GHC.Types.Bool,
             _fast_math :: !GHC.Base.Maybe GHC.Types.Bool,
             _verbose :: !GHC.Types.Bool,
             _dump_phases :: !GHC.Types.Bool,
             _dump_sharing :: !GHC.Types.Bool,
             _dump_simpl_stats :: !GHC.Types.Bool,
             _dump_simpl_iterations :: !GHC.Types.Bool,
             _dump_vectorisation :: !GHC.Types.Bool,
             _dump_dot :: !GHC.Types.Bool,
             _dump_simpl_dot :: !GHC.Types.Bool,
             _dump_gc :: !GHC.Types.Bool,
             _dump_gc_stats :: !GHC.Types.Bool,
             _debug_cc :: !GHC.Types.Bool,
             _dump_cc :: !GHC.Types.Bool,
             _dump_ld :: !GHC.Types.Bool,
             _dump_asm :: !GHC.Types.Bool,
             _dump_exec :: !GHC.Types.Bool,
             _dump_sched :: !GHC.Types.Bool}
052ee85d5a9c7af53ad05aa09470b380
  type Mode =
    Data.Array.Accelerate.Debug.Flags.Flags
    Data.Label.Mono.:-> GHC.Types.Bool
9ba31e3045f5c4afb1466a379482ebc7
  data OptKind f = NoArg f | IntArg (GHC.Types.Int -> f)
731d1f743dccdad45b60d091dfa96ae5
  _acc_sharing ::
    Data.Array.Accelerate.Debug.Flags.Flags
    -> GHC.Base.Maybe GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLLLLLLLL),1*U(U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds1 }) -}
e3fabebba389b62cf3ea77ff32eb367e
  _debug_cc ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds19 }) -}
f3bb3dc998a78c184e18a67ab4ff0f91
  _dump_asm ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds22 }) -}
1bb59a9f24f8e4304dc1a6fe3bf5b76b
  _dump_cc ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds20 }) -}
3b51e818bbc826ec12a9e27d09f32167
  _dump_dot ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds15 }) -}
42b7450bf08f1775e422e27d25cbfeef
  _dump_exec ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds23 }) -}
e6f51dc4596ec559ca0c1b284a241a63
  _dump_gc ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds17 }) -}
4e96bd0131a8fff683b195f2784a4364
  _dump_gc_stats ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds18 }) -}
8dd2f131a27aa0748743b16a75128bef
  _dump_ld ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds21 }) -}
f14fddae216110b3d1c7419278e937fd
  _dump_phases ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds10 }) -}
6020ccf339bae371d917b52a82db6059
  _dump_sched ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds24 }) -}
1db1a7f09a5986fbe2d4b2806a3d9e7c
  _dump_sharing ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds11 }) -}
0d95f1d6f333961712f3bcb3270aefe3
  _dump_simpl_dot ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds16 }) -}
66ba03401da86f55b69d647bc815cd4a
  _dump_simpl_iterations ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds13 }) -}
65c3e1823c977041074396a6b4427130
  _dump_simpl_stats ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds12 }) -}
fe144d061e4f8a00be69f99a32d526e1
  _dump_vectorisation ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds14 }) -}
ed1de45b12bfc1bbe7d1c66e1f9403e3
  _exp_sharing ::
    Data.Array.Accelerate.Debug.Flags.Flags
    -> GHC.Base.Maybe GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLLLLLLLL),1*U(A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds2 }) -}
d6c25f4fc4b68d618c2e66d8b1b776e1
  _fast_math ::
    Data.Array.Accelerate.Debug.Flags.Flags
    -> GHC.Base.Maybe GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds8 }) -}
fb961464d4e8cb79cdb60966d4eb3ac3
  _flush_cache ::
    Data.Array.Accelerate.Debug.Flags.Flags
    -> GHC.Base.Maybe GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds6 }) -}
b647b60a300dab3adb26ceca89a6c764
  _force_recomp ::
    Data.Array.Accelerate.Debug.Flags.Flags
    -> GHC.Base.Maybe GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds7 }) -}
79e92664d5c0d114da2c95df47d41c0b
  _fusion ::
    Data.Array.Accelerate.Debug.Flags.Flags
    -> GHC.Base.Maybe GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLLL),1*U(A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds3 }) -}
7f53aacdfdf1a931917ca979680dec2e
  _simplify ::
    Data.Array.Accelerate.Debug.Flags.Flags
    -> GHC.Base.Maybe GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds4 }) -}
44fdacd25761ef6f90f46363427b226c
  _unfolding_use_threshold ::
    Data.Array.Accelerate.Debug.Flags.Flags
    -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds5 }) -}
abe2dccd56b8875bfacc0efc95389a78
  _verbose ::
    Data.Array.Accelerate.Debug.Flags.Flags -> GHC.Types.Bool
  RecSel Left Data.Array.Accelerate.Debug.Flags.Flags
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                 case ds of wild { Data.Array.Accelerate.Debug.Flags.Flags ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ->
                 ds9 }) -}
2e86b8595401097951fe09ae6650226a
  accInit :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Debug.Flags.accInit1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
d807e3751ee6e80c0a392e1c62b5e0a0
  accInit1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs1 s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.List.$wspan
                        @ [GHC.Types.Char]
                        Data.Array.Accelerate.Debug.Flags.accInit7
                        ipv1 of ww { (#,#) ww1 ww2 ->
                 case GHC.List.$wspan
                        @ [GHC.Types.Char]
                        Data.Array.Accelerate.Debug.Flags.accInit5
                        (GHC.List.dropWhile
                           @ [GHC.Types.Char]
                           Data.Array.Accelerate.Debug.Flags.accInit3
                           ww2) of ww4 { (#,#) ww5 ww6 ->
                 case ww5 of wild {
                   [] -> (# ipv, GHC.Tuple.() #)
                   : ds2 ds3
                   -> case Data.Array.Accelerate.Debug.Flags.accInit2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {} } } } }) -}
c45a6185c898e7ec2298c770df3aec0f
  accInit2 :: GHC.Types.IO ()
  {- Strictness: x -}
1c898e7f510b08274813f2c728d6e756
  accInit3 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 GHC.Base.eqString ds Data.Array.Accelerate.Debug.Flags.accInit4) -}
1ed6e5660f973f2fc578549df0fb29a9
  accInit4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "+ACC"#) -}
936646d7625518c17f4e9f1d2e523577
  accInit5 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 GHC.Classes.$fEq[]_$s$c/=1
                   ds
                   Data.Array.Accelerate.Debug.Flags.accInit6) -}
d6bcab1f300bed1506d13ddd919fd958
  accInit6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-ACC"#) -}
5efee68195158ea2f9aabc9b6e59cf52
  accInit7 :: [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (\ (ds :: [GHC.Types.Char]) ->
                 GHC.Classes.$fEq[]_$s$c/=1
                   ds
                   Data.Array.Accelerate.Debug.Flags.accInit4) -}
99859a7abb7da6910e8b905623bb4435
  acc_sharing ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat
      Data.Array.Accelerate.Debug.Flags.Flags
      (GHC.Base.Maybe GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Base.Maybe GHC.Types.Bool -> GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Base.Maybe GHC.Types.Bool
                       -> GHC.Base.Maybe GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (GHC.Base.Maybe GHC.Types.Bool)
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags a ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          a }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Base.Maybe GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                   GHC.Types.Bool),
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Base.Maybe GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags ds1 b c d e g h i j k l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               dt
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                       GHC.Types.Bool),
                                GHC.Base.Maybe GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                      GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  GHC.Base.Maybe GHC.Types.Bool)
                               @ (GHC.Base.Maybe GHC.Types.Bool)
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ (GHC.Base.Maybe GHC.Types.Bool)
                                  @ (GHC.Base.Maybe GHC.Types.Bool)))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  (Data.Array.Accelerate.Debug.Flags.Flags,
                                   GHC.Base.Maybe GHC.Types.Bool))
                               @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                          GHC.Types.Bool),
                                   GHC.Base.Maybe GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool),
                                     (Data.Array.Accelerate.Debug.Flags.Flags,
                                      GHC.Base.Maybe GHC.Types.Bool))
                                  @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                             GHC.Types.Bool),
                                      GHC.Base.Maybe GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                                    GHC.Types.Bool),
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Base.Maybe GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags,
                                     GHC.Base.Maybe GHC.Types.Bool)
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool))
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ (GHC.Base.Maybe GHC.Types.Bool)
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ (GHC.Base.Maybe GHC.Types.Bool)
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags a ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         a }))))))))) -}
733fa9a31a475c9545cd3b8bb057997a
  clearFlag ::
    Data.Array.Accelerate.Debug.Flags.Mode -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Debug.Flags.clearFlag1
                  `cast`
                (<Data.Array.Accelerate.Debug.Flags.Mode>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a7546f7a3dba45c2f36c20ad0f157341
  clearFlag1 ::
    Data.Array.Accelerate.Debug.Flags.Mode
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (f :: Data.Array.Accelerate.Debug.Flags.Mode)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta, GHC.Tuple.() #)) -}
85082ffa55565e0eb324d47b59226d79
  clearFlags ::
    [Data.Array.Accelerate.Debug.Flags.Mode] -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Debug.Flags.clearFlags1
                  `cast`
                (<[Data.Array.Accelerate.Debug.Flags.Mode]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f46e27d19d2d0e5cfbad8e24d3f4a627
  clearFlags1 ::
    [Data.Array.Accelerate.Debug.Flags.Mode]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: [Data.Array.Accelerate.Debug.Flags.Mode])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Data.Array.Accelerate.Debug.Flags.clearFlags2 eta) -}
acd42e6780250f2715864618735405ff
  clearFlags2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# s, GHC.Tuple.() #)) -}
aeaa22c571193e4047dee3eb063fc67b
  debug_cc ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 t ds18 ds19 ds20 ds21 ds22 ->
                          t }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p q r s ds1 u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               dt
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 t ds18 ds19 ds20 ds21 ds22 ->
                                         t }))))))))) -}
a172cee1e8086135d32aa26bcf58f39d
  dump_asm ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 w ds21 ds22 ->
                          w }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p q r s t u w ds1 y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               dt
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 w ds21 ds22 ->
                                         w }))))))))) -}
89900eb9343453b823a0d26899c47f64
  dump_cc ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 u ds19 ds20 ds21 ds22 ->
                          u }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p q r s t ds1 w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               dt
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 u ds19 ds20 ds21 ds22 ->
                                         u }))))))))) -}
43ead70237c4032eea59463d1dd72a73
  dump_dot ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 p ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          p }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o ds1 q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               dt
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 p ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         p }))))))))) -}
30910f92ac4d3afc7cbee41c295b5375
  dump_exec ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 x ds22 ->
                          x }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p q r s t u w x ds1 z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               dt
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 x ds22 ->
                                         x }))))))))) -}
3f516b9cb45832ff1a83110fbafce5b1
  dump_gc ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 r ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          r }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p q ds1 s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               dt
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 r ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         r }))))))))) -}
a030fcf8714c5c1297ba1aa56735692a
  dump_gc_stats ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 s ds17 ds18 ds19 ds20 ds21 ds22 ->
                          s }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p q r ds1 t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               dt
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 s ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         s }))))))))) -}
27758297c13c6591d1d7794ddf807716
  dump_ld ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 v ds20 ds21 ds22 ->
                          v }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p q r s t u ds1 x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               dt
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 v ds20 ds21 ds22 ->
                                         v }))))))))) -}
7ffd7fde09051fc1b7a0f99fadd3f5c0
  dump_phases ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 k ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          k }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j ds1 l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               dt
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 k ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         k }))))))))) -}
cf2dba8bd333f04de0954a5b980832d0
  dump_sched ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 y ->
                          y }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p q r s t u w x y ds1 ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               dt } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 y ->
                                         y }))))))))) -}
1291b0f6700854988412e579294cf88a
  dump_sharing ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 l ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          l }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k ds1 m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               dt
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 l ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         l }))))))))) -}
adda54f924ff88ccb10d8139f90a2c80
  dump_simpl_dot ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 q ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          q }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n o p ds1 r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               dt
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 q ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         q }))))))))) -}
9d09de26bd117021a6eb95974106e65a
  dump_simpl_iterations ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 n ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          n }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m ds1 o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               dt
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 n ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         n }))))))))) -}
6cd8f3cc2f67f60008baadb1cd8268fa
  dump_simpl_stats ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 m ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          m }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l ds1 n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               dt
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 m ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         m }))))))))) -}
c7a5e5c6bf0b97aab7c4ff24ca930615
  dump_vectorisation ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 o ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          o }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i j k l m n ds1 p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               dt
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 o ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         o }))))))))) -}
bb6b30ecde61fcdbde2316d1e0ab97da
  exp_sharing ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat
      Data.Array.Accelerate.Debug.Flags.Flags
      (GHC.Base.Maybe GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Base.Maybe GHC.Types.Bool -> GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Base.Maybe GHC.Types.Bool
                       -> GHC.Base.Maybe GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (GHC.Base.Maybe GHC.Types.Bool)
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds b ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          b }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Base.Maybe GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                   GHC.Types.Bool),
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Base.Maybe GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a ds1 c d e g h i j k l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               dt
                               c
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                       GHC.Types.Bool),
                                GHC.Base.Maybe GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                      GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  GHC.Base.Maybe GHC.Types.Bool)
                               @ (GHC.Base.Maybe GHC.Types.Bool)
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ (GHC.Base.Maybe GHC.Types.Bool)
                                  @ (GHC.Base.Maybe GHC.Types.Bool)))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  (Data.Array.Accelerate.Debug.Flags.Flags,
                                   GHC.Base.Maybe GHC.Types.Bool))
                               @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                          GHC.Types.Bool),
                                   GHC.Base.Maybe GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool),
                                     (Data.Array.Accelerate.Debug.Flags.Flags,
                                      GHC.Base.Maybe GHC.Types.Bool))
                                  @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                             GHC.Types.Bool),
                                      GHC.Base.Maybe GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                                    GHC.Types.Bool),
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Base.Maybe GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags,
                                     GHC.Base.Maybe GHC.Types.Bool)
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool))
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ (GHC.Base.Maybe GHC.Types.Bool)
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ (GHC.Base.Maybe GHC.Types.Bool)
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds b ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         b }))))))))) -}
4c872d48ddc37429867f7d8347d16ec5
  fast_math ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat
      Data.Array.Accelerate.Debug.Flags.Flags
      (GHC.Base.Maybe GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Base.Maybe GHC.Types.Bool -> GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Base.Maybe GHC.Types.Bool
                       -> GHC.Base.Maybe GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (GHC.Base.Maybe GHC.Types.Bool)
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 i ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          i }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Base.Maybe GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                   GHC.Types.Bool),
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Base.Maybe GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h ds1 j k l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               dt
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                       GHC.Types.Bool),
                                GHC.Base.Maybe GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                      GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  GHC.Base.Maybe GHC.Types.Bool)
                               @ (GHC.Base.Maybe GHC.Types.Bool)
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ (GHC.Base.Maybe GHC.Types.Bool)
                                  @ (GHC.Base.Maybe GHC.Types.Bool)))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  (Data.Array.Accelerate.Debug.Flags.Flags,
                                   GHC.Base.Maybe GHC.Types.Bool))
                               @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                          GHC.Types.Bool),
                                   GHC.Base.Maybe GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool),
                                     (Data.Array.Accelerate.Debug.Flags.Flags,
                                      GHC.Base.Maybe GHC.Types.Bool))
                                  @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                             GHC.Types.Bool),
                                      GHC.Base.Maybe GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                                    GHC.Types.Bool),
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Base.Maybe GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags,
                                     GHC.Base.Maybe GHC.Types.Bool)
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool))
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ (GHC.Base.Maybe GHC.Types.Bool)
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ (GHC.Base.Maybe GHC.Types.Bool)
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 i ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         i }))))))))) -}
46e85ac340fde2dbb8aeeb4ba29ac095
  flush_cache ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat
      Data.Array.Accelerate.Debug.Flags.Flags
      (GHC.Base.Maybe GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Base.Maybe GHC.Types.Bool -> GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Base.Maybe GHC.Types.Bool
                       -> GHC.Base.Maybe GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (GHC.Base.Maybe GHC.Types.Bool)
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 g ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          g }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Base.Maybe GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                   GHC.Types.Bool),
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Base.Maybe GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e ds1 h i j k l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               dt
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                       GHC.Types.Bool),
                                GHC.Base.Maybe GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                      GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  GHC.Base.Maybe GHC.Types.Bool)
                               @ (GHC.Base.Maybe GHC.Types.Bool)
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ (GHC.Base.Maybe GHC.Types.Bool)
                                  @ (GHC.Base.Maybe GHC.Types.Bool)))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  (Data.Array.Accelerate.Debug.Flags.Flags,
                                   GHC.Base.Maybe GHC.Types.Bool))
                               @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                          GHC.Types.Bool),
                                   GHC.Base.Maybe GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool),
                                     (Data.Array.Accelerate.Debug.Flags.Flags,
                                      GHC.Base.Maybe GHC.Types.Bool))
                                  @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                             GHC.Types.Bool),
                                      GHC.Base.Maybe GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                                    GHC.Types.Bool),
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Base.Maybe GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags,
                                     GHC.Base.Maybe GHC.Types.Bool)
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool))
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ (GHC.Base.Maybe GHC.Types.Bool)
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ (GHC.Base.Maybe GHC.Types.Bool)
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 g ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         g }))))))))) -}
84d67a2794ded9310be4868a04195e03
  force_recomp ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat
      Data.Array.Accelerate.Debug.Flags.Flags
      (GHC.Base.Maybe GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Base.Maybe GHC.Types.Bool -> GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Base.Maybe GHC.Types.Bool
                       -> GHC.Base.Maybe GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (GHC.Base.Maybe GHC.Types.Bool)
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 h ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          h }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Base.Maybe GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                   GHC.Types.Bool),
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Base.Maybe GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g ds1 i j k l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               dt
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                       GHC.Types.Bool),
                                GHC.Base.Maybe GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                      GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  GHC.Base.Maybe GHC.Types.Bool)
                               @ (GHC.Base.Maybe GHC.Types.Bool)
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ (GHC.Base.Maybe GHC.Types.Bool)
                                  @ (GHC.Base.Maybe GHC.Types.Bool)))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  (Data.Array.Accelerate.Debug.Flags.Flags,
                                   GHC.Base.Maybe GHC.Types.Bool))
                               @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                          GHC.Types.Bool),
                                   GHC.Base.Maybe GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool),
                                     (Data.Array.Accelerate.Debug.Flags.Flags,
                                      GHC.Base.Maybe GHC.Types.Bool))
                                  @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                             GHC.Types.Bool),
                                      GHC.Base.Maybe GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                                    GHC.Types.Bool),
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Base.Maybe GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags,
                                     GHC.Base.Maybe GHC.Types.Bool)
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool))
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ (GHC.Base.Maybe GHC.Types.Bool)
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ (GHC.Base.Maybe GHC.Types.Bool)
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 h ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         h }))))))))) -}
eba47da6358fb76986b6ddb1772e3a1b
  fusion ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat
      Data.Array.Accelerate.Debug.Flags.Flags
      (GHC.Base.Maybe GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Base.Maybe GHC.Types.Bool -> GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Base.Maybe GHC.Types.Bool
                       -> GHC.Base.Maybe GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (GHC.Base.Maybe GHC.Types.Bool)
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 c ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          c }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Base.Maybe GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                   GHC.Types.Bool),
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Base.Maybe GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b ds1 d e g h i j k l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               dt
                               d
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                       GHC.Types.Bool),
                                GHC.Base.Maybe GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                      GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  GHC.Base.Maybe GHC.Types.Bool)
                               @ (GHC.Base.Maybe GHC.Types.Bool)
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ (GHC.Base.Maybe GHC.Types.Bool)
                                  @ (GHC.Base.Maybe GHC.Types.Bool)))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  (Data.Array.Accelerate.Debug.Flags.Flags,
                                   GHC.Base.Maybe GHC.Types.Bool))
                               @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                          GHC.Types.Bool),
                                   GHC.Base.Maybe GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool),
                                     (Data.Array.Accelerate.Debug.Flags.Flags,
                                      GHC.Base.Maybe GHC.Types.Bool))
                                  @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                             GHC.Types.Bool),
                                      GHC.Base.Maybe GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                                    GHC.Types.Bool),
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Base.Maybe GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags,
                                     GHC.Base.Maybe GHC.Types.Bool)
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool))
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ (GHC.Base.Maybe GHC.Types.Bool)
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ (GHC.Base.Maybe GHC.Types.Bool)
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 c ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         c }))))))))) -}
8cc54d511007404f8d761ca5b422f559
  queryFlag ::
    Data.Array.Accelerate.Debug.Flags.DebugFlag a =>
    (Data.Array.Accelerate.Debug.Flags.Flags Data.Label.Mono.:-> a)
    -> GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (2, False, True)
                (\ @ a
                   ($dDebugFlag :: Data.Array.Accelerate.Debug.Flags.DebugFlag a)
                   (ds :: Data.Array.Accelerate.Debug.Flags.Flags
                          Data.Label.Mono.:-> a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ a
                    $dDebugFlag
                      `cast`
                    (Data.Array.Accelerate.Debug.Flags.N:DebugFlag[0] <a>_N))
                   `cast`
                 (GHC.Types.N:IO[0] <a>_R)
                   eta)
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Debug.Flags.DebugFlag a>_R
                 ->_R <Data.Array.Accelerate.Debug.Flags.Flags
                       Data.Label.Mono.:-> a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <a>_R)) -}
a0bf1550978db0e30ab523fdfc709ab5
  setFlag ::
    Data.Array.Accelerate.Debug.Flags.Mode -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Debug.Flags.clearFlag1
                  `cast`
                (<Data.Array.Accelerate.Debug.Flags.Mode>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
52de848bc89bf93eb97a2f7fde17bd85
  setFlag' ::
    (Data.Array.Accelerate.Debug.Flags.Flags Data.Label.Mono.:-> a)
    -> a -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Debug.Flags.setFlag'1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Debug.Flags.Flags Data.Label.Mono.:-> a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
72c3eaeee596df2bf32dca056c5a597e
  setFlag'1 ::
    (Data.Array.Accelerate.Debug.Flags.Flags Data.Label.Mono.:-> a)
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (ds :: Data.Array.Accelerate.Debug.Flags.Flags
                          Data.Label.Mono.:-> a)
                   (ds1 :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Data.Array.Accelerate.Debug.Flags.clearFlags2 eta) -}
a8dddc8c2d89b36edd8ad680bbe0ad1b
  setFlags ::
    [Data.Array.Accelerate.Debug.Flags.Mode] -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Debug.Flags.clearFlags1
                  `cast`
                (<[Data.Array.Accelerate.Debug.Flags.Mode]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0a17657735d6655ebef5a9e87730c364
  simplify ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat
      Data.Array.Accelerate.Debug.Flags.Flags
      (GHC.Base.Maybe GHC.Types.Bool)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Base.Maybe GHC.Types.Bool -> GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ (GHC.Base.Maybe GHC.Types.Bool)
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Base.Maybe GHC.Types.Bool
                       -> GHC.Base.Maybe GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ (GHC.Base.Maybe GHC.Types.Bool)
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (GHC.Base.Maybe GHC.Types.Bool)
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 d ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          d }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Base.Maybe GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                   GHC.Types.Bool),
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Base.Maybe GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c ds1 e g h i j k l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               dt
                               e
                               g
                               h
                               i
                               j
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                       GHC.Types.Bool),
                                GHC.Base.Maybe GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Base.Maybe GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                      GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  GHC.Base.Maybe GHC.Types.Bool)
                               @ (GHC.Base.Maybe GHC.Types.Bool)
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ (GHC.Base.Maybe GHC.Types.Bool)
                                  @ (GHC.Base.Maybe GHC.Types.Bool)))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  (Data.Array.Accelerate.Debug.Flags.Flags,
                                   GHC.Base.Maybe GHC.Types.Bool))
                               @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                          GHC.Types.Bool),
                                   GHC.Base.Maybe GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                         GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool),
                                     (Data.Array.Accelerate.Debug.Flags.Flags,
                                      GHC.Base.Maybe GHC.Types.Bool))
                                  @ ((cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                             GHC.Types.Bool),
                                      GHC.Base.Maybe GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                                    GHC.Types.Bool),
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Base.Maybe GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags,
                                     GHC.Base.Maybe GHC.Types.Bool)
                                  @ (cat (GHC.Base.Maybe GHC.Types.Bool) (GHC.Base.Maybe
                                                                            GHC.Types.Bool))
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ (GHC.Base.Maybe GHC.Types.Bool)
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ (GHC.Base.Maybe GHC.Types.Bool)
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 d ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         d }))))))))) -}
2c7335eabdcd33180bc5e925c10be467
  unless ::
    Control.Monad.IO.Class.MonadIO m =>
    Data.Array.Accelerate.Debug.Flags.Mode -> m () -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SL),U(1*U,1*C1(U))><L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.IO.Class.MonadIO m)
                   (w1 :: Data.Array.Accelerate.Debug.Flags.Mode)
                   (w2 :: m ()) ->
                 Data.Array.Accelerate.Debug.Flags.$wunless @ m w w2) -}
194a7d2f964d7f75a10c6699a53589f8
  verbose ::
    Control.Arrow.ArrowApply cat =>
    Data.Label.Mono.Lens
      cat Data.Array.Accelerate.Debug.Flags.Flags GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U,1*U)>,
     Inline: INLINE[0] (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ (cat :: * -> * -> *)
                   ($dArrowApply :: Control.Arrow.ArrowApply cat) ->
                 let {
                   $dArrow :: Control.Arrow.Arrow cat
                   = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                 } in
                 Data.Label.Poly.Lens
                   @ cat
                   @ (Data.Array.Accelerate.Debug.Flags.Flags
                      -> Data.Array.Accelerate.Debug.Flags.Flags)
                   @ (GHC.Types.Bool -> GHC.Types.Bool)
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @ Data.Array.Accelerate.Debug.Flags.Flags
                   @ GHC.Types.Bool
                   @~ <Data.Array.Accelerate.Debug.Flags.Flags
                       -> Data.Array.Accelerate.Debug.Flags.Flags>_N
                   @~ <GHC.Types.Bool -> GHC.Types.Bool>_N
                   (Data.Label.Point.Point
                      @ cat
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      @ Data.Array.Accelerate.Debug.Flags.Flags
                      @ GHC.Types.Bool
                      (Control.Arrow.arr
                         @ cat
                         $dArrow
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ GHC.Types.Bool
                         (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                          case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 j ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                          j }))
                      (let {
                         $dArrow1 :: Control.Arrow.Arrow cat
                         = Control.Arrow.$p1ArrowApply @ cat $dArrowApply
                       } in
                       let {
                         $dCategory :: Control.Category.Category cat
                         = Control.Arrow.$p1Arrow @ cat $dArrow1
                       } in
                       Control.Category..
                         @ *
                         @ cat
                         $dCategory
                         @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                         @ Data.Array.Accelerate.Debug.Flags.Flags
                         @ (cat GHC.Types.Bool GHC.Types.Bool,
                            Data.Array.Accelerate.Debug.Flags.Flags)
                         (Control.Arrow.arr
                            @ cat
                            $dArrow
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ Data.Array.Accelerate.Debug.Flags.Flags
                            (\ (ds :: (GHC.Types.Bool,
                                       Data.Array.Accelerate.Debug.Flags.Flags)) ->
                             case ds of wild { (,) v f ->
                             case f of wild1 { Data.Array.Accelerate.Debug.Flags.Flags a b c d e g h i ds1 k l m n o p q r s t u w x y z ->
                             case v of dt { DEFAULT ->
                             Data.Array.Accelerate.Debug.Flags.Flags
                               a
                               b
                               c
                               d
                               e
                               g
                               h
                               i
                               dt
                               k
                               l
                               m
                               n
                               o
                               p
                               q
                               r
                               s
                               t
                               u
                               w
                               x
                               y
                               z } } }))
                         (Control.Category..
                            @ *
                            @ cat
                            $dCategory
                            @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (GHC.Types.Bool, Data.Array.Accelerate.Debug.Flags.Flags)
                            @ (cat GHC.Types.Bool GHC.Types.Bool,
                               Data.Array.Accelerate.Debug.Flags.Flags)
                            (Control.Arrow.first
                               @ cat
                               $dArrow1
                               @ (cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool)
                               @ GHC.Types.Bool
                               @ Data.Array.Accelerate.Debug.Flags.Flags
                               (Control.Arrow.app
                                  @ cat
                                  $dArrowApply
                                  @ GHC.Types.Bool
                                  @ GHC.Types.Bool))
                            (Control.Category..
                               @ *
                               @ cat
                               $dCategory
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                               @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               @ (cat GHC.Types.Bool GHC.Types.Bool,
                                  Data.Array.Accelerate.Debug.Flags.Flags)
                               (Control.Arrow.arr
                                  @ cat
                                  $dArrow1
                                  @ (cat GHC.Types.Bool GHC.Types.Bool,
                                     (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool))
                                  @ ((cat GHC.Types.Bool GHC.Types.Bool, GHC.Types.Bool),
                                     Data.Array.Accelerate.Debug.Flags.Flags)
                                  (\ (ds :: (cat GHC.Types.Bool GHC.Types.Bool,
                                             (Data.Array.Accelerate.Debug.Flags.Flags,
                                              GHC.Types.Bool))) ->
                                   case ds of wild { (,) n2 ds1 ->
                                   case ds1 of wild1 { (,) f2 o1 -> ((n2, o1), f2) } }))
                               (Control.Arrow.second
                                  @ cat
                                  $dArrow1
                                  @ Data.Array.Accelerate.Debug.Flags.Flags
                                  @ (Data.Array.Accelerate.Debug.Flags.Flags, GHC.Types.Bool)
                                  @ (cat GHC.Types.Bool GHC.Types.Bool)
                                  (Control.Arrow.&&&
                                     @ cat
                                     $dArrow1
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ Data.Array.Accelerate.Debug.Flags.Flags
                                     @ GHC.Types.Bool
                                     (Control.Category.id
                                        @ *
                                        @ cat
                                        $dCategory
                                        @ Data.Array.Accelerate.Debug.Flags.Flags)
                                     (Control.Arrow.arr
                                        @ cat
                                        $dArrow
                                        @ Data.Array.Accelerate.Debug.Flags.Flags
                                        @ GHC.Types.Bool
                                        (\ (f :: Data.Array.Accelerate.Debug.Flags.Flags) ->
                                         case f of wild { Data.Array.Accelerate.Debug.Flags.Flags ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 j ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                                         j }))))))))) -}
9fdd8c1574ce54f5f367255fbeed1288
  when ::
    Control.Monad.IO.Class.MonadIO m =>
    Data.Array.Accelerate.Debug.Flags.Mode -> m () -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SL),U(1*U,1*C1(U))><L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ (m :: * -> *)
                   (w :: Control.Monad.IO.Class.MonadIO m)
                   (w1 :: Data.Array.Accelerate.Debug.Flags.Mode)
                   (w2 :: m ()) ->
                 Data.Array.Accelerate.Debug.Flags.$wwhen @ m w w2) -}
instance Data.Array.Accelerate.Debug.Flags.DebugFlag [GHC.Types.Bool]
  = Data.Array.Accelerate.Debug.Flags.$fDebugFlagBool
instance Data.Array.Accelerate.Debug.Flags.DebugFlag [GHC.Base.Maybe]
  = Data.Array.Accelerate.Debug.Flags.$fDebugFlagMaybe
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

