
==================== FINAL INTERFACE ====================
2017-08-29 05:26:52.732514 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type [family instance module] 8002
  interface hash: d8f92df3ce02b93603400e0cf4823244
  ABI hash: a1c7885f4a79193eaa1f192a9acbec78
  export-list hash: 7aad7ca015788892b1349ebab929b71f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 96485d7c38133e29733bd68a83860e28
  sig of: Nothing
  used TH splices: True
  where
exports:
  Data.Array.Accelerate.Type.floatingDict
  Data.Array.Accelerate.Type.integralDict
  Data.Array.Accelerate.Type.nonNumDict
  GHC.Word.byteSwap16
  GHC.Word.byteSwap32
  GHC.Word.byteSwap64
  Data.Array.Accelerate.Type.BitSize
  Data.Array.Accelerate.Type.BitSizeEq
  Data.Array.Accelerate.Type.BoundedType{Data.Array.Accelerate.Type.IntegralBoundedType Data.Array.Accelerate.Type.NonNumBoundedType}
  Data.Array.Accelerate.Type.FloatingDict{Data.Array.Accelerate.Type.FloatingDict}
  Data.Array.Accelerate.Type.FloatingType{Data.Array.Accelerate.Type.TypeCDouble Data.Array.Accelerate.Type.TypeCFloat Data.Array.Accelerate.Type.TypeDouble Data.Array.Accelerate.Type.TypeFloat}
  Data.Array.Accelerate.Type.IntegralDict{Data.Array.Accelerate.Type.IntegralDict}
  Data.Array.Accelerate.Type.IntegralType{Data.Array.Accelerate.Type.TypeCInt Data.Array.Accelerate.Type.TypeCLLong Data.Array.Accelerate.Type.TypeCLong Data.Array.Accelerate.Type.TypeCShort Data.Array.Accelerate.Type.TypeCUInt Data.Array.Accelerate.Type.TypeCULLong Data.Array.Accelerate.Type.TypeCULong Data.Array.Accelerate.Type.TypeCUShort Data.Array.Accelerate.Type.TypeInt Data.Array.Accelerate.Type.TypeInt16 Data.Array.Accelerate.Type.TypeInt32 Data.Array.Accelerate.Type.TypeInt64 Data.Array.Accelerate.Type.TypeInt8 Data.Array.Accelerate.Type.TypeWord Data.Array.Accelerate.Type.TypeWord16 Data.Array.Accelerate.Type.TypeWord32 Data.Array.Accelerate.Type.TypeWord64 Data.Array.Accelerate.Type.TypeWord8}
  Data.Array.Accelerate.Type.IsBounded{Data.Array.Accelerate.Type.boundedType}
  Data.Array.Accelerate.Type.IsFloating{Data.Array.Accelerate.Type.floatingType}
  Data.Array.Accelerate.Type.IsIntegral{Data.Array.Accelerate.Type.integralType}
  Data.Array.Accelerate.Type.IsNonNum{Data.Array.Accelerate.Type.nonNumType}
  Data.Array.Accelerate.Type.IsNum{Data.Array.Accelerate.Type.numType}
  Data.Array.Accelerate.Type.IsScalar{Data.Array.Accelerate.Type.scalarType}
  Data.Array.Accelerate.Type.NonNumDict{Data.Array.Accelerate.Type.NonNumDict}
  Data.Array.Accelerate.Type.NonNumType{Data.Array.Accelerate.Type.TypeBool Data.Array.Accelerate.Type.TypeCChar Data.Array.Accelerate.Type.TypeCSChar Data.Array.Accelerate.Type.TypeCUChar Data.Array.Accelerate.Type.TypeChar}
  Data.Array.Accelerate.Type.NumType{Data.Array.Accelerate.Type.FloatingNumType Data.Array.Accelerate.Type.IntegralNumType}
  Data.Array.Accelerate.Type.ScalarType{Data.Array.Accelerate.Type.NonNumScalarType Data.Array.Accelerate.Type.NumScalarType}
  Data.Array.Accelerate.Type.TupleType{Data.Array.Accelerate.Type.PairTuple Data.Array.Accelerate.Type.SingleTuple Data.Array.Accelerate.Type.UnitTuple}
  Foreign.C.Types.CChar
  Foreign.C.Types.CDouble
  Foreign.C.Types.CFloat
  Foreign.C.Types.CInt
  Foreign.C.Types.CLLong
  Foreign.C.Types.CLong
  Foreign.C.Types.CSChar
  Foreign.C.Types.CShort
  Foreign.C.Types.CUChar
  Foreign.C.Types.CUInt
  Foreign.C.Types.CULLong
  Foreign.C.Types.CULong
  Foreign.C.Types.CUShort
  GHC.Int.Int16
  GHC.Int.Int32
  GHC.Int.Int64
  GHC.Int.Int8
  GHC.Word.Word16
  GHC.Word.Word32
  GHC.Word.Word64
  GHC.Word.Word8
  GHC.Types.Bool{GHC.Types.False GHC.Types.True}
  GHC.Types.Char
  GHC.Types.Double
  GHC.Types.Float
  GHC.Types.Int
  GHC.Types.Word
module dependencies:
package dependencies: base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 template-haskell-2.11.1.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Bits d707ac81dd0124c7a7fb3234df2c8548
import  -/  base-4.9.1.0:Data.Int 07f5a36c488acfe0ac32e81c7536b8ff
import  -/  base-4.9.1.0:Data.Type.Equality e58d97d060ef5a0f7906bf33d6e50df2
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:Data.Typeable.Internal 0e9bdefa4325a0112d8e73b5e1e1f85d
import  -/  base-4.9.1.0:Data.Word 77f42e01d0fb6b071f1ea2176d87fa6c
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:Foreign.Storable 085c8d7f42ceec1dbb4e818f06339b9d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Float 33e2b9ffe427edd6a5c2fd6a3b26703c
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.TypeLits 93e12de936472fe3136ec0d1e30a3bd9
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans 3c733a06a6a86a3e304969c4fafdb951
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedBool ::
    Data.Array.Accelerate.Type.IsBounded GHC.Types.Bool
  DFunId
  {- Strictness: m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedBool_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Types.Bool>_N) -}
2ef884a5c5a38806dfae6b5c3f2c385f
  $fIsBoundedBool1 ::
    Data.Array.Accelerate.Type.NonNumDict GHC.Types.Bool
  {- Strictness: m,
     Unfolding: (Data.Array.Accelerate.Type.NonNumDict
                   @ GHC.Types.Bool
                   GHC.Enum.$fBoundedBool
                   GHC.Enum.$fEnumBool
                   GHC.Classes.$fEqBool
                   GHC.Classes.$fOrdBool
                   GHC.Show.$fShowBool
                   Foreign.Storable.$fStorableBool) -}
29d6f354f6e6b161c07a33c0a1dae14a
  $fIsBoundedBool_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumBoundedType
                   @ GHC.Types.Bool
                   Data.Array.Accelerate.Type.$fIsBoundedBool_$cnonNumType) -}
28a0b8419a62d74f18d64a870bddd6a1
  $fIsBoundedBool_$cnonNumType ::
    Data.Array.Accelerate.Type.NonNumType GHC.Types.Bool
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.TypeBool
                   @ GHC.Types.Bool
                   @~ <GHC.Types.Bool>_N
                   Data.Array.Accelerate.Type.$fIsBoundedBool1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCChar ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CChar
  DFunId
  {- Strictness: m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCChar_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CChar>_N) -}
1553ecb6318a80edaf92975390e6f0da
  $fIsBoundedCChar1 ::
    Data.Array.Accelerate.Type.NonNumDict Foreign.C.Types.CChar
  {- Strictness: m,
     Unfolding: (Data.Array.Accelerate.Type.NonNumDict
                   @ Foreign.C.Types.CChar
                   Foreign.C.Types.$fBoundedCChar
                   Foreign.C.Types.$fEnumCChar
                   Foreign.C.Types.$fEqCChar
                   Foreign.C.Types.$fOrdCChar
                   Foreign.C.Types.$fShowCChar
                   Foreign.C.Types.$fStorableCChar) -}
69ead63276334f53d64763e2e57f28f4
  $fIsBoundedCChar_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CChar
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumBoundedType
                   @ Foreign.C.Types.CChar
                   Data.Array.Accelerate.Type.$fIsBoundedCChar_$cnonNumType) -}
5f20204122e5321e3e2f298a7f6ef4c1
  $fIsBoundedCChar_$cnonNumType ::
    Data.Array.Accelerate.Type.NonNumType Foreign.C.Types.CChar
  {- Strictness: m3,
     Unfolding: (Data.Array.Accelerate.Type.TypeCChar
                   @ Foreign.C.Types.CChar
                   @~ <Foreign.C.Types.CChar>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCChar1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCInt ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CInt
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCInt_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CInt>_N) -}
2accd73ca115a29352e5a5ebe462e929
  $fIsBoundedCInt1 ::
    Data.Array.Accelerate.Type.IntegralDict Foreign.C.Types.CInt
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ Foreign.C.Types.CInt
                   Foreign.C.Types.$fBoundedCInt
                   Foreign.C.Types.$fEnumCInt
                   Foreign.C.Types.$fEqCInt
                   Foreign.C.Types.$fOrdCInt
                   Foreign.C.Types.$fShowCInt
                   Foreign.C.Types.$fBitsCInt
                   Foreign.C.Types.$fFiniteBitsCInt
                   Foreign.C.Types.$fIntegralCInt
                   Foreign.C.Types.$fNumCInt
                   Foreign.C.Types.$fRealCInt
                   Foreign.C.Types.$fStorableCInt) -}
4bd3d737a9c0ce75866bd153f4ebd0f8
  $fIsBoundedCInt_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CInt
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType) -}
e5689335c5f5de0dbe7733dc6db634f8
  $fIsBoundedCInt_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType Foreign.C.Types.CInt
  {- Strictness: m13,
     Unfolding: (Data.Array.Accelerate.Type.TypeCInt
                   @ Foreign.C.Types.CInt
                   @~ <Foreign.C.Types.CInt>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCInt1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCLLong ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CLLong
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CLLong>_N) -}
b93adf90daba86648cb5db3f9d831ea1
  $fIsBoundedCLLong1 ::
    Data.Array.Accelerate.Type.IntegralDict Foreign.C.Types.CLLong
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ Foreign.C.Types.CLLong
                   Foreign.C.Types.$fBoundedCLLong
                   Foreign.C.Types.$fEnumCLLong
                   Foreign.C.Types.$fEqCLLong
                   Foreign.C.Types.$fOrdCLLong
                   Foreign.C.Types.$fShowCLLong
                   Foreign.C.Types.$fBitsCLLong
                   Foreign.C.Types.$fFiniteBitsCLLong
                   Foreign.C.Types.$fIntegralCLLong
                   Foreign.C.Types.$fNumCLLong
                   Foreign.C.Types.$fRealCLLong
                   Foreign.C.Types.$fStorableCLLong) -}
ecf6c6d960e92ad6eddf3ac0d8d67e13
  $fIsBoundedCLLong_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CLLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType) -}
3ece5f1cd1d04be80d444c72d10c4ea6
  $fIsBoundedCLLong_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType Foreign.C.Types.CLLong
  {- Strictness: m17,
     Unfolding: (Data.Array.Accelerate.Type.TypeCLLong
                   @ Foreign.C.Types.CLLong
                   @~ <Foreign.C.Types.CLLong>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCLLong1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCLong ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CLong
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCLong_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CLong>_N) -}
2248f04bd23ead8206c200d4bf37fdd1
  $fIsBoundedCLong1 ::
    Data.Array.Accelerate.Type.IntegralDict Foreign.C.Types.CLong
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ Foreign.C.Types.CLong
                   Foreign.C.Types.$fBoundedCLong
                   Foreign.C.Types.$fEnumCLong
                   Foreign.C.Types.$fEqCLong
                   Foreign.C.Types.$fOrdCLong
                   Foreign.C.Types.$fShowCLong
                   Foreign.C.Types.$fBitsCLong
                   Foreign.C.Types.$fFiniteBitsCLong
                   Foreign.C.Types.$fIntegralCLong
                   Foreign.C.Types.$fNumCLong
                   Foreign.C.Types.$fRealCLong
                   Foreign.C.Types.$fStorableCLong) -}
6b4d67201e7d33e388db9fcd5506329f
  $fIsBoundedCLong_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType) -}
48934109ab62d9de319322530f0ad40e
  $fIsBoundedCLong_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType Foreign.C.Types.CLong
  {- Strictness: m15,
     Unfolding: (Data.Array.Accelerate.Type.TypeCLong
                   @ Foreign.C.Types.CLong
                   @~ <Foreign.C.Types.CLong>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCLong1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCSChar ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CSChar
  DFunId
  {- Strictness: m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCSChar_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CSChar>_N) -}
a13e30bc2027673fadd3a3c549ed840f
  $fIsBoundedCSChar1 ::
    Data.Array.Accelerate.Type.NonNumDict Foreign.C.Types.CSChar
  {- Strictness: m,
     Unfolding: (Data.Array.Accelerate.Type.NonNumDict
                   @ Foreign.C.Types.CSChar
                   Foreign.C.Types.$fBoundedCSChar
                   Foreign.C.Types.$fEnumCSChar
                   Foreign.C.Types.$fEqCSChar
                   Foreign.C.Types.$fOrdCSChar
                   Foreign.C.Types.$fShowCSChar
                   Foreign.C.Types.$fStorableCSChar) -}
a036c24b91adb941b3f2958c41ca8cfe
  $fIsBoundedCSChar_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CSChar
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumBoundedType
                   @ Foreign.C.Types.CSChar
                   Data.Array.Accelerate.Type.$fIsBoundedCSChar_$cnonNumType) -}
6266a4d6cf2f72b202401680822b57cc
  $fIsBoundedCSChar_$cnonNumType ::
    Data.Array.Accelerate.Type.NonNumType Foreign.C.Types.CSChar
  {- Strictness: m4,
     Unfolding: (Data.Array.Accelerate.Type.TypeCSChar
                   @ Foreign.C.Types.CSChar
                   @~ <Foreign.C.Types.CSChar>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCSChar1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCShort ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CShort
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCShort_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CShort>_N) -}
0cce452dd1c4aa4d33bd4d57a0943f87
  $fIsBoundedCShort1 ::
    Data.Array.Accelerate.Type.IntegralDict Foreign.C.Types.CShort
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ Foreign.C.Types.CShort
                   Foreign.C.Types.$fBoundedCShort
                   Foreign.C.Types.$fEnumCShort
                   Foreign.C.Types.$fEqCShort
                   Foreign.C.Types.$fOrdCShort
                   Foreign.C.Types.$fShowCShort
                   Foreign.C.Types.$fBitsCShort
                   Foreign.C.Types.$fFiniteBitsCShort
                   Foreign.C.Types.$fIntegralCShort
                   Foreign.C.Types.$fNumCShort
                   Foreign.C.Types.$fRealCShort
                   Foreign.C.Types.$fStorableCShort) -}
398f171bb2bc5239876826fb77935727
  $fIsBoundedCShort_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CShort
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType) -}
4c034bc5a961964a5331bd9c4e4169d2
  $fIsBoundedCShort_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType Foreign.C.Types.CShort
  {- Strictness: m11,
     Unfolding: (Data.Array.Accelerate.Type.TypeCShort
                   @ Foreign.C.Types.CShort
                   @~ <Foreign.C.Types.CShort>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCShort1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCUChar ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CUChar
  DFunId
  {- Strictness: m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCUChar_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CUChar>_N) -}
8952e2387a9f9f5ffc1a402c169b9331
  $fIsBoundedCUChar1 ::
    Data.Array.Accelerate.Type.NonNumDict Foreign.C.Types.CUChar
  {- Strictness: m,
     Unfolding: (Data.Array.Accelerate.Type.NonNumDict
                   @ Foreign.C.Types.CUChar
                   Foreign.C.Types.$fBoundedCUChar
                   Foreign.C.Types.$fEnumCUChar
                   Foreign.C.Types.$fEqCUChar
                   Foreign.C.Types.$fOrdCUChar
                   Foreign.C.Types.$fShowCUChar
                   Foreign.C.Types.$fStorableCUChar) -}
1f861d856a980d9328864fc8161d87b3
  $fIsBoundedCUChar_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CUChar
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumBoundedType
                   @ Foreign.C.Types.CUChar
                   Data.Array.Accelerate.Type.$fIsBoundedCUChar_$cnonNumType) -}
883e83a6a01f9111235b3580c5e488a9
  $fIsBoundedCUChar_$cnonNumType ::
    Data.Array.Accelerate.Type.NonNumType Foreign.C.Types.CUChar
  {- Strictness: m5,
     Unfolding: (Data.Array.Accelerate.Type.TypeCUChar
                   @ Foreign.C.Types.CUChar
                   @~ <Foreign.C.Types.CUChar>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCUChar1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCUInt ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CUInt
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CUInt>_N) -}
5228082222b9c0847326d92f6c60f769
  $fIsBoundedCUInt1 ::
    Data.Array.Accelerate.Type.IntegralDict Foreign.C.Types.CUInt
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ Foreign.C.Types.CUInt
                   Foreign.C.Types.$fBoundedCUInt
                   Foreign.C.Types.$fEnumCUInt
                   Foreign.C.Types.$fEqCUInt
                   Foreign.C.Types.$fOrdCUInt
                   Foreign.C.Types.$fShowCUInt
                   Foreign.C.Types.$fBitsCUInt
                   Foreign.C.Types.$fFiniteBitsCUInt
                   Foreign.C.Types.$fIntegralCUInt
                   Foreign.C.Types.$fNumCUInt
                   Foreign.C.Types.$fRealCUInt
                   Foreign.C.Types.$fStorableCUInt) -}
e220e65c1d68d32814c3062617335dad
  $fIsBoundedCUInt_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CUInt
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType) -}
65950a363d154a632757ef73c926cb75
  $fIsBoundedCUInt_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType Foreign.C.Types.CUInt
  {- Strictness: m14,
     Unfolding: (Data.Array.Accelerate.Type.TypeCUInt
                   @ Foreign.C.Types.CUInt
                   @~ <Foreign.C.Types.CUInt>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCUInt1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCULLong ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CULLong
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CULLong>_N) -}
356c54359bb0663d083cdd9f4025aeb4
  $fIsBoundedCULLong1 ::
    Data.Array.Accelerate.Type.IntegralDict Foreign.C.Types.CULLong
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ Foreign.C.Types.CULLong
                   Foreign.C.Types.$fBoundedCULLong
                   Foreign.C.Types.$fEnumCULLong
                   Foreign.C.Types.$fEqCULLong
                   Foreign.C.Types.$fOrdCULLong
                   Foreign.C.Types.$fShowCULLong
                   Foreign.C.Types.$fBitsCULLong
                   Foreign.C.Types.$fFiniteBitsCULLong
                   Foreign.C.Types.$fIntegralCULLong
                   Foreign.C.Types.$fNumCULLong
                   Foreign.C.Types.$fRealCULLong
                   Foreign.C.Types.$fStorableCULLong) -}
1461deb582ff392ae13d1d123bf8c352
  $fIsBoundedCULLong_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CULLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType) -}
19f19f68c6cf4c7cab116862203deec1
  $fIsBoundedCULLong_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType Foreign.C.Types.CULLong
  {- Strictness: m18,
     Unfolding: (Data.Array.Accelerate.Type.TypeCULLong
                   @ Foreign.C.Types.CULLong
                   @~ <Foreign.C.Types.CULLong>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCULLong1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCULong ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CULong
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCULong_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CULong>_N) -}
d580d3e0b723ce69be42b1d4a69659f2
  $fIsBoundedCULong1 ::
    Data.Array.Accelerate.Type.IntegralDict Foreign.C.Types.CULong
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ Foreign.C.Types.CULong
                   Foreign.C.Types.$fBoundedCULong
                   Foreign.C.Types.$fEnumCULong
                   Foreign.C.Types.$fEqCULong
                   Foreign.C.Types.$fOrdCULong
                   Foreign.C.Types.$fShowCULong
                   Foreign.C.Types.$fBitsCULong
                   Foreign.C.Types.$fFiniteBitsCULong
                   Foreign.C.Types.$fIntegralCULong
                   Foreign.C.Types.$fNumCULong
                   Foreign.C.Types.$fRealCULong
                   Foreign.C.Types.$fStorableCULong) -}
1aa8ce853b4b7de27aabfdee19449401
  $fIsBoundedCULong_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CULong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType) -}
a166ddec7d974e4a7c3216be73f273c8
  $fIsBoundedCULong_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType Foreign.C.Types.CULong
  {- Strictness: m16,
     Unfolding: (Data.Array.Accelerate.Type.TypeCULong
                   @ Foreign.C.Types.CULong
                   @~ <Foreign.C.Types.CULong>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCULong1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedCUShort ::
    Data.Array.Accelerate.Type.IsBounded Foreign.C.Types.CUShort
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CUShort>_N) -}
7277add54c19eaab1facaf67b7681f6c
  $fIsBoundedCUShort1 ::
    Data.Array.Accelerate.Type.IntegralDict Foreign.C.Types.CUShort
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ Foreign.C.Types.CUShort
                   Foreign.C.Types.$fBoundedCUShort
                   Foreign.C.Types.$fEnumCUShort
                   Foreign.C.Types.$fEqCUShort
                   Foreign.C.Types.$fOrdCUShort
                   Foreign.C.Types.$fShowCUShort
                   Foreign.C.Types.$fBitsCUShort
                   Foreign.C.Types.$fFiniteBitsCUShort
                   Foreign.C.Types.$fIntegralCUShort
                   Foreign.C.Types.$fNumCUShort
                   Foreign.C.Types.$fRealCUShort
                   Foreign.C.Types.$fStorableCUShort) -}
19bac2fb158afd1c7879d30ffe107a14
  $fIsBoundedCUShort_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType Foreign.C.Types.CUShort
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType) -}
9c47160b77986626329103e2a28c268b
  $fIsBoundedCUShort_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType Foreign.C.Types.CUShort
  {- Strictness: m12,
     Unfolding: (Data.Array.Accelerate.Type.TypeCUShort
                   @ Foreign.C.Types.CUShort
                   @~ <Foreign.C.Types.CUShort>_N
                   Data.Array.Accelerate.Type.$fIsBoundedCUShort1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedChar ::
    Data.Array.Accelerate.Type.IsBounded GHC.Types.Char
  DFunId
  {- Strictness: m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedChar_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Types.Char>_N) -}
21d8d9d39eb1cde1feeca13d99af2351
  $fIsBoundedChar1 ::
    Data.Array.Accelerate.Type.NonNumDict GHC.Types.Char
  {- Strictness: m,
     Unfolding: (Data.Array.Accelerate.Type.NonNumDict
                   @ GHC.Types.Char
                   GHC.Enum.$fBoundedChar
                   GHC.Enum.$fEnumChar
                   GHC.Classes.$fEqChar
                   GHC.Classes.$fOrdChar
                   GHC.Show.$fShowChar
                   Foreign.Storable.$fStorableChar) -}
eebf0d640fb9f7b2e288a9dd72754bb8
  $fIsBoundedChar_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Types.Char
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumBoundedType
                   @ GHC.Types.Char
                   Data.Array.Accelerate.Type.$fIsBoundedChar_$cnonNumType) -}
e564ac2e4ac5bcc62eb94c33f2f30b91
  $fIsBoundedChar_$cnonNumType ::
    Data.Array.Accelerate.Type.NonNumType GHC.Types.Char
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.TypeChar
                   @ GHC.Types.Char
                   @~ <GHC.Types.Char>_N
                   Data.Array.Accelerate.Type.$fIsBoundedChar1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedInt ::
    Data.Array.Accelerate.Type.IsBounded GHC.Types.Int
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedInt_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Types.Int>_N) -}
79604fcfd9343546f68176117191ab4a
  $fIsBoundedInt1 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Types.Int
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Types.Int
                   GHC.Enum.$fBoundedInt
                   GHC.Enum.$fEnumInt
                   GHC.Classes.$fEqInt
                   GHC.Classes.$fOrdInt
                   GHC.Show.$fShowInt
                   Data.Bits.$fBitsInt
                   Data.Bits.$fFiniteBitsInt
                   GHC.Real.$fIntegralInt
                   GHC.Num.$fNumInt
                   GHC.Real.$fRealInt
                   Foreign.Storable.$fStorableInt) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedInt16 ::
    Data.Array.Accelerate.Type.IsBounded GHC.Int.Int16
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedInt16_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Int.Int16>_N) -}
a31ed8b69b20d12a4cce0c09181024f0
  $fIsBoundedInt16_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Int.Int16
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType) -}
13540148d2c6d8a1c5c83bf05f45db6a
  $fIsBoundedInt16_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Int.Int16
  {- Strictness: m3,
     Unfolding: (Data.Array.Accelerate.Type.TypeInt16
                   @ GHC.Int.Int16
                   @~ <GHC.Int.Int16>_N
                   Data.Array.Accelerate.Type.$fIsBoundedInt2) -}
29868b03efcb781a6bf7fa80d14ed7f2
  $fIsBoundedInt2 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Int.Int16
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Int.Int16
                   GHC.Int.$fBoundedInt16
                   GHC.Int.$fEnumInt16
                   GHC.Int.$fEqInt16
                   GHC.Int.$fOrdInt16
                   GHC.Int.$fShowInt16
                   GHC.Int.$fBitsInt16
                   GHC.Int.$fFiniteBitsInt16
                   GHC.Int.$fIntegralInt16
                   GHC.Int.$fNumInt16
                   GHC.Int.$fRealInt16
                   Foreign.Storable.$fStorableInt16) -}
7892a942dc4875ee7edd09fa45a74c66
  $fIsBoundedInt3 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Int.Int32
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Int.Int32
                   GHC.Int.$fBoundedInt32
                   GHC.Int.$fEnumInt32
                   GHC.Int.$fEqInt32
                   GHC.Int.$fOrdInt32
                   GHC.Int.$fShowInt32
                   GHC.Int.$fBitsInt32
                   GHC.Int.$fFiniteBitsInt32
                   GHC.Int.$fIntegralInt32
                   GHC.Int.$fNumInt32
                   GHC.Int.$fRealInt32
                   Foreign.Storable.$fStorableInt32) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedInt32 ::
    Data.Array.Accelerate.Type.IsBounded GHC.Int.Int32
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedInt32_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Int.Int32>_N) -}
1652bd70155600e50630421543ee3614
  $fIsBoundedInt32_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Int.Int32
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType) -}
3edaeb257cc15cab0fec49b08ae91350
  $fIsBoundedInt32_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Int.Int32
  {- Strictness: m4,
     Unfolding: (Data.Array.Accelerate.Type.TypeInt32
                   @ GHC.Int.Int32
                   @~ <GHC.Int.Int32>_N
                   Data.Array.Accelerate.Type.$fIsBoundedInt3) -}
5a10af5de62a0496d16e61b45c6cb67e
  $fIsBoundedInt4 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Int.Int64
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Int.Int64
                   GHC.Int.$fBoundedInt64
                   GHC.Int.$fEnumInt64
                   GHC.Int.$fEqInt64
                   GHC.Int.$fOrdInt64
                   GHC.Int.$fShowInt64
                   GHC.Int.$fBitsInt64
                   GHC.Int.$fFiniteBitsInt64
                   GHC.Int.$fIntegralInt64
                   GHC.Int.$fNumInt64
                   GHC.Int.$fRealInt64
                   Foreign.Storable.$fStorableInt64) -}
e98f366959c24717ee259c7fa24fcd57
  $fIsBoundedInt5 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Int.Int8
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Int.Int8
                   GHC.Int.$fBoundedInt8
                   GHC.Int.$fEnumInt8
                   GHC.Int.$fEqInt8
                   GHC.Int.$fOrdInt8
                   GHC.Int.$fShowInt8
                   GHC.Int.$fBitsInt8
                   GHC.Int.$fFiniteBitsInt8
                   GHC.Int.$fIntegralInt8
                   GHC.Int.$fNumInt8
                   GHC.Int.$fRealInt8
                   Foreign.Storable.$fStorableInt8) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedInt64 ::
    Data.Array.Accelerate.Type.IsBounded GHC.Int.Int64
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedInt64_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Int.Int64>_N) -}
08521f6f47a8ff2cdd1dedeae0c959ce
  $fIsBoundedInt64_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Int.Int64
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType) -}
d9789376b189632dc83b23114f514446
  $fIsBoundedInt64_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Int.Int64
  {- Strictness: m5,
     Unfolding: (Data.Array.Accelerate.Type.TypeInt64
                   @ GHC.Int.Int64
                   @~ <GHC.Int.Int64>_N
                   Data.Array.Accelerate.Type.$fIsBoundedInt4) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedInt8 ::
    Data.Array.Accelerate.Type.IsBounded GHC.Int.Int8
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedInt8_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Int.Int8>_N) -}
66c0a4052808881c830a3a3731ce7578
  $fIsBoundedInt8_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Int.Int8
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType) -}
f487d50d971a292ee7a27404bbc1eebc
  $fIsBoundedInt8_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Int.Int8
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.TypeInt8
                   @ GHC.Int.Int8
                   @~ <GHC.Int.Int8>_N
                   Data.Array.Accelerate.Type.$fIsBoundedInt5) -}
9a999877250dae2563006478d6c8e0c9
  $fIsBoundedInt_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType) -}
641646437321a49636b1addece2fe179
  $fIsBoundedInt_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.TypeInt
                   @ GHC.Types.Int
                   @~ <GHC.Types.Int>_N
                   Data.Array.Accelerate.Type.$fIsBoundedInt1) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedWord ::
    Data.Array.Accelerate.Type.IsBounded GHC.Types.Word
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedWord_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Types.Word>_N) -}
d24e56282fa1d2af75a02f91edd3ca60
  $fIsBoundedWord1 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Types.Word
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Types.Word
                   GHC.Enum.$fBoundedWord
                   GHC.Enum.$fEnumWord
                   GHC.Classes.$fEqWord
                   GHC.Classes.$fOrdWord
                   GHC.Show.$fShowWord
                   Data.Bits.$fBitsWord
                   Data.Bits.$fFiniteBitsWord
                   GHC.Real.$fIntegralWord
                   GHC.Num.$fNumWord
                   GHC.Real.$fRealWord
                   Foreign.Storable.$fStorableWord) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedWord16 ::
    Data.Array.Accelerate.Type.IsBounded GHC.Word.Word16
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedWord16_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Word.Word16>_N) -}
cb9eed005e17b4978538abd7f127db97
  $fIsBoundedWord16_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Word.Word16
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType) -}
b61f1653b08d3609e97ba67520c2015b
  $fIsBoundedWord16_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Word.Word16
  {- Strictness: m8,
     Unfolding: (Data.Array.Accelerate.Type.TypeWord16
                   @ GHC.Word.Word16
                   @~ <GHC.Word.Word16>_N
                   Data.Array.Accelerate.Type.$fIsBoundedWord2) -}
bc40b6f8ac9c1c2944ab66bd8d4b1f8c
  $fIsBoundedWord2 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Word.Word16
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Word.Word16
                   GHC.Word.$fBoundedWord16
                   GHC.Word.$fEnumWord16
                   GHC.Word.$fEqWord16
                   GHC.Word.$fOrdWord16
                   GHC.Word.$fShowWord16
                   GHC.Word.$fBitsWord16
                   GHC.Word.$fFiniteBitsWord16
                   GHC.Word.$fIntegralWord16
                   GHC.Word.$fNumWord16
                   GHC.Word.$fRealWord16
                   Foreign.Storable.$fStorableWord16) -}
19c282535fa0c75765cb0b2679a159f8
  $fIsBoundedWord3 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Word.Word32
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Word.Word32
                   GHC.Word.$fBoundedWord32
                   GHC.Word.$fEnumWord32
                   GHC.Word.$fEqWord32
                   GHC.Word.$fOrdWord32
                   GHC.Word.$fShowWord32
                   GHC.Word.$fBitsWord32
                   GHC.Word.$fFiniteBitsWord32
                   GHC.Word.$fIntegralWord32
                   GHC.Word.$fNumWord32
                   GHC.Word.$fRealWord32
                   Foreign.Storable.$fStorableWord32) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedWord32 ::
    Data.Array.Accelerate.Type.IsBounded GHC.Word.Word32
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedWord32_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Word.Word32>_N) -}
0cbad9c2946a6c51104efb44d819c7a9
  $fIsBoundedWord32_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Word.Word32
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType) -}
fe2ac75aa5f5715752077b9b9bc9be38
  $fIsBoundedWord32_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Word.Word32
  {- Strictness: m9,
     Unfolding: (Data.Array.Accelerate.Type.TypeWord32
                   @ GHC.Word.Word32
                   @~ <GHC.Word.Word32>_N
                   Data.Array.Accelerate.Type.$fIsBoundedWord3) -}
267c48e016a34991d7233429332b6f8c
  $fIsBoundedWord4 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Word.Word64
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Word.Word64
                   GHC.Word.$fBoundedWord64
                   GHC.Word.$fEnumWord64
                   GHC.Word.$fEqWord64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fShowWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fIntegralWord64
                   GHC.Word.$fNumWord64
                   GHC.Word.$fRealWord64
                   Foreign.Storable.$fStorableWord64) -}
8992b24f99bcefc0f8ee66bd82c166a9
  $fIsBoundedWord5 ::
    Data.Array.Accelerate.Type.IntegralDict GHC.Word.Word8
  {- Unfolding: (Data.Array.Accelerate.Type.IntegralDict
                   @ GHC.Word.Word8
                   GHC.Word.$fBoundedWord8
                   GHC.Word.$fEnumWord8
                   GHC.Word.$fEqWord8
                   GHC.Word.$fOrdWord8
                   GHC.Word.$fShowWord8
                   GHC.Word.$fBitsWord8
                   GHC.Word.$fFiniteBitsWord8
                   GHC.Word.$fIntegralWord8
                   GHC.Word.$fNumWord8
                   GHC.Word.$fRealWord8
                   Foreign.Storable.$fStorableWord8) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedWord64 ::
    Data.Array.Accelerate.Type.IsBounded GHC.Word.Word64
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedWord64_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Word.Word64>_N) -}
6ac2d6a0eb25cc0cc59f4049fe42faff
  $fIsBoundedWord64_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Word.Word64
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType) -}
b9ef35fb97d06c175fd5b00ec83d5ee1
  $fIsBoundedWord64_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Word.Word64
  {- Strictness: m10,
     Unfolding: (Data.Array.Accelerate.Type.TypeWord64
                   @ GHC.Word.Word64
                   @~ <GHC.Word.Word64>_N
                   Data.Array.Accelerate.Type.$fIsBoundedWord4) -}
7cb33b01ec00ead2fead7e2241e2c61d
  $fIsBoundedWord8 ::
    Data.Array.Accelerate.Type.IsBounded GHC.Word.Word8
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedWord8_$cboundedType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Word.Word8>_N) -}
29608188b008918adf0ba1caa6ee8b17
  $fIsBoundedWord8_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Word.Word8
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType) -}
2cc152e1b98775c994294e733f70db57
  $fIsBoundedWord8_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Word.Word8
  {- Strictness: m7,
     Unfolding: (Data.Array.Accelerate.Type.TypeWord8
                   @ GHC.Word.Word8
                   @~ <GHC.Word.Word8>_N
                   Data.Array.Accelerate.Type.$fIsBoundedWord5) -}
5bdd642da0188e6e5421bb54c2de4eba
  $fIsBoundedWord_$cboundedType ::
    Data.Array.Accelerate.Type.BoundedType GHC.Types.Word
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralBoundedType
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType) -}
4acc9866374da2ea21466949bbc364ad
  $fIsBoundedWord_$cintegralType ::
    Data.Array.Accelerate.Type.IntegralType GHC.Types.Word
  {- Strictness: m6,
     Unfolding: (Data.Array.Accelerate.Type.TypeWord
                   @ GHC.Types.Word
                   @~ <GHC.Types.Word>_N
                   Data.Array.Accelerate.Type.$fIsBoundedWord1) -}
24296a373fe68881b6311df69c8e0867
  $fIsFloatingCDouble ::
    Data.Array.Accelerate.Type.IsFloating Foreign.C.Types.CDouble
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CDouble
                  Foreign.C.Types.$fFloatingCDouble
                  Data.Array.Accelerate.Type.$fIsScalarCDouble
                  Data.Array.Accelerate.Type.$fIsFloatingCDouble_$cp3IsFloating
                  Data.Array.Accelerate.Type.$fIsFloatingCDouble_$cfloatingType -}
4426f7d359607edafc51aa69cc739576
  $fIsFloatingCDouble1 ::
    Data.Array.Accelerate.Type.FloatingDict Foreign.C.Types.CDouble
  {- Unfolding: (Data.Array.Accelerate.Type.FloatingDict
                   @ Foreign.C.Types.CDouble
                   Foreign.C.Types.$fEnumCDouble
                   Foreign.C.Types.$fEqCDouble
                   Foreign.C.Types.$fOrdCDouble
                   Foreign.C.Types.$fShowCDouble
                   Foreign.C.Types.$fFloatingCDouble
                   Foreign.C.Types.$fFractionalCDouble
                   Foreign.C.Types.$fNumCDouble
                   Foreign.C.Types.$fRealCDouble
                   Foreign.C.Types.$fRealFracCDouble
                   Foreign.C.Types.$fRealFloatCDouble
                   Foreign.C.Types.$fStorableCDouble) -}
33fc31f31e9ddc6020f39fc3a30521ef
  $fIsFloatingCDouble_$cfloatingType ::
    Data.Array.Accelerate.Type.FloatingType Foreign.C.Types.CDouble
  {- Strictness: m4,
     Unfolding: (Data.Array.Accelerate.Type.TypeCDouble
                   @ Foreign.C.Types.CDouble
                   @~ <Foreign.C.Types.CDouble>_N
                   Data.Array.Accelerate.Type.$fIsFloatingCDouble1) -}
5dcaf5108b06ef8ebadb5c330727e44e
  $fIsFloatingCDouble_$cp3IsFloating ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CDouble
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCDouble -}
24296a373fe68881b6311df69c8e0867
  $fIsFloatingCFloat ::
    Data.Array.Accelerate.Type.IsFloating Foreign.C.Types.CFloat
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CFloat
                  Foreign.C.Types.$fFloatingCFloat
                  Data.Array.Accelerate.Type.$fIsScalarCFloat
                  Data.Array.Accelerate.Type.$fIsFloatingCFloat_$cp3IsFloating
                  Data.Array.Accelerate.Type.$fIsFloatingCFloat_$cfloatingType -}
42279a62c618b764571f41e41ccae362
  $fIsFloatingCFloat1 ::
    Data.Array.Accelerate.Type.FloatingDict Foreign.C.Types.CFloat
  {- Unfolding: (Data.Array.Accelerate.Type.FloatingDict
                   @ Foreign.C.Types.CFloat
                   Foreign.C.Types.$fEnumCFloat
                   Foreign.C.Types.$fEqCFloat
                   Foreign.C.Types.$fOrdCFloat
                   Foreign.C.Types.$fShowCFloat
                   Foreign.C.Types.$fFloatingCFloat
                   Foreign.C.Types.$fFractionalCFloat
                   Foreign.C.Types.$fNumCFloat
                   Foreign.C.Types.$fRealCFloat
                   Foreign.C.Types.$fRealFracCFloat
                   Foreign.C.Types.$fRealFloatCFloat
                   Foreign.C.Types.$fStorableCFloat) -}
45fa2bb4293afbfc2220490736deaff3
  $fIsFloatingCFloat_$cfloatingType ::
    Data.Array.Accelerate.Type.FloatingType Foreign.C.Types.CFloat
  {- Strictness: m3,
     Unfolding: (Data.Array.Accelerate.Type.TypeCFloat
                   @ Foreign.C.Types.CFloat
                   @~ <Foreign.C.Types.CFloat>_N
                   Data.Array.Accelerate.Type.$fIsFloatingCFloat1) -}
38fe95112f3570b0a5e6d59406815ac6
  $fIsFloatingCFloat_$cp3IsFloating ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CFloat
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCFloat -}
24296a373fe68881b6311df69c8e0867
  $fIsFloatingDouble ::
    Data.Array.Accelerate.Type.IsFloating GHC.Types.Double
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  GHC.Float.$fFloatingDouble
                  Data.Array.Accelerate.Type.$fIsScalarDouble
                  Data.Array.Accelerate.Type.$fIsFloatingDouble_$cp3IsFloating
                  Data.Array.Accelerate.Type.$fIsFloatingDouble_$cfloatingType -}
f24a046cbb70cac2a5611f7afe5ce0df
  $fIsFloatingDouble1 ::
    Data.Array.Accelerate.Type.FloatingDict GHC.Types.Double
  {- Unfolding: (Data.Array.Accelerate.Type.FloatingDict
                   @ GHC.Types.Double
                   GHC.Float.$fEnumDouble
                   GHC.Classes.$fEqDouble
                   GHC.Classes.$fOrdDouble
                   GHC.Float.$fShowDouble
                   GHC.Float.$fFloatingDouble
                   GHC.Float.$fFractionalDouble
                   GHC.Float.$fNumDouble
                   GHC.Float.$fRealDouble
                   GHC.Float.$fRealFracDouble
                   GHC.Float.$fRealFloatDouble
                   Foreign.Storable.$fStorableDouble) -}
3fd87174950c858529ae7981289b17f4
  $fIsFloatingDouble_$cfloatingType ::
    Data.Array.Accelerate.Type.FloatingType GHC.Types.Double
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.TypeDouble
                   @ GHC.Types.Double
                   @~ <GHC.Types.Double>_N
                   Data.Array.Accelerate.Type.$fIsFloatingDouble1) -}
3f5f47f491542fd6ded29d2b3d167afc
  $fIsFloatingDouble_$cp3IsFloating ::
    Data.Array.Accelerate.Type.IsNum GHC.Types.Double
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumDouble -}
24296a373fe68881b6311df69c8e0867
  $fIsFloatingFloat ::
    Data.Array.Accelerate.Type.IsFloating GHC.Types.Float
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  GHC.Float.$fFloatingFloat
                  Data.Array.Accelerate.Type.$fIsScalarFloat
                  Data.Array.Accelerate.Type.$fIsFloatingFloat_$cp3IsFloating
                  Data.Array.Accelerate.Type.$fIsFloatingFloat_$cfloatingType -}
2b311f824c355d6a99f2e9c758a65d34
  $fIsFloatingFloat1 ::
    Data.Array.Accelerate.Type.FloatingDict GHC.Types.Float
  {- Unfolding: (Data.Array.Accelerate.Type.FloatingDict
                   @ GHC.Types.Float
                   GHC.Float.$fEnumFloat
                   GHC.Classes.$fEqFloat
                   GHC.Classes.$fOrdFloat
                   GHC.Float.$fShowFloat
                   GHC.Float.$fFloatingFloat
                   GHC.Float.$fFractionalFloat
                   GHC.Float.$fNumFloat
                   GHC.Float.$fRealFloat
                   GHC.Float.$fRealFracFloat
                   GHC.Float.$fRealFloatFloat
                   Foreign.Storable.$fStorableFloat) -}
dd546f17c19c90c5f12eda82ea06502d
  $fIsFloatingFloat_$cfloatingType ::
    Data.Array.Accelerate.Type.FloatingType GHC.Types.Float
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.TypeFloat
                   @ GHC.Types.Float
                   @~ <GHC.Types.Float>_N
                   Data.Array.Accelerate.Type.$fIsFloatingFloat1) -}
126af40ad2917ba58f4b8d75e0d8f7f4
  $fIsFloatingFloat_$cp3IsFloating ::
    Data.Array.Accelerate.Type.IsNum GHC.Types.Float
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumFloat -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralCInt ::
    Data.Array.Accelerate.Type.IsIntegral Foreign.C.Types.CInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CInt
                  Data.Array.Accelerate.Type.$fIsScalarCInt
                  Data.Array.Accelerate.Type.$fIsIntegralCInt_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedCInt_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CInt>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType -}
07fb02769d732662837db63caf3e64f3
  $fIsIntegralCInt_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CInt
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCInt -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralCLLong ::
    Data.Array.Accelerate.Type.IsIntegral Foreign.C.Types.CLLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLLong
                  Data.Array.Accelerate.Type.$fIsScalarCLLong
                  Data.Array.Accelerate.Type.$fIsIntegralCLLong_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CLLong>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType -}
fa4780146b066f34a5db2d3526741003
  $fIsIntegralCLLong_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CLLong
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCLLong -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralCLong ::
    Data.Array.Accelerate.Type.IsIntegral Foreign.C.Types.CLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLong
                  Data.Array.Accelerate.Type.$fIsScalarCLong
                  Data.Array.Accelerate.Type.$fIsIntegralCLong_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedCLong_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CLong>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType -}
f00af0fbd2307b034596b3ba7f000335
  $fIsIntegralCLong_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CLong
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCLong -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralCShort ::
    Data.Array.Accelerate.Type.IsIntegral Foreign.C.Types.CShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CShort
                  Data.Array.Accelerate.Type.$fIsScalarCShort
                  Data.Array.Accelerate.Type.$fIsIntegralCShort_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedCShort_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CShort>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType -}
01cfcf670897de0f97d227b2a5692303
  $fIsIntegralCShort_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CShort
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCShort -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralCUInt ::
    Data.Array.Accelerate.Type.IsIntegral Foreign.C.Types.CUInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUInt
                  Data.Array.Accelerate.Type.$fIsScalarCUInt
                  Data.Array.Accelerate.Type.$fIsIntegralCUInt_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CUInt>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType -}
cf1355f5d955867a26d4f356ce088cb8
  $fIsIntegralCUInt_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CUInt
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCUInt -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralCULLong ::
    Data.Array.Accelerate.Type.IsIntegral Foreign.C.Types.CULLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULLong
                  Data.Array.Accelerate.Type.$fIsScalarCULLong
                  Data.Array.Accelerate.Type.$fIsIntegralCULLong_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CULLong>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType -}
6306695c4e806403e8f9ada2a297fb7c
  $fIsIntegralCULLong_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CULLong
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCULLong -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralCULong ::
    Data.Array.Accelerate.Type.IsIntegral Foreign.C.Types.CULong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULong
                  Data.Array.Accelerate.Type.$fIsScalarCULong
                  Data.Array.Accelerate.Type.$fIsIntegralCULong_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedCULong_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CULong>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType -}
29268cf8c11f3fdf8b153623440e740d
  $fIsIntegralCULong_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CULong
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCULong -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralCUShort ::
    Data.Array.Accelerate.Type.IsIntegral Foreign.C.Types.CUShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUShort
                  Data.Array.Accelerate.Type.$fIsScalarCUShort
                  Data.Array.Accelerate.Type.$fIsIntegralCUShort_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <Foreign.C.Types.CUShort>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType -}
4c3daadd88f5095c6413b8170f64768e
  $fIsIntegralCUShort_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CUShort
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumCUShort -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralInt ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Types.Int
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  Data.Array.Accelerate.Type.$fIsScalarInt
                  Data.Array.Accelerate.Type.$fIsIntegralInt_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedInt_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Types.Int>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralInt16 ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Int.Int16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int16
                  Data.Array.Accelerate.Type.$fIsScalarInt16
                  Data.Array.Accelerate.Type.$fIsIntegralInt16_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedInt16_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Int.Int16>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType -}
9fb7689f7b702eca22515d512a348750
  $fIsIntegralInt16_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Int.Int16
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumInt16 -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralInt32 ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Int.Int32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  Data.Array.Accelerate.Type.$fIsScalarInt32
                  Data.Array.Accelerate.Type.$fIsIntegralInt32_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedInt32_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Int.Int32>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType -}
25ee13638f94b583cdd282b8d5fb676b
  $fIsIntegralInt32_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Int.Int32
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumInt32 -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralInt64 ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Int.Int64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int64
                  Data.Array.Accelerate.Type.$fIsScalarInt64
                  Data.Array.Accelerate.Type.$fIsIntegralInt64_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedInt64_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Int.Int64>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType -}
c895b40a849c43b3042744fdfbc8e780
  $fIsIntegralInt64_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Int.Int64
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumInt64 -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralInt8 ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Int.Int8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int8
                  Data.Array.Accelerate.Type.$fIsScalarInt8
                  Data.Array.Accelerate.Type.$fIsIntegralInt8_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedInt8_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Int.Int8>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType -}
2da1104bc0605030e295031d124c6a6d
  $fIsIntegralInt8_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Int.Int8
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumInt8 -}
f7abbc5424758a3fa154f461dd426a92
  $fIsIntegralInt_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Types.Int
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumInt -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralWord ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Types.Word
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Word
                  Data.Array.Accelerate.Type.$fIsScalarWord
                  Data.Array.Accelerate.Type.$fIsIntegralWord_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedWord_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Types.Word>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralWord16 ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Word.Word16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word16
                  Data.Array.Accelerate.Type.$fIsScalarWord16
                  Data.Array.Accelerate.Type.$fIsIntegralWord16_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedWord16_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Word.Word16>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType -}
48794d850b35b3d87b1417cf3253ba4a
  $fIsIntegralWord16_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Word.Word16
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumWord16 -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralWord32 ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Word.Word32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word32
                  Data.Array.Accelerate.Type.$fIsScalarWord32
                  Data.Array.Accelerate.Type.$fIsIntegralWord32_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedWord32_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Word.Word32>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType -}
fc05ed5c2d6470d8344d9503e5bd36e7
  $fIsIntegralWord32_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Word.Word32
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumWord32 -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralWord64 ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Word.Word64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word64
                  Data.Array.Accelerate.Type.$fIsScalarWord64
                  Data.Array.Accelerate.Type.$fIsIntegralWord64_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedWord64_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Word.Word64>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType -}
10484f306f6b715b619816d5cd56a4ab
  $fIsIntegralWord64_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Word.Word64
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumWord64 -}
b2c4f7b6108c37809735ca127f59a1fe
  $fIsIntegralWord8 ::
    Data.Array.Accelerate.Type.IsIntegral GHC.Word.Word8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word8
                  Data.Array.Accelerate.Type.$fIsScalarWord8
                  Data.Array.Accelerate.Type.$fIsIntegralWord8_$cp2IsIntegral
                  Data.Array.Accelerate.Type.$fIsBoundedWord8_$cboundedType
                    `cast`
                  (Sym (Data.Array.Accelerate.Type.N:IsBounded[0]) <GHC.Word.Word8>_N)
                  Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType -}
e4438e45ece1ab3b36bf137b9c480b29
  $fIsIntegralWord8_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Word.Word8
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumWord8 -}
62b47a5c9045d5c9c6ce750d1c87032a
  $fIsIntegralWord_$cp2IsIntegral ::
    Data.Array.Accelerate.Type.IsNum GHC.Types.Word
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsNumWord -}
c0481933b9b025ee9f482f2ca661109a
  $fIsNonNumBool ::
    Data.Array.Accelerate.Type.IsNonNum GHC.Types.Bool
  DFunId
  {- Strictness: m1, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedBool_$cnonNumType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsNonNum[0]) <GHC.Types.Bool>_N) -}
c0481933b9b025ee9f482f2ca661109a
  $fIsNonNumCChar ::
    Data.Array.Accelerate.Type.IsNonNum Foreign.C.Types.CChar
  DFunId
  {- Strictness: m3, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCChar_$cnonNumType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsNonNum[0]) <Foreign.C.Types.CChar>_N) -}
c0481933b9b025ee9f482f2ca661109a
  $fIsNonNumCSChar ::
    Data.Array.Accelerate.Type.IsNonNum Foreign.C.Types.CSChar
  DFunId
  {- Strictness: m4, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCSChar_$cnonNumType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsNonNum[0]) <Foreign.C.Types.CSChar>_N) -}
c0481933b9b025ee9f482f2ca661109a
  $fIsNonNumCUChar ::
    Data.Array.Accelerate.Type.IsNonNum Foreign.C.Types.CUChar
  DFunId
  {- Strictness: m5, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedCUChar_$cnonNumType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsNonNum[0]) <Foreign.C.Types.CUChar>_N) -}
c0481933b9b025ee9f482f2ca661109a
  $fIsNonNumChar ::
    Data.Array.Accelerate.Type.IsNonNum GHC.Types.Char
  DFunId
  {- Strictness: m2, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Type.$fIsBoundedChar_$cnonNumType
                  `cast`
                (Sym (Data.Array.Accelerate.Type.N:IsNonNum[0]) <GHC.Types.Char>_N) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCDouble ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CDouble
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CDouble
                  Foreign.C.Types.$fNumCDouble
                  Data.Array.Accelerate.Type.$fIsScalarCDouble
                  Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType -}
2c09be97db979547a13fd18cc5eb6316
  $fIsNumCDouble_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CDouble
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.FloatingNumType
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Type.$fIsFloatingCDouble_$cfloatingType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCFloat ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CFloat
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CFloat
                  Foreign.C.Types.$fNumCFloat
                  Data.Array.Accelerate.Type.$fIsScalarCFloat
                  Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType -}
4161a22c92db7b7ac67e797699cf2713
  $fIsNumCFloat_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CFloat
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.FloatingNumType
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Type.$fIsFloatingCFloat_$cfloatingType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCInt ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CInt
                  Foreign.C.Types.$fNumCInt
                  Data.Array.Accelerate.Type.$fIsScalarCInt
                  Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType -}
f6d689d457132606fa00a4fe7373d140
  $fIsNumCInt_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CInt
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Type.$fIsBoundedCInt_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCLLong ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CLLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLLong
                  Foreign.C.Types.$fNumCLLong
                  Data.Array.Accelerate.Type.$fIsScalarCLLong
                  Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType -}
3bee1c8e927a762acbad5e321ec65a20
  $fIsNumCLLong_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CLLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Type.$fIsBoundedCLLong_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCLong ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLong
                  Foreign.C.Types.$fNumCLong
                  Data.Array.Accelerate.Type.$fIsScalarCLong
                  Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType -}
58e0f28699e7ae3fb706fcbe87731efe
  $fIsNumCLong_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Type.$fIsBoundedCLong_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCShort ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CShort
                  Foreign.C.Types.$fNumCShort
                  Data.Array.Accelerate.Type.$fIsScalarCShort
                  Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType -}
e02e6ca5db3dde24874d2e07437cf3f8
  $fIsNumCShort_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CShort
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Type.$fIsBoundedCShort_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCUInt ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CUInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUInt
                  Foreign.C.Types.$fNumCUInt
                  Data.Array.Accelerate.Type.$fIsScalarCUInt
                  Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType -}
cfdb2bd7198532b5c39ffccf1c66807f
  $fIsNumCUInt_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CUInt
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Type.$fIsBoundedCUInt_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCULLong ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CULLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULLong
                  Foreign.C.Types.$fNumCULLong
                  Data.Array.Accelerate.Type.$fIsScalarCULLong
                  Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType -}
5d4def021fb654b367bb9fb2761ba03d
  $fIsNumCULLong_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CULLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Type.$fIsBoundedCULLong_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCULong ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CULong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULong
                  Foreign.C.Types.$fNumCULong
                  Data.Array.Accelerate.Type.$fIsScalarCULong
                  Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType -}
b393d6d8f1b621b9a7d92a82b61e74be
  $fIsNumCULong_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CULong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Type.$fIsBoundedCULong_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumCUShort ::
    Data.Array.Accelerate.Type.IsNum Foreign.C.Types.CUShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUShort
                  Foreign.C.Types.$fNumCUShort
                  Data.Array.Accelerate.Type.$fIsScalarCUShort
                  Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType -}
0a176ffb715672ecd48a90f8ff82cc25
  $fIsNumCUShort_$cnumType ::
    Data.Array.Accelerate.Type.NumType Foreign.C.Types.CUShort
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Type.$fIsBoundedCUShort_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumDouble :: Data.Array.Accelerate.Type.IsNum GHC.Types.Double
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  GHC.Float.$fNumDouble
                  Data.Array.Accelerate.Type.$fIsScalarDouble
                  Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType -}
0490bdfae50ed17eed502833dc254eec
  $fIsNumDouble_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Types.Double
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.FloatingNumType
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Type.$fIsFloatingDouble_$cfloatingType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumFloat :: Data.Array.Accelerate.Type.IsNum GHC.Types.Float
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  GHC.Float.$fNumFloat
                  Data.Array.Accelerate.Type.$fIsScalarFloat
                  Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType -}
bdfc14fba7616f299d194606d74bfa26
  $fIsNumFloat_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Types.Float
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.FloatingNumType
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Type.$fIsFloatingFloat_$cfloatingType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumInt :: Data.Array.Accelerate.Type.IsNum GHC.Types.Int
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  GHC.Num.$fNumInt
                  Data.Array.Accelerate.Type.$fIsScalarInt
                  Data.Array.Accelerate.Type.$fIsNumInt_$cnumType -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumInt16 :: Data.Array.Accelerate.Type.IsNum GHC.Int.Int16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int16
                  GHC.Int.$fNumInt16
                  Data.Array.Accelerate.Type.$fIsScalarInt16
                  Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType -}
3d03ed4dadd72f98ac204fb933e122b5
  $fIsNumInt16_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Int.Int16
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Type.$fIsBoundedInt16_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumInt32 :: Data.Array.Accelerate.Type.IsNum GHC.Int.Int32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  GHC.Int.$fNumInt32
                  Data.Array.Accelerate.Type.$fIsScalarInt32
                  Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType -}
01e556a35510bd7b41e5f3dfaa5aa13d
  $fIsNumInt32_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Int.Int32
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Type.$fIsBoundedInt32_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumInt64 :: Data.Array.Accelerate.Type.IsNum GHC.Int.Int64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int64
                  GHC.Int.$fNumInt64
                  Data.Array.Accelerate.Type.$fIsScalarInt64
                  Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType -}
ba86603565f03fd3c36c540651cee002
  $fIsNumInt64_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Int.Int64
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Type.$fIsBoundedInt64_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumInt8 :: Data.Array.Accelerate.Type.IsNum GHC.Int.Int8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int8
                  GHC.Int.$fNumInt8
                  Data.Array.Accelerate.Type.$fIsScalarInt8
                  Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType -}
7e7221013b3ebb8f8edab0877915f67f
  $fIsNumInt8_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Int.Int8
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Type.$fIsBoundedInt8_$cintegralType) -}
082032612e02498b5f875a0b9b34f908
  $fIsNumInt_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Type.$fIsBoundedInt_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumWord :: Data.Array.Accelerate.Type.IsNum GHC.Types.Word
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Word
                  GHC.Num.$fNumWord
                  Data.Array.Accelerate.Type.$fIsScalarWord
                  Data.Array.Accelerate.Type.$fIsNumWord_$cnumType -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumWord16 :: Data.Array.Accelerate.Type.IsNum GHC.Word.Word16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word16
                  GHC.Word.$fNumWord16
                  Data.Array.Accelerate.Type.$fIsScalarWord16
                  Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType -}
4c70467897866ca082990302b4c981c2
  $fIsNumWord16_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Word.Word16
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Type.$fIsBoundedWord16_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumWord32 :: Data.Array.Accelerate.Type.IsNum GHC.Word.Word32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word32
                  GHC.Word.$fNumWord32
                  Data.Array.Accelerate.Type.$fIsScalarWord32
                  Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType -}
1edb60272517a45d962defea3240d6d4
  $fIsNumWord32_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Word.Word32
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Type.$fIsBoundedWord32_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumWord64 :: Data.Array.Accelerate.Type.IsNum GHC.Word.Word64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word64
                  GHC.Word.$fNumWord64
                  Data.Array.Accelerate.Type.$fIsScalarWord64
                  Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType -}
094297589e8ebb2c265f3a409553c786
  $fIsNumWord64_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Word.Word64
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Type.$fIsBoundedWord64_$cintegralType) -}
ecb14251f1b647b1e1179d9603820446
  $fIsNumWord8 :: Data.Array.Accelerate.Type.IsNum GHC.Word.Word8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word8
                  GHC.Word.$fNumWord8
                  Data.Array.Accelerate.Type.$fIsScalarWord8
                  Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType -}
4cb3a197b1f91e3d038d06ff2d95465d
  $fIsNumWord8_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Word.Word8
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Type.$fIsBoundedWord8_$cintegralType) -}
4384c24dc9fc0fc3aad4ad92e1e78aa2
  $fIsNumWord_$cnumType ::
    Data.Array.Accelerate.Type.NumType GHC.Types.Word
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.IntegralNumType
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Type.$fIsBoundedWord_$cintegralType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarBool ::
    Data.Array.Accelerate.Type.IsScalar GHC.Types.Bool
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  Data.Array.Accelerate.Type.$fIsScalarBool_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarBool_$cscalarType -}
239019ae52dfcb172decc482fc4c0ce7
  $fIsScalarBool1 ::
    GHC.Prim.Proxy# GHC.Types.Bool -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Types.Bool) ->
                 Data.Array.Accelerate.Type.$fIsScalarBool2) -}
972adf0b634b9bfc81a14e3ea13e3410
  $fIsScalarBool2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarBool3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcBool
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
38c47d253a77de3b19597fc5ba9706d5
  $fIsScalarBool3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   15899861992609591342##
                   8208526680161485329##) -}
5952f75f8785b4bb5566c1e41f4b340a
  $fIsScalarBool_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Types.Bool
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarBool1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Types.Bool>_N)) -}
9b033ecaffd2c26e1d1b755347be60f7
  $fIsScalarBool_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumScalarType
                   @ GHC.Types.Bool
                   Data.Array.Accelerate.Type.$fIsBoundedBool_$cnonNumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCChar ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CChar
                  Data.Array.Accelerate.Type.$fIsScalarCChar_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCChar_$cscalarType -}
92fd5ce9708d173e5ea23d4c9312ead7
  $fIsScalarCChar1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CChar
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CChar) ->
                 Data.Array.Accelerate.Type.$fIsScalarCChar2) -}
d96344fc4703d9117abd1501dba1561e
  $fIsScalarCChar2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCChar3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
5f6df1a2828550e01ee88f5d4476294f
  $fIsScalarCChar3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6636149876960226416##
                   14935049334487545938##) -}
e6a06bfe7233b6f82f6b44c3579fe7eb
  $fIsScalarCChar_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CChar
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCChar1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CChar>_N)) -}
8b7cbee42128d6fb917b53923f97b21e
  $fIsScalarCChar_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CChar
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumScalarType
                   @ Foreign.C.Types.CChar
                   Data.Array.Accelerate.Type.$fIsBoundedCChar_$cnonNumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCDouble ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CDouble
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CDouble
                  Data.Array.Accelerate.Type.$fIsScalarCDouble_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCDouble_$cscalarType -}
1675c74c07472c8dca65cdab5f31c6d1
  $fIsScalarCDouble1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CDouble
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Type.$fIsScalarCDouble2) -}
7f35da3d17070d94b1bbdf485963b7bb
  $fIsScalarCDouble2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCDouble3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCDouble
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
bee7e46e920c88d750474ecac5e6a27b
  $fIsScalarCDouble3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   3988602792397136721##
                   11994732519497227898##) -}
e7b9ecb314a33bf8945aefc332980708
  $fIsScalarCDouble_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCDouble1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CDouble>_N)) -}
792cc81587e42db3002da8da3f62eeb6
  $fIsScalarCDouble_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CDouble
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Type.$fIsNumCDouble_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCFloat ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CFloat
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CFloat
                  Data.Array.Accelerate.Type.$fIsScalarCFloat_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCFloat_$cscalarType -}
d1ff0c3841c90c0dca63e47d6717780f
  $fIsScalarCFloat1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CFloat
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Type.$fIsScalarCFloat2) -}
90fc23278f0737ba003bc2f401ae6ec3
  $fIsScalarCFloat2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCFloat3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCFloat
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
3583c82cc6a0f6b481a2db5ea2af514f
  $fIsScalarCFloat3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   2186201658861261085##
                   9851684138350894703##) -}
2009dad2c8f07bc318459b6285220486
  $fIsScalarCFloat_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCFloat1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CFloat>_N)) -}
75be8d02b3ce3329634fbaf1e7233525
  $fIsScalarCFloat_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CFloat
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Type.$fIsNumCFloat_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCInt ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CInt
                  Data.Array.Accelerate.Type.$fIsScalarCInt_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCInt_$cscalarType -}
5c33ed14789fb011b23027ef6871d584
  $fIsScalarCInt1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CInt
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CInt) ->
                 Data.Array.Accelerate.Type.$fIsScalarCInt2) -}
1399dc7f2454908b07675fe21bacd693
  $fIsScalarCInt2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCInt3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCInt
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
5c2b6477a7b215fefb3fb1bad33797e9
  $fIsScalarCInt3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   15755878720638220308##
                   8932847852143744236##) -}
35f4815ade2c866afa89eff3cf17788b
  $fIsScalarCInt_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CInt
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCInt1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CInt>_N)) -}
41363e8652e7568fb6749293a1d5311e
  $fIsScalarCInt_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CInt
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CInt
                   Data.Array.Accelerate.Type.$fIsNumCInt_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCLLong ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CLLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLLong
                  Data.Array.Accelerate.Type.$fIsScalarCLLong_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCLLong_$cscalarType -}
739f9f23c44155ad06267ea39b9ba711
  $fIsScalarCLLong1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CLLong
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CLLong) ->
                 Data.Array.Accelerate.Type.$fIsScalarCLLong2) -}
f3e2854c3cb652b4abc0a5e380a169d8
  $fIsScalarCLLong2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCLLong3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCLLong
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
cecc11266fd47607cb11e084ccb664f7
  $fIsScalarCLLong3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1261159744452620298##
                   6152952695761724749##) -}
63b649be099f1fd45d91cc18338d4049
  $fIsScalarCLLong_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CLLong
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCLLong1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CLLong>_N)) -}
ebaedcb53ef046892d35eb36adbb2a9a
  $fIsScalarCLLong_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CLLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CLLong
                   Data.Array.Accelerate.Type.$fIsNumCLLong_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCLong ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLong
                  Data.Array.Accelerate.Type.$fIsScalarCLong_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCLong_$cscalarType -}
6b1e24ecefce5ba2d3686621ec505804
  $fIsScalarCLong1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CLong
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CLong) ->
                 Data.Array.Accelerate.Type.$fIsScalarCLong2) -}
108c8bdf466305885aff78838585a300
  $fIsScalarCLong2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCLong3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCLong
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
30541856f7f6f4bb81dd6caacfdf1b55
  $fIsScalarCLong3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   7955758130054559740##
                   1759637632192852808##) -}
bef5b193a7f41147773d57b0115f9940
  $fIsScalarCLong_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CLong
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCLong1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CLong>_N)) -}
40b68deb40e07a64b533b13174e0bbcc
  $fIsScalarCLong_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CLong
                   Data.Array.Accelerate.Type.$fIsNumCLong_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCSChar ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CSChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CSChar
                  Data.Array.Accelerate.Type.$fIsScalarCSChar_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCSChar_$cscalarType -}
c4999ce051da8fcc665e17950e5a4b2d
  $fIsScalarCSChar1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CSChar
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CSChar) ->
                 Data.Array.Accelerate.Type.$fIsScalarCSChar2) -}
19f8ccdc4ce9b0e8709316fad7f683ed
  $fIsScalarCSChar2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCSChar3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCSChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
14b99981fdd73138a46c4aabaa97542c
  $fIsScalarCSChar3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   11990483343463454872##
                   17903170428449166639##) -}
fdc52632c687c6b405ec99e0205fa2b4
  $fIsScalarCSChar_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CSChar
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCSChar1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CSChar>_N)) -}
9e074bb95089b55d9e2c18762a26632f
  $fIsScalarCSChar_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CSChar
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumScalarType
                   @ Foreign.C.Types.CSChar
                   Data.Array.Accelerate.Type.$fIsBoundedCSChar_$cnonNumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCShort ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CShort
                  Data.Array.Accelerate.Type.$fIsScalarCShort_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCShort_$cscalarType -}
88078b95079b11a97e026b4af8d41884
  $fIsScalarCShort1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CShort
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CShort) ->
                 Data.Array.Accelerate.Type.$fIsScalarCShort2) -}
2afc73c13a96667875697aa8d3b9e76e
  $fIsScalarCShort2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCShort3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCShort
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
49a35d5e485fc9b824ff98f32af4cace
  $fIsScalarCShort3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   10965880292047396372##
                   4406175778044881486##) -}
80a979eddffe1f1f4d8e564eedd7de51
  $fIsScalarCShort_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CShort
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCShort1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CShort>_N)) -}
2519230bcc4d81ae5bfa8c71b707daea
  $fIsScalarCShort_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CShort
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CShort
                   Data.Array.Accelerate.Type.$fIsNumCShort_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCUChar ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CUChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUChar
                  Data.Array.Accelerate.Type.$fIsScalarCUChar_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCUChar_$cscalarType -}
ef604a1ef4c01c86e50df602ee583eee
  $fIsScalarCUChar1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CUChar
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CUChar) ->
                 Data.Array.Accelerate.Type.$fIsScalarCUChar2) -}
8ecaad3d50607c8a9bd552d0affb8516
  $fIsScalarCUChar2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCUChar3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCUChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
c5d6b1df182ee646fe175539043bb0d0
  $fIsScalarCUChar3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   18222523318360801038##
                   15011528960710498863##) -}
2dac925a4e73228a48dd2f682738ecec
  $fIsScalarCUChar_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CUChar
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCUChar1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CUChar>_N)) -}
ade480b0a25077da416119c77d633eb5
  $fIsScalarCUChar_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CUChar
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumScalarType
                   @ Foreign.C.Types.CUChar
                   Data.Array.Accelerate.Type.$fIsBoundedCUChar_$cnonNumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCUInt ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CUInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUInt
                  Data.Array.Accelerate.Type.$fIsScalarCUInt_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCUInt_$cscalarType -}
e67a91c44e0177d1eb182b835ff045b4
  $fIsScalarCUInt1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CUInt
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CUInt) ->
                 Data.Array.Accelerate.Type.$fIsScalarCUInt2) -}
79c5f6a5e624d2be60ae0d52b4d6985e
  $fIsScalarCUInt2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCUInt3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCUInt
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
e16ce5b0c5672fe36103fda308e845eb
  $fIsScalarCUInt3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   15992536851013498368##
                   14230202437176314871##) -}
7a93c22098114a6037dcdc2d0dc21a41
  $fIsScalarCUInt_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CUInt
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCUInt1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CUInt>_N)) -}
e32e2eaedbb9a1b80e9078d305c9d0d5
  $fIsScalarCUInt_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CUInt
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CUInt
                   Data.Array.Accelerate.Type.$fIsNumCUInt_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCULLong ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CULLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULLong
                  Data.Array.Accelerate.Type.$fIsScalarCULLong_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCULLong_$cscalarType -}
a6062550eb65f9725c0c18751ee97dba
  $fIsScalarCULLong1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CULLong
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CULLong) ->
                 Data.Array.Accelerate.Type.$fIsScalarCULLong2) -}
e1132703eb68e25fa793e14a683244bc
  $fIsScalarCULLong2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCULLong3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCULLong
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b632a608f28842b5aaa6514ee9954e8b
  $fIsScalarCULLong3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   2283799871351322855##
                   18166166748488956094##) -}
89de87ac69c7d0b446eea6c28c18ed26
  $fIsScalarCULLong_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CULLong
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCULLong1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CULLong>_N)) -}
4aff3a573206fed511db7ee00bd31d67
  $fIsScalarCULLong_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CULLong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CULLong
                   Data.Array.Accelerate.Type.$fIsNumCULLong_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCULong ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CULong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULong
                  Data.Array.Accelerate.Type.$fIsScalarCULong_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCULong_$cscalarType -}
df7f371fe34a718fa0e62912aaedbc11
  $fIsScalarCULong1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CULong
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CULong) ->
                 Data.Array.Accelerate.Type.$fIsScalarCULong2) -}
337e4dfaa2f77a6f5c32169349e6f4ed
  $fIsScalarCULong2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCULong3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCULong
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b57c05ca3e11fdc022a3f89dc6d8aad7
  $fIsScalarCULong3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1762916561578327399##
                   12951741281294884215##) -}
2ba6d61f7767add7d0c2f6421217e7fa
  $fIsScalarCULong_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CULong
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCULong1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CULong>_N)) -}
ca53feb58ad2a9100b4e79f4a96c2542
  $fIsScalarCULong_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CULong
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CULong
                   Data.Array.Accelerate.Type.$fIsNumCULong_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarCUShort ::
    Data.Array.Accelerate.Type.IsScalar Foreign.C.Types.CUShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUShort
                  Data.Array.Accelerate.Type.$fIsScalarCUShort_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarCUShort_$cscalarType -}
1b3b85e914aa234066783cecc0358164
  $fIsScalarCUShort1 ::
    GHC.Prim.Proxy# Foreign.C.Types.CUShort
    -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# Foreign.C.Types.CUShort) ->
                 Data.Array.Accelerate.Type.$fIsScalarCUShort2) -}
0aa99a3c3c6c4022f985667d4beee9d1
  $fIsScalarCUShort2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarCUShort3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   Foreign.C.Types.$tcCUShort
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
5fca57a7e7d5c59389e45434d599c5c4
  $fIsScalarCUShort3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   3823783006246547695##
                   8686598590013121527##) -}
eb34ad45250635adc9899ecc7d055d21
  $fIsScalarCUShort_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable Foreign.C.Types.CUShort
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarCUShort1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <Foreign.C.Types.CUShort>_N)) -}
cc536bafc8242c52ac87241801a9dcbb
  $fIsScalarCUShort_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType Foreign.C.Types.CUShort
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ Foreign.C.Types.CUShort
                   Data.Array.Accelerate.Type.$fIsNumCUShort_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarChar ::
    Data.Array.Accelerate.Type.IsScalar GHC.Types.Char
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  Data.Array.Accelerate.Type.$fIsScalarChar_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarChar_$cscalarType -}
93e46d7fd140adb24c212d58df6126be
  $fIsScalarChar1 ::
    GHC.Prim.Proxy# GHC.Types.Char -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Types.Char) ->
                 Data.Array.Accelerate.Type.$fIsScalarChar2) -}
f0a6ffdf223ca4501acd201bc7a61268
  $fIsScalarChar2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarChar3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcChar
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
e734a36be74c29b203960abb7a17bfca
  $fIsScalarChar3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16781394633280494409##
                   2520638044472077920##) -}
95dafc7642eb601a7fafb13bcc4e5c19
  $fIsScalarChar_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Types.Char
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarChar1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Types.Char>_N)) -}
7e4b81720a88c228cf8fe1a664f682bf
  $fIsScalarChar_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Types.Char
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Type.NonNumScalarType
                   @ GHC.Types.Char
                   Data.Array.Accelerate.Type.$fIsBoundedChar_$cnonNumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarDouble ::
    Data.Array.Accelerate.Type.IsScalar GHC.Types.Double
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Data.Array.Accelerate.Type.$fIsScalarDouble_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarDouble_$cscalarType -}
00ecbee4dbd39ef74d276d1030e8cb7e
  $fIsScalarDouble1 ::
    GHC.Prim.Proxy# GHC.Types.Double -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Types.Double) ->
                 Data.Array.Accelerate.Type.$fIsScalarDouble2) -}
c302524a9f8432f5ac9961b2f89d2215
  $fIsScalarDouble2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarDouble3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcDouble
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
36cfabb66d3f73144241dd0dee64b883
  $fIsScalarDouble3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8705313363352784917##
                   10768904120299974647##) -}
a3146fcf0f287c5a5eb378a7520d2f73
  $fIsScalarDouble_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Types.Double
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarDouble1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Types.Double>_N)) -}
aa23a9ee8afdf540dc735ed20e0a35ec
  $fIsScalarDouble_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Types.Double
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Type.$fIsNumDouble_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarFloat ::
    Data.Array.Accelerate.Type.IsScalar GHC.Types.Float
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  Data.Array.Accelerate.Type.$fIsScalarFloat_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarFloat_$cscalarType -}
caf08d069508ff5d0c97ee618de5ed9e
  $fIsScalarFloat1 ::
    GHC.Prim.Proxy# GHC.Types.Float -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Types.Float) ->
                 Data.Array.Accelerate.Type.$fIsScalarFloat2) -}
b2400f206eaf98c6430b55dec1645876
  $fIsScalarFloat2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarFloat3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcFloat
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
449c9f280cd95a1d8c5d553835541ff1
  $fIsScalarFloat3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8679316326329983383##
                   1648058332703460507##) -}
0a2756760473f1547667553c1ffc82e0
  $fIsScalarFloat_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Types.Float
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarFloat1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Types.Float>_N)) -}
8ee0c7ecfd9272bb8f54f82059dd464c
  $fIsScalarFloat_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Types.Float
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Type.$fIsNumFloat_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarInt :: Data.Array.Accelerate.Type.IsScalar GHC.Types.Int
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  Data.Array.Accelerate.Type.$fIsScalarInt_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarInt_$cscalarType -}
a5f49949206415e95acdfd885f3ae8d5
  $fIsScalarInt1 ::
    GHC.Prim.Proxy# GHC.Types.Int -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Types.Int) ->
                 Data.Array.Accelerate.Type.$fIsScalarInt2) -}
125496f1493dd51947da87bcf5d3aa22
  $fIsScalarInt10 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   18293643134385259660##
                   2145542159008221396##) -}
37124309281e1cad0b8ea347ccd49cda
  $fIsScalarInt11 ::
    GHC.Prim.Proxy# GHC.Int.Int64 -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Int.Int64) ->
                 Data.Array.Accelerate.Type.$fIsScalarInt12) -}
e29e8b98470dcc1ef5247dd5263ee6a7
  $fIsScalarInt12 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarInt13
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Int.$tcInt64
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
4ec9ee090d51aab47f3f91385c0bbf77
  $fIsScalarInt13 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   9195664943556889903##
                   4078472333938398022##) -}
bcd57762d37ffae9e641f6b875ec6835
  $fIsScalarInt14 ::
    GHC.Prim.Proxy# GHC.Int.Int8 -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Int.Int8) ->
                 Data.Array.Accelerate.Type.$fIsScalarInt15) -}
10453931cf4dbc24e20e48019e23536d
  $fIsScalarInt15 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarInt17
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Int.$tcInt8
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarInt16 ::
    Data.Array.Accelerate.Type.IsScalar GHC.Int.Int16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int16
                  Data.Array.Accelerate.Type.$fIsScalarInt16_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarInt16_$cscalarType -}
27e09ea10f9ae2a24d61bf5429223854
  $fIsScalarInt16_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Int.Int16
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarInt4
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Int.Int16>_N)) -}
ae4c562e40e735c92fca6f316bb82ff0
  $fIsScalarInt16_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Int.Int16
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Int.Int16
                   Data.Array.Accelerate.Type.$fIsNumInt16_$cnumType) -}
6331375fdfd33fab470844184fc349fe
  $fIsScalarInt17 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16289214116307338990##
                   2733988466001545502##) -}
18e5bd297effdb8c080a1a84d6e3a048
  $fIsScalarInt2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarInt3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcInt
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b467da158f089a52c9dab4360fcf0a6f
  $fIsScalarInt3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   16287469036901857884##
                   16587023596664995632##) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarInt32 ::
    Data.Array.Accelerate.Type.IsScalar GHC.Int.Int32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  Data.Array.Accelerate.Type.$fIsScalarInt32_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarInt32_$cscalarType -}
7503abc734c48819bd7e1b67e934cd2c
  $fIsScalarInt32_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Int.Int32
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarInt7
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Int.Int32>_N)) -}
33ec62dd5aa5fa620869ae336071474b
  $fIsScalarInt32_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Int.Int32
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Int.Int32
                   Data.Array.Accelerate.Type.$fIsNumInt32_$cnumType) -}
b7af9c94daad7b4a2ec856416b2d1148
  $fIsScalarInt4 ::
    GHC.Prim.Proxy# GHC.Int.Int16 -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Int.Int16) ->
                 Data.Array.Accelerate.Type.$fIsScalarInt5) -}
2173a0eaba4999086151b27e152aea5b
  $fIsScalarInt5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarInt6
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Int.$tcInt16
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
78601584f645676acb1f12f9a1909619
  $fIsScalarInt6 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   6414064947313429027##
                   12939521022517555451##) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarInt64 ::
    Data.Array.Accelerate.Type.IsScalar GHC.Int.Int64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int64
                  Data.Array.Accelerate.Type.$fIsScalarInt64_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarInt64_$cscalarType -}
f1f805b36325e9a04e79c7ef84a7c056
  $fIsScalarInt64_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Int.Int64
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarInt11
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Int.Int64>_N)) -}
c51025d8eeed3f8c279698a125582980
  $fIsScalarInt64_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Int.Int64
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Int.Int64
                   Data.Array.Accelerate.Type.$fIsNumInt64_$cnumType) -}
0aa3e6bfc8bfcde7344bc0149e6170a0
  $fIsScalarInt7 ::
    GHC.Prim.Proxy# GHC.Int.Int32 -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Int.Int32) ->
                 Data.Array.Accelerate.Type.$fIsScalarInt9) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarInt8 :: Data.Array.Accelerate.Type.IsScalar GHC.Int.Int8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int8
                  Data.Array.Accelerate.Type.$fIsScalarInt8_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarInt8_$cscalarType -}
149a8ae90953a6b8f151b429a9a9ad3b
  $fIsScalarInt8_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Int.Int8
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarInt14
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Int.Int8>_N)) -}
fdef1436aa3628c9e94449f9f841accf
  $fIsScalarInt8_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Int.Int8
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Int.Int8
                   Data.Array.Accelerate.Type.$fIsNumInt8_$cnumType) -}
700cc802a24822b483bf1d33503cf166
  $fIsScalarInt9 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarInt10
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Int.$tcInt32
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
8e231698e5114af891e29a638810993e
  $fIsScalarInt_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Types.Int
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarInt1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Types.Int>_N)) -}
c382f1c628fb05a731755d366b3c2886
  $fIsScalarInt_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Type.$fIsNumInt_$cnumType) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarWord ::
    Data.Array.Accelerate.Type.IsScalar GHC.Types.Word
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Word
                  Data.Array.Accelerate.Type.$fIsScalarWord_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarWord_$cscalarType -}
6fc30f10c34671399f7859a516721073
  $fIsScalarWord1 ::
    GHC.Prim.Proxy# GHC.Types.Word -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Types.Word) ->
                 Data.Array.Accelerate.Type.$fIsScalarWord2) -}
171c190a38956ac44e4b75a3bfddc5c7
  $fIsScalarWord10 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   4985773253823789786##
                   344217921296873675##) -}
51a39bb4d5a12c847e3163ef6db74371
  $fIsScalarWord11 ::
    GHC.Prim.Proxy# GHC.Word.Word64 -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Word.Word64) ->
                 Data.Array.Accelerate.Type.$fIsScalarWord12) -}
10f590ef170225897b6c378c34999b32
  $fIsScalarWord12 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarWord13
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Word.$tcWord64
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
0d45f38eff0ced4f742ef6ba3bd0b164
  $fIsScalarWord13 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   8563698015495396214##
                   17617305094906953856##) -}
a02cf87be29edcb00b56dd794b959456
  $fIsScalarWord14 ::
    GHC.Prim.Proxy# GHC.Word.Word8 -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Word.Word8) ->
                 Data.Array.Accelerate.Type.$fIsScalarWord15) -}
b31c2431a6d1cab176b24068f815847e
  $fIsScalarWord15 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarWord17
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Word.$tcWord8
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarWord16 ::
    Data.Array.Accelerate.Type.IsScalar GHC.Word.Word16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word16
                  Data.Array.Accelerate.Type.$fIsScalarWord16_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarWord16_$cscalarType -}
6c7dffce6674596afff53876462a6e2a
  $fIsScalarWord16_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Word.Word16
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarWord4
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Word.Word16>_N)) -}
2e11b8474eb026b567a931d10bd5c09d
  $fIsScalarWord16_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Word.Word16
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Word.Word16
                   Data.Array.Accelerate.Type.$fIsNumWord16_$cnumType) -}
eb5080f52df927ed57a217746eeeae32
  $fIsScalarWord17 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   4673197808472169995##
                   1591651367984728364##) -}
a83deaf4d44fc195211378ff5ca9adce
  $fIsScalarWord2 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarWord3
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Types.$tcWord
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
039fc0862df4334306b242bcf7eaedc0
  $fIsScalarWord3 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1719302327188739463##
                   7991641711147892872##) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarWord32 ::
    Data.Array.Accelerate.Type.IsScalar GHC.Word.Word32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word32
                  Data.Array.Accelerate.Type.$fIsScalarWord32_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarWord32_$cscalarType -}
03d13ea1f50ade63c8a4ba201bb5f7e8
  $fIsScalarWord32_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Word.Word32
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarWord7
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Word.Word32>_N)) -}
47f4bfbe1800bd1fecc7dc3e5ec605b5
  $fIsScalarWord32_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Word.Word32
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Word.Word32
                   Data.Array.Accelerate.Type.$fIsNumWord32_$cnumType) -}
b5e294dc3a364536b822138801641a47
  $fIsScalarWord4 ::
    GHC.Prim.Proxy# GHC.Word.Word16 -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Word.Word16) ->
                 Data.Array.Accelerate.Type.$fIsScalarWord5) -}
5bb3a6e3caa8274f333c3ee53dbe38a8
  $fIsScalarWord5 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarWord6
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Word.$tcWord16
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
69e2d18e95b308a9444dc785a18e8ac7
  $fIsScalarWord6 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   1843663331481819404##
                   9549966838059712364##) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarWord64 ::
    Data.Array.Accelerate.Type.IsScalar GHC.Word.Word64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word64
                  Data.Array.Accelerate.Type.$fIsScalarWord64_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarWord64_$cscalarType -}
25b82c23fd0091cde26b44a2332be7ab
  $fIsScalarWord64_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Word.Word64
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarWord11
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Word.Word64>_N)) -}
aa3c9402144feb31e31c81387d3df346
  $fIsScalarWord64_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Word.Word64
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Word.Word64
                   Data.Array.Accelerate.Type.$fIsNumWord64_$cnumType) -}
e66765c2633c6de5142c0e261a5f6240
  $fIsScalarWord7 ::
    GHC.Prim.Proxy# GHC.Word.Word32 -> Data.Typeable.Internal.TypeRep
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (wild :: GHC.Prim.Proxy# GHC.Word.Word32) ->
                 Data.Array.Accelerate.Type.$fIsScalarWord9) -}
b39315a91b81ff18413f7fb7d8fed68c
  $fIsScalarWord8 ::
    Data.Array.Accelerate.Type.IsScalar GHC.Word.Word8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word8
                  Data.Array.Accelerate.Type.$fIsScalarWord8_$cp1IsScalar
                  Data.Array.Accelerate.Type.$fIsScalarWord8_$cscalarType -}
b42a993b3990c3f8c614857d74874775
  $fIsScalarWord8_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Word.Word8
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarWord14
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Word.Word8>_N)) -}
dbf4f889e7548b02242e1e28b17ff883
  $fIsScalarWord8_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Word.Word8
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Word.Word8
                   Data.Array.Accelerate.Type.$fIsNumWord8_$cnumType) -}
5fde57c691c4e1eb517bf51242704197
  $fIsScalarWord9 :: Data.Typeable.Internal.TypeRep
  {- Unfolding: (case Data.Typeable.Internal.typeRepFingerprints
                        (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                        (GHC.Types.[]
                           @ Data.Typeable.Internal.TypeRep) of kt_fps { DEFAULT ->
                 case GHC.Fingerprint.fingerprintFingerprints
                        (GHC.Types.:
                           @ GHC.Fingerprint.Type.Fingerprint
                           Data.Array.Accelerate.Type.$fIsScalarWord10
                           kt_fps) of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 Data.Typeable.Internal.TypeRep
                   dt1
                   dt2
                   GHC.Word.$tcWord32
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep)
                   (GHC.Types.[] @ Data.Typeable.Internal.TypeRep) } }) -}
f98e69c0f8c1a9386fc2e71e2cf410bc
  $fIsScalarWord_$cp1IsScalar ::
    Data.Typeable.Internal.Typeable GHC.Types.Word
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Type.$fIsScalarWord1
                  `cast`
                (Sym (Data.Typeable.Internal.N:Typeable[0]
                          <*>_N <GHC.Types.Word>_N)) -}
5169d8ffc434ca6a3d7e48e42f852b35
  $fIsScalarWord_$cscalarType ::
    Data.Array.Accelerate.Type.ScalarType GHC.Types.Word
  {- Strictness: m1,
     Unfolding: (Data.Array.Accelerate.Type.NumScalarType
                   @ GHC.Types.Word
                   Data.Array.Accelerate.Type.$fIsNumWord_$cnumType) -}
587e226fabbdef28c976ac0ac487e117
  $fShowBoundedType ::
    GHC.Show.Show (Data.Array.Accelerate.Type.BoundedType a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Array.Accelerate.Type.BoundedType a)
                  (Data.Array.Accelerate.Type.$fShowBoundedType_$cshowsPrec @ a)
                  (Data.Array.Accelerate.Type.$fShowBoundedType_$cshow1 @ a)
                  (Data.Array.Accelerate.Type.$fShowBoundedType_$cshowList @ a) -}
38b072df0c2ee8d798ee3b84cd78bd4e
  $fShowBoundedType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CUChar"#) -}
cc5c9cbac634c808498daa8ff257bf60
  $fShowBoundedType10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CUInt"#) -}
7b9da1f55c9b5e6f0436f4cb3da5d6d5
  $fShowBoundedType11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CInt"#) -}
30ac4a58434b4a991b945a20ea226b2e
  $fShowBoundedType12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CUShort"#) -}
1c5de08b958f98f5120564c7fbfcd709
  $fShowBoundedType13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CShort"#) -}
80aaa7ea6f3bb4cda7817852c1212a57
  $fShowBoundedType14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Word64"#) -}
f4299cf5c0d12cd3dcdb64a8553f4981
  $fShowBoundedType15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Word32"#) -}
567cfe76e90e2c311c73187d17062bb5
  $fShowBoundedType16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Word16"#) -}
6289965d09267941bba396156f7c3984
  $fShowBoundedType17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Word8"#) -}
3cb48ac6eb039c280c4374bef4ff165c
  $fShowBoundedType18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Word"#) -}
8c256a1352bc07ab53c7c9c7ac6edc6b
  $fShowBoundedType19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Int64"#) -}
159240705178e96abd7b11fabee35c50
  $fShowBoundedType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CSChar"#) -}
f63592d4b9b41d3dba4cd7317d7b4b6a
  $fShowBoundedType20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Int32"#) -}
603f128be8d76672aa6b55864e2532f8
  $fShowBoundedType21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Int16"#) -}
bf899e3607743d6ebf59a008fe23093a
  $fShowBoundedType22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Int8"#) -}
16aa94fdc3c3aaa28d43a15a362cdf72
  $fShowBoundedType23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Int"#) -}
b5d6b9b27235fc64c752dfe30c79f7ac
  $fShowBoundedType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CChar"#) -}
2f49844c5141a983ff3e45c09e4ae889
  $fShowBoundedType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Char"#) -}
b4905e5bcb57dafa06438b826d2b257a
  $fShowBoundedType5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Bool"#) -}
881f51686b00c0d15f654af28dc1ad9c
  $fShowBoundedType6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CULLong"#) -}
4bd07ab8c288707f5952c3c0ed04d7db
  $fShowBoundedType7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CLLong"#) -}
a088e40008601574055e9b4d6ae0c167
  $fShowBoundedType8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CULong"#) -}
c31f572559362d251482c56cc89b4dab
  $fShowBoundedType9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CLong"#) -}
0b35b82481c40d13579644883a8a096c
  $fShowBoundedType_$cshow ::
    Data.Array.Accelerate.Type.IntegralType a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: Data.Array.Accelerate.Type.IntegralType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.TypeInt cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType23
                   Data.Array.Accelerate.Type.TypeInt8 cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType22
                   Data.Array.Accelerate.Type.TypeInt16 cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType21
                   Data.Array.Accelerate.Type.TypeInt32 cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType20
                   Data.Array.Accelerate.Type.TypeInt64 cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType19
                   Data.Array.Accelerate.Type.TypeWord cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType18
                   Data.Array.Accelerate.Type.TypeWord8 cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType17
                   Data.Array.Accelerate.Type.TypeWord16 cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType16
                   Data.Array.Accelerate.Type.TypeWord32 cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType15
                   Data.Array.Accelerate.Type.TypeWord64 cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType14
                   Data.Array.Accelerate.Type.TypeCShort cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType13
                   Data.Array.Accelerate.Type.TypeCUShort cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType12
                   Data.Array.Accelerate.Type.TypeCInt cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType11
                   Data.Array.Accelerate.Type.TypeCUInt cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType10
                   Data.Array.Accelerate.Type.TypeCLong cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType9
                   Data.Array.Accelerate.Type.TypeCULong cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType8
                   Data.Array.Accelerate.Type.TypeCLLong cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType7
                   Data.Array.Accelerate.Type.TypeCULLong cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType6 }) -}
587e226fabbdef28c976ac0ac487e117
  $fShowBoundedType_$cshow1 ::
    Data.Array.Accelerate.Type.BoundedType a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Array.Accelerate.Type.BoundedType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.IntegralBoundedType ty
                   -> Data.Array.Accelerate.Type.$fShowBoundedType_$cshow @ a ty
                   Data.Array.Accelerate.Type.NonNumBoundedType ty
                   -> Data.Array.Accelerate.Type.$fShowBoundedType_$cshow2
                        @ a
                        ty }) -}
a6fb98a8e4afd252d3e51393643910ab
  $fShowBoundedType_$cshow2 ::
    Data.Array.Accelerate.Type.NonNumType a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Array.Accelerate.Type.NonNumType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.TypeBool cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType5
                   Data.Array.Accelerate.Type.TypeChar cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType4
                   Data.Array.Accelerate.Type.TypeCChar cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType3
                   Data.Array.Accelerate.Type.TypeCSChar cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType2
                   Data.Array.Accelerate.Type.TypeCUChar cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowBoundedType1 }) -}
587e226fabbdef28c976ac0ac487e117
  $fShowBoundedType_$cshowList ::
    [Data.Array.Accelerate.Type.BoundedType a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ls :: [Data.Array.Accelerate.Type.BoundedType a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Type.BoundedType a)
                   (Data.Array.Accelerate.Type.$fShowBoundedType_$cshowsPrec
                      @ a
                      GHC.Show.shows22)
                   ls
                   s) -}
587e226fabbdef28c976ac0ac487e117
  $fShowBoundedType_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Type.BoundedType a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Type.BoundedType a)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Type.$w$cshowsPrec @ a w1 w2) -}
a8fbaf1931593cc4a29598dedb323812
  $fShowFloatingType ::
    GHC.Show.Show (Data.Array.Accelerate.Type.FloatingType a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Array.Accelerate.Type.FloatingType a)
                  (Data.Array.Accelerate.Type.$fShowFloatingType_$cshowsPrec @ a)
                  (Data.Array.Accelerate.Type.$fShowFloatingType_$cshow @ a)
                  (Data.Array.Accelerate.Type.$fShowFloatingType_$cshowList @ a) -}
588d534f27b74eb2fc2965b80c79e0a2
  $fShowFloatingType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CDouble"#) -}
9c71b75f885ad758c5e72345e513c47b
  $fShowFloatingType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CFloat"#) -}
a4104da34aa62f6b27362a810e363c58
  $fShowFloatingType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Double"#) -}
b4096eac707ae5f1121d18eef24f06da
  $fShowFloatingType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Float"#) -}
a8fbaf1931593cc4a29598dedb323812
  $fShowFloatingType_$cshow ::
    Data.Array.Accelerate.Type.FloatingType a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Array.Accelerate.Type.FloatingType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.TypeFloat cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowFloatingType4
                   Data.Array.Accelerate.Type.TypeDouble cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowFloatingType3
                   Data.Array.Accelerate.Type.TypeCFloat cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowFloatingType2
                   Data.Array.Accelerate.Type.TypeCDouble cobox0 ds1
                   -> Data.Array.Accelerate.Type.$fShowFloatingType1 }) -}
a8fbaf1931593cc4a29598dedb323812
  $fShowFloatingType_$cshowList ::
    [Data.Array.Accelerate.Type.FloatingType a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ls :: [Data.Array.Accelerate.Type.FloatingType a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Type.FloatingType a)
                   (Data.Array.Accelerate.Type.$fShowFloatingType_$cshowsPrec
                      @ a
                      GHC.Show.shows22)
                   ls
                   s) -}
a8fbaf1931593cc4a29598dedb323812
  $fShowFloatingType_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Type.FloatingType a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Type.FloatingType a)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Type.$w$cshowsPrec1 @ a w1 w2) -}
0b35b82481c40d13579644883a8a096c
  $fShowIntegralType ::
    GHC.Show.Show (Data.Array.Accelerate.Type.IntegralType a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Array.Accelerate.Type.IntegralType a)
                  (Data.Array.Accelerate.Type.$fShowIntegralType_$cshowsPrec @ a)
                  (Data.Array.Accelerate.Type.$fShowBoundedType_$cshow @ a)
                  (Data.Array.Accelerate.Type.$fShowIntegralType_$cshowList @ a) -}
0b35b82481c40d13579644883a8a096c
  $fShowIntegralType1 ::
    Data.Array.Accelerate.Type.IntegralType a
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a
                   (x :: Data.Array.Accelerate.Type.IntegralType a)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Data.Array.Accelerate.Type.$fShowBoundedType_$cshow @ a x)
                   s) -}
0b35b82481c40d13579644883a8a096c
  $fShowIntegralType_$cshowList ::
    [Data.Array.Accelerate.Type.IntegralType a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ a
                   (ls :: [Data.Array.Accelerate.Type.IntegralType a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Type.IntegralType a)
                   (Data.Array.Accelerate.Type.$fShowIntegralType1 @ a)
                   ls
                   s) -}
0b35b82481c40d13579644883a8a096c
  $fShowIntegralType_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Type.IntegralType a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Data.Array.Accelerate.Type.IntegralType a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Data.Array.Accelerate.Type.$fShowBoundedType_$cshow @ a x))
                   s) -}
a6fb98a8e4afd252d3e51393643910ab
  $fShowNonNumType ::
    GHC.Show.Show (Data.Array.Accelerate.Type.NonNumType a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Array.Accelerate.Type.NonNumType a)
                  (Data.Array.Accelerate.Type.$fShowNonNumType_$cshowsPrec @ a)
                  (Data.Array.Accelerate.Type.$fShowBoundedType_$cshow2 @ a)
                  (Data.Array.Accelerate.Type.$fShowNonNumType_$cshowList @ a) -}
a6fb98a8e4afd252d3e51393643910ab
  $fShowNonNumType_$cshowList ::
    [Data.Array.Accelerate.Type.NonNumType a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ls :: [Data.Array.Accelerate.Type.NonNumType a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Type.NonNumType a)
                   (Data.Array.Accelerate.Type.$fShowNonNumType_$cshowsPrec
                      @ a
                      GHC.Show.shows22)
                   ls
                   s) -}
a6fb98a8e4afd252d3e51393643910ab
  $fShowNonNumType_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Type.NonNumType a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Type.NonNumType a)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Type.$w$cshowsPrec2 @ a w1 w2) -}
13909a3ca52b1a41105a7d98e1d63baf
  $fShowNumType ::
    GHC.Show.Show (Data.Array.Accelerate.Type.NumType a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Array.Accelerate.Type.NumType a)
                  (Data.Array.Accelerate.Type.$fShowNumType_$cshowsPrec @ a)
                  (Data.Array.Accelerate.Type.$fShowNumType_$cshow @ a)
                  (Data.Array.Accelerate.Type.$fShowNumType_$cshowList @ a) -}
13909a3ca52b1a41105a7d98e1d63baf
  $fShowNumType_$cshow ::
    Data.Array.Accelerate.Type.NumType a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Array.Accelerate.Type.NumType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.IntegralNumType ty
                   -> Data.Array.Accelerate.Type.$fShowBoundedType_$cshow @ a ty
                   Data.Array.Accelerate.Type.FloatingNumType ty
                   -> Data.Array.Accelerate.Type.$fShowFloatingType_$cshow
                        @ a
                        ty }) -}
13909a3ca52b1a41105a7d98e1d63baf
  $fShowNumType_$cshowList ::
    [Data.Array.Accelerate.Type.NumType a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ls :: [Data.Array.Accelerate.Type.NumType a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Type.NumType a)
                   (Data.Array.Accelerate.Type.$fShowNumType_$cshowsPrec
                      @ a
                      GHC.Show.shows22)
                   ls
                   s) -}
13909a3ca52b1a41105a7d98e1d63baf
  $fShowNumType_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Type.NumType a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Type.NumType a)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Type.$w$cshowsPrec3 @ a w1 w2) -}
ab6372a7ff8e599731c2fa5da97173de
  $fShowScalarType ::
    GHC.Show.Show (Data.Array.Accelerate.Type.ScalarType a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Array.Accelerate.Type.ScalarType a)
                  (Data.Array.Accelerate.Type.$fShowScalarType_$cshowsPrec @ a)
                  (Data.Array.Accelerate.Type.$fShowScalarType_$cshow @ a)
                  (Data.Array.Accelerate.Type.$fShowScalarType_$cshowList @ a) -}
ab6372a7ff8e599731c2fa5da97173de
  $fShowScalarType_$cshow ::
    Data.Array.Accelerate.Type.ScalarType a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Array.Accelerate.Type.ScalarType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.NumScalarType ty
                   -> Data.Array.Accelerate.Type.$fShowNumType_$cshow @ a ty
                   Data.Array.Accelerate.Type.NonNumScalarType ty
                   -> Data.Array.Accelerate.Type.$fShowBoundedType_$cshow2
                        @ a
                        ty }) -}
ab6372a7ff8e599731c2fa5da97173de
  $fShowScalarType_$cshowList ::
    [Data.Array.Accelerate.Type.ScalarType a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ls :: [Data.Array.Accelerate.Type.ScalarType a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Type.ScalarType a)
                   (Data.Array.Accelerate.Type.$fShowScalarType_$cshowsPrec
                      @ a
                      GHC.Show.shows22)
                   ls
                   s) -}
ab6372a7ff8e599731c2fa5da97173de
  $fShowScalarType_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Type.ScalarType a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Type.ScalarType a)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Type.$w$cshowsPrec4 @ a w1 w2) -}
80f35ed30c42e69f416a3f4776b90673
  $fShowTupleType ::
    GHC.Show.Show (Data.Array.Accelerate.Type.TupleType a)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Data.Array.Accelerate.Type.TupleType a)
                  (Data.Array.Accelerate.Type.$fShowTupleType_$cshowsPrec @ a)
                  (Data.Array.Accelerate.Type.$fShowTupleType_$cshow @ a)
                  (Data.Array.Accelerate.Type.$fShowTupleType_$cshowList @ a) -}
80f35ed30c42e69f416a3f4776b90673
  $fShowTupleType1 ::
    Data.Array.Accelerate.Type.TupleType a
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ @ a
                   (x :: Data.Array.Accelerate.Type.TupleType a)
                   (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Data.Array.Accelerate.Type.$fShowTupleType_$cshow @ a x)
                   s) -}
80f35ed30c42e69f416a3f4776b90673
  $fShowTupleType_$cshow ::
    Data.Array.Accelerate.Type.TupleType a -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
80f35ed30c42e69f416a3f4776b90673
  $fShowTupleType_$cshowList ::
    [Data.Array.Accelerate.Type.TupleType a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ a
                   (ls :: [Data.Array.Accelerate.Type.TupleType a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Type.TupleType a)
                   (Data.Array.Accelerate.Type.$fShowTupleType1 @ a)
                   ls
                   s) -}
80f35ed30c42e69f416a3f4776b90673
  $fShowTupleType_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Type.TupleType a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: GHC.Types.Int)
                   (x :: Data.Array.Accelerate.Type.TupleType a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Data.Array.Accelerate.Type.$fShowTupleType_$cshow @ a x))
                   s) -}
c25ccdaeeb61306ff5bfbf2e264942b4
  $tc'C:IsBounded :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16307469526180361898##
                   1454045230943994171##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'C:IsBounded1) -}
46e262d5a5ec821e3e5758c543ab1b3b
  $tc'C:IsBounded1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:IsBounded"#) -}
588b4b75bef847fd2502fedfb6f205e3
  $tc'C:IsFloating :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14022374662195685354##
                   3147353531128244841##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'C:IsFloating1) -}
81247785194be21d81f130678ebf435d
  $tc'C:IsFloating1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:IsFloating"#) -}
1d557700ef94364a49cfc55a3f4bc2b1
  $tc'C:IsIntegral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16534211923949594760##
                   13760855823951380296##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'C:IsIntegral1) -}
0a234d8797fccf287ff877e83f672ce4
  $tc'C:IsIntegral1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:IsIntegral"#) -}
ee8d2e718d07acdd7019bf012a9c9b01
  $tc'C:IsNonNum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2976811942981413842##
                   337952603033409064##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'C:IsNonNum1) -}
b583d1f0b59eff3b28e4f4b82ab6a353
  $tc'C:IsNonNum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:IsNonNum"#) -}
50162e9654746b0220b3c086e89678a7
  $tc'C:IsNum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8436746308480324571##
                   6961443082694469089##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'C:IsNum1) -}
ab5bd7d6d573db564d611e68a4fb0c7b
  $tc'C:IsNum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:IsNum"#) -}
24d88cae81d387d90288e2a5568ce2c0
  $tc'C:IsScalar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8412793381707216137##
                   4419989653611274164##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'C:IsScalar1) -}
27c38c969bd121a8156461f69b4893d5
  $tc'C:IsScalar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:IsScalar"#) -}
18d65b4d7e50ef5be77a10c59a66ab93
  $tc'FloatingDict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10374459712562848703##
                   8802023688485865748##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'FloatingDict1) -}
71ebad0281917ff5ba624a12b6d0ba36
  $tc'FloatingDict1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FloatingDict"#) -}
ebd954e782f352f04f750ee77601de74
  $tc'FloatingNumType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1858457597146794752##
                   11497895419127910260##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'FloatingNumType1) -}
0797de8dc8ffce59fc38c4860349fd07
  $tc'FloatingNumType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FloatingNumType"#) -}
1be7ddb52a5f0e87238102c6e3903d75
  $tc'IntegralBoundedType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5373324565030614707##
                   17229226825260896211##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'IntegralBoundedType1) -}
b6842bc6bebc89468ec8384731b7e782
  $tc'IntegralBoundedType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntegralBoundedType"#) -}
7832b61e157baa48dde8bf1fb7ec1d9a
  $tc'IntegralDict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6887131402754321808##
                   1019145592383013672##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'IntegralDict1) -}
c918a43ea13036e61da86753607750f9
  $tc'IntegralDict1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntegralDict"#) -}
663798b54c30a26c75d849d693edf04e
  $tc'IntegralNumType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8454539837787221602##
                   10090006584044130063##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'IntegralNumType1) -}
d40e9ce97c7f172358bafca1c8d8fd39
  $tc'IntegralNumType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntegralNumType"#) -}
06ff20d75ac5a294f3c86f25a3e44502
  $tc'NonNumBoundedType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5231713823669436702##
                   12525297421792212280##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'NonNumBoundedType1) -}
1db53bde0574d39770801dfe24bffecc
  $tc'NonNumBoundedType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NonNumBoundedType"#) -}
fbc48342bb7a091977ea4c54d3f13a14
  $tc'NonNumDict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10883585404305869202##
                   8483311567947597354##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'NonNumDict1) -}
d8da0030b851bb7852037247608ef252
  $tc'NonNumDict1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NonNumDict"#) -}
d92716750d5c103e931e604cceaad42b
  $tc'NonNumScalarType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6094511278002462221##
                   5219969908827945996##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'NonNumScalarType1) -}
2cfa20de98837d987c5ed25488db58e6
  $tc'NonNumScalarType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NonNumScalarType"#) -}
1970eef60bc6a0087ba12a4521d2925a
  $tc'NumScalarType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5459426288417040344##
                   6793183813797664007##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'NumScalarType1) -}
c019b5abc8ca4dfe373f7ab6be509c54
  $tc'NumScalarType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NumScalarType"#) -}
e01e6ed3f3c6042c34f182959381255b
  $tc'PairTuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4211099721260705813##
                   714296460466514581##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'PairTuple1) -}
c1b202bab93f497b96300adeccd57648
  $tc'PairTuple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PairTuple"#) -}
a110b4ac16a4dce1ae152c2099971ef6
  $tc'SingleTuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5313635584251621247##
                   4682076343920155262##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'SingleTuple1) -}
a771990e2e4607ea69811dc3aab5d17f
  $tc'SingleTuple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SingleTuple"#) -}
ba09da88cb07c3b3d1744f93cfbe1c54
  $tc'TypeBool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14007217642941858057##
                   7067258724480273339##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeBool1) -}
b88af154f230db9e05a6d018efa5c730
  $tc'TypeBool1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeBool"#) -}
ea037944273abb6b46ab4b76f7536a14
  $tc'TypeCChar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16209502546527082989##
                   12484572413953307986##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCChar1) -}
544800a44671ee584e0e2570d858887d
  $tc'TypeCChar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCChar"#) -}
6dd307b6a83d247a2482ebf8ee2a8323
  $tc'TypeCDouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12341031051553489039##
                   3201129882396815633##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCDouble1) -}
5f566fb0c706caeebdc36da6f0ec56ee
  $tc'TypeCDouble1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCDouble"#) -}
abcb9cdd118de036e12d9a81e4ce2e7a
  $tc'TypeCFloat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12768677144306020691##
                   16188640501152899146##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCFloat1) -}
9def59c31af6a2a72b80bbcc4612fef7
  $tc'TypeCFloat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCFloat"#) -}
9df64b06a4e0393338385f9c2e2c1014
  $tc'TypeCInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10718450762266619562##
                   5196188982426037874##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCInt1) -}
fefd144f58285b98e306f6a1ec8caa4c
  $tc'TypeCInt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCInt"#) -}
805ef91730ee07c166def4ef3b751759
  $tc'TypeCLLong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18051830282167400717##
                   6972553846276493937##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCLLong1) -}
f88be468ac6393fd5562a79f0903882e
  $tc'TypeCLLong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCLLong"#) -}
e26db249185a01eff362f86eb4766d87
  $tc'TypeCLong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14425850114399620228##
                   7594872113471049614##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCLong1) -}
32dd4c99eaa38845a2557277b42173f8
  $tc'TypeCLong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCLong"#) -}
bb7ea8e3720dc837eb4805cc73003d37
  $tc'TypeCSChar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15957969776377829443##
                   12345320939584221865##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCSChar1) -}
30b3f31f858478d559f873cf300e583e
  $tc'TypeCSChar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCSChar"#) -}
19d66752ece2d22a84bfadf94a2f4690
  $tc'TypeCShort :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1525695911943959659##
                   3365070233626760111##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCShort1) -}
899adca667d56e2f8dace0fa7f7f5da7
  $tc'TypeCShort1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCShort"#) -}
2959d0c4da8f98a8ab34a411d2fa3479
  $tc'TypeCUChar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13714987282138657560##
                   15216699328434964770##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCUChar1) -}
c6086dad1d5564c7c703b0cf0036e40d
  $tc'TypeCUChar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCUChar"#) -}
e3a681fefd87512ff47e945ad406a9a9
  $tc'TypeCUInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4767948888208719962##
                   11131774936706297240##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCUInt1) -}
c26c7c27bf4379aa1f1a2cddc1673509
  $tc'TypeCUInt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCUInt"#) -}
7f97de6ffcad5cd7886de820aeaeede1
  $tc'TypeCULLong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10556393063493908430##
                   5527214965746252810##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCULLong1) -}
074747931b983a28df75fbc31b94edb2
  $tc'TypeCULLong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCULLong"#) -}
2be0c1d999a9ccadb4f0e54fb0b19cdc
  $tc'TypeCULong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4379134712511468757##
                   18260897929187947216##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCULong1) -}
bb6b8cb41f42107a3c13ec44eb2d37a6
  $tc'TypeCULong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCULong"#) -}
bc8d5dd188866b9a47c641bec2c8d420
  $tc'TypeCUShort :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1584416232008365923##
                   12161897607961717591##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeCUShort1) -}
c3b63c7ca41aa788279dbeb5d6e35abf
  $tc'TypeCUShort1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeCUShort"#) -}
43e6fb7d169c26715222f0c8b77af8d2
  $tc'TypeChar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11922263922564678707##
                   15258687918444467825##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeChar1) -}
db3e95c73ae75be05d44d0f0ab081f43
  $tc'TypeChar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeChar"#) -}
cd1399f9d48a825fa939ecd7e5195947
  $tc'TypeDouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   340763444651747057##
                   1733968180964460983##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeDouble1) -}
9c727c50ea1b0cdeca25296727e9d4ba
  $tc'TypeDouble1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeDouble"#) -}
67f2f518c4b926f8017f7d1a18a7d281
  $tc'TypeFloat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   232244891897523552##
                   15857688794825641942##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeFloat1) -}
ac635b07291546533c04ee6855feab85
  $tc'TypeFloat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeFloat"#) -}
b68603ad9cef7dcb2b052b63d71d98ef
  $tc'TypeInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17493133089079059760##
                   10233264149870525137##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeInt1) -}
3fad46ab8862ef845c592b7c23d6d4d7
  $tc'TypeInt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeInt"#) -}
767299cd281ae9a5b62e4dde370c8547
  $tc'TypeInt16 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9151388225584651892##
                   8197834738604966681##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeInt2) -}
2c71fc760473cad7c50289ecbeb48341
  $tc'TypeInt2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeInt16"#) -}
129020d54db60c7b5ffefefa4ff7c076
  $tc'TypeInt3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeInt32"#) -}
f17a3d2bd090a45ff061f38933a1ef4e
  $tc'TypeInt32 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11096278972509330651##
                   11459722000016620413##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeInt3) -}
d05f91673f7db701a81c3dd3ffea5e80
  $tc'TypeInt4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeInt64"#) -}
a5d1a4617fccc69a154b9ab2a3a7132c
  $tc'TypeInt5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeInt8"#) -}
515ebc30394a508d17e75aeee23de3b4
  $tc'TypeInt64 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7264869278371810754##
                   13726356773485131609##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeInt4) -}
f45f819357ed671e3a8f9557fe66c6ef
  $tc'TypeInt8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14343004795186128695##
                   8413109791580117996##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeInt5) -}
0c857c40bdfb2ef3b6d10d1dd53246a6
  $tc'TypeWord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15696209425692275741##
                   13259795409000165784##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeWord1) -}
04d64ed384d71cb091215bf96d6852c7
  $tc'TypeWord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeWord"#) -}
b6f300e9b7d12bc2caebaf428b3b052d
  $tc'TypeWord16 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3072896254864753376##
                   4861038739010254431##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeWord2) -}
3b5d72216d83aa52c066386ead9e82fa
  $tc'TypeWord2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeWord16"#) -}
7ff12086f476c802f7406952f587600c
  $tc'TypeWord3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeWord32"#) -}
d826d1aa5152e8583c635e86b64b2f18
  $tc'TypeWord32 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4932568220267367631##
                   16041199837675440480##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeWord3) -}
7d2e1ec53b3cf6e90e40385addade690
  $tc'TypeWord4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeWord64"#) -}
4d3437d17ef5c8123e4a91bf1a0a2c8e
  $tc'TypeWord5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeWord8"#) -}
9086d7455ab884d3232bb9bea0c6f033
  $tc'TypeWord64 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14173968363511555312##
                   1680820416977895958##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeWord4) -}
06da5e43bdbdb130c2362788a58c874d
  $tc'TypeWord8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2759217082633775860##
                   14233333093602801159##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'TypeWord5) -}
9549fa37c385149148782d8b98bcfbc8
  $tc'UnitTuple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8454622410786529780##
                   15193483292007617092##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tc'UnitTuple1) -}
fc2c47e79079a39dfd222bcdccc692e4
  $tc'UnitTuple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UnitTuple"#) -}
00d5bfc7b7d27f584716b1393c04f435
  $tcBoundedType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4796941489896446754##
                   17527503724065090909##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcBoundedType1) -}
00167c7d6023afc16dbce0b6b709bf9c
  $tcBoundedType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BoundedType"#) -}
4f3489b7b8c10331297a41888800eaac
  $tcFloatingDict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1610975270325405261##
                   8940141539522338870##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcFloatingDict1) -}
c9538c56acd2d3044dc43c53179973e3
  $tcFloatingDict1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FloatingDict"#) -}
6f2593d2d617001753809f72c4d4b385
  $tcFloatingType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16240465798262319488##
                   8458061371919524406##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcFloatingType1) -}
6cca6def31823a1d5f7e20cc15997bdf
  $tcFloatingType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "FloatingType"#) -}
ed8e076e165b3e686bc3f3a05c17c2ad
  $tcIntegralDict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12976737098620874883##
                   12623830470731076396##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcIntegralDict1) -}
ed0de7881199e2d76c27b40411ad323c
  $tcIntegralDict1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IntegralDict"#) -}
2f02a2d1eb96950fb8d743b78b4b8bef
  $tcIntegralType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16605634312180337834##
                   15162279202591638855##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcIntegralType1) -}
afff216b785dabd25c238399c80e2a2e
  $tcIntegralType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IntegralType"#) -}
9b46e4bac8490d5c7f777b6d26f78af3
  $tcIsBounded :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18087512525326012221##
                   17120575050413610425##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcIsBounded1) -}
b56f23101abfc760e4a42a16077823ac
  $tcIsBounded1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IsBounded"#) -}
d24c8b47a618459e0c0d00851cadcc2e
  $tcIsFloating :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5323569371276616688##
                   14829720652429691880##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcIsFloating1) -}
d11b53f4a330a5e3e0802acd5b134324
  $tcIsFloating1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IsFloating"#) -}
6e12552b573ae4ac66cb949f5cb7890c
  $tcIsIntegral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5267163860958356881##
                   12199889589855161859##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcIsIntegral1) -}
f98f7e389e4e93ebda2c97318871904d
  $tcIsIntegral1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IsIntegral"#) -}
60290216287109ba801fc4136978a7e1
  $tcIsNonNum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8385739460763679078##
                   3317759749090225441##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcIsNonNum1) -}
570acdc0c0798d4201deb0f057227b1a
  $tcIsNonNum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IsNonNum"#) -}
dc69d2e01bfec2660f974d4c71d633a7
  $tcIsNum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5208774672857898468##
                   7756067578963878000##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcIsNum1) -}
2d21a6ce16565ca053d78c0284154cb5
  $tcIsNum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IsNum"#) -}
58d7862659eeef6b735bf87d94f3a32a
  $tcIsScalar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1417677053880977329##
                   9402644082797777884##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcIsScalar1) -}
4b106ed664cb5562286fd379f5de1ca2
  $tcIsScalar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IsScalar"#) -}
42f4c5c52cef54d1f0e9e88830b21ecb
  $tcNonNumDict :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15397203898752064463##
                   11383386962880265815##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcNonNumDict1) -}
f8cd5425e4bc9ab14d4b02696366f5a8
  $tcNonNumDict1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NonNumDict"#) -}
4c0eb3da6c942086fa8266b751e121c4
  $tcNonNumType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4070898768583764670##
                   1251965618038547300##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcNonNumType1) -}
23ff4f44ce3254b913acdd950228e4d6
  $tcNonNumType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NonNumType"#) -}
06f72f9ee99ecb01dad732db8dbb604b
  $tcNumType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4162953711428611954##
                   15503953044317330165##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcNumType1) -}
2e4f2b58682085604e3ecc35537a1899
  $tcNumType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NumType"#) -}
3008636678e84ab7349e7a603dcc54b9
  $tcScalarType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   71892671019834601##
                   2148780916211835389##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcScalarType1) -}
18004b9dc78cf6cf8a45fb98e424c65e
  $tcScalarType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ScalarType"#) -}
dce4f1ce20d507b098230f3085d6b249
  $tcTupleType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18197480107489487209##
                   9478072593638942897##
                   Data.Array.Accelerate.Type.$trModule
                   Data.Array.Accelerate.Type.$tcTupleType1) -}
77e31185450a02b147bc6f624e60a046
  $tcTupleType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TupleType"#) -}
a569d7681ded7b37c52ebe248452ba80
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Type.$trModule2
                   Data.Array.Accelerate.Type.$trModule1) -}
a3ac7d46f9deb275be4d72c122d11fe1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.Array.Accelerate.Type"#) -}
3703ddb3da940703e5f95b472fc10399
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
587e226fabbdef28c976ac0ac487e117
  $w$cshowsPrec ::
    Data.Array.Accelerate.Type.BoundedType a
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Array.Accelerate.Type.BoundedType a)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Array.Accelerate.Type.IntegralBoundedType ty
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (Data.Array.Accelerate.Type.$fShowBoundedType_$cshow @ a ty)
                        w1
                   Data.Array.Accelerate.Type.NonNumBoundedType ty
                   -> case ty of wild1 {
                        Data.Array.Accelerate.Type.TypeBool cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType5
                             w1
                        Data.Array.Accelerate.Type.TypeChar cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType4
                             w1
                        Data.Array.Accelerate.Type.TypeCChar cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType3
                             w1
                        Data.Array.Accelerate.Type.TypeCSChar cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType2
                             w1
                        Data.Array.Accelerate.Type.TypeCUChar cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType1
                             w1 } }) -}
a8fbaf1931593cc4a29598dedb323812
  $w$cshowsPrec1 ::
    Data.Array.Accelerate.Type.FloatingType a
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Array.Accelerate.Type.FloatingType a)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Array.Accelerate.Type.TypeFloat cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowFloatingType4
                        w1
                   Data.Array.Accelerate.Type.TypeDouble cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowFloatingType3
                        w1
                   Data.Array.Accelerate.Type.TypeCFloat cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowFloatingType2
                        w1
                   Data.Array.Accelerate.Type.TypeCDouble cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowFloatingType1
                        w1 }) -}
a6fb98a8e4afd252d3e51393643910ab
  $w$cshowsPrec2 ::
    Data.Array.Accelerate.Type.NonNumType a
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Array.Accelerate.Type.NonNumType a)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Array.Accelerate.Type.TypeBool cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowBoundedType5
                        w1
                   Data.Array.Accelerate.Type.TypeChar cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowBoundedType4
                        w1
                   Data.Array.Accelerate.Type.TypeCChar cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowBoundedType3
                        w1
                   Data.Array.Accelerate.Type.TypeCSChar cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowBoundedType2
                        w1
                   Data.Array.Accelerate.Type.TypeCUChar cobox0 ds
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Type.$fShowBoundedType1
                        w1 }) -}
13909a3ca52b1a41105a7d98e1d63baf
  $w$cshowsPrec3 ::
    Data.Array.Accelerate.Type.NumType a
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Array.Accelerate.Type.NumType a)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Array.Accelerate.Type.IntegralNumType ty
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (Data.Array.Accelerate.Type.$fShowBoundedType_$cshow @ a ty)
                        w1
                   Data.Array.Accelerate.Type.FloatingNumType ty
                   -> case ty of wild1 {
                        Data.Array.Accelerate.Type.TypeFloat cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowFloatingType4
                             w1
                        Data.Array.Accelerate.Type.TypeDouble cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowFloatingType3
                             w1
                        Data.Array.Accelerate.Type.TypeCFloat cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowFloatingType2
                             w1
                        Data.Array.Accelerate.Type.TypeCDouble cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowFloatingType1
                             w1 } }) -}
ab6372a7ff8e599731c2fa5da97173de
  $w$cshowsPrec4 ::
    Data.Array.Accelerate.Type.ScalarType a
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Array.Accelerate.Type.ScalarType a)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Data.Array.Accelerate.Type.NumScalarType ty
                   -> case ty of wild1 {
                        Data.Array.Accelerate.Type.IntegralNumType ty1
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             (Data.Array.Accelerate.Type.$fShowBoundedType_$cshow @ a ty1)
                             w1
                        Data.Array.Accelerate.Type.FloatingNumType ty1
                        -> case ty1 of wild2 {
                             Data.Array.Accelerate.Type.TypeFloat cobox0 ds
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  Data.Array.Accelerate.Type.$fShowFloatingType4
                                  w1
                             Data.Array.Accelerate.Type.TypeDouble cobox0 ds
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  Data.Array.Accelerate.Type.$fShowFloatingType3
                                  w1
                             Data.Array.Accelerate.Type.TypeCFloat cobox0 ds
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  Data.Array.Accelerate.Type.$fShowFloatingType2
                                  w1
                             Data.Array.Accelerate.Type.TypeCDouble cobox0 ds
                             -> GHC.Base.++
                                  @ GHC.Types.Char
                                  Data.Array.Accelerate.Type.$fShowFloatingType1
                                  w1 } }
                   Data.Array.Accelerate.Type.NonNumScalarType ty
                   -> case ty of wild1 {
                        Data.Array.Accelerate.Type.TypeBool cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType5
                             w1
                        Data.Array.Accelerate.Type.TypeChar cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType4
                             w1
                        Data.Array.Accelerate.Type.TypeCChar cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType3
                             w1
                        Data.Array.Accelerate.Type.TypeCSChar cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType2
                             w1
                        Data.Array.Accelerate.Type.TypeCUChar cobox0 ds
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Data.Array.Accelerate.Type.$fShowBoundedType1
                             w1 } }) -}
b1a93a9534105f0cc3b5a1f8062ae90d
  type family BitSize a :: GHC.Types.Nat open
08b339c5e1c2596f47bb59a6ee6c7358
  type BitSizeEq a b =
    (Data.Array.Accelerate.Type.BitSize a
     Data.Type.Equality.== Data.Array.Accelerate.Type.BitSize b)
    Data.Type.Equality.~ 'GHC.Types.True
    :: GHC.Types.Constraint
587e226fabbdef28c976ac0ac487e117
  type role BoundedType nominal
  data BoundedType a where
    IntegralBoundedType :: (Data.Array.Accelerate.Type.IntegralType a)
                           -> BoundedType a
    NonNumBoundedType :: (Data.Array.Accelerate.Type.NonNumType a)
                         -> BoundedType a
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeBool::
      Data.Array.Accelerate.Type.BitSize GHC.Types.Bool = 1
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCChar::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CChar = 8
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCDouble::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CDouble = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCFloat::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CFloat = 32
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCInt::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CInt = 32
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCLLong::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CLLong = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCLong::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CLong = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCSChar::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CSChar = 8
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCShort::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CShort = 16
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCUChar::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CUChar = 8
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCUInt::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CUInt = 32
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCULLong::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CULLong = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCULong::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CULong = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeCUShort::
      Data.Array.Accelerate.Type.BitSize Foreign.C.Types.CUShort = 16
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeChar::
      Data.Array.Accelerate.Type.BitSize GHC.Types.Char = 32
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeDouble::
      Data.Array.Accelerate.Type.BitSize GHC.Types.Double = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeFloat::
      Data.Array.Accelerate.Type.BitSize GHC.Types.Float = 32
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeInt::
      Data.Array.Accelerate.Type.BitSize GHC.Types.Int = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeInt16::
      Data.Array.Accelerate.Type.BitSize GHC.Int.Int16 = 16
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeInt32::
      Data.Array.Accelerate.Type.BitSize GHC.Int.Int32 = 32
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeInt64::
      Data.Array.Accelerate.Type.BitSize GHC.Int.Int64 = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeInt8::
      Data.Array.Accelerate.Type.BitSize GHC.Int.Int8 = 8
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeWord::
      Data.Array.Accelerate.Type.BitSize GHC.Types.Word = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeWord16::
      Data.Array.Accelerate.Type.BitSize GHC.Word.Word16 = 16
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeWord32::
      Data.Array.Accelerate.Type.BitSize GHC.Word.Word32 = 32
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeWord64::
      Data.Array.Accelerate.Type.BitSize GHC.Word.Word64 = 64
b1a93a9534105f0cc3b5a1f8062ae90d
  axiom D:R:BitSizeWord8::
      Data.Array.Accelerate.Type.BitSize GHC.Word.Word8 = 8
790a8e2e73ca6c24d2bf4f43556b7f07
  type role FloatingDict nominal
  data FloatingDict a where
    FloatingDict :: (GHC.Enum.Enum a, GHC.Classes.Eq a,
                     GHC.Classes.Ord a, GHC.Show.Show a, GHC.Float.Floating a,
                     GHC.Real.Fractional a, GHC.Num.Num a, GHC.Real.Real a,
                     GHC.Real.RealFrac a, GHC.Float.RealFloat a,
                     Foreign.Storable.Storable a) =>
                    FloatingDict a
a8fbaf1931593cc4a29598dedb323812
  type role FloatingType nominal
  data FloatingType a where
    TypeFloat :: (Data.Array.Accelerate.Type.FloatingDict
                    GHC.Types.Float)
                 -> FloatingType GHC.Types.Float
    TypeDouble :: (Data.Array.Accelerate.Type.FloatingDict
                     GHC.Types.Double)
                  -> FloatingType GHC.Types.Double
    TypeCFloat :: (Data.Array.Accelerate.Type.FloatingDict
                     Foreign.C.Types.CFloat)
                  -> FloatingType Foreign.C.Types.CFloat
    TypeCDouble :: (Data.Array.Accelerate.Type.FloatingDict
                      Foreign.C.Types.CDouble)
                   -> FloatingType Foreign.C.Types.CDouble
c3dcf48f59ef761959d7def9732b17f7
  type role IntegralDict nominal
  data IntegralDict a where
    IntegralDict :: (GHC.Enum.Bounded a, GHC.Enum.Enum a,
                     GHC.Classes.Eq a, GHC.Classes.Ord a, GHC.Show.Show a,
                     Data.Bits.Bits a, Data.Bits.FiniteBits a, GHC.Real.Integral a,
                     GHC.Num.Num a, GHC.Real.Real a, Foreign.Storable.Storable a) =>
                    IntegralDict a
0b35b82481c40d13579644883a8a096c
  type role IntegralType nominal
  data IntegralType a where
    TypeInt :: (Data.Array.Accelerate.Type.IntegralDict GHC.Types.Int)
               -> IntegralType GHC.Types.Int
    TypeInt8 :: (Data.Array.Accelerate.Type.IntegralDict GHC.Int.Int8)
                -> IntegralType GHC.Int.Int8
    TypeInt16 :: (Data.Array.Accelerate.Type.IntegralDict
                    GHC.Int.Int16)
                 -> IntegralType GHC.Int.Int16
    TypeInt32 :: (Data.Array.Accelerate.Type.IntegralDict
                    GHC.Int.Int32)
                 -> IntegralType GHC.Int.Int32
    TypeInt64 :: (Data.Array.Accelerate.Type.IntegralDict
                    GHC.Int.Int64)
                 -> IntegralType GHC.Int.Int64
    TypeWord :: (Data.Array.Accelerate.Type.IntegralDict
                   GHC.Types.Word)
                -> IntegralType GHC.Types.Word
    TypeWord8 :: (Data.Array.Accelerate.Type.IntegralDict
                    GHC.Word.Word8)
                 -> IntegralType GHC.Word.Word8
    TypeWord16 :: (Data.Array.Accelerate.Type.IntegralDict
                     GHC.Word.Word16)
                  -> IntegralType GHC.Word.Word16
    TypeWord32 :: (Data.Array.Accelerate.Type.IntegralDict
                     GHC.Word.Word32)
                  -> IntegralType GHC.Word.Word32
    TypeWord64 :: (Data.Array.Accelerate.Type.IntegralDict
                     GHC.Word.Word64)
                  -> IntegralType GHC.Word.Word64
    TypeCShort :: (Data.Array.Accelerate.Type.IntegralDict
                     Foreign.C.Types.CShort)
                  -> IntegralType Foreign.C.Types.CShort
    TypeCUShort :: (Data.Array.Accelerate.Type.IntegralDict
                      Foreign.C.Types.CUShort)
                   -> IntegralType Foreign.C.Types.CUShort
    TypeCInt :: (Data.Array.Accelerate.Type.IntegralDict
                   Foreign.C.Types.CInt)
                -> IntegralType Foreign.C.Types.CInt
    TypeCUInt :: (Data.Array.Accelerate.Type.IntegralDict
                    Foreign.C.Types.CUInt)
                 -> IntegralType Foreign.C.Types.CUInt
    TypeCLong :: (Data.Array.Accelerate.Type.IntegralDict
                    Foreign.C.Types.CLong)
                 -> IntegralType Foreign.C.Types.CLong
    TypeCULong :: (Data.Array.Accelerate.Type.IntegralDict
                     Foreign.C.Types.CULong)
                  -> IntegralType Foreign.C.Types.CULong
    TypeCLLong :: (Data.Array.Accelerate.Type.IntegralDict
                     Foreign.C.Types.CLLong)
                  -> IntegralType Foreign.C.Types.CLLong
    TypeCULLong :: (Data.Array.Accelerate.Type.IntegralDict
                      Foreign.C.Types.CULLong)
                   -> IntegralType Foreign.C.Types.CULLong
7cb33b01ec00ead2fead7e2241e2c61d
  class IsBounded a where
    boundedType :: Data.Array.Accelerate.Type.BoundedType a
    {-# MINIMAL boundedType #-}
24296a373fe68881b6311df69c8e0867
  class (GHC.Float.Floating a, Data.Array.Accelerate.Type.IsScalar a,
         Data.Array.Accelerate.Type.IsNum a) =>
        IsFloating a where
    floatingType :: Data.Array.Accelerate.Type.FloatingType a
    {-# MINIMAL floatingType #-}
b2c4f7b6108c37809735ca127f59a1fe
  class (Data.Array.Accelerate.Type.IsScalar a,
         Data.Array.Accelerate.Type.IsNum a,
         Data.Array.Accelerate.Type.IsBounded a) =>
        IsIntegral a where
    integralType :: Data.Array.Accelerate.Type.IntegralType a
    {-# MINIMAL integralType #-}
c0481933b9b025ee9f482f2ca661109a
  class IsNonNum a where
    nonNumType :: Data.Array.Accelerate.Type.NonNumType a
    {-# MINIMAL nonNumType #-}
ecb14251f1b647b1e1179d9603820446
  class (GHC.Num.Num a, Data.Array.Accelerate.Type.IsScalar a) =>
        IsNum a where
    numType :: Data.Array.Accelerate.Type.NumType a
    {-# MINIMAL numType #-}
b39315a91b81ff18413f7fb7d8fed68c
  class Data.Typeable.Internal.Typeable a => IsScalar a where
    scalarType :: Data.Array.Accelerate.Type.ScalarType a
    {-# MINIMAL scalarType #-}
08d608172bc2972b85e081299b0bb9c3
  type role NonNumDict nominal
  data NonNumDict a where
    NonNumDict :: (GHC.Enum.Bounded a, GHC.Enum.Enum a,
                   GHC.Classes.Eq a, GHC.Classes.Ord a, GHC.Show.Show a,
                   Foreign.Storable.Storable a) =>
                  NonNumDict a
a6fb98a8e4afd252d3e51393643910ab
  type role NonNumType nominal
  data NonNumType a where
    TypeBool :: (Data.Array.Accelerate.Type.NonNumDict GHC.Types.Bool)
                -> NonNumType GHC.Types.Bool
    TypeChar :: (Data.Array.Accelerate.Type.NonNumDict GHC.Types.Char)
                -> NonNumType GHC.Types.Char
    TypeCChar :: (Data.Array.Accelerate.Type.NonNumDict
                    Foreign.C.Types.CChar)
                 -> NonNumType Foreign.C.Types.CChar
    TypeCSChar :: (Data.Array.Accelerate.Type.NonNumDict
                     Foreign.C.Types.CSChar)
                  -> NonNumType Foreign.C.Types.CSChar
    TypeCUChar :: (Data.Array.Accelerate.Type.NonNumDict
                     Foreign.C.Types.CUChar)
                  -> NonNumType Foreign.C.Types.CUChar
13909a3ca52b1a41105a7d98e1d63baf
  type role NumType nominal
  data NumType a where
    IntegralNumType :: (Data.Array.Accelerate.Type.IntegralType a)
                       -> NumType a
    FloatingNumType :: (Data.Array.Accelerate.Type.FloatingType a)
                       -> NumType a
ab6372a7ff8e599731c2fa5da97173de
  type role ScalarType nominal
  data ScalarType a where
    NumScalarType :: (Data.Array.Accelerate.Type.NumType a)
                     -> ScalarType a
    NonNumScalarType :: (Data.Array.Accelerate.Type.NonNumType a)
                        -> ScalarType a
80f35ed30c42e69f416a3f4776b90673
  type role TupleType nominal
  data TupleType a where
    UnitTuple :: TupleType ()
    SingleTuple :: (Data.Array.Accelerate.Type.ScalarType a)
                   -> TupleType a
    PairTuple :: (Data.Array.Accelerate.Type.TupleType a1)
                 -> (Data.Array.Accelerate.Type.TupleType b) -> TupleType (a1, b)
eccd4b5e93d76a53b7567fe35f0d1822
  floatingDict ::
    Data.Array.Accelerate.Type.FloatingType a
    -> Data.Array.Accelerate.Type.FloatingDict a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Array.Accelerate.Type.FloatingType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.TypeFloat cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.FloatingDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeDouble cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.FloatingDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCFloat cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.FloatingDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCDouble cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.FloatingDict (Sym cobox0))_R }) -}
b945b5d6b027755a064e7b1803880f63
  integralDict ::
    Data.Array.Accelerate.Type.IntegralType a
    -> Data.Array.Accelerate.Type.IntegralDict a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: Data.Array.Accelerate.Type.IntegralType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.TypeInt cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeInt8 cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeInt16 cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeInt32 cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeInt64 cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeWord cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeWord8 cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeWord16 cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeWord32 cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeWord64 cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCShort cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCUShort cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCInt cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCUInt cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCLong cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCULong cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCLLong cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCULLong cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.IntegralDict (Sym cobox0))_R }) -}
b7147599aa6687c668932e8cd9711b21
  nonNumDict ::
    Data.Array.Accelerate.Type.NonNumType a
    -> Data.Array.Accelerate.Type.NonNumDict a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Data.Array.Accelerate.Type.NonNumType a) ->
                 case ds of wild {
                   Data.Array.Accelerate.Type.TypeBool cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.NonNumDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeChar cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.NonNumDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCChar cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.NonNumDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCSChar cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.NonNumDict (Sym cobox0))_R
                   Data.Array.Accelerate.Type.TypeCUChar cobox0 dict
                   -> dict
                        `cast`
                      (Data.Array.Accelerate.Type.NonNumDict (Sym cobox0))_R }) -}
instance Data.Array.Accelerate.Type.IsBounded [GHC.Types.Bool]
  = Data.Array.Accelerate.Type.$fIsBoundedBool
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CChar]
  = Data.Array.Accelerate.Type.$fIsBoundedCChar
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Type.$fIsBoundedCInt
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Type.$fIsBoundedCLLong
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Type.$fIsBoundedCLong
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CSChar]
  = Data.Array.Accelerate.Type.$fIsBoundedCSChar
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Type.$fIsBoundedCShort
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CUChar]
  = Data.Array.Accelerate.Type.$fIsBoundedCUChar
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Type.$fIsBoundedCUInt
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Type.$fIsBoundedCULLong
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Type.$fIsBoundedCULong
instance Data.Array.Accelerate.Type.IsBounded [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Type.$fIsBoundedCUShort
instance Data.Array.Accelerate.Type.IsBounded [GHC.Types.Char]
  = Data.Array.Accelerate.Type.$fIsBoundedChar
instance Data.Array.Accelerate.Type.IsBounded [GHC.Types.Int]
  = Data.Array.Accelerate.Type.$fIsBoundedInt
instance Data.Array.Accelerate.Type.IsBounded [GHC.Int.Int16]
  = Data.Array.Accelerate.Type.$fIsBoundedInt16
instance Data.Array.Accelerate.Type.IsBounded [GHC.Int.Int32]
  = Data.Array.Accelerate.Type.$fIsBoundedInt32
instance Data.Array.Accelerate.Type.IsBounded [GHC.Int.Int64]
  = Data.Array.Accelerate.Type.$fIsBoundedInt64
instance Data.Array.Accelerate.Type.IsBounded [GHC.Int.Int8]
  = Data.Array.Accelerate.Type.$fIsBoundedInt8
instance Data.Array.Accelerate.Type.IsBounded [GHC.Types.Word]
  = Data.Array.Accelerate.Type.$fIsBoundedWord
instance Data.Array.Accelerate.Type.IsBounded [GHC.Word.Word16]
  = Data.Array.Accelerate.Type.$fIsBoundedWord16
instance Data.Array.Accelerate.Type.IsBounded [GHC.Word.Word32]
  = Data.Array.Accelerate.Type.$fIsBoundedWord32
instance Data.Array.Accelerate.Type.IsBounded [GHC.Word.Word64]
  = Data.Array.Accelerate.Type.$fIsBoundedWord64
instance Data.Array.Accelerate.Type.IsBounded [GHC.Word.Word8]
  = Data.Array.Accelerate.Type.$fIsBoundedWord8
instance Data.Array.Accelerate.Type.IsFloating [Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Type.$fIsFloatingCDouble
instance Data.Array.Accelerate.Type.IsFloating [Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Type.$fIsFloatingCFloat
instance Data.Array.Accelerate.Type.IsFloating [GHC.Types.Double]
  = Data.Array.Accelerate.Type.$fIsFloatingDouble
instance Data.Array.Accelerate.Type.IsFloating [GHC.Types.Float]
  = Data.Array.Accelerate.Type.$fIsFloatingFloat
instance Data.Array.Accelerate.Type.IsIntegral [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Type.$fIsIntegralCInt
instance Data.Array.Accelerate.Type.IsIntegral [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Type.$fIsIntegralCLLong
instance Data.Array.Accelerate.Type.IsIntegral [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Type.$fIsIntegralCLong
instance Data.Array.Accelerate.Type.IsIntegral [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Type.$fIsIntegralCShort
instance Data.Array.Accelerate.Type.IsIntegral [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Type.$fIsIntegralCUInt
instance Data.Array.Accelerate.Type.IsIntegral [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Type.$fIsIntegralCULLong
instance Data.Array.Accelerate.Type.IsIntegral [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Type.$fIsIntegralCULong
instance Data.Array.Accelerate.Type.IsIntegral [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Type.$fIsIntegralCUShort
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Types.Int]
  = Data.Array.Accelerate.Type.$fIsIntegralInt
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Int.Int16]
  = Data.Array.Accelerate.Type.$fIsIntegralInt16
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Int.Int32]
  = Data.Array.Accelerate.Type.$fIsIntegralInt32
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Int.Int64]
  = Data.Array.Accelerate.Type.$fIsIntegralInt64
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Int.Int8]
  = Data.Array.Accelerate.Type.$fIsIntegralInt8
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Types.Word]
  = Data.Array.Accelerate.Type.$fIsIntegralWord
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Word.Word16]
  = Data.Array.Accelerate.Type.$fIsIntegralWord16
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Word.Word32]
  = Data.Array.Accelerate.Type.$fIsIntegralWord32
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Word.Word64]
  = Data.Array.Accelerate.Type.$fIsIntegralWord64
instance Data.Array.Accelerate.Type.IsIntegral [GHC.Word.Word8]
  = Data.Array.Accelerate.Type.$fIsIntegralWord8
instance Data.Array.Accelerate.Type.IsNonNum [GHC.Types.Bool]
  = Data.Array.Accelerate.Type.$fIsNonNumBool
instance Data.Array.Accelerate.Type.IsNonNum [Foreign.C.Types.CChar]
  = Data.Array.Accelerate.Type.$fIsNonNumCChar
instance Data.Array.Accelerate.Type.IsNonNum [Foreign.C.Types.CSChar]
  = Data.Array.Accelerate.Type.$fIsNonNumCSChar
instance Data.Array.Accelerate.Type.IsNonNum [Foreign.C.Types.CUChar]
  = Data.Array.Accelerate.Type.$fIsNonNumCUChar
instance Data.Array.Accelerate.Type.IsNonNum [GHC.Types.Char]
  = Data.Array.Accelerate.Type.$fIsNonNumChar
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Type.$fIsNumCDouble
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Type.$fIsNumCFloat
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Type.$fIsNumCInt
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Type.$fIsNumCLLong
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Type.$fIsNumCLong
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Type.$fIsNumCShort
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Type.$fIsNumCUInt
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Type.$fIsNumCULLong
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Type.$fIsNumCULong
instance Data.Array.Accelerate.Type.IsNum [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Type.$fIsNumCUShort
instance Data.Array.Accelerate.Type.IsNum [GHC.Types.Double]
  = Data.Array.Accelerate.Type.$fIsNumDouble
instance Data.Array.Accelerate.Type.IsNum [GHC.Types.Float]
  = Data.Array.Accelerate.Type.$fIsNumFloat
instance Data.Array.Accelerate.Type.IsNum [GHC.Types.Int]
  = Data.Array.Accelerate.Type.$fIsNumInt
instance Data.Array.Accelerate.Type.IsNum [GHC.Int.Int16]
  = Data.Array.Accelerate.Type.$fIsNumInt16
instance Data.Array.Accelerate.Type.IsNum [GHC.Int.Int32]
  = Data.Array.Accelerate.Type.$fIsNumInt32
instance Data.Array.Accelerate.Type.IsNum [GHC.Int.Int64]
  = Data.Array.Accelerate.Type.$fIsNumInt64
instance Data.Array.Accelerate.Type.IsNum [GHC.Int.Int8]
  = Data.Array.Accelerate.Type.$fIsNumInt8
instance Data.Array.Accelerate.Type.IsNum [GHC.Types.Word]
  = Data.Array.Accelerate.Type.$fIsNumWord
instance Data.Array.Accelerate.Type.IsNum [GHC.Word.Word16]
  = Data.Array.Accelerate.Type.$fIsNumWord16
instance Data.Array.Accelerate.Type.IsNum [GHC.Word.Word32]
  = Data.Array.Accelerate.Type.$fIsNumWord32
instance Data.Array.Accelerate.Type.IsNum [GHC.Word.Word64]
  = Data.Array.Accelerate.Type.$fIsNumWord64
instance Data.Array.Accelerate.Type.IsNum [GHC.Word.Word8]
  = Data.Array.Accelerate.Type.$fIsNumWord8
instance Data.Array.Accelerate.Type.IsScalar [GHC.Types.Bool]
  = Data.Array.Accelerate.Type.$fIsScalarBool
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CChar]
  = Data.Array.Accelerate.Type.$fIsScalarCChar
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Type.$fIsScalarCDouble
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Type.$fIsScalarCFloat
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Type.$fIsScalarCInt
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Type.$fIsScalarCLLong
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Type.$fIsScalarCLong
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CSChar]
  = Data.Array.Accelerate.Type.$fIsScalarCSChar
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Type.$fIsScalarCShort
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CUChar]
  = Data.Array.Accelerate.Type.$fIsScalarCUChar
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Type.$fIsScalarCUInt
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Type.$fIsScalarCULLong
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Type.$fIsScalarCULong
instance Data.Array.Accelerate.Type.IsScalar [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Type.$fIsScalarCUShort
instance Data.Array.Accelerate.Type.IsScalar [GHC.Types.Char]
  = Data.Array.Accelerate.Type.$fIsScalarChar
instance Data.Array.Accelerate.Type.IsScalar [GHC.Types.Double]
  = Data.Array.Accelerate.Type.$fIsScalarDouble
instance Data.Array.Accelerate.Type.IsScalar [GHC.Types.Float]
  = Data.Array.Accelerate.Type.$fIsScalarFloat
instance Data.Array.Accelerate.Type.IsScalar [GHC.Types.Int]
  = Data.Array.Accelerate.Type.$fIsScalarInt
instance Data.Array.Accelerate.Type.IsScalar [GHC.Int.Int16]
  = Data.Array.Accelerate.Type.$fIsScalarInt16
instance Data.Array.Accelerate.Type.IsScalar [GHC.Int.Int32]
  = Data.Array.Accelerate.Type.$fIsScalarInt32
instance Data.Array.Accelerate.Type.IsScalar [GHC.Int.Int64]
  = Data.Array.Accelerate.Type.$fIsScalarInt64
instance Data.Array.Accelerate.Type.IsScalar [GHC.Int.Int8]
  = Data.Array.Accelerate.Type.$fIsScalarInt8
instance Data.Array.Accelerate.Type.IsScalar [GHC.Types.Word]
  = Data.Array.Accelerate.Type.$fIsScalarWord
instance Data.Array.Accelerate.Type.IsScalar [GHC.Word.Word16]
  = Data.Array.Accelerate.Type.$fIsScalarWord16
instance Data.Array.Accelerate.Type.IsScalar [GHC.Word.Word32]
  = Data.Array.Accelerate.Type.$fIsScalarWord32
instance Data.Array.Accelerate.Type.IsScalar [GHC.Word.Word64]
  = Data.Array.Accelerate.Type.$fIsScalarWord64
instance Data.Array.Accelerate.Type.IsScalar [GHC.Word.Word8]
  = Data.Array.Accelerate.Type.$fIsScalarWord8
instance GHC.Show.Show [Data.Array.Accelerate.Type.BoundedType]
  = Data.Array.Accelerate.Type.$fShowBoundedType
instance GHC.Show.Show [Data.Array.Accelerate.Type.FloatingType]
  = Data.Array.Accelerate.Type.$fShowFloatingType
instance GHC.Show.Show [Data.Array.Accelerate.Type.IntegralType]
  = Data.Array.Accelerate.Type.$fShowIntegralType
instance GHC.Show.Show [Data.Array.Accelerate.Type.NonNumType]
  = Data.Array.Accelerate.Type.$fShowNonNumType
instance GHC.Show.Show [Data.Array.Accelerate.Type.NumType]
  = Data.Array.Accelerate.Type.$fShowNumType
instance GHC.Show.Show [Data.Array.Accelerate.Type.ScalarType]
  = Data.Array.Accelerate.Type.$fShowScalarType
instance GHC.Show.Show [Data.Array.Accelerate.Type.TupleType]
  = Data.Array.Accelerate.Type.$fShowTupleType
family instance Data.Array.Accelerate.Type.BitSize [GHC.Int.Int8]
  = Data.Array.Accelerate.Type.D:R:BitSizeInt8
family instance Data.Array.Accelerate.Type.BitSize [GHC.Int.Int16]
  = Data.Array.Accelerate.Type.D:R:BitSizeInt16
family instance Data.Array.Accelerate.Type.BitSize [GHC.Int.Int32]
  = Data.Array.Accelerate.Type.D:R:BitSizeInt32
family instance Data.Array.Accelerate.Type.BitSize [GHC.Int.Int64]
  = Data.Array.Accelerate.Type.D:R:BitSizeInt64
family instance Data.Array.Accelerate.Type.BitSize [GHC.Word.Word8]
  = Data.Array.Accelerate.Type.D:R:BitSizeWord8
family instance Data.Array.Accelerate.Type.BitSize [GHC.Word.Word16]
  = Data.Array.Accelerate.Type.D:R:BitSizeWord16
family instance Data.Array.Accelerate.Type.BitSize [GHC.Word.Word32]
  = Data.Array.Accelerate.Type.D:R:BitSizeWord32
family instance Data.Array.Accelerate.Type.BitSize [GHC.Word.Word64]
  = Data.Array.Accelerate.Type.D:R:BitSizeWord64
family instance Data.Array.Accelerate.Type.BitSize [GHC.Types.Char]
  = Data.Array.Accelerate.Type.D:R:BitSizeChar
family instance Data.Array.Accelerate.Type.BitSize [GHC.Types.Bool]
  = Data.Array.Accelerate.Type.D:R:BitSizeBool
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Type.D:R:BitSizeCShort
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Type.D:R:BitSizeCUShort
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Type.D:R:BitSizeCInt
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Type.D:R:BitSizeCUInt
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Type.D:R:BitSizeCLLong
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Type.D:R:BitSizeCULLong
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CChar]
  = Data.Array.Accelerate.Type.D:R:BitSizeCChar
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CUChar]
  = Data.Array.Accelerate.Type.D:R:BitSizeCUChar
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CSChar]
  = Data.Array.Accelerate.Type.D:R:BitSizeCSChar
family instance Data.Array.Accelerate.Type.BitSize [GHC.Types.Float]
  = Data.Array.Accelerate.Type.D:R:BitSizeFloat
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Type.D:R:BitSizeCFloat
family instance Data.Array.Accelerate.Type.BitSize [GHC.Types.Double]
  = Data.Array.Accelerate.Type.D:R:BitSizeDouble
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Type.D:R:BitSizeCDouble
family instance Data.Array.Accelerate.Type.BitSize [GHC.Types.Int]
  = Data.Array.Accelerate.Type.D:R:BitSizeInt
family instance Data.Array.Accelerate.Type.BitSize [GHC.Types.Word]
  = Data.Array.Accelerate.Type.D:R:BitSizeWord
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Type.D:R:BitSizeCLong
family instance Data.Array.Accelerate.Type.BitSize [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Type.D:R:BitSizeCULong
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

