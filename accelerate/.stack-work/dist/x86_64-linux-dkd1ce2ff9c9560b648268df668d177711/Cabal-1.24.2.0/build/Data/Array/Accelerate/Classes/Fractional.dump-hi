
==================== FINAL INTERFACE ====================
2017-08-29 05:27:36.308908 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Fractional [orphan module] 8002
  interface hash: 0794fb5324d814381bb4c6db9de3e9fe
  ABI hash: 74c1164036fe4be54acc34add9158746
  export-list hash: 880c91e8ac0c615b5198682ab744764f
  orphan hash: 0661bbb443b9c007aa151c2c7130ae3b
  flag hash: 2158dc2d57e8bda6a28c5d022066f0d5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Array.Accelerate.Classes.Fractional.Fractional
  GHC.Real.Fractional|{GHC.Real./ GHC.Real.fromRational GHC.Real.recip}
module dependencies: Data.Array.Accelerate.AST
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique
                     Data.Array.Accelerate.Classes.Num Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Lifetime Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Smart Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
orphans: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Num
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Smart
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  Data.Array.Accelerate.Classes.Num 5830cb8ce2e6617e88ff07c7f188117f
  exports: 00b7c9e56019df3c44ef51ed8ebd4236
  Num 13b6af1dd60ee5505ca10fef83916e95
import  -/  Data.Array.Accelerate.Smart c6a471aeed497009ce791e94dc05d100
  exports: 1e3a20050ce25466608a82a26d24d5f0
  Exp dff601899922d9e86e5ab6941dfbac5f
  constant 8196d527ad9044191643ad6b39858685
  mkFDiv 124921c23b9d89010051274d0af125ef
  mkRecip ec3169d92c88b119fe17dac1c4964b90
import  -/  Data.Array.Accelerate.Type a1c7885f4a79193eaa1f192a9acbec78
  exports: 7aad7ca015788892b1349ebab929b71f
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
46a596d21c5dea4bc20568193d09d42c
  $fFractionalExp ::
    GHC.Real.Fractional
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
                  Data.Array.Accelerate.Classes.Num.$fNumExp
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp_$c/
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp_$crecip
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp_$cfromRational -}
bd879b4c674d9cc2c024afff42651136
  $fFractionalExp0 ::
    GHC.Real.Fractional
      (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
                  Data.Array.Accelerate.Classes.Num.$fNumExp0
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp0_$c/
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp0_$crecip
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp0_$cfromRational -}
e3e537e0237d99bc8fda5e3079627421
  $fFractionalExp0_$c/ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp9
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
22550e0c76f402a309a995d25e3d5409
  $fFractionalExp0_$cfromRational ::
    GHC.Real.Rational
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp7
                  `cast`
                (<GHC.Real.Rational>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
01900cf8feafe4279f0ab4289f0d5cb7
  $fFractionalExp0_$crecip ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp8
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CFloat>_N) -}
a54234944f7b3d3ccfb08d6da7173cf1
  $fFractionalExp0_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat) -}
2d63ef72b5d90951ebf6ab0d20dd8c8a
  $fFractionalExp0_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
       -> Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimFDiv
                   @ ((Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      -> Foreign.C.Types.CFloat)
                   @ Foreign.C.Types.CFloat
                   @~ <(Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                       -> Foreign.C.Types.CFloat>_N
                   Data.Array.Accelerate.Type.$fIsFloatingCFloat_$cfloatingType) -}
0b1857fa1a3606955856a5dda02ff692
  $fFractionalExp0_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat) -}
4828d18e85a4aa7cfdda51b981261244
  $fFractionalExp1 ::
    GHC.Real.Fractional
      (Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
                  Data.Array.Accelerate.Classes.Num.$fNumExp1
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp1_$c/
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp1_$crecip
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp1_$cfromRational -}
0e318c810a8502824a6a752bd151a5f1
  $fFractionalExp10 ::
    GHC.Real.Rational
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Real.Rational) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (GHC.Float.$fFractionalDouble_$cfromRational x)) -}
065474e6a7e5073dbb6b7996449be7b3
  $fFractionalExp11 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   (Data.Array.Accelerate.AST.PrimRecip
                      @ (GHC.Types.Double -> GHC.Types.Double)
                      @ GHC.Types.Double
                      @~ <GHC.Types.Double -> GHC.Types.Double>_N
                      Data.Array.Accelerate.Type.$fIsFloatingDouble_$cfloatingType)
                   x) -}
9d8c313a573a784bc5c3242f3bef928d
  $fFractionalExp12 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Double) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Double
                   @ (GHC.Types.Double, GHC.Types.Double)
                   Data.Array.Accelerate.Classes.Fractional.$fFractionalExp1_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Classes.Fractional.$fFractionalExp1_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Double, GHC.Types.Double)
                      Data.Array.Accelerate.Classes.Fractional.$fFractionalExp1_lvl196
                      Data.Array.Accelerate.Classes.Fractional.$fFractionalExp1_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Double), GHC.Types.Double)
                         @ GHC.Types.Double
                         @ ((), GHC.Types.Double)
                         @~ <(((), GHC.Types.Double), GHC.Types.Double)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Double)
                            @ GHC.Types.Double
                            @ ()
                            @~ <((), GHC.Types.Double)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Double>_N <GHC.Types.Double>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Double,
                                                                 GHC.Types.Double)>_N)) -}
f4f130ef8590b92211b96b5ffc00e582
  $fFractionalExp13 ::
    GHC.Real.Rational
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Real.Rational) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (GHC.Float.$fFractionalFloat_$cfromRational x)) -}
11f882ff3fb87e4b137ec0c9f6ce059b
  $fFractionalExp14 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   (Data.Array.Accelerate.AST.PrimRecip
                      @ (GHC.Types.Float -> GHC.Types.Float)
                      @ GHC.Types.Float
                      @~ <GHC.Types.Float -> GHC.Types.Float>_N
                      Data.Array.Accelerate.Type.$fIsFloatingFloat_$cfloatingType)
                   x) -}
537ac718ceb13c355de37fae4eb21349
  $fFractionalExp15 ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         GHC.Types.Float
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
                   (y :: Data.Array.Accelerate.Smart.Exp GHC.Types.Float) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Float
                   @ (GHC.Types.Float, GHC.Types.Float)
                   Data.Array.Accelerate.Classes.Fractional.$fFractionalExp2_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Classes.Fractional.$fFractionalExp2_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (GHC.Types.Float, GHC.Types.Float)
                      Data.Array.Accelerate.Classes.Fractional.$fFractionalExp2_lvl196
                      Data.Array.Accelerate.Classes.Fractional.$fFractionalExp2_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), GHC.Types.Float), GHC.Types.Float)
                         @ GHC.Types.Float
                         @ ((), GHC.Types.Float)
                         @~ <(((), GHC.Types.Float), GHC.Types.Float)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), GHC.Types.Float)
                            @ GHC.Types.Float
                            @ ()
                            @~ <((), GHC.Types.Float)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <GHC.Types.Float>_N <GHC.Types.Float>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Float,
                                                                 GHC.Types.Float)>_N)) -}
faf8ff0eb503ed8b1179c46ca332f4e6
  $fFractionalExp1_$c/ ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp12
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
f7d6b301877f6cbd5eb2587baec6d733
  $fFractionalExp1_$cfromRational ::
    GHC.Real.Rational
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp10
                  `cast`
                (<GHC.Real.Rational>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
5cb4e1bbd18812a63076947a8de9bad7
  $fFractionalExp1_$crecip ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Double
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Double
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp11
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Double>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Double>_N) -}
7a4344fbe30e5004f7c7a389bb858393
  $fFractionalExp1_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Double, GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble) -}
c898dcdf61a44164e3dac8200c9124c8
  $fFractionalExp1_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimFDiv
                   @ ((GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double)
                   @ GHC.Types.Double
                   @~ <(GHC.Types.Double, GHC.Types.Double) -> GHC.Types.Double>_N
                   Data.Array.Accelerate.Type.$fIsFloatingDouble_$cfloatingType) -}
90e9e9ba4ef40a80177281af3b3b4ae1
  $fFractionalExp1_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Double, GHC.Types.Double)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltDouble) -}
19128ca5c37bba07869bb89fbee860b9
  $fFractionalExp2 ::
    GHC.Real.Fractional
      (Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Smart.Exp GHC.Types.Float)
                  Data.Array.Accelerate.Classes.Num.$fNumExp2
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp2_$c/
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp2_$crecip
                  Data.Array.Accelerate.Classes.Fractional.$fFractionalExp2_$cfromRational -}
724dda43945cdc1335f3d2b49e7baed1
  $fFractionalExp2_$c/ ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp15
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
83d41a48261078c4d61eee4d4a750c08
  $fFractionalExp2_$cfromRational ::
    GHC.Real.Rational
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp13
                  `cast`
                (<GHC.Real.Rational>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
b21c9d35b0250022518083626e18649f
  $fFractionalExp2_$crecip ::
    Data.Array.Accelerate.Smart.Exp GHC.Types.Float
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp14
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp GHC.Types.Float>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Float>_N) -}
89a4d5a9656b734cd814d8f9b0eb66ca
  $fFractionalExp2_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat) -}
c3c01077cd61705a2d05a8f7a24d923c
  $fFractionalExp2_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimFDiv
                   @ ((GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float)
                   @ GHC.Types.Float
                   @~ <(GHC.Types.Float, GHC.Types.Float) -> GHC.Types.Float>_N
                   Data.Array.Accelerate.Type.$fIsFloatingFloat_$cfloatingType) -}
b3072d59c8b5b879a5962d3c19fe8830
  $fFractionalExp2_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (GHC.Types.Float, GHC.Types.Float)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ GHC.Types.Float
                   @ GHC.Types.Float
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltFloat) -}
64bbd3afd8189c07ec1d13cb211175e5
  $fFractionalExp4 ::
    GHC.Real.Rational
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Real.Rational) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (GHC.Float.$fFractionalDouble_$cfromRational x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CDouble[0]))) -}
91a1d2889af998bdda0f13e33cdfefe3
  $fFractionalExp5 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp
                           Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   (Data.Array.Accelerate.AST.PrimRecip
                      @ (Foreign.C.Types.CDouble -> Foreign.C.Types.CDouble)
                      @ Foreign.C.Types.CDouble
                      @~ <Foreign.C.Types.CDouble -> Foreign.C.Types.CDouble>_N
                      Data.Array.Accelerate.Type.$fIsFloatingCDouble_$cfloatingType)
                   x) -}
aa11deeae1346f1f22bd7486002f62fa
  $fFractionalExp6 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CDouble
                   @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                   Data.Array.Accelerate.Classes.Fractional.$fFractionalExp_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Classes.Fractional.$fFractionalExp_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      Data.Array.Accelerate.Classes.Fractional.$fFractionalExp_lvl196
                      Data.Array.Accelerate.Classes.Fractional.$fFractionalExp_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)
                         @ Foreign.C.Types.CDouble
                         @ ((), Foreign.C.Types.CDouble)
                         @~ <(((), Foreign.C.Types.CDouble), Foreign.C.Types.CDouble)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CDouble)
                            @ Foreign.C.Types.CDouble
                            @ ()
                            @~ <((), Foreign.C.Types.CDouble)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CDouble>_N <Foreign.C.Types.CDouble>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CDouble,
                                                                 Foreign.C.Types.CDouble)>_N)) -}
89f06fda52514b52f46c7f52c2707543
  $fFractionalExp7 ::
    GHC.Real.Rational
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Real.Rational) ->
                 Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (GHC.Float.$fFractionalFloat_$cfromRational x)
                     `cast`
                   (Sym (Foreign.C.Types.N:CFloat[0]))) -}
7f039e90184c45668ac0619be502e196
  $fFractionalExp8 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ Foreign.C.Types.CFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   (Data.Array.Accelerate.AST.PrimRecip
                      @ (Foreign.C.Types.CFloat -> Foreign.C.Types.CFloat)
                      @ Foreign.C.Types.CFloat
                      @~ <Foreign.C.Types.CFloat -> Foreign.C.Types.CFloat>_N
                      Data.Array.Accelerate.Type.$fIsFloatingCFloat_$cfloatingType)
                   x) -}
58a65ead1452dec365eb2812a8e9a58d
  $fFractionalExp9 ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         Foreign.C.Types.CFloat
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat)
                   (y :: Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CFloat) ->
                 Data.Array.Accelerate.Smart.PrimApp
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ Foreign.C.Types.CFloat
                   @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                   Data.Array.Accelerate.Classes.Fractional.$fFractionalExp0_lvl196
                   Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                   Data.Array.Accelerate.Classes.Fractional.$fFractionalExp0_lvl198
                   (Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Foreign.C.Types.CFloat, Foreign.C.Types.CFloat)
                      Data.Array.Accelerate.Classes.Fractional.$fFractionalExp0_lvl196
                      Data.Array.Accelerate.Classes.Fractional.$fFractionalExp0_lvl199
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)
                         @ Foreign.C.Types.CFloat
                         @ ((), Foreign.C.Types.CFloat)
                         @~ <(((), Foreign.C.Types.CFloat), Foreign.C.Types.CFloat)>_N
                         Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((), Foreign.C.Types.CFloat)
                            @ Foreign.C.Types.CFloat
                            @ ()
                            @~ <((), Foreign.C.Types.CFloat)>_N
                            Data.Array.Accelerate.Array.Sugar.$fEltCFloat
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x)
                         y)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                   <Foreign.C.Types.CFloat>_N <Foreign.C.Types.CFloat>_N)))_R)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(Foreign.C.Types.CFloat,
                                                                 Foreign.C.Types.CFloat)>_N)) -}
3646e162a0efff9b0ee772eef23ddf5f
  $fFractionalExp_$c/ ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp6
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
6ff4904bf5487a22049be49484b3dc52
  $fFractionalExp_$cfromRational ::
    GHC.Real.Rational
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,1*U(U,U)>m2,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp4
                  `cast`
                (<GHC.Real.Rational>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
f8e11d17ea1bc3e1c755b53f48b57f3b
  $fFractionalExp_$crecip ::
    Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Classes.Fractional.$fFractionalExp5
                  `cast`
                (<Data.Array.Accelerate.Smart.Exp Foreign.C.Types.CDouble>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Foreign.C.Types.CDouble>_N) -}
620735b902ea80a32496aae5fc782c90
  $fFractionalExp_lvl196 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fElt(,)
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble) -}
96ac1f1ecc8912e38eb93f4a2ccd8054
  $fFractionalExp_lvl198 ::
    Data.Array.Accelerate.AST.PrimFun
      ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
       -> Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.AST.PrimFDiv
                   @ ((Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                      -> Foreign.C.Types.CDouble)
                   @ Foreign.C.Types.CDouble
                   @~ <(Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
                       -> Foreign.C.Types.CDouble>_N
                   Data.Array.Accelerate.Type.$fIsFloatingCDouble_$cfloatingType) -}
4a3240313f37b7fd9a83cb61bcbe8664
  $fFractionalExp_lvl199 ::
    Data.Array.Accelerate.Product.IsProduct
      Data.Array.Accelerate.Array.Sugar.Elt
      (Foreign.C.Types.CDouble, Foreign.C.Types.CDouble)
  {- Unfolding: (Data.Array.Accelerate.Product.$fIsProductcst(,)
                   @ Data.Array.Accelerate.Array.Sugar.Elt
                   @ Foreign.C.Types.CDouble
                   @ Foreign.C.Types.CDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble
                   Data.Array.Accelerate.Array.Sugar.$fEltCDouble) -}
be74991f2dddbbc7dea5e22eb2fd7d5d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Classes.Fractional.$trModule2
                   Data.Array.Accelerate.Classes.Fractional.$trModule1) -}
2ed23ff8ec7ca3e8238e6f69c48295fe
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Classes.Fractional"#) -}
847e1d827cc60c20408adc2a0920fa6d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
6f99f01ef298935759845630a1e863d2
  type Fractional a =
    (Data.Array.Accelerate.Classes.Num.Num a,
     GHC.Real.Fractional (Data.Array.Accelerate.Smart.Exp a))
    :: GHC.Types.Constraint
instance GHC.Real.Fractional [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Fractional.$fFractionalExp
instance GHC.Real.Fractional [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Fractional.$fFractionalExp0
instance GHC.Real.Fractional [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Fractional.$fFractionalExp1
instance GHC.Real.Fractional [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Classes.Fractional.$fFractionalExp2
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

