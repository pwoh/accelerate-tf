
==================== FINAL INTERFACE ====================
2017-08-29 05:27:59.308013 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Prelude [family instance module] 8002
  interface hash: 6c7cba5b9a651af677b67d99011ec9ad
  ABI hash: c5ce0fbd64533a718f61b6bc9ce8e637
  export-list hash: 419eac0cb0ef2362e8f1ba308f7584f7
  orphan hash: 6958831efeeffe8bd48324a3b89cd68b
  flag hash: 9ae63d0a9bcaf33db62b231ecf8d25eb
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Array.Accelerate.Lift.ilift1
  Data.Array.Accelerate.Lift.ilift2
  Data.Array.Accelerate.Lift.ilift3
  Data.Array.Accelerate.Lift.lift1
  Data.Array.Accelerate.Lift.lift2
  Data.Array.Accelerate.Lift.lift3
  Data.Array.Accelerate.Prelude.++
  Data.Array.Accelerate.Prelude.?
  Data.Array.Accelerate.Prelude.?|
  Data.Array.Accelerate.Prelude.afst
  Data.Array.Accelerate.Prelude.all
  Data.Array.Accelerate.Prelude.and
  Data.Array.Accelerate.Prelude.any
  Data.Array.Accelerate.Prelude.asnd
  Data.Array.Accelerate.Prelude.caseof
  Data.Array.Accelerate.Prelude.compute
  Data.Array.Accelerate.Prelude.curry
  Data.Array.Accelerate.Prelude.drop
  Data.Array.Accelerate.Prelude.enumFromN
  Data.Array.Accelerate.Prelude.enumFromStepN
  Data.Array.Accelerate.Prelude.fill
  Data.Array.Accelerate.Prelude.filter
  Data.Array.Accelerate.Prelude.flatten
  Data.Array.Accelerate.Prelude.fold1All
  Data.Array.Accelerate.Prelude.foldAll
  Data.Array.Accelerate.Prelude.fst
  Data.Array.Accelerate.Prelude.gather
  Data.Array.Accelerate.Prelude.gatherIf
  Data.Array.Accelerate.Prelude.imap
  Data.Array.Accelerate.Prelude.index0
  Data.Array.Accelerate.Prelude.index1
  Data.Array.Accelerate.Prelude.index2
  Data.Array.Accelerate.Prelude.index3
  Data.Array.Accelerate.Prelude.indexed
  Data.Array.Accelerate.Prelude.init
  Data.Array.Accelerate.Prelude.iterate
  Data.Array.Accelerate.Prelude.izipWith
  Data.Array.Accelerate.Prelude.izipWith3
  Data.Array.Accelerate.Prelude.izipWith4
  Data.Array.Accelerate.Prelude.izipWith5
  Data.Array.Accelerate.Prelude.izipWith6
  Data.Array.Accelerate.Prelude.izipWith7
  Data.Array.Accelerate.Prelude.izipWith8
  Data.Array.Accelerate.Prelude.izipWith9
  Data.Array.Accelerate.Prelude.length
  Data.Array.Accelerate.Prelude.maximum
  Data.Array.Accelerate.Prelude.minimum
  Data.Array.Accelerate.Prelude.null
  Data.Array.Accelerate.Prelude.or
  Data.Array.Accelerate.Prelude.postscanl
  Data.Array.Accelerate.Prelude.postscanlSeg
  Data.Array.Accelerate.Prelude.postscanr
  Data.Array.Accelerate.Prelude.postscanrSeg
  Data.Array.Accelerate.Prelude.prescanl
  Data.Array.Accelerate.Prelude.prescanlSeg
  Data.Array.Accelerate.Prelude.prescanr
  Data.Array.Accelerate.Prelude.prescanrSeg
  Data.Array.Accelerate.Prelude.product
  Data.Array.Accelerate.Prelude.reverse
  Data.Array.Accelerate.Prelude.scanl'Seg
  Data.Array.Accelerate.Prelude.scanl1Seg
  Data.Array.Accelerate.Prelude.scanlSeg
  Data.Array.Accelerate.Prelude.scanr'Seg
  Data.Array.Accelerate.Prelude.scanr1Seg
  Data.Array.Accelerate.Prelude.scanrSeg
  Data.Array.Accelerate.Prelude.scatter
  Data.Array.Accelerate.Prelude.scatterIf
  Data.Array.Accelerate.Prelude.sfoldl
  Data.Array.Accelerate.Prelude.slit
  Data.Array.Accelerate.Prelude.snd
  Data.Array.Accelerate.Prelude.sum
  Data.Array.Accelerate.Prelude.tail
  Data.Array.Accelerate.Prelude.take
  Data.Array.Accelerate.Prelude.the
  Data.Array.Accelerate.Prelude.transpose
  Data.Array.Accelerate.Prelude.uncurry
  Data.Array.Accelerate.Prelude.unindex1
  Data.Array.Accelerate.Prelude.unindex2
  Data.Array.Accelerate.Prelude.unindex3
  Data.Array.Accelerate.Prelude.unzip
  Data.Array.Accelerate.Prelude.unzip3
  Data.Array.Accelerate.Prelude.unzip4
  Data.Array.Accelerate.Prelude.unzip5
  Data.Array.Accelerate.Prelude.unzip6
  Data.Array.Accelerate.Prelude.unzip7
  Data.Array.Accelerate.Prelude.unzip8
  Data.Array.Accelerate.Prelude.unzip9
  Data.Array.Accelerate.Prelude.zip
  Data.Array.Accelerate.Prelude.zip3
  Data.Array.Accelerate.Prelude.zip4
  Data.Array.Accelerate.Prelude.zip5
  Data.Array.Accelerate.Prelude.zip6
  Data.Array.Accelerate.Prelude.zip7
  Data.Array.Accelerate.Prelude.zip8
  Data.Array.Accelerate.Prelude.zip9
  Data.Array.Accelerate.Prelude.zipWith3
  Data.Array.Accelerate.Prelude.zipWith4
  Data.Array.Accelerate.Prelude.zipWith5
  Data.Array.Accelerate.Prelude.zipWith6
  Data.Array.Accelerate.Prelude.zipWith7
  Data.Array.Accelerate.Prelude.zipWith8
  Data.Array.Accelerate.Prelude.zipWith9
  Data.Array.Accelerate.Lift.Lift{Data.Array.Accelerate.Lift.Plain Data.Array.Accelerate.Lift.lift}
  Data.Array.Accelerate.Lift.Unlift{Data.Array.Accelerate.Lift.unlift}
  Data.Array.Accelerate.Prelude.IfThenElse{Data.Array.Accelerate.Prelude.EltT Data.Array.Accelerate.Prelude.ifThenElse}
module dependencies: Data.Array.Accelerate.AST
                     Data.Array.Accelerate.Analysis.Hash
                     Data.Array.Accelerate.Analysis.Hash.TH
                     Data.Array.Accelerate.Analysis.Match
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique
                     Data.Array.Accelerate.Classes.Enum Data.Array.Accelerate.Classes.Eq
                     Data.Array.Accelerate.Classes.Fractional
                     Data.Array.Accelerate.Classes.FromIntegral
                     Data.Array.Accelerate.Classes.Integral
                     Data.Array.Accelerate.Classes.Num Data.Array.Accelerate.Classes.Ord
                     Data.Array.Accelerate.Classes.Real Data.Array.Accelerate.Data.Bits
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Language Data.Array.Accelerate.Lifetime
                     Data.Array.Accelerate.Lift Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Smart Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
orphans: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Enum
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Eq
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Fractional
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Integral
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Num
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Ord
         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Classes.Real
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Lift
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Smart
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  Data.Array.Accelerate.Analysis.Match ab221b77992c08e2034eb4c4408657ab
  exports: 6b5dbf184af5b50b039d678583ec0082
  matchTupleType 9bd26d9d20b97943ff68a4752ca06d52
import  -/  Data.Array.Accelerate.Array.Sugar 1095a84a969562bd64b7800341e0d23c
  exports: a6dd551b39ab2a3a217fc8c2a6979cd5
  :. c223783565410a9b6198a1e17ba970e9
  :. 78f23e81404aaf1e43268a71a575425c
  All 94d62c83ddc00988132f3ffb88eabd24
  Array 78f23e81404aaf1e43268a71a575425c
  Arrays 3cc6db7d6b3c36ee0c840e1566f75d38
  DIM1 78f23e81404aaf1e43268a71a575425c
  DIM2 78f23e81404aaf1e43268a71a575425c
  Elt 78f23e81404aaf1e43268a71a575425c
  Scalar 78f23e81404aaf1e43268a71a575425c
  Segments 1aaba37901236c62a5f4ce21960ed8e9
  Shape 78f23e81404aaf1e43268a71a575425c
  Slice 78f23e81404aaf1e43268a71a575425c
  Vector 78f23e81404aaf1e43268a71a575425c
  Z 58fea0448d1d85af1b349a305fb8b4d6
  Z cd0941398cbcdba80e0ec7bd84e77596
  eltType 21a580fd17202e5faf93897dd670e4dd
  empty cd4808b4c86520bad2405b4472738855
  fromList 0174d79fdd9a9ab6b2f24d0cafa59f23
import  -/  Data.Array.Accelerate.Classes.Eq b5abcb6d2b1b2f77926ba32e74c56bfd
  exports: 6d08b503170f674ec3fef36c5a59035f
  && fd3fbc575278d01240f55b5285c81d9c
  /= bfd246b5fc13bff4fe92c8890493d0d4
  == 373f16d63bf36dcf6c5be36579a78740
  || 385cac0096364cd1168d80272fce6db4
import  -/  Data.Array.Accelerate.Classes.FromIntegral c06fea6ff5a7af191d75e7f95b36e541
  exports: bc5520e986a7e20fd2601829537ce128
  FromIntegral a95a2a699889c53924901c0ef834b946
  fromIntegral 9dddad050c551c7877d059293b3447c7
import  -/  Data.Array.Accelerate.Classes.Integral a60aaecd6e207deee19ca96483ccfae0
  exports: bc100fffba1159ea81ec5fb738bd1c61
  Integral a4731d1481a3ada4e7f0f61536fc3d73
import  -/  Data.Array.Accelerate.Classes.Num 5830cb8ce2e6617e88ff07c7f188117f
  exports: 00b7c9e56019df3c44ef51ed8ebd4236
  Num 13b6af1dd60ee5505ca10fef83916e95
import  -/  Data.Array.Accelerate.Classes.Ord 838718467444fc3520e0ce057ae54e2a
  exports: 73bb94b1a06727c01aa4a74d6dab52ae
  < fb7363126baf54c55879edf3cf13ee03
  Ord 32c955536e40f163bc65c13f16697a02
  max b4116308dc1a98308e130ad57bba074e
  min bc752925f0b7e3e6736f85d788823e2c
import  -/  Data.Array.Accelerate.Data.Bits 555bc4d2947ea186b9f9abd621c5aabb
  exports: 1237bf55563f9cc07ee899455862cfd7
  .|. 62ea574b7d6f576a6c083fed0774bdfb
  Bits ffc30e3a11ec8863801d4b177cafc2a2
import  -/  Data.Array.Accelerate.Language 524bed6c61291389f36fc32a525eca39
  exports: a284cd1d10aeff227064b59c0864f9a0
  ! 61a5eca2e09125cbeec78774e75ee661
  !! 2329cbea8fc5fdeb4358f74748c43618
  >-> 805f0d5dec4a134b9950ec24bac12f5e
  acond 650bcaf8acec2f453697c3309fca1bf7
  backpermute 3d1a826d5049d1c8e8adf20d9962eacc
  boolToInt 4bf1c91b68a3c5015b836a3acd14bf97
  cond 1ad22d0d07dca5cab36a411c4b5a6965
  fold f7d77a209a3a47753e68a79091cae799
  fold1 427b1e39f18390c6ba9706b75ca95bb6
  generate 94a7a8773407451e41d59e224bc2e958
  ignore 7837ec041b2d112de61b43113358cc1b
  indexHead 0d0608c0adf6de25f2f5173de1b50fc2
  indexTail 211189ec6e436bda888aec339a902201
  intersect 103cab0d557d8a74cf0123e197a56020
  map 5b504dcdeac486970efeb2aa6abad1c8
  permute cdeee58bd3e72476d24d2a62d2887cb5
  replicate 36f2ccc66a8818b5e78229f44f6cc23c
  reshape 1474d3140f3d1257e148edd688b5bd11
  scanl' 7b06b28c72a5463b26998b3ea9c65005
  scanl1 f2717dcc1421f121f3bef1eac2145bb5
  scanr' b495a44891919dafefab51ab4d51665b
  scanr1 7c37955e002f8c3f143fe0055e0310bd
  shape 875c9d0a6621c8377076e9515cf1ff04
  shapeSize 97ebeffe354ac457c62d9210f2e28df6
  size d3fb91af04b8e1f75716faa86563e07e
  toIndex ed801b2cd8ba033e761a833fe006aa28
  unit b9ba98b289ec51513606020d2c670417
  use 120b3b3c1e446d77d464c1e1f38e3bf2
  while 73674a4115b985e1fe5c850a62a18ce3
  zipWith 1ef59c998b9a534365c2c579d67c9db2
import  -/  Data.Array.Accelerate.Lift 454e17a2929036e6ccaa20714d77504c
  exports: 00dd99cf720cc4352c4681d40a7a8243
  Lift f80630fa058bc1fec72a0c728d66e0bc
  Plain 6077ef8139c94a2543619db19e2eb099
  Unlift 0812513d17ebe99933d114cc44033ab7
  ilift1 6fb9805a7a741e3613183a91d23a936b
  ilift2 1b621abbf4ec03bdc5bfc1a8ef0d347d
  ilift3 76f20f4434e2893b8323b1352cfbca81
  lift e513fb85b3ecd1c6d6ecd1c153e280b8
  lift1 e9ecd355db9fb88e5fc27730c536212b
  lift2 0f105eb1a91f17d4847b22d512966d48
  lift3 40147144ac10a38cde142fa739b0819d
  unlift f5a24af2e6ef4bde78101039418077e7
import  -/  Data.Array.Accelerate.Smart c6a471aeed497009ce791e94dc05d100
  exports: 1e3a20050ce25466608a82a26d24d5f0
  Acc dff601899922d9e86e5ab6941dfbac5f
  Exp dff601899922d9e86e5ab6941dfbac5f
  constant 8196d527ad9044191643ad6b39858685
  untup3 a872de1aa1e286d98d4e71dcdc0df473
  untup4 cb63a01d60f4388f017c9803c0e2b1d6
  untup5 c19d9e4d60fba99f2fccca66405b465f
  untup6 8333449942fab95e0eeedec4679cd9db
  untup7 a2c1f2a23de830761b93c418b5b86727
  untup8 0f86d7b9c7d25ede27d69adc758ee7bc
  untup9 23d0fa95217da76f4c89ac24fbae9a2e
import  -/  Data.Array.Accelerate.Type a1c7885f4a79193eaa1f192a9acbec78
  exports: 7aad7ca015788892b1349ebab929b71f
import  -/  base-4.9.1.0:Data.Type.Equality e58d97d060ef5a0f7906bf33d6e50df2
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
fixities infixr 5 ++, infix 0 ?, infix 0 ?|
618a0c185ce7f2665cb67cf624af75a2
  $fIfThenElseAcc ::
    Data.Array.Accelerate.Prelude.IfThenElse
      Data.Array.Accelerate.Smart.Acc
  DFunId
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m4,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Language.acond
                  `cast`
                (Trans
                     (forall (a :: <*>_N).
                      Sub (Sym (Data.Array.Accelerate.Prelude.D:R:EltTAcca[0] <a>_N))
                      ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
                            -> Data.Array.Accelerate.Smart.Acc a
                            -> Data.Array.Accelerate.Smart.Acc a
                            -> Data.Array.Accelerate.Smart.Acc a>_R)
                     (Sym (Data.Array.Accelerate.Prelude.N:IfThenElse[0]
                               <Data.Array.Accelerate.Smart.Acc>_N))) -}
618a0c185ce7f2665cb67cf624af75a2
  $fIfThenElseExp ::
    Data.Array.Accelerate.Prelude.IfThenElse
      Data.Array.Accelerate.Smart.Exp
  DFunId
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><L,U>m12,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Data.Array.Accelerate.Language.cond
                  `cast`
                (Trans
                     (forall (a :: <*>_N).
                      Sub (Sym (Data.Array.Accelerate.Prelude.D:R:EltTExpt[0] <a>_N))
                      ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
                            -> Data.Array.Accelerate.Smart.Exp a
                            -> Data.Array.Accelerate.Smart.Exp a
                            -> Data.Array.Accelerate.Smart.Exp a>_R)
                     (Sym (Data.Array.Accelerate.Prelude.N:IfThenElse[0]
                               <Data.Array.Accelerate.Smart.Exp>_N))) -}
a5af1c229b34a3b60c27f104f03c893f
  $s$fElt:. ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  Data.Array.Accelerate.Prelude.$s$fElt:._$s$fElt:._$cp1Elt
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp2Elt
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Int
                     Data.Array.Accelerate.Array.Sugar.$fEltZ
                     Data.Array.Accelerate.Array.Sugar.$fEltInt)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp3Elt
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Int
                     Data.Array.Accelerate.Array.Sugar.$fEltZ
                     Data.Array.Accelerate.Array.Sugar.$fEltInt)
                  (Data.Array.Accelerate.Array.Sugar.$fElt:._$cp4Elt
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Int
                     Data.Array.Accelerate.Array.Sugar.$fEltZ
                     Data.Array.Accelerate.Array.Sugar.$fEltInt)
                  (Data.Array.Accelerate.Array.Sugar.$fElt:._$celtType
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Int
                     Data.Array.Accelerate.Array.Sugar.$fEltZ
                     Data.Array.Accelerate.Array.Sugar.$fEltInt)
                  Data.Array.Accelerate.Prelude.$s$fElt:._$s$fElt:._$cfromElt
                  Data.Array.Accelerate.Prelude.$s$fElt:._$s$fElt:._$ctoElt -}
10d9b9835e6c36110b2d933d4ba2779a
  $s$fElt:._$dShow ::
    GHC.Show.Show Data.Array.Accelerate.Array.Sugar.Z
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Array.Sugar.$fShowZ -}
cdba3e004c675255dce23cd35fe0afbe
  $s$fElt:._$dShow1 :: GHC.Show.Show GHC.Types.Int
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Show.$fShowInt -}
fbd5171a505fea2c28066e479bd353ad
  $s$fElt:._$s$fElt:._$cfromElt ::
    (Data.Array.Accelerate.Array.Sugar.Z
     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
    -> Data.Array.Accelerate.Array.Sugar.EltRepr
         (Data.Array.Accelerate.Array.Sugar.Z
          Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*H,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Data.Array.Accelerate.Array.Sugar.Z
                           Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) ->
                 case ds2 of wild { Data.Array.Accelerate.Array.Sugar.:. t1 h1 ->
                 (Data.Array.Accelerate.Array.Sugar.$fEltZ_$cfromElt t1,
                  (GHC.Base.id @ GHC.Types.Int h1)
                    `cast`
                  (Sub (Sym (Data.Array.Accelerate.Array.Sugar.D:R:EltReprInt[0]))))
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Sugar.D:R:EltRepr:.[0]
                                <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N))) }) -}
3bd7b4d98bdd3431efde706c2449c9b7
  $s$fElt:._$s$fElt:._$cp1Elt ::
    GHC.Show.Show
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.$s$fElt:._$s$fShow:. -}
e660e04e93762309b28f7678fa45cff3
  $s$fElt:._$s$fElt:._$ctoElt ::
    Data.Array.Accelerate.Array.Sugar.EltRepr
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
    -> Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Data.Array.Accelerate.Array.Sugar.EltRepr
                             (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)) ->
                 case ds2
                        `cast`
                      (Sub (Data.Array.Accelerate.Array.Sugar.D:R:EltRepr:.[0]
                                <GHC.Types.Int>_N
                                <Data.Array.Accelerate.Array.Sugar.Z>_N)) of wild { (,) t1 h1 ->
                 Data.Array.Accelerate.Array.Sugar.:.
                   @ Data.Array.Accelerate.Array.Sugar.Z
                   @ GHC.Types.Int
                   (Data.Array.Accelerate.Array.Sugar.$fEltZ_$ctoElt t1)
                   (GHC.Base.id
                      @ GHC.Types.Int
                      h1
                        `cast`
                      (Sub (Data.Array.Accelerate.Array.Sugar.D:R:EltReprInt[0]))) }) -}
f559196bbcc0887e769aad8d0fa89c72
  $s$fElt:._$s$fShow:. ::
    GHC.Show.Show
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  (Data.Array.Accelerate.Array.Sugar.$fShow:._$cshowsPrec
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Int
                     Data.Array.Accelerate.Prelude.$s$fElt:._$dShow
                     Data.Array.Accelerate.Prelude.$s$fElt:._$dShow1)
                  (Data.Array.Accelerate.Array.Sugar.$fShow:._$cshow
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     @ GHC.Types.Int
                     Data.Array.Accelerate.Prelude.$s$fElt:._$dShow
                     Data.Array.Accelerate.Prelude.$s$fElt:._$dShow1)
                  Data.Array.Accelerate.Prelude.$s$fElt:._$s$fShow:._$cshowList -}
88601a20bc59f21bc161ba518dd63540
  $s$fElt:._$s$fShow:._$cshowList ::
    [Data.Array.Accelerate.Array.Sugar.Z
     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Array.Accelerate.Array.Sugar.Z
                           Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Array.Accelerate.Array.Sugar.Z
                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   (Data.Array.Accelerate.Array.Sugar.$fShow:._$cshowsPrec
                      @ Data.Array.Accelerate.Array.Sugar.Z
                      @ GHC.Types.Int
                      Data.Array.Accelerate.Prelude.$s$fElt:._$dShow
                      Data.Array.Accelerate.Prelude.$s$fElt:._$dShow1
                      GHC.Show.shows22)
                   ls
                   s) -}
e60ef7ec4c41b2407a068e0902f07e02
  $s$fShape:. ::
    Data.Array.Accelerate.Array.Sugar.Shape
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp1Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp2Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp3Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp4Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp5Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp6Shape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$crank
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  Data.Array.Accelerate.Array.Sugar.$fShape:._$s$csize
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cempty
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cignore
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cintersect
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cunion
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$ctoIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cfromIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$citer
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$citer1
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$crangeToShape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cshapeToRange
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cshapeToList
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$clistToShape
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csliceAnyIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csliceNoneIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fShapeZ) -}
2237fbdaa087b8a30940cc12fdd24b9e
  $s$fShape:.1 ::
    Data.Array.Accelerate.Array.Sugar.Shape
      ((Data.Array.Accelerate.Array.Sugar.Z
        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ((Data.Array.Accelerate.Array.Sugar.Z
                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp1Shape
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp2Shape
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp3Shape
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp4Shape
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp5Shape
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cp6Shape
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$crank
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csize
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cempty
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cignore
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cintersect
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cunion
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$ctoIndex
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cfromIndex
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$citer
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$citer1
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$crangeToShape
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cshapeToRange
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$cshapeToList
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$clistToShape
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csliceAnyIndex
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2)
                  (Data.Array.Accelerate.Array.Sugar.$fShape:._$csliceNoneIndex
                     @ (Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                     Data.Array.Accelerate.Prelude.$s$fShape:.2) -}
5e483d90796a9027ba89307f8b558737
  $s$fShape:.2 ::
    Data.Array.Accelerate.Array.Sugar.Shape
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.$s$fShape:. -}
411cdbd1b7f0a37b12bb2024f191af08
  $s$fSlice:. ::
    Data.Array.Accelerate.Array.Sugar.Slice
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                  (Data.Array.Accelerate.Array.Sugar.$fDivision:._$cp1Slice
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fSliceZ)
                  (Data.Array.Accelerate.Array.Sugar.$fDivision:._$cp2Slice
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fSliceZ)
                  (Data.Array.Accelerate.Array.Sugar.$fDivision:._$cp3Slice
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fSliceZ)
                  (Data.Array.Accelerate.Array.Sugar.$fDivision:._$cp4Slice
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fSliceZ)
                  (Data.Array.Accelerate.Array.Sugar.$fDivision:._$csliceIndex
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fSliceZ) -}
8dce36bae90215e6687503d5966b84b1
  $s$fUnliftExp:.0 ::
    Data.Array.Accelerate.Lift.Unlift
      Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                              GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Smart.Exp
                  @ (Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                            GHC.Types.Int)
                  (Data.Array.Accelerate.Lift.$fUnliftExp:.0_$cp1Unlift
                     @ GHC.Types.Int
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fEltInt
                     Data.Array.Accelerate.Array.Sugar.$fSliceZ
                       `cast`
                     (Data.Array.Accelerate.Array.Sugar.Slice
                        (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                     Data.Array.Accelerate.Lift.$fUnliftExpZ)
                  (Data.Array.Accelerate.Lift.$fUnliftExp:.0_$cunlift
                     @ GHC.Types.Int
                     @ Data.Array.Accelerate.Array.Sugar.Z
                     Data.Array.Accelerate.Array.Sugar.$fEltInt
                     Data.Array.Accelerate.Array.Sugar.$fSliceZ
                       `cast`
                     (Data.Array.Accelerate.Array.Sugar.Slice
                        (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                     Data.Array.Accelerate.Lift.$fUnliftExpZ) -}
d29c1939b1f701132823914bf7735465
  $slift1 ::
    (Data.Array.Accelerate.Array.Sugar.Z
     Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                            GHC.Types.Int)
    -> Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Array.Sugar.Z
             Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                    GHC.Types.Int))
  {- Arity: 1, Strictness: <S,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w3 :: Data.Array.Accelerate.Array.Sugar.Z
                          Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                 GHC.Types.Int) ->
                 case w3 of ww { Data.Array.Accelerate.Array.Sugar.:. ww2 ww3 ->
                 Data.Array.Accelerate.Lift.$w$clift
                   @ GHC.Types.Int
                   @ Data.Array.Accelerate.Array.Sugar.Z
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Array.Sugar.$fSliceZ
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Slice
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                   Data.Array.Accelerate.Lift.$fLiftExpZ1
                     `cast`
                   (Trans
                        (<Data.Array.Accelerate.Array.Sugar.Z>_R
                         ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))
                        (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                  <Data.Array.Accelerate.Smart.Exp>_N
                                  <Data.Array.Accelerate.Array.Sugar.Z>_N)))
                   ww2
                   ww3 }) -}
d033876c42a6844afe4867a456a4ff5b
  $tc'C:IfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10652973070787387510##
                   18381252332767256056##
                   Data.Array.Accelerate.Prelude.$trModule
                   Data.Array.Accelerate.Prelude.$tc'C:IfThenElse1) -}
7e438f526099a49fb05ed4aed73b1e1c
  $tc'C:IfThenElse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:IfThenElse"#) -}
fb1bf033dd1ade558068486347be4af5
  $tcIfThenElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15110030941413718186##
                   13832069782374868480##
                   Data.Array.Accelerate.Prelude.$trModule
                   Data.Array.Accelerate.Prelude.$tcIfThenElse1) -}
61ecd05010ce66a39c612319bdf9ce42
  $tcIfThenElse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "IfThenElse"#) -}
9130dfa6a7c891f79477042a150dd8e5
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Prelude.$trModule2
                   Data.Array.Accelerate.Prelude.$trModule1) -}
7adc05a0d99218ecd1df578793bc9d88
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.Array.Accelerate.Prelude"#) -}
ed1151843478beab4b9d1ed560ec3111
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
42e88a157e926f76be8c71256d846875
  $wcaseof ::
    Data.Array.Accelerate.Array.Sugar.Elt b =>
    Data.Array.Accelerate.Smart.Exp a
    -> [(Data.Array.Accelerate.Smart.Exp a
         -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool,
         Data.Array.Accelerate.Smart.Exp b)]
    -> Data.Array.Accelerate.Smart.Exp b
    -> Data.Array.Accelerate.Smart.Exp b
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U><L,1*U>,
     Inline: [0] -}
b996e19d33385d72d8f73b1b902cfb12
  $wmatchShapeType ::
    (Data.Array.Accelerate.Array.Sugar.Shape s,
     Data.Array.Accelerate.Array.Sugar.Shape t) =>
    GHC.Base.Maybe (s Data.Type.Equality.:~: t)
  {- Arity: 2,
     Strictness: <S(SLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(1*U,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(SLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(1*U,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [0],
     Unfolding: (\ @ s
                   @ t
                   (w :: Data.Array.Accelerate.Array.Sugar.Shape s)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Shape t) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape t)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ t w1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                t>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape t)
                        @ t
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ t w1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                t>_N <t>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape t)
                        @ t
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ t w1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                t>_N <t>_N) of cobox2 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape s)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ s w)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                s>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape s)
                        @ s
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ s w)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                s>_N <s>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape s)
                        @ s
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ s w)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                s>_N <s>_N) of cobox5 { DEFAULT ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt s
                   = Data.Array.Accelerate.Array.Sugar.$p1Shape @ s w
                 } in
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt t
                   = Data.Array.Accelerate.Array.Sugar.$p1Shape @ t w1
                 } in
                 case Data.Array.Accelerate.Analysis.Match.matchTupleType
                        @ (Data.Array.Accelerate.Array.Sugar.EltRepr s)
                        @ (Data.Array.Accelerate.Array.Sugar.EltRepr t)
                        (Data.Array.Accelerate.Array.Sugar.eltType
                           @ s
                           $dElt
                           (Data.Array.Accelerate.Prelude.flatten3 @ s))
                        (Data.Array.Accelerate.Array.Sugar.eltType
                           @ t
                           $dElt1
                           (Data.Array.Accelerate.Prelude.flatten2 @ t)) of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ (s Data.Type.Equality.:~: t)
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.Refl cobox6 ->
                      case (Data.Array.Accelerate.Array.Sugar.$p2Elt @ s $dElt)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <GHC.Types.*>_N <s>_N)
                             (GHC.Prim.proxy#
                                @ GHC.Types.*
                                @ s) of wild2 { Data.Typeable.Internal.TypeRep dt dt1 ds2 ds3 ds4 ->
                      case (Data.Array.Accelerate.Array.Sugar.$p2Elt @ t $dElt1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <GHC.Types.*>_N <t>_N)
                             (GHC.Prim.proxy#
                                @ GHC.Types.*
                                @ t) of wild3 { Data.Typeable.Internal.TypeRep dt2 dt3 ds5 ds6 ds7 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt dt2) of wild4 {
                        GHC.Types.False -> GHC.Base.Nothing @ (s Data.Type.Equality.:~: t)
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqWord# dt1 dt3) of wild5 {
                             GHC.Types.False -> GHC.Base.Nothing @ (s Data.Type.Equality.:~: t)
                             GHC.Types.True
                             -> Data.Array.Accelerate.Prelude.flatten1
                                  @ s
                                  @ t } } } } } } } } } } } }) -}
0bcede9fe27b07738713669e72264dd3
  (++) ::
    (Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 3,
     Strictness: <S(LSSSL),U(U,U,U,U,U)><S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
af130db2d662badd060459f082b548cf
  (?) ::
    Data.Array.Accelerate.Array.Sugar.Elt t =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> (Data.Array.Accelerate.Smart.Exp t,
        Data.Array.Accelerate.Smart.Exp t)
    -> Data.Array.Accelerate.Smart.Exp t
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U,U)>m12,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt t)
                   (c :: Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                   (ds :: (Data.Array.Accelerate.Smart.Exp t,
                           Data.Array.Accelerate.Smart.Exp t)) ->
                 case ds of wild { (,) t1 e ->
                 (Data.Array.Accelerate.Smart.Cond
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ t
                    $dElt
                    c
                    t1
                    e)
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <t>_N) }) -}
564fb6bdcb2fb9cbc2351bd2a994a329
  (?|) ::
    Data.Array.Accelerate.Array.Sugar.Arrays a =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
    -> (Data.Array.Accelerate.Smart.Acc a,
        Data.Array.Accelerate.Smart.Acc a)
    -> Data.Array.Accelerate.Smart.Acc a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U,U)>m4,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays a)
                   (c :: Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                   (ds :: (Data.Array.Accelerate.Smart.Acc a,
                           Data.Array.Accelerate.Smart.Acc a)) ->
                 case ds of wild { (,) t e ->
                 (Data.Array.Accelerate.Smart.Acond
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ a
                    $dArrays1
                    c
                    t
                    e)
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <a>_N) }) -}
618a0c185ce7f2665cb67cf624af75a2
  axiom D:R:EltTAcca::
    [a]
      Data.Array.Accelerate.Prelude.EltT
        Data.Array.Accelerate.Smart.Acc a
        = Data.Array.Accelerate.Array.Sugar.Arrays a
618a0c185ce7f2665cb67cf624af75a2
  axiom D:R:EltTExpt::
    [t]
      Data.Array.Accelerate.Prelude.EltT
        Data.Array.Accelerate.Smart.Exp t
        = Data.Array.Accelerate.Array.Sugar.Elt t
618a0c185ce7f2665cb67cf624af75a2
  class IfThenElse (t :: * -> *) where
    type family EltT (t :: * -> *) a :: GHC.Types.Constraint open
    ifThenElse :: Data.Array.Accelerate.Prelude.EltT t a =>
                  Data.Array.Accelerate.Smart.Exp GHC.Types.Bool -> t a -> t a -> t a
    {-# MINIMAL ifThenElse #-}
7c9d26d216740c1355445a129d6023a0
  afst ::
    (Data.Array.Accelerate.Array.Sugar.Arrays a,
     Data.Array.Accelerate.Array.Sugar.Arrays b) =>
    Data.Array.Accelerate.Smart.Acc (a, b)
    -> Data.Array.Accelerate.Smart.Acc a
  {- Arity: 3, Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U>,
     Inline: NOINLINE[1],
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.afst1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Arrays b>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc (a, b)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <a>_N) -}
1cb86a9bbf55482357974119dce4ffef
  afst1 ::
    (Data.Array.Accelerate.Array.Sugar.Arrays a,
     Data.Array.Accelerate.Array.Sugar.Arrays b) =>
    Data.Array.Accelerate.Smart.Acc (a, b)
    -> Data.Array.Accelerate.Smart.PreAcc
         Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp a
  {- Arity: 3, Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays a)
                   ($dArrays2 :: Data.Array.Accelerate.Array.Sugar.Arrays b)
                   (a1 :: Data.Array.Accelerate.Smart.Acc (a, b)) ->
                 Data.Array.Accelerate.Smart.Aprj
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ a
                   @ (a, b)
                   (Data.Array.Accelerate.Array.Sugar.$fArrays(,)
                      @ a
                      @ b
                      $dArrays1
                      $dArrays2)
                   (Data.Array.Accelerate.Product.$fIsProductcst(,)
                      @ Data.Array.Accelerate.Array.Sugar.Arrays
                      @ a
                      @ b
                      $dArrays1
                      $dArrays2)
                   $dArrays1
                   (Data.Array.Accelerate.Smart.tix1 @ () @ a @ b)
                     `cast`
                   (Data.Array.Accelerate.Product.TupleIdx
                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                <b>_N <a>_N))
                      <a>_N)_R
                   a1) -}
a1b16c77f03053c0d0358646f45ebf00
  all ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh GHC.Types.Bool)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U,U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U(U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.Array.Sugar.$fShape:. @ sh $dShape
                 } in
                 let {
                   lvl91 :: Data.Array.Accelerate.Array.Sugar.SliceShape
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                            Data.Type.Equality.~ Data.Array.Accelerate.Array.Sugar.Z
                   = Data.Array.Accelerate.Array.Sugar.$fShape:._$cp6Shape
                       @ sh
                       $dShape
                 } in
                 \ (f :: Data.Array.Accelerate.Smart.Exp e
                         -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)) ->
                 Data.Array.Accelerate.Prelude.and
                   @ sh
                   $dShape
                   (case GHC.Types.HEq_sc
                           @ GHC.Types.*
                           @ GHC.Types.*
                           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                           @ Data.Array.Accelerate.Array.Sugar.Z
                           lvl91
                             `cast`
                           (Data.Type.Equality.N:~[0]
                                <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                   (sh
                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                    case Data.Array.Accelerate.Array.Sugar.$w$cp5Shape
                           @ sh
                           $dShape of ww0 { DEFAULT ->
                    case Data.Array.Accelerate.Array.Sugar.$w$cp4Shape
                           @ sh
                           $dShape of ww2 { DEFAULT ->
                    (Data.Array.Accelerate.Smart.Map
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                            GHC.Types.Bool)
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ e
                       @ GHC.Types.Bool
                       @~ <Data.Array.Accelerate.Array.Sugar.Array
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                             GHC.Types.Bool>_N
                       $dShape1
                       $dElt
                       Data.Array.Accelerate.Array.Sugar.$fEltBool
                       f
                       eta)
                      `cast`
                    (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                   (sh
                                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                   GHC.Types.Bool>_N) } } }) } } }) -}
b9eecedd8381f9a21015242e7e962df4
  and ::
    Data.Array.Accelerate.Array.Sugar.Shape sh =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
         GHC.Types.Bool)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh GHC.Types.Bool)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ sh
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                GHC.Types.Bool)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.fold
                   @ sh
                   @ GHC.Types.Bool
                   $dShape
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Smart.mkLAnd1
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                    ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N)
                   Data.Array.Accelerate.Prelude.and1
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N)
                   eta } } }) -}
cf5c949436b54e1f9e947d93d50dc91d
  and1 ::
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   GHC.Types.True) -}
4b432ffbb5aca4bed0cdfd090ee691bf
  any ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh GHC.Types.Bool)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U,U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U(U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.Array.Sugar.$fShape:. @ sh $dShape
                 } in
                 let {
                   lvl91 :: Data.Array.Accelerate.Array.Sugar.SliceShape
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                            Data.Type.Equality.~ Data.Array.Accelerate.Array.Sugar.Z
                   = Data.Array.Accelerate.Array.Sugar.$fShape:._$cp6Shape
                       @ sh
                       $dShape
                 } in
                 \ (f :: Data.Array.Accelerate.Smart.Exp e
                         -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)) ->
                 Data.Array.Accelerate.Prelude.or
                   @ sh
                   $dShape
                   (case GHC.Types.HEq_sc
                           @ GHC.Types.*
                           @ GHC.Types.*
                           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                           @ Data.Array.Accelerate.Array.Sugar.Z
                           lvl91
                             `cast`
                           (Data.Type.Equality.N:~[0]
                                <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                   (sh
                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                    case Data.Array.Accelerate.Array.Sugar.$w$cp5Shape
                           @ sh
                           $dShape of ww0 { DEFAULT ->
                    case Data.Array.Accelerate.Array.Sugar.$w$cp4Shape
                           @ sh
                           $dShape of ww2 { DEFAULT ->
                    (Data.Array.Accelerate.Smart.Map
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                            GHC.Types.Bool)
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ e
                       @ GHC.Types.Bool
                       @~ <Data.Array.Accelerate.Array.Sugar.Array
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                             GHC.Types.Bool>_N
                       $dShape1
                       $dElt
                       Data.Array.Accelerate.Array.Sugar.$fEltBool
                       f
                       eta)
                      `cast`
                    (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                   (sh
                                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                   GHC.Types.Bool>_N) } } }) } } }) -}
e2ea61f48721a3101a3b6e97599a7fdb
  asnd ::
    (Data.Array.Accelerate.Array.Sugar.Arrays a,
     Data.Array.Accelerate.Array.Sugar.Arrays b) =>
    Data.Array.Accelerate.Smart.Acc (a, b)
    -> Data.Array.Accelerate.Smart.Acc b
  {- Arity: 3, Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.asnd1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Arrays b>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc (a, b)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <b>_N) -}
6768af39c3b2db9d1f54141f52076f66
  asnd1 ::
    (Data.Array.Accelerate.Array.Sugar.Arrays a,
     Data.Array.Accelerate.Array.Sugar.Arrays b) =>
    Data.Array.Accelerate.Smart.Acc (a, b)
    -> Data.Array.Accelerate.Smart.PreAcc
         Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp b
  {- Arity: 3, Strictness: <L,U(U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays a)
                   ($dArrays2 :: Data.Array.Accelerate.Array.Sugar.Arrays b)
                   (a1 :: Data.Array.Accelerate.Smart.Acc (a, b)) ->
                 Data.Array.Accelerate.Smart.Aprj
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ b
                   @ (a, b)
                   (Data.Array.Accelerate.Array.Sugar.$fArrays(,)
                      @ a
                      @ b
                      $dArrays1
                      $dArrays2)
                   (Data.Array.Accelerate.Product.$fIsProductcst(,)
                      @ Data.Array.Accelerate.Array.Sugar.Arrays
                      @ a
                      @ b
                      $dArrays1
                      $dArrays2)
                   $dArrays2
                   (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), a))
                     `cast`
                   (Data.Array.Accelerate.Product.TupleIdx
                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                <b>_N <a>_N))
                      <b>_N)_R
                   a1) -}
25088f54bad166aa9c8ce15926ffebc9
  caseof ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    Data.Array.Accelerate.Smart.Exp a
    -> [(Data.Array.Accelerate.Smart.Exp a
         -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool,
         Data.Array.Accelerate.Smart.Exp b)]
    -> Data.Array.Accelerate.Smart.Exp b
    -> Data.Array.Accelerate.Smart.Exp b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><L,U><L,U><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   @ b
                   (w :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (w1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (w2 :: Data.Array.Accelerate.Smart.Exp a)
                   (w3 :: [(Data.Array.Accelerate.Smart.Exp a
                            -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool,
                            Data.Array.Accelerate.Smart.Exp b)])
                   (w4 :: Data.Array.Accelerate.Smart.Exp b) ->
                 Data.Array.Accelerate.Prelude.$wcaseof @ a @ b w1 w2 w3 w4) -}
f986ada79ab83b1c91dd683fed1b7aa3
  compute ::
    Data.Array.Accelerate.Array.Sugar.Arrays a =>
    Data.Array.Accelerate.Smart.Acc a
    -> Data.Array.Accelerate.Smart.Acc a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.compute1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Arrays a>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc a>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <a>_N) -}
6bc75c21a95a343eb71f95f2479eaae6
  compute1 ::
    Data.Array.Accelerate.Array.Sugar.Arrays a =>
    Data.Array.Accelerate.Smart.Acc a
    -> Data.Array.Accelerate.Smart.PreAcc
         Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays a)
                   (eta2 :: Data.Array.Accelerate.Smart.Acc a) ->
                 Data.Array.Accelerate.Smart.Pipe
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ a
                   @ a
                   @ a
                   $dArrays1
                   $dArrays1
                   $dArrays1
                   (GHC.Base.id @ (Data.Array.Accelerate.Smart.Acc a))
                   (GHC.Base.id @ (Data.Array.Accelerate.Smart.Acc a))
                   eta2) -}
d03da4a1a4ff65037065e42dac434786
  curry ::
    Data.Array.Accelerate.Lift.Lift f (f a, f b) =>
    (f (Data.Array.Accelerate.Lift.Plain (f a),
        Data.Array.Accelerate.Lift.Plain (f b))
     -> f c)
    -> f a -> f b -> f c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S),1*C1(U)><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ (f :: * -> *)
                   @ a
                   @ b
                   @ c
                   ($dLift :: Data.Array.Accelerate.Lift.Lift f (f a, f b))
                   (f1 :: f (Data.Array.Accelerate.Lift.Plain (f a),
                             Data.Array.Accelerate.Lift.Plain (f b))
                          -> f c)
                   (x :: f a)
                   (y :: f b) ->
                 f1
                   ($dLift
                      `cast`
                    (Data.Array.Accelerate.Lift.N:Lift[0] <f>_N <(f a, f b)>_N)
                      (x, y))
                     `cast`
                   (<f>_R (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                               <f b>_N <f a>_N))) -}
6413789d79caaf509a3c781ab4d24d2f
  drop ::
    (Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 3,
     Strictness: <S(LSSSL),U(U,U,U,U,U)><S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
e912b7766c19e28e29d6de8c611ba5ce
  enumFromN ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Classes.Num.Num e,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       GHC.Types.Int e) =>
    Data.Array.Accelerate.Smart.Exp sh
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 5,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U(U,U,U,U,U,U,U))><L,C(C1(U))><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num e)
                   ($dFromIntegral :: Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
                                        GHC.Types.Int e)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh)
                   (eta1 :: Data.Array.Accelerate.Smart.Exp e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Prelude.enumFromStepN
                   @ sh
                   @ e
                   $dShape
                   $d(%,%)
                   $dFromIntegral
                   eta
                   eta1
                   (GHC.Num.fromInteger
                      @ (Data.Array.Accelerate.Smart.Exp e)
                      (GHC.Classes.$p2(%,%)
                         @ (Data.Array.Accelerate.Array.Sugar.Elt e)
                         @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e))
                         $d(%,%))
                      Data.Array.Accelerate.Prelude.enumFromN1) } } }) -}
ab0e9d92b723f3919a6d22cf33f573a3
  enumFromN1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
c8b71b414a705944201316a113862691
  enumFromStepN ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Classes.Num.Num e,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       GHC.Types.Int e) =>
    Data.Array.Accelerate.Smart.Exp sh
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(1*U,1*U)><L,C(C1(U))><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num e)
                   ($dFromIntegral :: Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
                                        GHC.Types.Int e)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh)
                   (eta1 :: Data.Array.Accelerate.Smart.Exp e)
                   (eta2 :: Data.Array.Accelerate.Smart.Exp e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dElt :: Data.Array.Accelerate.Array.Sugar.Elt e
                   = GHC.Classes.$p1(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt e)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e))
                       $d(%,%)
                 } in
                 Data.Array.Accelerate.Language.reshape
                   @ sh
                   @ (Data.Array.Accelerate.Array.Sugar.Z
                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   @ e
                   $dShape
                   Data.Array.Accelerate.Prelude.$s$fShape:.
                   $dElt
                   eta
                   (let {
                      $dNum :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e)
                      = GHC.Classes.$p2(%,%)
                          @ (Data.Array.Accelerate.Array.Sugar.Elt e)
                          @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e))
                          $d(%,%)
                    } in
                    (Data.Array.Accelerate.Smart.Generate
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (Data.Array.Accelerate.Array.Sugar.Z
                             Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                            e)
                       @ (Data.Array.Accelerate.Array.Sugar.Z
                          Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ e
                       @~ <Data.Array.Accelerate.Array.Sugar.Array
                             (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                             e>_N
                       Data.Array.Accelerate.Prelude.$s$fShape:.
                       $dElt
                       (Data.Array.Accelerate.Lift.$w$clift
                          @ GHC.Types.Int
                          @ Data.Array.Accelerate.Array.Sugar.Z
                          Data.Array.Accelerate.Array.Sugar.$fEltInt
                          Data.Array.Accelerate.Array.Sugar.$fSliceZ
                            `cast`
                          (Data.Array.Accelerate.Array.Sugar.Slice
                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                          Data.Array.Accelerate.Lift.$fLiftExpZ1
                            `cast`
                          (Trans
                               (<Data.Array.Accelerate.Array.Sugar.Z>_R
                                ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))
                               (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                         <Data.Array.Accelerate.Smart.Exp>_N
                                         <Data.Array.Accelerate.Array.Sugar.Z>_N)))
                          Data.Array.Accelerate.Array.Sugar.Z
                          (Data.Array.Accelerate.Language.shapeSize @ sh $dShape eta))
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Trans
                               (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                    <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                                Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R
                       (\ (ix :: Data.Array.Accelerate.Smart.Exp
                                   (Data.Array.Accelerate.Array.Sugar.Z
                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)) ->
                        GHC.Num.+
                          @ (Data.Array.Accelerate.Smart.Exp e)
                          $dNum
                          (GHC.Num.*
                             @ (Data.Array.Accelerate.Smart.Exp e)
                             $dNum
                             ($dFromIntegral
                                `cast`
                              (Data.Array.Accelerate.Classes.FromIntegral.N:FromIntegral[0]
                                   <GHC.Types.Int>_N <e>_N)
                                Data.Array.Accelerate.Prelude.enumFromStepN1
                                (case Data.Array.Accelerate.Lift.$w$cunlift1
                                        @ GHC.Types.Int
                                        @ Data.Array.Accelerate.Array.Sugar.Z
                                        Data.Array.Accelerate.Array.Sugar.$fEltInt
                                        Data.Array.Accelerate.Array.Sugar.$fSliceZ
                                          `cast`
                                        (Data.Array.Accelerate.Array.Sugar.Slice
                                           (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                                        Data.Array.Accelerate.Lift.$fUnliftExpZ
                                        ix
                                          `cast`
                                        (Data.Array.Accelerate.Smart.Exp
                                           (Trans
                                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])
                                                 Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                                                (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                                          <GHC.Types.Int>_N
                                                          <Data.Array.Accelerate.Array.Sugar.Z>_N))))_R of ww { (#,#) ww2 ww3 ->
                                 case ww2 of wild { Data.Array.Accelerate.Array.Sugar.Z -> ww3 } }))
                             eta2)
                          eta1))
                      `cast`
                    (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                                    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                   e>_N)) } } }) -}
074ed29ae2fca7d810dc3519708ac6ad
  enumFromStepN1 ::
    Data.Array.Accelerate.Classes.Integral.Integral GHC.Types.Int
  {- Strictness: m,
     Unfolding: ((Data.Array.Accelerate.Classes.Enum.$fEnumExp
                    @ GHC.Types.Int,
                  Data.Array.Accelerate.Prelude.enumFromStepN2,
                  Data.Array.Accelerate.Classes.Integral.$fIntegralExp16)) -}
d97b0b88452675f58608c10fdc735279
  enumFromStepN2 ::
    Data.Array.Accelerate.Classes.Real.Real GHC.Types.Int
  {- Strictness: m,
     Unfolding: ((Data.Array.Accelerate.Prelude.enumFromStepN3,
                  Data.Array.Accelerate.Classes.Ord.$fOrdInt,
                  Data.Array.Accelerate.Classes.Integral.$fIntegralExp16_$s$fRealExp)) -}
d6a676aca3181e180e44c53e92b37ce8
  enumFromStepN3 ::
    Data.Array.Accelerate.Classes.Num.Num GHC.Types.Int
  {- Strictness: m,
     Unfolding: ((Data.Array.Accelerate.Array.Sugar.$fEltInt,
                  Data.Array.Accelerate.Classes.Num.$fNumExp20)) -}
6218bd3fa22711c9970dc86d3aeaefb1
  fill ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Exp sh
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh)
                   (eta1 :: Data.Array.Accelerate.Smart.Exp e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ e
                   $dShape
                   $dElt
                   eta
                   (\ (ds :: Data.Array.Accelerate.Smart.Exp sh) -> eta1) } } }) -}
b7379acde3de18ea0dc206cbd20a5dab
  filter ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e,
          Data.Array.Accelerate.Array.Sugar.Array sh GHC.Types.Int)
  {- Arity: 3,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(1*U,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U,U,U,U,U)><L,U(U,U,U,U,U,U,U)>,
     Inline: NOINLINE -}
a75257451fac64cea0e8986b27c5d911
  flatten ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: GHC.Base.Maybe
                              (sh Data.Type.Equality.:~: Data.Array.Accelerate.Array.Sugar.DIM1)
                   = Data.Array.Accelerate.Prelude.$wmatchShapeType
                       @ sh
                       @ Data.Array.Accelerate.Array.Sugar.DIM1
                       $dShape
                       Data.Array.Accelerate.Prelude.$s$fShape:.
                 } in
                 \ (a :: Data.Array.Accelerate.Smart.Acc
                           (Data.Array.Accelerate.Array.Sugar.Array sh e)) ->
                 case lvl91 of wild {
                   GHC.Base.Nothing
                   -> Data.Array.Accelerate.Language.reshape
                        @ (Data.Array.Accelerate.Array.Sugar.Z
                           Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        @ sh
                        @ e
                        Data.Array.Accelerate.Prelude.$s$fShape:.
                        $dShape
                        $dElt
                        (Data.Array.Accelerate.Lift.$w$clift
                           @ GHC.Types.Int
                           @ Data.Array.Accelerate.Array.Sugar.Z
                           Data.Array.Accelerate.Array.Sugar.$fEltInt
                           Data.Array.Accelerate.Array.Sugar.$fSliceZ
                             `cast`
                           (Data.Array.Accelerate.Array.Sugar.Slice
                              (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                           Data.Array.Accelerate.Lift.$fLiftExpZ1
                             `cast`
                           (Trans
                                (<Data.Array.Accelerate.Array.Sugar.Z>_R
                                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))
                                (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                          <Data.Array.Accelerate.Smart.Exp>_N
                                          <Data.Array.Accelerate.Array.Sugar.Z>_N)))
                           Data.Array.Accelerate.Array.Sugar.Z
                           (Data.Array.Accelerate.Language.size @ sh @ e $dShape $dElt a))
                          `cast`
                        (Data.Array.Accelerate.Smart.Exp
                           (Trans
                                (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                     <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                                 Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R
                        a
                   GHC.Base.Just ds
                   -> case ds of wild1 { Data.Type.Equality.Refl cobox3 ->
                      a `cast`
                      (Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Array
                            (Sym cobox3) <e>_N)_N)_R } } } } }) -}
ff4f56764282c183af1e00305a4906bb
  flatten1 :: GHC.Base.Maybe (s Data.Type.Equality.:~: t)
  {- HasNoCafRefs,
     Unfolding: (\ @ s @ t ->
                 GHC.Base.Just
                   @ (s Data.Type.Equality.:~: t)
                   (Data.Type.Equality.$WRefl @ GHC.Types.* @ s)
                     `cast`
                   ((Data.Type.Equality.:~:)
                      <GHC.Types.*>_N <s>_N (UnsafeCo nominal s t))_R) -}
e8654bff9dc7fff6f0cbac8aac3e5ec2
  flatten2 :: t
  {- Strictness: x -}
a037f4c987df921cba2da6c18ccc32ed
  flatten3 :: s
  {- Strictness: x -}
d95885fdade8c42bdc73e06c8dd9947a
  fold1All ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Scalar a)
  {- Arity: 4,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (eta :: Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp a)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 (Data.Array.Accelerate.Smart.Fold1
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         Data.Array.Accelerate.Array.Sugar.DIM0 a)
                    @ Data.Array.Accelerate.Array.Sugar.DIM0
                    @ a
                    @~ <Data.Array.Accelerate.Array.Sugar.Array
                          Data.Array.Accelerate.Array.Sugar.DIM0 a>_N
                    Data.Array.Accelerate.Array.Sugar.$fShapeZ
                    $dElt
                    eta
                    (Data.Array.Accelerate.Prelude.flatten
                       @ sh
                       @ a
                       $dShape
                       $dElt
                       eta1))
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                Data.Array.Accelerate.Array.Sugar.DIM0
                                                                a>_N) } } }) -}
42fabdce93dd79b671cb1b2c648b845d
  foldAll ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a)
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Scalar a)
  {- Arity: 5,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (eta :: Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp a)
                   (eta1 :: Data.Array.Accelerate.Smart.Exp a)
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 (Data.Array.Accelerate.Smart.Fold
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         Data.Array.Accelerate.Array.Sugar.DIM0 a)
                    @ Data.Array.Accelerate.Array.Sugar.DIM0
                    @ a
                    @~ <Data.Array.Accelerate.Array.Sugar.Array
                          Data.Array.Accelerate.Array.Sugar.DIM0 a>_N
                    Data.Array.Accelerate.Array.Sugar.$fShapeZ
                    $dElt
                    eta
                    eta1
                    (Data.Array.Accelerate.Prelude.flatten
                       @ sh
                       @ a
                       $dShape
                       $dElt
                       eta2))
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                Data.Array.Accelerate.Array.Sugar.DIM0
                                                                a>_N) } } }) -}
af44dc627abdec85f9549be65556a6d2
  fst ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp a
  {- Arity: 3,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.fst1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N) -}
03eb04229fdeafb24a7b0e5e0e282057
  fst1 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp a
  {- Arity: 3,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (e :: Data.Array.Accelerate.Smart.Exp (a, b)) ->
                 Data.Array.Accelerate.Smart.Prj
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ a
                   @ (a, b)
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,) @ a @ b $dElt $dElt1)
                   (Data.Array.Accelerate.Product.$fIsProductcst(,)
                      @ Data.Array.Accelerate.Array.Sugar.Elt
                      @ a
                      @ b
                      $dElt
                      $dElt1)
                   $dElt
                   (Data.Array.Accelerate.Smart.tix1 @ () @ a @ b)
                     `cast`
                   (Data.Array.Accelerate.Product.TupleIdx
                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                <b>_N <a>_N))
                      <a>_N)_R
                   e) -}
f36755af192d8850bfc17bfafba1e58c
  gather ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh GHC.Types.Int)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 4,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array sh GHC.Types.Int))
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Vector e)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.map
                   @ sh
                   @ GHC.Types.Int
                   @ e
                   $dShape
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   $dElt
                   (\ (eta2 :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                    Data.Array.Accelerate.Smart.LinearIndex
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ e
                      @ Data.Array.Accelerate.Array.Sugar.DIM1
                      Data.Array.Accelerate.Prelude.$s$fShape:.
                      $dElt
                      eta1
                      eta2)
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                    ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N)
                   eta } } }) -}
01f5c90fb6f7abeb3457a53de4bb5ea2
  gatherIf ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector a)
    -> (Data.Array.Accelerate.Smart.Exp a
        -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector b)
  {- Arity: 2,
     Strictness: <L,U><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ a
                   @ b
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b) ->
                 let {
                   $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt (b, b)
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,) @ b @ b $dElt1 $dElt1
                 } in
                 let {
                   $dIsProduct :: Data.Array.Accelerate.Array.Sugar.IsTuple (b, b)
                   = Data.Array.Accelerate.Product.$fIsProductcst(,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ b
                       @ b
                       $dElt1
                       $dElt1
                 } in
                 let {
                   lvl91 :: Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
                            -> Data.Array.Accelerate.Smart.Exp (b, b)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp b
                     {- Arity: 2, Strictness: <L,U><L,U> -}
                   = \ (p :: Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                       (g :: Data.Array.Accelerate.Smart.Exp (b, b)) ->
                     Data.Array.Accelerate.Smart.Cond
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ b
                       $dElt1
                       p
                       (Data.Array.Accelerate.Smart.Prj
                          @ Data.Array.Accelerate.Smart.Acc
                          @ Data.Array.Accelerate.Smart.Exp
                          @ b
                          @ (b, b)
                          $dElt2
                          $dIsProduct
                          $dElt1
                          (Data.Array.Accelerate.Smart.tix1 @ () @ b @ b)
                            `cast`
                          (Data.Array.Accelerate.Product.TupleIdx
                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                       <b>_N <b>_N))
                             <b>_N)_R
                          g)
                         `cast`
                       (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                       (Data.Array.Accelerate.Smart.Prj
                          @ Data.Array.Accelerate.Smart.Acc
                          @ Data.Array.Accelerate.Smart.Exp
                          @ b
                          @ (b, b)
                          $dElt2
                          $dIsProduct
                          $dElt1
                          (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), b))
                            `cast`
                          (Data.Array.Accelerate.Product.TupleIdx
                             (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                       <b>_N <b>_N))
                             <b>_N)_R
                          g)
                         `cast`
                       (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array
                                 Data.Array.Accelerate.Array.Sugar.DIM1 b)
                            -> Data.Array.Accelerate.Smart.Acc
                                 (Data.Array.Accelerate.Array.Sugar.Array
                                    Data.Array.Accelerate.Array.Sugar.DIM1 b)
                            -> Data.Array.Accelerate.Smart.Acc
                                 (Data.Array.Accelerate.Array.Sugar.Array
                                    Data.Array.Accelerate.Array.Sugar.DIM1 (b, b))
                   = Data.Array.Accelerate.Prelude.zip
                       @ Data.Array.Accelerate.Array.Sugar.DIM1
                       @ b
                       @ b
                       Data.Array.Accelerate.Prelude.$s$fShape:.
                       $dElt1
                       $dElt1
                 } in
                 (\ (from :: Data.Array.Accelerate.Smart.Acc
                               (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int))
                    (maskV :: Data.Array.Accelerate.Smart.Acc
                                (Data.Array.Accelerate.Array.Sugar.Vector a))
                    (pred :: Data.Array.Accelerate.Smart.Exp a
                             -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                    (defaults :: Data.Array.Accelerate.Smart.Acc
                                   (Data.Array.Accelerate.Array.Sugar.Vector b))
                    (input :: Data.Array.Accelerate.Smart.Acc
                                (Data.Array.Accelerate.Array.Sugar.Vector b)) ->
                  Data.Array.Accelerate.Smart.ZipWith
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         Data.Array.Accelerate.Array.Sugar.DIM1 b)
                    @ Data.Array.Accelerate.Array.Sugar.DIM1
                    @ GHC.Types.Bool
                    @ (b, b)
                    @ b
                    @~ <Data.Array.Accelerate.Array.Sugar.Array
                          Data.Array.Accelerate.Array.Sugar.DIM1 b>_N
                    Data.Array.Accelerate.Prelude.$s$fShape:.
                    Data.Array.Accelerate.Array.Sugar.$fEltBool
                    $dElt2
                    $dElt1
                    lvl91
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                     ->_R <Data.Array.Accelerate.Smart.Exp (b, b)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                    (Data.Array.Accelerate.Smart.Map
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            Data.Array.Accelerate.Array.Sugar.DIM1 GHC.Types.Bool)
                       @ Data.Array.Accelerate.Array.Sugar.DIM1
                       @ a
                       @ GHC.Types.Bool
                       @~ <Data.Array.Accelerate.Array.Sugar.Array
                             Data.Array.Accelerate.Array.Sugar.DIM1 GHC.Types.Bool>_N
                       Data.Array.Accelerate.Prelude.$s$fShape:.
                       $dElt
                       Data.Array.Accelerate.Array.Sugar.$fEltBool
                       pred
                       maskV)
                      `cast`
                    (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                   Data.Array.Accelerate.Array.Sugar.DIM1
                                                                   GHC.Types.Bool>_N)
                    (lvl92
                       (Data.Array.Accelerate.Smart.Map
                          @ Data.Array.Accelerate.Smart.Acc
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (Data.Array.Accelerate.Array.Sugar.Array
                               Data.Array.Accelerate.Array.Sugar.DIM1 b)
                          @ Data.Array.Accelerate.Array.Sugar.DIM1
                          @ GHC.Types.Int
                          @ b
                          @~ <Data.Array.Accelerate.Array.Sugar.Array
                                Data.Array.Accelerate.Array.Sugar.DIM1 b>_N
                          Data.Array.Accelerate.Prelude.$s$fShape:.
                          Data.Array.Accelerate.Array.Sugar.$fEltInt
                          $dElt1
                          (\ (eta1 :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int) ->
                           Data.Array.Accelerate.Smart.LinearIndex
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ b
                             @ Data.Array.Accelerate.Array.Sugar.DIM1
                             Data.Array.Accelerate.Prelude.$s$fShape:.
                             $dElt1
                             input
                             eta1)
                            `cast`
                          (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                           ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                          from)
                         `cast`
                       (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                      Data.Array.Accelerate.Array.Sugar.DIM1
                                                                      b>_N)
                       defaults))
                   `cast`
                 (<Data.Array.Accelerate.Smart.Acc
                     (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int)>_R
                  ->_R <Data.Array.Accelerate.Smart.Acc
                          (Data.Array.Accelerate.Array.Sugar.Vector a)>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp a
                        -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                  ->_R <Data.Array.Accelerate.Smart.Acc
                          (Data.Array.Accelerate.Array.Sugar.Vector b)>_R
                  ->_R <Data.Array.Accelerate.Smart.Acc
                          (Data.Array.Accelerate.Array.Sugar.Vector b)>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                     Data.Array.Accelerate.Array.Sugar.DIM1
                                                                     b>_N)) -}
d8a66a6432b5f5d814bb379faa284d2b
  imap ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh
                           -> Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt sh
                   = Data.Array.Accelerate.Array.Sugar.$p1Shape @ sh $dShape
                 } in
                 Data.Array.Accelerate.Language.zipWith
                   @ sh
                   @ sh
                   @ a
                   @ b
                   $dShape
                   $dElt2
                   $dElt
                   $dElt1
                   eta
                   (Data.Array.Accelerate.Language.generate
                      @ sh
                      @ sh
                      $dShape
                      $dElt2
                      (Data.Array.Accelerate.Language.shape @ sh @ a $dShape $dElt eta1)
                      (GHC.Base.id @ (Data.Array.Accelerate.Smart.Exp sh)))
                   eta1 } } }) -}
00f1b49843badc7ed959ddf8d4618fb4
  index0 ::
    Data.Array.Accelerate.Smart.Exp Data.Array.Accelerate.Array.Sugar.Z
  {- Strictness: m5,
     Unfolding: InlineRule (0, True, True)
                (Data.Array.Accelerate.Smart.$WIndexNil
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp)
                  `cast`
                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.Z>_N) -}
3db8eb2a1c774283836f202c58591b0d
  index1 ::
    Data.Array.Accelerate.Array.Sugar.Elt i =>
    Data.Array.Accelerate.Smart.Exp i
    -> Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Array.Sugar.Z
          Data.Array.Accelerate.Array.Sugar.:. i)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.index4
                  `cast`
                (forall (i :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt i>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp i>_R
                 ->_R (Data.Array.Accelerate.Smart.Exp
                         (Trans
                              (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                   <i>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                              (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                               Data.Array.Accelerate.Array.Sugar.:. <i>_N)_N))_R) -}
f61a932d305065b1711fec8006f64e63
  index2 ::
    (Data.Array.Accelerate.Array.Sugar.Elt i,
     Data.Array.Accelerate.Array.Sugar.Slice
       (Data.Array.Accelerate.Array.Sugar.Z
        Data.Array.Accelerate.Array.Sugar.:. i)) =>
    Data.Array.Accelerate.Smart.Exp i
    -> Data.Array.Accelerate.Smart.Exp i
    -> Data.Array.Accelerate.Smart.Exp
         ((Data.Array.Accelerate.Array.Sugar.Z
           Data.Array.Accelerate.Array.Sugar.:. i)
          Data.Array.Accelerate.Array.Sugar.:. i)
  {- Arity: 4, Strictness: <L,U><S(LSSSL),U(U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ i
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt i)
                   ($dSlice :: Data.Array.Accelerate.Array.Sugar.Slice
                                 (Data.Array.Accelerate.Array.Sugar.Z
                                  Data.Array.Accelerate.Array.Sugar.:. i))
                   (eta :: Data.Array.Accelerate.Smart.Exp i)
                   (eta1 :: Data.Array.Accelerate.Smart.Exp i) ->
                 let {
                   $dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                (Data.Array.Accelerate.Array.Sugar.FullShape
                                   (Data.Array.Accelerate.Array.Sugar.Z
                                    Data.Array.Accelerate.Array.Sugar.:. i))
                   = Data.Array.Accelerate.Array.Sugar.$p4Slice
                       @ (Data.Array.Accelerate.Array.Sugar.Z
                          Data.Array.Accelerate.Array.Sugar.:. i)
                       $dSlice
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (Data.Array.Accelerate.Array.Sugar.FullShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. i))
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (Data.Array.Accelerate.Array.Sugar.FullShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                                                                    Data.Array.Accelerate.Array.Sugar.:. i)>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (Data.Array.Accelerate.Array.Sugar.FullShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. i))
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (Data.Array.Accelerate.Array.Sugar.FullShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                                                                    Data.Array.Accelerate.Array.Sugar.:. i)>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (Data.Array.Accelerate.Array.Sugar.FullShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (Data.Array.Accelerate.Array.Sugar.FullShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                    (Data.Array.Accelerate.Array.Sugar.Z
                                     Data.Array.Accelerate.Array.Sugar.:. i))
                   = Data.Array.Accelerate.Array.Sugar.$p3Slice
                       @ (Data.Array.Accelerate.Array.Sugar.Z
                          Data.Array.Accelerate.Array.Sugar.:. i)
                       $dSlice
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. i))
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                                                                    Data.Array.Accelerate.Array.Sugar.:. i)>_N) of cobox3 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. i))
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                                                                    Data.Array.Accelerate.Array.Sugar.:. i)>_N) of cobox4 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape1)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox5 { DEFAULT ->
                 let {
                   $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (Data.Array.Accelerate.Array.Sugar.SliceShape
                                    (Data.Array.Accelerate.Array.Sugar.Z
                                     Data.Array.Accelerate.Array.Sugar.:. i))
                   = Data.Array.Accelerate.Array.Sugar.$p2Slice
                       @ (Data.Array.Accelerate.Array.Sugar.Z
                          Data.Array.Accelerate.Array.Sugar.:. i)
                       $dSlice
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape
                             (Data.Array.Accelerate.Array.Sugar.SliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. i))
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape
                           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                                                                    Data.Array.Accelerate.Array.Sugar.:. i)>_N) of cobox6 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                             (Data.Array.Accelerate.Array.Sugar.SliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. i))
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape
                           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                                                                    Data.Array.Accelerate.Array.Sugar.:. i)>_N) of cobox7 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (Data.Array.Accelerate.Array.Sugar.SliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i)))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape
                           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. i))
                           $dShape2)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (Data.Array.Accelerate.Array.Sugar.SliceShape
                                                   (Data.Array.Accelerate.Array.Sugar.Z
                                                    Data.Array.Accelerate.Array.Sugar.:. i))>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox8 { DEFAULT ->
                 (Data.Array.Accelerate.Lift.$w$clift
                    @ i
                    @ (Data.Array.Accelerate.Array.Sugar.Z
                       Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                              i)
                    $dElt
                    $dSlice
                      `cast`
                    (Data.Array.Accelerate.Array.Sugar.Slice
                       (Trans
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])
                             Data.Array.Accelerate.Array.Sugar.:. <i>_N)_N
                            (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                      <i>_N <Data.Array.Accelerate.Array.Sugar.Z>_N))))_R
                    (\ (w3 :: Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                     i)[OneShot] ->
                     case w3 of ww { Data.Array.Accelerate.Array.Sugar.:. ww2 ww3 ->
                     Data.Array.Accelerate.Lift.$w$clift
                       @ i
                       @ Data.Array.Accelerate.Array.Sugar.Z
                       $dElt
                       Data.Array.Accelerate.Array.Sugar.$fSliceZ
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Slice
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                       Data.Array.Accelerate.Lift.$fLiftExpZ1
                         `cast`
                       (Trans
                            (<Data.Array.Accelerate.Array.Sugar.Z>_R
                             ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))
                            (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                      <Data.Array.Accelerate.Smart.Exp>_N
                                      <Data.Array.Accelerate.Array.Sugar.Z>_N)))
                       ww2
                       ww3 })
                      `cast`
                    (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                              <Data.Array.Accelerate.Smart.Exp>_N
                              <Data.Array.Accelerate.Array.Sugar.Z
                               Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                      i>_N))
                    (Data.Array.Accelerate.Array.Sugar.:.
                       @ Data.Array.Accelerate.Array.Sugar.Z
                       @ (Data.Array.Accelerate.Smart.Exp i)
                       Data.Array.Accelerate.Array.Sugar.Z
                       eta)
                    eta1)
                   `cast`
                 (Data.Array.Accelerate.Smart.Exp
                    (Trans
                         (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                              <i>_N
                              <Data.Array.Accelerate.Array.Sugar.Z
                               Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                      i>_N)
                         (Trans
                              (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                   <i>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                              (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                               Data.Array.Accelerate.Array.Sugar.:. <i>_N)_N
                          Data.Array.Accelerate.Array.Sugar.:. <i>_N)_N))_R } } } } } } } } }) -}
b58294de1f871e6cd1cc4a5b9225f367
  index3 ::
    (Data.Array.Accelerate.Array.Sugar.Elt i,
     Data.Array.Accelerate.Array.Sugar.Slice
       (Data.Array.Accelerate.Array.Sugar.Z
        Data.Array.Accelerate.Array.Sugar.:. i),
     Data.Array.Accelerate.Array.Sugar.Slice
       ((Data.Array.Accelerate.Array.Sugar.Z
         Data.Array.Accelerate.Array.Sugar.:. i)
        Data.Array.Accelerate.Array.Sugar.:. i)) =>
    Data.Array.Accelerate.Smart.Exp i
    -> Data.Array.Accelerate.Smart.Exp i
    -> Data.Array.Accelerate.Smart.Exp i
    -> Data.Array.Accelerate.Smart.Exp
         (((Data.Array.Accelerate.Array.Sugar.Z
            Data.Array.Accelerate.Array.Sugar.:. i)
           Data.Array.Accelerate.Array.Sugar.:. i)
          Data.Array.Accelerate.Array.Sugar.:. i)
  {- Arity: 6,
     Strictness: <L,U><S(LSSSL),U(U,U,U,U,U)><S(LSSSL),U(U,U,U,U,U)><L,U><L,U><L,U> -}
11a69c318c80afa2491b5c75d68b0cc3
  index4 ::
    Data.Array.Accelerate.Array.Sugar.Elt i =>
    Data.Array.Accelerate.Smart.Exp i
    -> Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain
            (Data.Array.Accelerate.Array.Sugar.Z
             Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                    i))
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ i
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt i)
                   (eta :: Data.Array.Accelerate.Smart.Exp i) ->
                 Data.Array.Accelerate.Lift.$w$clift
                   @ i
                   @ Data.Array.Accelerate.Array.Sugar.Z
                   $dElt
                   Data.Array.Accelerate.Array.Sugar.$fSliceZ
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Slice
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                   Data.Array.Accelerate.Lift.$fLiftExpZ1
                     `cast`
                   (Trans
                        (<Data.Array.Accelerate.Array.Sugar.Z>_R
                         ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))
                        (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                  <Data.Array.Accelerate.Smart.Exp>_N
                                  <Data.Array.Accelerate.Array.Sugar.Z>_N)))
                   Data.Array.Accelerate.Array.Sugar.Z
                   eta) -}
9d3089e94c4fb9dfebd3d98dc1a5eb1b
  indexed ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh (sh, a))
  {- Arity: 3,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array sh a)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt sh
                   = Data.Array.Accelerate.Array.Sugar.$p1Shape @ sh $dShape
                 } in
                 Data.Array.Accelerate.Prelude.zip
                   @ sh
                   @ sh
                   @ a
                   $dShape
                   $dElt1
                   $dElt
                   (Data.Array.Accelerate.Language.generate
                      @ sh
                      @ sh
                      $dShape
                      $dElt1
                      (Data.Array.Accelerate.Language.shape @ sh @ a $dShape $dElt eta)
                      (GHC.Base.id @ (Data.Array.Accelerate.Smart.Exp sh)))
                   eta } } }) -}
54cd85d5a5eca69ef4654916f9fc7458
  init ::
    (Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 3,
     Strictness: <S(LSSSL),U(U,U,U,U,U)><S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
160e806600c18bd54b8949354d1146cc
  iterate ::
    Data.Array.Accelerate.Array.Sugar.Elt a =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> (Data.Array.Accelerate.Smart.Exp a
        -> Data.Array.Accelerate.Smart.Exp a)
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Exp a
  {- Arity: 1,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ a
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 let {
                   lvl91 :: Data.Array.Accelerate.Array.Sugar.Elt (GHC.Types.Int, a)
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,)
                       @ GHC.Types.Int
                       @ a
                       Data.Array.Accelerate.Array.Sugar.$fEltInt
                       $dElt
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (GHC.Types.Int, a)
                   = Data.Array.Accelerate.Product.$fIsProductcst(,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ GHC.Types.Int
                       @ a
                       Data.Array.Accelerate.Array.Sugar.$fEltInt
                       $dElt
                 } in
                 let {
                   lvl93 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp GHC.Types.Int),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a))
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       Data.Array.Accelerate.Array.Sugar.$fEltInt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                    <GHC.Types.Int>_N)))_R
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 let {
                   lvl94 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp GHC.Types.Int),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a))
                   = Data.Array.Accelerate.Product.$fIsProductcst(,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       Data.Array.Accelerate.Array.Sugar.$fEltInt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                    <GHC.Types.Int>_N)))_R
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                 } in
                 (\ (n :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
                    (f :: Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a)
                    (z :: Data.Array.Accelerate.Smart.Exp a) ->
                  Data.Array.Accelerate.Smart.Prj
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ a
                    @ (GHC.Types.Int, a)
                    lvl91
                    lvl92
                    $dElt
                    (Data.Array.Accelerate.Product.$WZeroTupIdx
                       @ a
                       @ ((), GHC.Types.Int))
                      `cast`
                    (Data.Array.Accelerate.Product.TupleIdx
                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                 <a>_N <GHC.Types.Int>_N))
                       <a>_N)_R
                    (Data.Array.Accelerate.Smart.While
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (GHC.Types.Int, a)
                       lvl91
                       (\ (v :: Data.Array.Accelerate.Smart.Exp (GHC.Types.Int, a)) ->
                        Data.Array.Accelerate.Smart.PrimApp
                          @ Data.Array.Accelerate.Smart.Acc
                          @ Data.Array.Accelerate.Smart.Exp
                          @ GHC.Types.Bool
                          @ (GHC.Types.Int, GHC.Types.Int)
                          Data.Array.Accelerate.Classes.Ord.$fOrdInt_lvl196
                          Data.Array.Accelerate.Array.Sugar.$fEltBool
                          Data.Array.Accelerate.Classes.Ord.$fOrdInt_lvl5
                          (Data.Array.Accelerate.Smart.Tuple
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (GHC.Types.Int, GHC.Types.Int)
                             Data.Array.Accelerate.Classes.Ord.$fOrdInt_lvl196
                             Data.Array.Accelerate.Classes.Ord.$fOrdInt_lvl199
                             (Data.Array.Accelerate.Array.Sugar.SnocTup
                                @ Data.Array.Accelerate.Smart.Exp
                                @ (((), GHC.Types.Int), GHC.Types.Int)
                                @ GHC.Types.Int
                                @ ((), GHC.Types.Int)
                                @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                                Data.Array.Accelerate.Array.Sugar.$fEltInt
                                (Data.Array.Accelerate.Array.Sugar.SnocTup
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ ((), GHC.Types.Int)
                                   @ GHC.Types.Int
                                   @ ()
                                   @~ <((), GHC.Types.Int)>_N
                                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                                   (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                      @ Data.Array.Accelerate.Smart.Exp)
                                   (Data.Array.Accelerate.Smart.Prj
                                      @ Data.Array.Accelerate.Smart.Acc
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ GHC.Types.Int
                                      @ (GHC.Types.Int, a)
                                      lvl91
                                      lvl92
                                      Data.Array.Accelerate.Array.Sugar.$fEltInt
                                      (Data.Array.Accelerate.Smart.tix1 @ () @ GHC.Types.Int @ a)
                                        `cast`
                                      (Data.Array.Accelerate.Product.TupleIdx
                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                   <a>_N <GHC.Types.Int>_N))
                                         <GHC.Types.Int>_N)_R
                                      v)
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N))
                                n)
                               `cast`
                             (Data.Array.Accelerate.Array.Sugar.Tuple
                                <Data.Array.Accelerate.Smart.Exp>_R
                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                          <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                        GHC.Types.Int)>_N))
                         `cast`
                       (<Data.Array.Accelerate.Smart.Exp (GHC.Types.Int, a)>_R
                        ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N)
                       (\ (eta :: Data.Array.Accelerate.Smart.Exp
                                    (Data.Array.Accelerate.Lift.Plain
                                       (Data.Array.Accelerate.Smart.Exp GHC.Types.Int,
                                        Data.Array.Accelerate.Smart.Exp a))) ->
                        Data.Array.Accelerate.Smart.Tuple
                          @ Data.Array.Accelerate.Smart.Acc
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp GHC.Types.Int,
                                Data.Array.Accelerate.Smart.Exp a))
                          lvl93
                            `cast`
                          (Data.Array.Accelerate.Array.Sugar.Elt
                             (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                       <Data.Array.Accelerate.Smart.Exp a>_N
                                       <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_N)))_R
                          lvl94
                            `cast`
                          (Data.Array.Accelerate.Product.IsProduct
                             <Data.Array.Accelerate.Array.Sugar.Elt>_N
                             (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                       <Data.Array.Accelerate.Smart.Exp a>_N
                                       <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_N)))_R
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a))
                             @ (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a))
                             @ ((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
                             @~ <(((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a))>_N
                             $dElt
                               `cast`
                             (Data.Array.Accelerate.Array.Sugar.Elt
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                             (Data.Array.Accelerate.Array.Sugar.SnocTup
                                @ Data.Array.Accelerate.Smart.Exp
                                @ ((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
                                @ (Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
                                @ ()
                                @~ <((),
                                     Data.Array.Accelerate.Lift.Plain
                                       (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))>_N
                                Data.Array.Accelerate.Array.Sugar.$fEltInt
                                  `cast`
                                (Data.Array.Accelerate.Array.Sugar.Elt
                                   (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                             <GHC.Types.Int>_N)))_R
                                (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                   @ Data.Array.Accelerate.Smart.Exp)
                                (Data.Array.Accelerate.Smart.PrimApp
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ GHC.Types.Int
                                   @ (GHC.Types.Int, GHC.Types.Int)
                                   Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                                   Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl2
                                   (Data.Array.Accelerate.Smart.Tuple
                                      @ Data.Array.Accelerate.Smart.Acc
                                      @ Data.Array.Accelerate.Smart.Exp
                                      @ (GHC.Types.Int, GHC.Types.Int)
                                      Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                                      Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl199
                                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                                         @ Data.Array.Accelerate.Smart.Exp
                                         @ (((), GHC.Types.Int), GHC.Types.Int)
                                         @ GHC.Types.Int
                                         @ ((), GHC.Types.Int)
                                         @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                                         Data.Array.Accelerate.Array.Sugar.$fEltInt
                                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                                            @ Data.Array.Accelerate.Smart.Exp
                                            @ ((), GHC.Types.Int)
                                            @ GHC.Types.Int
                                            @ ()
                                            @~ <((), GHC.Types.Int)>_N
                                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                               @ Data.Array.Accelerate.Smart.Exp)
                                            (Data.Array.Accelerate.Smart.Prj
                                               @ Data.Array.Accelerate.Smart.Acc
                                               @ Data.Array.Accelerate.Smart.Exp
                                               @ GHC.Types.Int
                                               @ (GHC.Types.Int, a)
                                               lvl91
                                               lvl92
                                               Data.Array.Accelerate.Array.Sugar.$fEltInt
                                               (Data.Array.Accelerate.Smart.tix1
                                                  @ ()
                                                  @ GHC.Types.Int
                                                  @ a)
                                                 `cast`
                                               (Data.Array.Accelerate.Product.TupleIdx
                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                            <a>_N <GHC.Types.Int>_N))
                                                  <GHC.Types.Int>_N)_R
                                               eta
                                                 `cast`
                                               (Data.Array.Accelerate.Smart.Exp
                                                  (Trans
                                                       (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                                            <Data.Array.Accelerate.Smart.Exp a>_N
                                                            <Data.Array.Accelerate.Smart.Exp
                                                               GHC.Types.Int>_N)
                                                       ((,)
                                                          (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                               <GHC.Types.Int>_N)
                                                          (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                               <a>_N))_N))_R)
                                              `cast`
                                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N))
                                         Data.Array.Accelerate.Prelude.iterate4
                                           `cast`
                                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N))
                                        `cast`
                                      (Data.Array.Accelerate.Array.Sugar.Tuple
                                         <Data.Array.Accelerate.Smart.Exp>_R
                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                   <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                                 GHC.Types.Int)>_N))
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                      <GHC.Types.Int>_N))))
                             (f (Data.Array.Accelerate.Smart.Prj
                                   @ Data.Array.Accelerate.Smart.Acc
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ a
                                   @ (GHC.Types.Int, a)
                                   lvl91
                                   lvl92
                                   $dElt
                                   (Data.Array.Accelerate.Product.$WZeroTupIdx
                                      @ a
                                      @ ((), GHC.Types.Int))
                                     `cast`
                                   (Data.Array.Accelerate.Product.TupleIdx
                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                <a>_N <GHC.Types.Int>_N))
                                      <a>_N)_R
                                   eta
                                     `cast`
                                   (Data.Array.Accelerate.Smart.Exp
                                      (Trans
                                           (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                                <Data.Array.Accelerate.Smart.Exp a>_N
                                                <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_N)
                                           ((,)
                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                   <GHC.Types.Int>_N)
                                              (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                   <a>_N))_N))_R)
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N))
                               `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                            `cast`
                          (Data.Array.Accelerate.Array.Sugar.Tuple
                             <Data.Array.Accelerate.Smart.Exp>_R
                             (Trans
                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                            <Data.Array.Accelerate.Lift.Plain
                                               (Data.Array.Accelerate.Smart.Exp a)>_N
                                            <Data.Array.Accelerate.Lift.Plain
                                               (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)>_N))
                                  (Data.Array.Accelerate.Product.ProdRepr
                                     (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                               <Data.Array.Accelerate.Smart.Exp a>_N
                                               <Data.Array.Accelerate.Smart.Exp
                                                  GHC.Types.Int>_N)))_N))_R)
                         `cast`
                       ((Data.Array.Accelerate.Smart.Exp
                           (Trans
                                (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                     <Data.Array.Accelerate.Smart.Exp a>_N
                                     <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_N)
                                ((,)
                                   (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <GHC.Types.Int>_N)
                                   (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N))_N))_R
                        ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                             (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                                                                  <Data.Array.Accelerate.Smart.Exp
                                                                                     a>_N
                                                                                  <Data.Array.Accelerate.Smart.Exp
                                                                                     GHC.Types.Int>_N)
                                                                             ((,)
                                                                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                     <GHC.Types.Int>_N)
                                                                                (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                     <a>_N))_N))
                       (Data.Array.Accelerate.Smart.Tuple
                          @ Data.Array.Accelerate.Smart.Acc
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp GHC.Types.Int,
                                Data.Array.Accelerate.Smart.Exp a))
                          lvl93
                            `cast`
                          (Data.Array.Accelerate.Array.Sugar.Elt
                             (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                       <Data.Array.Accelerate.Smart.Exp a>_N
                                       <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_N)))_R
                          lvl94
                            `cast`
                          (Data.Array.Accelerate.Product.IsProduct
                             <Data.Array.Accelerate.Array.Sugar.Elt>_N
                             (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                       <Data.Array.Accelerate.Smart.Exp a>_N
                                       <Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_N)))_R
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a))
                             @ (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a))
                             @ ((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
                             @~ <(((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a))>_N
                             $dElt
                               `cast`
                             (Data.Array.Accelerate.Array.Sugar.Elt
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                             Data.Array.Accelerate.Prelude.iterate1
                             z `cast`
                             (Data.Array.Accelerate.Smart.Exp
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                            `cast`
                          (Data.Array.Accelerate.Array.Sugar.Tuple
                             <Data.Array.Accelerate.Smart.Exp>_R
                             (Trans
                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                            <Data.Array.Accelerate.Lift.Plain
                                               (Data.Array.Accelerate.Smart.Exp a)>_N
                                            <Data.Array.Accelerate.Lift.Plain
                                               (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)>_N))
                                  (Data.Array.Accelerate.Product.ProdRepr
                                     (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                               <Data.Array.Accelerate.Smart.Exp a>_N
                                               <Data.Array.Accelerate.Smart.Exp
                                                  GHC.Types.Int>_N)))_N))_R)
                         `cast`
                       (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                        (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                                                             <Data.Array.Accelerate.Smart.Exp
                                                                                a>_N
                                                                             <Data.Array.Accelerate.Smart.Exp
                                                                                GHC.Types.Int>_N)
                                                                        ((,)
                                                                           (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                <GHC.Types.Int>_N)
                                                                           (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                <a>_N))_N)))
                      `cast`
                    (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                  a)>_N))
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp GHC.Types.Int>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp a
                        -> Data.Array.Accelerate.Smart.Exp a>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp a>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)) -}
4cf101d594f0341f438776370943a3e5
  iterate1 ::
    Data.Array.Accelerate.Array.Sugar.Tuple
      Data.Array.Accelerate.Smart.Exp
      ((),
       Data.Array.Accelerate.Lift.Plain
         (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.SnocTup
                   @ Data.Array.Accelerate.Smart.Exp
                   @ ((),
                      Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
                   @ (Data.Array.Accelerate.Lift.Plain
                        (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))
                   @ ()
                   @~ <((),
                        Data.Array.Accelerate.Lift.Plain
                          (Data.Array.Accelerate.Smart.Exp GHC.Types.Int))>_N
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Elt
                      (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                <GHC.Types.Int>_N)))_R
                   (Data.Array.Accelerate.Array.Sugar.$WNilTup
                      @ Data.Array.Accelerate.Smart.Exp)
                   Data.Array.Accelerate.Prelude.iterate2
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                         <GHC.Types.Int>_N)))) -}
df2981ef12cc09b2c64ac2dfb6d530d0
  iterate2 ::
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      GHC.Types.Int
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Prelude.iterate3) -}
f3569072cce817dd61a087b99d9d0642
  iterate3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8c95e86959ace9e3510c6f8923782cb3
  iterate4 ::
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      GHC.Types.Int
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Int
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Prelude.iterate5) -}
1d23958feeb3cd961adf684ba491d028
  iterate5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
316feb97d1fc11c4825a93e8c56cce32
  izipWith ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh
                           -> Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ c
                   $dShape
                   $dElt2
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ a
                         $dShape
                         $dElt
                         eta1)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ b
                         $dShape
                         $dElt1
                         eta2)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      ix
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ b
                         $dShape
                         $dElt1
                         eta2
                         ix)) } } }) -}
efae9b5713f4cdb32b734cd3ad593799
  izipWith3 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh
                           -> Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c
                           -> Data.Array.Accelerate.Smart.Exp d)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b))
                   (eta3 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh c)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ d
                   $dShape
                   $dElt3
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         $dShape
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ a
                            $dShape
                            $dElt
                            eta1)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ b
                            $dShape
                            $dElt1
                            eta2)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ c
                         $dShape
                         $dElt2
                         eta3)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      ix
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ b $dShape $dElt1 eta2 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ c
                         $dShape
                         $dElt2
                         eta3
                         ix)) } } }) -}
dbcd5262c04d45c7d059a8de0f6bb0f1
  izipWith4 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 11, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh
                           -> Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c
                           -> Data.Array.Accelerate.Smart.Exp d
                           -> Data.Array.Accelerate.Smart.Exp e)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b))
                   (eta3 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh c))
                   (eta4 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh d)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ e
                   $dShape
                   $dElt4
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         $dShape
                         (Data.Array.Accelerate.Smart.Intersect
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            $dShape
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               @ a
                               $dShape
                               $dElt
                               eta1)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               @ b
                               $dShape
                               $dElt1
                               eta2)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ c
                            $dShape
                            $dElt2
                            eta3)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ d
                         $dShape
                         $dElt3
                         eta4)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      ix
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ b $dShape $dElt1 eta2 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ c $dShape $dElt2 eta3 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ d
                         $dShape
                         $dElt3
                         eta4
                         ix)) } } }) -}
4af9bbd921d64924da2e0e798a8f3f73
  izipWith5 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
  {- Arity: 13, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(U))))))><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt f)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh
                           -> Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c
                           -> Data.Array.Accelerate.Smart.Exp d
                           -> Data.Array.Accelerate.Smart.Exp e
                           -> Data.Array.Accelerate.Smart.Exp f)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b))
                   (eta3 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh c))
                   (eta4 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh d))
                   (eta5 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh e)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ f
                   $dShape
                   $dElt5
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         $dShape
                         (Data.Array.Accelerate.Smart.Intersect
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            $dShape
                            (Data.Array.Accelerate.Smart.Intersect
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               $dShape
                               (Data.Array.Accelerate.Smart.Shape
                                  @ Data.Array.Accelerate.Smart.Acc
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ sh
                                  @ a
                                  $dShape
                                  $dElt
                                  eta1)
                                 `cast`
                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                               (Data.Array.Accelerate.Smart.Shape
                                  @ Data.Array.Accelerate.Smart.Acc
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ sh
                                  @ b
                                  $dShape
                                  $dElt1
                                  eta2)
                                 `cast`
                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               @ c
                               $dShape
                               $dElt2
                               eta3)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ d
                            $dShape
                            $dElt3
                            eta4)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ e
                         $dShape
                         $dElt4
                         eta5)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      ix
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ b $dShape $dElt1 eta2 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ c $dShape $dElt2 eta3 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ d $dShape $dElt3 eta4 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ e
                         $dShape
                         $dElt4
                         eta5
                         ix)) } } }) -}
7e1a9602b85a257e8dbf732b5a7686ad
  izipWith6 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f
     -> Data.Array.Accelerate.Smart.Exp g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
  {- Arity: 15, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(C1(U)))))))><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt f)
                   ($dElt6 :: Data.Array.Accelerate.Array.Sugar.Elt g)
                   (eta :: Data.Array.Accelerate.Smart.Exp sh
                           -> Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c
                           -> Data.Array.Accelerate.Smart.Exp d
                           -> Data.Array.Accelerate.Smart.Exp e
                           -> Data.Array.Accelerate.Smart.Exp f
                           -> Data.Array.Accelerate.Smart.Exp g)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b))
                   (eta3 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh c))
                   (eta4 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh d))
                   (eta5 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh e))
                   (eta6 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh f)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ g
                   $dShape
                   $dElt6
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         $dShape
                         (Data.Array.Accelerate.Smart.Intersect
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            $dShape
                            (Data.Array.Accelerate.Smart.Intersect
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               $dShape
                               (Data.Array.Accelerate.Smart.Intersect
                                  @ Data.Array.Accelerate.Smart.Acc
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ sh
                                  $dShape
                                  (Data.Array.Accelerate.Smart.Shape
                                     @ Data.Array.Accelerate.Smart.Acc
                                     @ Data.Array.Accelerate.Smart.Exp
                                     @ sh
                                     @ a
                                     $dShape
                                     $dElt
                                     eta1)
                                    `cast`
                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                                  (Data.Array.Accelerate.Smart.Shape
                                     @ Data.Array.Accelerate.Smart.Acc
                                     @ Data.Array.Accelerate.Smart.Exp
                                     @ sh
                                     @ b
                                     $dShape
                                     $dElt1
                                     eta2)
                                    `cast`
                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                                 `cast`
                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                               (Data.Array.Accelerate.Smart.Shape
                                  @ Data.Array.Accelerate.Smart.Acc
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ sh
                                  @ c
                                  $dShape
                                  $dElt2
                                  eta3)
                                 `cast`
                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               @ d
                               $dShape
                               $dElt3
                               eta4)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ e
                            $dShape
                            $dElt4
                            eta5)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ f
                         $dShape
                         $dElt5
                         eta6)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      ix
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ b $dShape $dElt1 eta2 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ c $dShape $dElt2 eta3 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ d $dShape $dElt3 eta4 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ e $dShape $dElt4 eta5 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ f
                         $dShape
                         $dElt5
                         eta6
                         ix)) } } }) -}
990646eecdebbc59408c3d63caa3d811
  izipWith7 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f
     -> Data.Array.Accelerate.Smart.Exp g
     -> Data.Array.Accelerate.Smart.Exp h)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh h)
  {- Arity: 17, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(C1(C1(U))))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
d0e322f0087b4e4dbfebe1d6e24d77ed
  izipWith8 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h,
     Data.Array.Accelerate.Array.Sugar.Elt i) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f
     -> Data.Array.Accelerate.Smart.Exp g
     -> Data.Array.Accelerate.Smart.Exp h
     -> Data.Array.Accelerate.Smart.Exp i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh h)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh i)
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(C1(C1(C1(U)))))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
372aa1dd8514c92c7d62b319ba2a0a92
  izipWith9 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h,
     Data.Array.Accelerate.Array.Sugar.Elt i,
     Data.Array.Accelerate.Array.Sugar.Elt j) =>
    (Data.Array.Accelerate.Smart.Exp sh
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f
     -> Data.Array.Accelerate.Smart.Exp g
     -> Data.Array.Accelerate.Smart.Exp h
     -> Data.Array.Accelerate.Smart.Exp i
     -> Data.Array.Accelerate.Smart.Exp j)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh h)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh j)
  {- Arity: 21, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(C1(C1(C1(C1(U))))))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
bbe5a0a85d2b1fae26e773c59ab32016
  length ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                e)) ->
                 case Data.Array.Accelerate.Lift.$w$cunlift1
                        @ GHC.Types.Int
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.$fEltInt
                        Data.Array.Accelerate.Array.Sugar.$fSliceZ
                          `cast`
                        (Data.Array.Accelerate.Array.Sugar.Slice
                           (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                        Data.Array.Accelerate.Lift.$fUnliftExpZ
                        (Data.Array.Accelerate.Smart.Shape
                           @ Data.Array.Accelerate.Smart.Acc
                           @ Data.Array.Accelerate.Smart.Exp
                           @ (Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                           @ e
                           Data.Array.Accelerate.Prelude.$s$fShape:.
                           $dElt
                           eta)
                          `cast`
                        (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])
                                                                          Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                                                                         (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                                                                   <GHC.Types.Int>_N
                                                                                   <Data.Array.Accelerate.Array.Sugar.Z>_N)))) of ww { (#,#) ww2 ww3 ->
                 case ww2 of wild { Data.Array.Accelerate.Array.Sugar.Z ->
                 ww3 } }) -}
043e44f2b24c8af4ad7419844983639a
  maximum ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Classes.Ord.Ord e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(1*U(1*U,A,A),A,A,A,A,A,1*U)><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord e)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.fold1
                   @ sh
                   @ e
                   $dShape
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq
                      @ e
                      (Data.Array.Accelerate.Classes.Ord.$p1Ord @ e $dOrd))
                   (Data.Array.Accelerate.Classes.Ord.max @ e $dOrd)
                   eta } } }) -}
68c222da6b8c9ea5642255c271a60767
  minimum ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Classes.Ord.Ord e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(1*U(1*U,A,A),A,A,A,A,1*U,A)><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dOrd :: Data.Array.Accelerate.Classes.Ord.Ord e)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.fold1
                   @ sh
                   @ e
                   $dShape
                   (Data.Array.Accelerate.Classes.Eq.$p1Eq
                      @ e
                      (Data.Array.Accelerate.Classes.Ord.$p1Ord @ e $dOrd))
                   (Data.Array.Accelerate.Classes.Ord.min @ e $dOrd)
                   eta } } }) -}
ac814e40e0fe774ba7271c6673fa7d78
  null ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array sh e)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 (Data.Array.Accelerate.Smart.PrimApp
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ GHC.Types.Bool
                    @ (GHC.Types.Int, GHC.Types.Int)
                    Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl196
                    Data.Array.Accelerate.Array.Sugar.$fEltBool
                    Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl1
                    (Data.Array.Accelerate.Smart.Tuple
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ (GHC.Types.Int, GHC.Types.Int)
                       Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl196
                       Data.Array.Accelerate.Classes.Eq.$fEqInt_lvl199
                       (Data.Array.Accelerate.Array.Sugar.SnocTup
                          @ Data.Array.Accelerate.Smart.Exp
                          @ (((), GHC.Types.Int), GHC.Types.Int)
                          @ GHC.Types.Int
                          @ ((), GHC.Types.Int)
                          @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                          Data.Array.Accelerate.Array.Sugar.$fEltInt
                          (Data.Array.Accelerate.Array.Sugar.SnocTup
                             @ Data.Array.Accelerate.Smart.Exp
                             @ ((), GHC.Types.Int)
                             @ GHC.Types.Int
                             @ ()
                             @~ <((), GHC.Types.Int)>_N
                             Data.Array.Accelerate.Array.Sugar.$fEltInt
                             (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                @ Data.Array.Accelerate.Smart.Exp)
                             (Data.Array.Accelerate.Language.size @ sh @ e $dShape $dElt eta))
                          Data.Array.Accelerate.Prelude.iterate2
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N))
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Tuple
                          <Data.Array.Accelerate.Smart.Exp>_R
                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                    <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                      `cast`
                    (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                  GHC.Types.Int)>_N))
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N) } } }) -}
2b1ef9bcf45fc0ac9d7032cb0ba42922
  or ::
    Data.Array.Accelerate.Array.Sugar.Shape sh =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
         GHC.Types.Bool)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh GHC.Types.Bool)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ sh
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                GHC.Types.Bool)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.fold
                   @ sh
                   @ GHC.Types.Bool
                   $dShape
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   Data.Array.Accelerate.Smart.mkLOr1
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                    ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N)
                   Data.Array.Accelerate.Prelude.or1
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Bool>_N)
                   eta } } }) -}
63aed86b0b3150d325d85f045e75f539
  or1 ::
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ GHC.Types.Bool
                   Data.Array.Accelerate.Array.Sugar.$fEltBool
                   GHC.Types.False) -}
4f61dbf886e53224b1cd58fa7da81796
  postscanl ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a)
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U,U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U(U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.Array.Sugar.$fShape:. @ sh $dShape
                 } in
                 let {
                   lvl91 :: Data.Array.Accelerate.Array.Sugar.SliceShape
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                            Data.Type.Equality.~ Data.Array.Accelerate.Array.Sugar.Z
                   = Data.Array.Accelerate.Array.Sugar.$fShape:._$cp6Shape
                       @ sh
                       $dShape
                 } in
                 \ (f :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a)
                   (e :: Data.Array.Accelerate.Smart.Exp a) ->
                 let {
                   eta :: Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                   = f e
                 } in
                 \ (x :: Data.Array.Accelerate.Smart.Acc
                           (Data.Array.Accelerate.Array.Sugar.Array
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        lvl91
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                 case Data.Array.Accelerate.Array.Sugar.$w$cp5Shape
                        @ sh
                        $dShape of ww0 { DEFAULT ->
                 case Data.Array.Accelerate.Array.Sugar.$w$cp4Shape
                        @ sh
                        $dShape of ww2 { DEFAULT ->
                 (Data.Array.Accelerate.Smart.Map
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                    @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                    @ a
                    @ a
                    @~ <Data.Array.Accelerate.Array.Sugar.Array
                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a>_N
                    $dShape1
                    $dElt
                    $dElt
                    eta
                    (Data.Array.Accelerate.Language.scanl1 @ sh @ a $dShape $dElt f x))
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                (sh
                                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                a>_N) } } } } } }) -}
7940866f62813c5908948e5c26507edd
  postscanlSeg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
cdb23dbbffdf8402972ff4ae47f6f587
  postscanr ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a)
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U,U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U(U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.Array.Sugar.$fShape:. @ sh $dShape
                 } in
                 let {
                   lvl91 :: Data.Array.Accelerate.Array.Sugar.SliceShape
                              (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                            Data.Type.Equality.~ Data.Array.Accelerate.Array.Sugar.Z
                   = Data.Array.Accelerate.Array.Sugar.$fShape:._$cp6Shape
                       @ sh
                       $dShape
                 } in
                 \ (f :: Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a
                         -> Data.Array.Accelerate.Smart.Exp a)
                   (e :: Data.Array.Accelerate.Smart.Exp a)
                   (eta :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        lvl91
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                (sh
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox3 { DEFAULT ->
                 case Data.Array.Accelerate.Array.Sugar.$w$cp5Shape
                        @ sh
                        $dShape of ww0 { DEFAULT ->
                 case Data.Array.Accelerate.Array.Sugar.$w$cp4Shape
                        @ sh
                        $dShape of ww2 { DEFAULT ->
                 (Data.Array.Accelerate.Smart.Map
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                    @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                    @ a
                    @ a
                    @~ <Data.Array.Accelerate.Array.Sugar.Array
                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a>_N
                    $dShape1
                    $dElt
                    $dElt
                    (\ (ds :: Data.Array.Accelerate.Smart.Exp a) -> f ds e)
                    (Data.Array.Accelerate.Language.scanr1
                       @ sh
                       @ a
                       $dShape
                       $dElt
                       f
                       eta))
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                (sh
                                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                a>_N) } } } } } }) -}
1fa9b68f4a3f876b843ab6f25f6ded41
  postscanrSeg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
2fe58bccbda7bbe938ffee626071fed3
  prescanl ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a)
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U,U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U(U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.Array.Sugar.$fShape:. @ sh $dShape
                 } in
                 let {
                   $dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays
                                  (Data.Array.Accelerate.Array.Sugar.Array
                                     (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                   = Data.Array.Accelerate.Array.Sugar.$fArraysArray
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       $dShape1
                       $dElt
                 } in
                 let {
                   $dArrays2 :: Data.Array.Accelerate.Array.Sugar.Arrays
                                  (Data.Array.Accelerate.Array.Sugar.Array sh a)
                   = Data.Array.Accelerate.Array.Sugar.$fArraysArray
                       @ sh
                       @ a
                       $dShape
                       $dElt
                 } in
                 let {
                   lvl91 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Arrays
                              (Data.Array.Accelerate.Array.Sugar.Array
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a,
                               Data.Array.Accelerate.Array.Sugar.Array sh a)
                   = Data.Array.Accelerate.Product.$fIsProductcst(,)
                       @ Data.Array.Accelerate.Array.Sugar.Arrays
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                       @ (Data.Array.Accelerate.Array.Sugar.Array sh a)
                       $dArrays1
                       $dArrays2
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Array.Sugar.Arrays
                              (Data.Array.Accelerate.Array.Sugar.Array
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a,
                               Data.Array.Accelerate.Array.Sugar.Array sh a)
                   = Data.Array.Accelerate.Array.Sugar.$fArrays(,)
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                       @ (Data.Array.Accelerate.Array.Sugar.Array sh a)
                       $dArrays1
                       $dArrays2
                 } in
                 (\ (f :: Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a)
                    (e :: Data.Array.Accelerate.Smart.Exp a)
                    (eta :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)) ->
                  Data.Array.Accelerate.Smart.Aprj
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a,
                       Data.Array.Accelerate.Array.Sugar.Array sh a)
                    lvl92
                    lvl91
                    $dArrays1
                    (Data.Array.Accelerate.Smart.tix1
                       @ ()
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                       @ (Data.Array.Accelerate.Array.Sugar.Array sh a))
                      `cast`
                    (Data.Array.Accelerate.Product.TupleIdx
                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                 <Data.Array.Accelerate.Array.Sugar.Array sh a>_N
                                 <Data.Array.Accelerate.Array.Sugar.Array
                                    (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a>_N))
                       <Data.Array.Accelerate.Array.Sugar.Array
                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a>_N)_R
                    (Data.Array.Accelerate.Language.scanl'
                       @ sh
                       @ a
                       $dShape
                       $dElt
                       f
                       e
                       eta))
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp a
                   -> Data.Array.Accelerate.Smart.Exp a
                   -> Data.Array.Accelerate.Smart.Exp a>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp a>_R
                  ->_R <Data.Array.Accelerate.Smart.Acc
                          (Data.Array.Accelerate.Array.Sugar.Array
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                     (sh
                                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                     a>_N) } } }) -}
f7fde083d3ad4bf30cad5adfc631bed3
  prescanlSeg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
b9c74cc34eb0f1b36f88be5e6df2aa9d
  prescanr ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp a)
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
  {- Arity: 2,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U,U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U(U(U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   = Data.Array.Accelerate.Array.Sugar.$fShape:. @ sh $dShape
                 } in
                 let {
                   $dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays
                                  (Data.Array.Accelerate.Array.Sugar.Array
                                     (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                   = Data.Array.Accelerate.Array.Sugar.$fArraysArray
                       @ (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                       @ a
                       $dShape1
                       $dElt
                 } in
                 let {
                   $dArrays2 :: Data.Array.Accelerate.Array.Sugar.Arrays
                                  (Data.Array.Accelerate.Array.Sugar.Array sh a)
                   = Data.Array.Accelerate.Array.Sugar.$fArraysArray
                       @ sh
                       @ a
                       $dShape
                       $dElt
                 } in
                 let {
                   lvl91 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Arrays
                              (Data.Array.Accelerate.Array.Sugar.Array
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a,
                               Data.Array.Accelerate.Array.Sugar.Array sh a)
                   = Data.Array.Accelerate.Product.$fIsProductcst(,)
                       @ Data.Array.Accelerate.Array.Sugar.Arrays
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                       @ (Data.Array.Accelerate.Array.Sugar.Array sh a)
                       $dArrays1
                       $dArrays2
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Array.Sugar.Arrays
                              (Data.Array.Accelerate.Array.Sugar.Array
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a,
                               Data.Array.Accelerate.Array.Sugar.Array sh a)
                   = Data.Array.Accelerate.Array.Sugar.$fArrays(,)
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                       @ (Data.Array.Accelerate.Array.Sugar.Array sh a)
                       $dArrays1
                       $dArrays2
                 } in
                 (\ (f :: Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a
                          -> Data.Array.Accelerate.Smart.Exp a)
                    (e :: Data.Array.Accelerate.Smart.Exp a)
                    (eta :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array
                                 (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)) ->
                  Data.Array.Accelerate.Smart.Aprj
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a,
                       Data.Array.Accelerate.Array.Sugar.Array sh a)
                    lvl92
                    lvl91
                    $dArrays1
                    (Data.Array.Accelerate.Smart.tix1
                       @ ()
                       @ (Data.Array.Accelerate.Array.Sugar.Array
                            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)
                       @ (Data.Array.Accelerate.Array.Sugar.Array sh a))
                      `cast`
                    (Data.Array.Accelerate.Product.TupleIdx
                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                 <Data.Array.Accelerate.Array.Sugar.Array sh a>_N
                                 <Data.Array.Accelerate.Array.Sugar.Array
                                    (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a>_N))
                       <Data.Array.Accelerate.Array.Sugar.Array
                          (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a>_N)_R
                    (Data.Array.Accelerate.Language.scanr'
                       @ sh
                       @ a
                       $dShape
                       $dElt
                       f
                       e
                       eta))
                   `cast`
                 (<Data.Array.Accelerate.Smart.Exp a
                   -> Data.Array.Accelerate.Smart.Exp a
                   -> Data.Array.Accelerate.Smart.Exp a>_R
                  ->_R <Data.Array.Accelerate.Smart.Exp a>_R
                  ->_R <Data.Array.Accelerate.Smart.Acc
                          (Data.Array.Accelerate.Array.Sugar.Array
                             (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) a)>_R
                  ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                     (sh
                                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                     a>_N) } } }) -}
c3c85a4f5a030ae276718b54d965c074
  prescanrSeg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
5e90558eab46ca72481834c587f9567a
  product ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Classes.Num.Num e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(1*U,1*U)>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dNum :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt e)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e))
                       $d(%,%)
                 } in
                 Data.Array.Accelerate.Language.fold
                   @ sh
                   @ e
                   $dShape
                   (GHC.Classes.$p1(%,%)
                      @ (Data.Array.Accelerate.Array.Sugar.Elt e)
                      @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e))
                      $d(%,%))
                   (GHC.Num.* @ (Data.Array.Accelerate.Smart.Exp e) $dNum)
                   (GHC.Num.fromInteger
                      @ (Data.Array.Accelerate.Smart.Exp e)
                      $dNum
                      Data.Array.Accelerate.Prelude.enumFromN1) } } }) -}
1a0984f674869e5856a06b0cff13462b
  reverse ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (xs :: Data.Array.Accelerate.Smart.Acc
                            (Data.Array.Accelerate.Array.Sugar.Vector e)) ->
                 let {
                   len :: Data.Array.Accelerate.Smart.Exp GHC.Types.Int
                   = case Data.Array.Accelerate.Lift.$w$cunlift1
                            @ GHC.Types.Int
                            @ Data.Array.Accelerate.Array.Sugar.Z
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            Data.Array.Accelerate.Array.Sugar.$fSliceZ
                              `cast`
                            (Data.Array.Accelerate.Array.Sugar.Slice
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                            Data.Array.Accelerate.Lift.$fUnliftExpZ
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ Data.Array.Accelerate.Array.Sugar.DIM1
                               @ e
                               Data.Array.Accelerate.Prelude.$s$fShape:.
                               $dElt
                               xs)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                             (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])
                                                                              Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                                                                             (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                                                                       <GHC.Types.Int>_N
                                                                                       <Data.Array.Accelerate.Array.Sugar.Z>_N)))) of ww { (#,#) ww2 ww3 ->
                     case ww2 of wild { Data.Array.Accelerate.Array.Sugar.Z -> ww3 } }
                 } in
                 (Data.Array.Accelerate.Smart.Backpermute
                    @ Data.Array.Accelerate.Smart.Acc
                    @ Data.Array.Accelerate.Smart.Exp
                    @ (Data.Array.Accelerate.Array.Sugar.Array
                         Data.Array.Accelerate.Array.Sugar.DIM1 e)
                    @ Data.Array.Accelerate.Array.Sugar.DIM1
                    @ Data.Array.Accelerate.Array.Sugar.DIM1
                    @ e
                    @~ <Data.Array.Accelerate.Array.Sugar.Array
                          Data.Array.Accelerate.Array.Sugar.DIM1 e>_N
                    Data.Array.Accelerate.Prelude.$s$fShape:.
                    Data.Array.Accelerate.Prelude.$s$fShape:.
                    $dElt
                    (Data.Array.Accelerate.Smart.Shape
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ Data.Array.Accelerate.Array.Sugar.DIM1
                       @ e
                       Data.Array.Accelerate.Prelude.$s$fShape:.
                       $dElt
                       xs)
                      `cast`
                    (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.DIM1>_N)
                    (\ (eta :: Data.Array.Accelerate.Smart.Exp
                                 (Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Array.Sugar.Z
                                     Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                            GHC.Types.Int))) ->
                     case Data.Array.Accelerate.Lift.$w$cunlift1
                            @ GHC.Types.Int
                            @ Data.Array.Accelerate.Array.Sugar.Z
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            Data.Array.Accelerate.Array.Sugar.$fSliceZ
                              `cast`
                            (Data.Array.Accelerate.Array.Sugar.Slice
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                            Data.Array.Accelerate.Lift.$fUnliftExpZ
                            eta of ww { (#,#) ww2 ww3 ->
                     case ww2 of wild { Data.Array.Accelerate.Array.Sugar.Z ->
                     Data.Array.Accelerate.Lift.$w$clift
                       @ GHC.Types.Int
                       @ Data.Array.Accelerate.Array.Sugar.Z
                       Data.Array.Accelerate.Array.Sugar.$fEltInt
                       Data.Array.Accelerate.Array.Sugar.$fSliceZ
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Slice
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                       Data.Array.Accelerate.Lift.$fLiftExpZ1
                         `cast`
                       (Trans
                            (<Data.Array.Accelerate.Array.Sugar.Z>_R
                             ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))
                            (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                      <Data.Array.Accelerate.Smart.Exp>_N
                                      <Data.Array.Accelerate.Array.Sugar.Z>_N)))
                       Data.Array.Accelerate.Array.Sugar.Z
                       (Data.Array.Accelerate.Smart.PrimApp
                          @ Data.Array.Accelerate.Smart.Acc
                          @ Data.Array.Accelerate.Smart.Exp
                          @ GHC.Types.Int
                          @ (GHC.Types.Int, GHC.Types.Int)
                          Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                          Data.Array.Accelerate.Array.Sugar.$fEltInt
                          Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl1
                          (Data.Array.Accelerate.Smart.Tuple
                             @ Data.Array.Accelerate.Smart.Acc
                             @ Data.Array.Accelerate.Smart.Exp
                             @ (GHC.Types.Int, GHC.Types.Int)
                             Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl196
                             Data.Array.Accelerate.Classes.Num.$fNumExp20_lvl199
                             (Data.Array.Accelerate.Array.Sugar.SnocTup
                                @ Data.Array.Accelerate.Smart.Exp
                                @ (((), GHC.Types.Int), GHC.Types.Int)
                                @ GHC.Types.Int
                                @ ((), GHC.Types.Int)
                                @~ <(((), GHC.Types.Int), GHC.Types.Int)>_N
                                Data.Array.Accelerate.Array.Sugar.$fEltInt
                                (Data.Array.Accelerate.Array.Sugar.SnocTup
                                   @ Data.Array.Accelerate.Smart.Exp
                                   @ ((), GHC.Types.Int)
                                   @ GHC.Types.Int
                                   @ ()
                                   @~ <((), GHC.Types.Int)>_N
                                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                                   (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                      @ Data.Array.Accelerate.Smart.Exp)
                                   (Data.Array.Accelerate.Classes.Num.$fNumExp125 len ww3)
                                     `cast`
                                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N))
                                Data.Array.Accelerate.Prelude.iterate4
                                  `cast`
                                (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N))
                               `cast`
                             (Data.Array.Accelerate.Array.Sugar.Tuple
                                <Data.Array.Accelerate.Smart.Exp>_R
                                (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                          <GHC.Types.Int>_N <GHC.Types.Int>_N)))_R)
                            `cast`
                          (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <(GHC.Types.Int,
                                                                        GHC.Types.Int)>_N))
                         `cast`
                       (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N) } })
                      `cast`
                    ((Data.Array.Accelerate.Smart.Exp
                        (Trans
                             (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                  <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                             (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                              Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R
                     ->_R (Data.Array.Accelerate.Smart.Exp
                             (Trans
                                  (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                       <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                                  (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                                   Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R)
                    xs)
                   `cast`
                 (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                Data.Array.Accelerate.Array.Sugar.DIM1
                                                                e>_N)) -}
629ef3bf5bad01a35acdc29a4858516f
  scanl'Seg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e,
          Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
368c40fc4a6956a07ec30cf4ea7e3120
  scanl1Seg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
a55fe2d20bb75d2dbee3014d34a53ac2
  scanlSeg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
e3a61379be5ea841d990a169e8109282
  scanr'Seg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e,
          Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
cc0eb9cdcb97dd5ac6c1799252528cd9
  scanr1Seg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
f033b15f716fa23e89bcf4b56ed683bd
  scanrSeg ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Classes.Integral.Integral i,
     Data.Array.Accelerate.Data.Bits.Bits i,
     Data.Array.Accelerate.Classes.FromIntegral.FromIntegral
       i GHC.Types.Int) =>
    (Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Exp e
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Segments i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U),U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U,U,U)><L,U(U(U,U,U),A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))> -}
9a04de1f3799b946853252690348c160
  scatter ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.scatter1
                  `cast`
                (forall (e :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt e>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int)>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Vector e)>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Vector e)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                    Data.Array.Accelerate.Array.Sugar.DIM1
                                                                    e>_N) -}
4dcf5b11bd09720929f04ec67de263b2
  scatter1 ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> Data.Array.Accelerate.Smart.PreAcc
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Array.Sugar.Array
            Data.Array.Accelerate.Array.Sugar.DIM1 e)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (to :: Data.Array.Accelerate.Smart.Acc
                            (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int))
                   (defaults :: Data.Array.Accelerate.Smart.Acc
                                  (Data.Array.Accelerate.Array.Sugar.Vector e))
                   (input :: Data.Array.Accelerate.Smart.Acc
                               (Data.Array.Accelerate.Array.Sugar.Vector e)) ->
                 Data.Array.Accelerate.Smart.Permute
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Array.Sugar.Array
                        Data.Array.Accelerate.Array.Sugar.DIM1 e)
                   @ Data.Array.Accelerate.Array.Sugar.DIM1
                   @ Data.Array.Accelerate.Array.Sugar.DIM1
                   @ e
                   @~ <Data.Array.Accelerate.Array.Sugar.Array
                         Data.Array.Accelerate.Array.Sugar.DIM1 e>_N
                   Data.Array.Accelerate.Prelude.$s$fShape:.
                   Data.Array.Accelerate.Prelude.$s$fShape:.
                   $dElt
                   (GHC.Base.const
                      @ (Data.Array.Accelerate.Smart.Exp e)
                      @ (Data.Array.Accelerate.Smart.Exp e))
                   defaults
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp
                               Data.Array.Accelerate.Array.Sugar.DIM1) ->
                    Data.Array.Accelerate.Lift.$w$clift
                      @ GHC.Types.Int
                      @ Data.Array.Accelerate.Array.Sugar.Z
                      Data.Array.Accelerate.Array.Sugar.$fEltInt
                      Data.Array.Accelerate.Array.Sugar.$fSliceZ
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Slice
                         (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                      Data.Array.Accelerate.Lift.$fLiftExpZ1
                        `cast`
                      (Trans
                           (<Data.Array.Accelerate.Array.Sugar.Z>_R
                            ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))
                           (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                     <Data.Array.Accelerate.Smart.Exp>_N
                                     <Data.Array.Accelerate.Array.Sugar.Z>_N)))
                      Data.Array.Accelerate.Array.Sugar.Z
                      (Data.Array.Accelerate.Smart.Index
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ GHC.Types.Int
                         @ Data.Array.Accelerate.Array.Sugar.DIM1
                         Data.Array.Accelerate.Prelude.$s$fShape:.
                         Data.Array.Accelerate.Array.Sugar.$fEltInt
                         to
                         ix)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N))
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp
                       Data.Array.Accelerate.Array.Sugar.DIM1>_R
                    ->_R (Data.Array.Accelerate.Smart.Exp
                            (Trans
                                 (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                      <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                                 (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                                  Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R)
                   (Data.Array.Accelerate.Smart.Backpermute
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Data.Array.Accelerate.Array.Sugar.Array
                           Data.Array.Accelerate.Array.Sugar.DIM1 e)
                      @ Data.Array.Accelerate.Array.Sugar.DIM1
                      @ Data.Array.Accelerate.Array.Sugar.DIM1
                      @ e
                      @~ <Data.Array.Accelerate.Array.Sugar.Array
                            Data.Array.Accelerate.Array.Sugar.DIM1 e>_N
                      Data.Array.Accelerate.Prelude.$s$fShape:.
                      Data.Array.Accelerate.Prelude.$s$fShape:.
                      $dElt
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ Data.Array.Accelerate.Array.Sugar.DIM1
                         Data.Array.Accelerate.Prelude.$s$fShape:.
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ Data.Array.Accelerate.Array.Sugar.DIM1
                            @ GHC.Types.Int
                            Data.Array.Accelerate.Prelude.$s$fShape:.
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            to)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.DIM1>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ Data.Array.Accelerate.Array.Sugar.DIM1
                            @ e
                            Data.Array.Accelerate.Prelude.$s$fShape:.
                            $dElt
                            input)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.DIM1>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.DIM1>_N)
                      (GHC.Base.id
                         @ (Data.Array.Accelerate.Smart.Exp
                              Data.Array.Accelerate.Array.Sugar.DIM1))
                      input)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                  Data.Array.Accelerate.Array.Sugar.DIM1
                                                                  e>_N)) -}
4175cda9b0af0231a6763fc0d6c812c4
  scatterIf ::
    (Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt e') =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> (Data.Array.Accelerate.Smart.Exp e
        -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e')
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e')
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e')
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,C(U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.scatterIf1
                  `cast`
                (forall (e :: <*>_N) (e' :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt e>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt e'>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int)>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Vector e)>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp e
                       -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Vector e')>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Vector e')>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                    Data.Array.Accelerate.Array.Sugar.DIM1
                                                                    e'>_N) -}
c6348cb606b7dfa71be186f646bca47d
  scatterIf1 ::
    (Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt e') =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e)
    -> (Data.Array.Accelerate.Smart.Exp e
        -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e')
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Vector e')
    -> Data.Array.Accelerate.Smart.PreAcc
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Array.Sugar.Array
            Data.Array.Accelerate.Array.Sugar.DIM1 e')
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,C(U)><L,U><L,U>,
     Unfolding: (\ @ e
                   @ e'
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt e')
                   (to :: Data.Array.Accelerate.Smart.Acc
                            (Data.Array.Accelerate.Array.Sugar.Vector GHC.Types.Int))
                   (maskV :: Data.Array.Accelerate.Smart.Acc
                               (Data.Array.Accelerate.Array.Sugar.Vector e))
                   (pred :: Data.Array.Accelerate.Smart.Exp e
                            -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                   (defaults :: Data.Array.Accelerate.Smart.Acc
                                  (Data.Array.Accelerate.Array.Sugar.Vector e'))
                   (input :: Data.Array.Accelerate.Smart.Acc
                               (Data.Array.Accelerate.Array.Sugar.Vector e')) ->
                 Data.Array.Accelerate.Smart.Permute
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Array.Sugar.Array
                        Data.Array.Accelerate.Array.Sugar.DIM1 e')
                   @ Data.Array.Accelerate.Array.Sugar.DIM1
                   @ Data.Array.Accelerate.Array.Sugar.DIM1
                   @ e'
                   @~ <Data.Array.Accelerate.Array.Sugar.Array
                         Data.Array.Accelerate.Array.Sugar.DIM1 e'>_N
                   Data.Array.Accelerate.Prelude.$s$fShape:.
                   Data.Array.Accelerate.Prelude.$s$fShape:.
                   $dElt1
                   (GHC.Base.const
                      @ (Data.Array.Accelerate.Smart.Exp e')
                      @ (Data.Array.Accelerate.Smart.Exp e'))
                   defaults
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp
                               Data.Array.Accelerate.Array.Sugar.DIM1) ->
                    Data.Array.Accelerate.Smart.Cond
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Data.Array.Accelerate.Array.Sugar.Z
                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                      Data.Array.Accelerate.Prelude.$s$fElt:.
                      (pred
                         (Data.Array.Accelerate.Smart.Index
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ e
                            @ Data.Array.Accelerate.Array.Sugar.DIM1
                            Data.Array.Accelerate.Prelude.$s$fShape:.
                            $dElt
                            maskV
                            ix)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N))
                      (Data.Array.Accelerate.Lift.$w$clift
                         @ GHC.Types.Int
                         @ Data.Array.Accelerate.Array.Sugar.Z
                         Data.Array.Accelerate.Array.Sugar.$fEltInt
                         Data.Array.Accelerate.Array.Sugar.$fSliceZ
                           `cast`
                         (Data.Array.Accelerate.Array.Sugar.Slice
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                         Data.Array.Accelerate.Lift.$fLiftExpZ1
                           `cast`
                         (Trans
                              (<Data.Array.Accelerate.Array.Sugar.Z>_R
                               ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))
                              (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                                        <Data.Array.Accelerate.Smart.Exp>_N
                                        <Data.Array.Accelerate.Array.Sugar.Z>_N)))
                         Data.Array.Accelerate.Array.Sugar.Z
                         (Data.Array.Accelerate.Smart.Index
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ GHC.Types.Int
                            @ Data.Array.Accelerate.Array.Sugar.DIM1
                            Data.Array.Accelerate.Prelude.$s$fShape:.
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            to
                            ix)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <GHC.Types.Int>_N))
                        `cast`
                      (Data.Array.Accelerate.Smart.Exp
                         (Trans
                              (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                   <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                              (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                               Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R
                      Data.Array.Accelerate.Prelude.scatterIf2
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.Z
                                                                   Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N))
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp
                       Data.Array.Accelerate.Array.Sugar.DIM1>_R
                    ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.Z
                                                                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int>_N)
                   (Data.Array.Accelerate.Smart.Backpermute
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Data.Array.Accelerate.Array.Sugar.Array
                           Data.Array.Accelerate.Array.Sugar.DIM1 e')
                      @ Data.Array.Accelerate.Array.Sugar.DIM1
                      @ Data.Array.Accelerate.Array.Sugar.DIM1
                      @ e'
                      @~ <Data.Array.Accelerate.Array.Sugar.Array
                            Data.Array.Accelerate.Array.Sugar.DIM1 e'>_N
                      Data.Array.Accelerate.Prelude.$s$fShape:.
                      Data.Array.Accelerate.Prelude.$s$fShape:.
                      $dElt1
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ Data.Array.Accelerate.Array.Sugar.DIM1
                         Data.Array.Accelerate.Prelude.$s$fShape:.
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ Data.Array.Accelerate.Array.Sugar.DIM1
                            @ GHC.Types.Int
                            Data.Array.Accelerate.Prelude.$s$fShape:.
                            Data.Array.Accelerate.Array.Sugar.$fEltInt
                            to)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.DIM1>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ Data.Array.Accelerate.Array.Sugar.DIM1
                            @ e'
                            Data.Array.Accelerate.Prelude.$s$fShape:.
                            $dElt1
                            input)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.DIM1>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.DIM1>_N)
                      (GHC.Base.id
                         @ (Data.Array.Accelerate.Smart.Exp
                              Data.Array.Accelerate.Array.Sugar.DIM1))
                      input)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                  Data.Array.Accelerate.Array.Sugar.DIM1
                                                                  e'>_N)) -}
b18d20957bde32db18012a6bbc53f45d
  scatterIf2 ::
    Data.Array.Accelerate.Smart.PreExp
      Data.Array.Accelerate.Smart.Acc
      Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Strictness: m2,
     Unfolding: (Data.Array.Accelerate.Smart.Const
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Array.Sugar.Z
                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   Data.Array.Accelerate.Prelude.scatterIf4
                   Data.Array.Accelerate.Prelude.scatterIf3) -}
8fb1b7c97864d8b23485bf7aed12d7d7
  scatterIf3 ::
    Data.Array.Accelerate.Array.Sugar.Z
    Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int
  {- Unfolding: (Data.Array.Accelerate.Array.Sugar.$fShape:._$cignore
                   @ Data.Array.Accelerate.Array.Sugar.Z
                   Data.Array.Accelerate.Array.Sugar.$fShapeZ) -}
05f2739ccaaf4863bb0518ea1941bdef
  scatterIf4 ::
    Data.Array.Accelerate.Array.Sugar.Elt
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
  {- Unfolding: (case Data.Array.Accelerate.Array.Sugar.$w$cp1Shape
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        Data.Array.Accelerate.Array.Sugar.$fShapeZ of ww { (#,,,,,,#) ww2 ww3 ww4 ww8 ww9 ww10 ww11 ->
                 Data.Array.Accelerate.Array.Sugar.C:Elt
                   @ (Data.Array.Accelerate.Array.Sugar.Z
                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   ww2
                   ww3
                   ww4
                   ww8
                   ww9
                   ww10
                   ww11 }) -}
99623bcd1ef13720351e033184f2d81d
  sfoldl ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp a)
    -> Data.Array.Accelerate.Smart.Exp a
    -> Data.Array.Accelerate.Smart.Exp sh
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) b)
    -> Data.Array.Accelerate.Smart.Exp a
  {- Arity: 4,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LSSSL),U(U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U> -}
e7ab832a5ca1a4b642a812e4dc691c65
  slit ::
    (Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 3,
     Strictness: <S(LSSSL),U(U,U,U,U,U)><S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
e55f487c9bc05e08db98a6f877bf39b4
  snd ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.Exp b
  {- Arity: 3,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.snd1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt a>_R
                 ->_R <Data.Array.Accelerate.Array.Sugar.Elt b>_R
                 ->_R <Data.Array.Accelerate.Smart.Exp (a, b)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N) -}
ddf6bf9142109ee54d6aa22bee725566
  snd1 ::
    (Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    Data.Array.Accelerate.Smart.Exp (a, b)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp b
  {- Arity: 3,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   (e :: Data.Array.Accelerate.Smart.Exp (a, b)) ->
                 Data.Array.Accelerate.Smart.Prj
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ b
                   @ (a, b)
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,) @ a @ b $dElt $dElt1)
                   (Data.Array.Accelerate.Product.$fIsProductcst(,)
                      @ Data.Array.Accelerate.Array.Sugar.Elt
                      @ a
                      @ b
                      $dElt
                      $dElt1)
                   $dElt1
                   (Data.Array.Accelerate.Product.$WZeroTupIdx @ b @ ((), a))
                     `cast`
                   (Data.Array.Accelerate.Product.TupleIdx
                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                <b>_N <a>_N))
                      <b>_N)_R
                   e) -}
54a263fb4e974042f37a8014146e3425
  sum ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Classes.Num.Num e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(1*U,1*U)>,
     Unfolding: (\ @ sh
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($d(%,%) :: Data.Array.Accelerate.Classes.Num.Num e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   $dNum :: GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e)
                   = GHC.Classes.$p2(%,%)
                       @ (Data.Array.Accelerate.Array.Sugar.Elt e)
                       @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e))
                       $d(%,%)
                 } in
                 Data.Array.Accelerate.Language.fold
                   @ sh
                   @ e
                   $dShape
                   (GHC.Classes.$p1(%,%)
                      @ (Data.Array.Accelerate.Array.Sugar.Elt e)
                      @ (GHC.Num.Num (Data.Array.Accelerate.Smart.Exp e))
                      $d(%,%))
                   (GHC.Num.+ @ (Data.Array.Accelerate.Smart.Exp e) $dNum)
                   (GHC.Num.fromInteger
                      @ (Data.Array.Accelerate.Smart.Exp e)
                      $dNum
                      Data.Array.Accelerate.Prelude.sum1) } } }) -}
f0888f53bd7ed68df9e7954e074dbc44
  sum1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
1979040797a993dedd1b1b914bd55d83
  tail ::
    (Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 3,
     Strictness: <S(LSSSL),U(U,U,U,U,U)><S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
4e9e2294811c2519c058d97b8febaf83
  take ::
    (Data.Array.Accelerate.Array.Sugar.Slice sh,
     Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Exp GHC.Types.Int
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            (sh Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int) e)
  {- Arity: 3,
     Strictness: <S(LSSSL),U(U,U,U,U,U)><S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(A,A,A,1*U(1*U),1*U(1*U),1*U(1*U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
9719991a1663933c0ed174ae17bbfff5
  the ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Scalar e)
    -> Data.Array.Accelerate.Smart.Exp e
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.the2
                  `cast`
                (forall (e :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt e>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Array
                            Data.Array.Accelerate.Array.Sugar.DIM0 e)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N) -}
308e16747a9a41bf553ce00085ca8cf9
  the2 ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         Data.Array.Accelerate.Array.Sugar.DIM0 e)
    -> Data.Array.Accelerate.Smart.PreExp
         Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp e
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (ds :: Data.Array.Accelerate.Smart.Acc
                            (Data.Array.Accelerate.Array.Sugar.Array
                               Data.Array.Accelerate.Array.Sugar.DIM0 e)) ->
                 Data.Array.Accelerate.Smart.Index
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ e
                   @ Data.Array.Accelerate.Array.Sugar.DIM0
                   Data.Array.Accelerate.Array.Sugar.$fShapeZ
                   $dElt
                   ds
                   (Data.Array.Accelerate.Smart.$WIndexNil
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp)
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <Data.Array.Accelerate.Array.Sugar.Z>_N)) -}
4f8e7bc4adedeab09c287824aefd44fd
  transpose ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         Data.Array.Accelerate.Array.Sugar.DIM2 e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            Data.Array.Accelerate.Array.Sugar.DIM2 e)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Prelude.transpose1
                  `cast`
                (forall (e :: <*>_N).
                 <Data.Array.Accelerate.Array.Sugar.Elt e>_R
                 ->_R <Data.Array.Accelerate.Smart.Acc
                         (Data.Array.Accelerate.Array.Sugar.Array
                            Data.Array.Accelerate.Array.Sugar.DIM2 e)>_R
                 ->_R Sym (Data.Array.Accelerate.Smart.N:Acc[0]) <Data.Array.Accelerate.Array.Sugar.Array
                                                                    ((Data.Array.Accelerate.Array.Sugar.Z
                                                                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                     Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                                    e>_N) -}
797528304dd9d71add84550f1846f165
  transpose1 ::
    Data.Array.Accelerate.Array.Sugar.Elt e =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         Data.Array.Accelerate.Array.Sugar.DIM2 e)
    -> Data.Array.Accelerate.Smart.PreAcc
         Data.Array.Accelerate.Smart.Acc
         Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Array.Sugar.Array
            ((Data.Array.Accelerate.Array.Sugar.Z
              Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
             Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
            e)
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ e
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (mat :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array
                                Data.Array.Accelerate.Array.Sugar.DIM2 e)) ->
                 Data.Array.Accelerate.Smart.Backpermute
                   @ Data.Array.Accelerate.Smart.Acc
                   @ Data.Array.Accelerate.Smart.Exp
                   @ (Data.Array.Accelerate.Array.Sugar.Array
                        ((Data.Array.Accelerate.Array.Sugar.Z
                          Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                         Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                        e)
                   @ ((Data.Array.Accelerate.Array.Sugar.Z
                       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   @ ((Data.Array.Accelerate.Array.Sugar.Z
                       Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                      Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                   @ e
                   @~ <Data.Array.Accelerate.Array.Sugar.Array
                         ((Data.Array.Accelerate.Array.Sugar.Z
                           Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                          Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                         e>_N
                   Data.Array.Accelerate.Prelude.$s$fShape:.1
                   Data.Array.Accelerate.Prelude.$s$fShape:.1
                   $dElt
                   (Data.Array.Accelerate.Prelude.transpose2
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ Data.Array.Accelerate.Array.Sugar.DIM2
                         @ e
                         Data.Array.Accelerate.Prelude.$s$fShape:.1
                         $dElt
                         mat)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                       (Trans
                                                                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])
                                                                             Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                                                                            (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                                                                      <GHC.Types.Int>_N
                                                                                      <Data.Array.Accelerate.Array.Sugar.Z>_N))
                                                                        Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                                                                       (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                                                                 <GHC.Types.Int>_N
                                                                                 <Data.Array.Accelerate.Array.Sugar.Z
                                                                                  Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                                                                         GHC.Types.Int>_N)))))
                     `cast`
                   (Data.Array.Accelerate.Smart.Exp
                      (Trans
                           (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                <GHC.Types.Int>_N
                                <Data.Array.Accelerate.Array.Sugar.Z
                                 Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                        GHC.Types.Int>_N)
                           (Trans
                                (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                     <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                                (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                                 Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                            Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R
                   Data.Array.Accelerate.Prelude.transpose2
                     `cast`
                   ((Data.Array.Accelerate.Smart.Exp
                       (Trans
                            (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                 <GHC.Types.Int>_N
                                 <Data.Array.Accelerate.Array.Sugar.Z
                                  Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                         GHC.Types.Int>_N)
                            (Trans
                                 (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                      <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N)
                                 (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                                  Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                             Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R
                    ->_R (Data.Array.Accelerate.Smart.Exp
                            (Trans
                                 (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                      <GHC.Types.Int>_N
                                      <Data.Array.Accelerate.Array.Sugar.Z
                                       Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                              GHC.Types.Int>_N)
                                 (Trans
                                      (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                           <GHC.Types.Int>_N
                                           <Data.Array.Accelerate.Array.Sugar.Z>_N)
                                      (Data.Array.Accelerate.Lift.D:R:PlainZ[0]
                                       Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                                  Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N))_R)
                   mat) -}
0699ffd0a7053870a9143f854dc93884
  transpose2 ::
    Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Lift.Plain
         ((Data.Array.Accelerate.Array.Sugar.Z
           Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                  GHC.Types.Int)
          Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                 GHC.Types.Int))
    -> Data.Array.Accelerate.Smart.Exp
         (Data.Array.Accelerate.Lift.Plain
            ((Data.Array.Accelerate.Array.Sugar.Z
              Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                     GHC.Types.Int)
             Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                    GHC.Types.Int))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (eta :: Data.Array.Accelerate.Smart.Exp
                             (Data.Array.Accelerate.Lift.Plain
                                ((Data.Array.Accelerate.Array.Sugar.Z
                                  Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                         GHC.Types.Int)
                                 Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                        GHC.Types.Int))) ->
                 case Data.Array.Accelerate.Lift.$w$cunlift1
                        @ GHC.Types.Int
                        @ (Data.Array.Accelerate.Array.Sugar.Z
                           Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                  GHC.Types.Int)
                        Data.Array.Accelerate.Array.Sugar.$fEltInt
                        Data.Array.Accelerate.Prelude.$s$fSlice:.
                          `cast`
                        (Data.Array.Accelerate.Array.Sugar.Slice
                           (Trans
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])
                                 Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                                (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                          <GHC.Types.Int>_N
                                          <Data.Array.Accelerate.Array.Sugar.Z>_N))))_R
                        Data.Array.Accelerate.Prelude.$s$fUnliftExp:.0
                        eta of ww { (#,#) ww2 ww3 ->
                 case ww2 of wild { Data.Array.Accelerate.Array.Sugar.:. ds x ->
                 case ds of wild1 { Data.Array.Accelerate.Array.Sugar.Z ->
                 Data.Array.Accelerate.Lift.$w$clift
                   @ GHC.Types.Int
                   @ (Data.Array.Accelerate.Array.Sugar.Z
                      Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                             GHC.Types.Int)
                   Data.Array.Accelerate.Array.Sugar.$fEltInt
                   Data.Array.Accelerate.Prelude.$s$fSlice:.
                     `cast`
                   (Data.Array.Accelerate.Array.Sugar.Slice
                      (Trans
                           (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])
                            Data.Array.Accelerate.Array.Sugar.:. <GHC.Types.Int>_N)_N
                           (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                     <GHC.Types.Int>_N <Data.Array.Accelerate.Array.Sugar.Z>_N))))_R
                   Data.Array.Accelerate.Prelude.$slift1
                     `cast`
                   (Sym (Data.Array.Accelerate.Lift.N:Lift[0]
                             <Data.Array.Accelerate.Smart.Exp>_N
                             <Data.Array.Accelerate.Array.Sugar.Z
                              Data.Array.Accelerate.Array.Sugar.:. Data.Array.Accelerate.Smart.Exp
                                                                     GHC.Types.Int>_N))
                   (Data.Array.Accelerate.Array.Sugar.:.
                      @ Data.Array.Accelerate.Array.Sugar.Z
                      @ (Data.Array.Accelerate.Smart.Exp GHC.Types.Int)
                      Data.Array.Accelerate.Array.Sugar.Z
                      ww3)
                   x } } }) -}
20545ca7c391c8bead0c847e86b5c2c9
  uncurry ::
    Data.Array.Accelerate.Lift.Unlift f (f a, f b) =>
    (f a -> f b -> f c)
    -> f (Data.Array.Accelerate.Lift.Plain (f a),
          Data.Array.Accelerate.Lift.Plain (f b))
    -> f c
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(U(U,U)))><C(C(S)),1*C1(C1(U))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ (f :: * -> *)
                   @ a
                   @ b
                   @ c
                   ($dUnlift :: Data.Array.Accelerate.Lift.Unlift f (f a, f b))
                   (f1 :: f a -> f b -> f c)
                   (t :: f (Data.Array.Accelerate.Lift.Plain (f a),
                            Data.Array.Accelerate.Lift.Plain (f b))) ->
                 let {
                   ds :: (f a, f b)
                   = Data.Array.Accelerate.Lift.unlift
                       @ f
                       @ (f a, f b)
                       $dUnlift
                       t `cast`
                       (<f>_R (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                        <f b>_N <f a>_N)))
                 } in
                 f1
                   (case ds of wild { (,) x y -> x })
                   (case ds of wild { (,) x y -> y })) -}
f0891dc898c07c8a2eebbb376e4807e8
  unindex1 ::
    Data.Array.Accelerate.Array.Sugar.Elt i =>
    Data.Array.Accelerate.Smart.Exp
      (Data.Array.Accelerate.Array.Sugar.Z
       Data.Array.Accelerate.Array.Sugar.:. i)
    -> Data.Array.Accelerate.Smart.Exp i
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ i
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt i)
                   (ix :: Data.Array.Accelerate.Smart.Exp
                            (Data.Array.Accelerate.Array.Sugar.Z
                             Data.Array.Accelerate.Array.Sugar.:. i)) ->
                 case Data.Array.Accelerate.Lift.$w$cunlift1
                        @ i
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        $dElt
                        Data.Array.Accelerate.Array.Sugar.$fSliceZ
                          `cast`
                        (Data.Array.Accelerate.Array.Sugar.Slice
                           (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])))_R
                        Data.Array.Accelerate.Lift.$fUnliftExpZ
                        ix
                          `cast`
                        (Data.Array.Accelerate.Smart.Exp
                           (Trans
                                (Sym (Data.Array.Accelerate.Lift.D:R:PlainZ[0])
                                 Data.Array.Accelerate.Array.Sugar.:. <i>_N)_N
                                (Sym (Data.Array.Accelerate.Lift.D:R:Plain:.[0]
                                          <i>_N
                                          <Data.Array.Accelerate.Array.Sugar.Z>_N))))_R of ww { (#,#) ww2 ww3 ->
                 case ww2 of wild { Data.Array.Accelerate.Array.Sugar.Z ->
                 ww3 } }) -}
811194228ca3b8594111f9c46f4f90ce
  unindex2 ::
    (Data.Array.Accelerate.Array.Sugar.Elt i,
     Data.Array.Accelerate.Array.Sugar.Slice
       (Data.Array.Accelerate.Array.Sugar.Z
        Data.Array.Accelerate.Array.Sugar.:. i)) =>
    Data.Array.Accelerate.Smart.Exp
      ((Data.Array.Accelerate.Array.Sugar.Z
        Data.Array.Accelerate.Array.Sugar.:. i)
       Data.Array.Accelerate.Array.Sugar.:. i)
    -> Data.Array.Accelerate.Smart.Exp (i, i)
  {- Arity: 2,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><S(LSSSL),U(U,U,U,U,U)> -}
64868fec336db34aaaa251dc789793ac
  unindex3 ::
    (Data.Array.Accelerate.Array.Sugar.Elt i,
     Data.Array.Accelerate.Array.Sugar.Slice
       (Data.Array.Accelerate.Array.Sugar.Z
        Data.Array.Accelerate.Array.Sugar.:. i),
     Data.Array.Accelerate.Array.Sugar.Slice
       ((Data.Array.Accelerate.Array.Sugar.Z
         Data.Array.Accelerate.Array.Sugar.:. i)
        Data.Array.Accelerate.Array.Sugar.:. i)) =>
    Data.Array.Accelerate.Smart.Exp
      (((Data.Array.Accelerate.Array.Sugar.Z
         Data.Array.Accelerate.Array.Sugar.:. i)
        Data.Array.Accelerate.Array.Sugar.:. i)
       Data.Array.Accelerate.Array.Sugar.:. i)
    -> Data.Array.Accelerate.Smart.Exp (i, i, i)
  {- Arity: 3,
     Strictness: <L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><S(LSSSL),U(U,U,U,U,U)><S(LSSSL),U(U,U,U,U,U)> -}
16bcb4d311663d9331bfc70e08468f98
  unzip ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh (a, b))
    -> (Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh a),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh b))
  {- Arity: 3,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: Data.Array.Accelerate.Smart.Exp (a, b)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp a
                     {- Arity: 1 -}
                   = Data.Array.Accelerate.Prelude.fst1 @ a @ b $dElt $dElt1
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Smart.Exp (a, b)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp b
                     {- Arity: 1 -}
                   = Data.Array.Accelerate.Prelude.snd1 @ a @ b $dElt $dElt1
                 } in
                 let {
                   $dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b)
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,) @ a @ b $dElt $dElt1
                 } in
                 \ (arr :: Data.Array.Accelerate.Smart.Acc
                             (Data.Array.Accelerate.Array.Sugar.Array sh (a, b))) ->
                 (Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b)
                    @ a
                    $dShape
                    $dElt2
                    $dElt
                    lvl91
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                    arr,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b)
                    @ b
                    $dShape
                    $dElt2
                    $dElt1
                    lvl92
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                    arr) } } }) -}
047591097d1761ad1f40197d6949d4bf
  unzip3 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c))
    -> (Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh a),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh b),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh c))
  {- Arity: 4,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c) ->
                 let {
                   lvl91 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c)
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                       @ a
                       @ b
                       @ c
                       $dElt
                       $dElt1
                       $dElt2
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (a, b, c)
                   = Data.Array.Accelerate.Product.$fIsProductcst(,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ a
                       @ b
                       @ c
                       $dElt
                       $dElt1
                       $dElt2
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl93 :: Data.Array.Accelerate.Smart.Exp (a, b, c)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp a
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ a
                       @ (a, b, c)
                       lvl91
                       lvl92
                       $dElt
                       (Data.Array.Accelerate.Smart.tix2 @ () @ a @ b @ c)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                            <b>_N <a>_N))
                                  <c>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                         <c>_N <b>_N <a>_N)))
                          <a>_N)_R
                       x
                 } in
                 let {
                   lvl94 :: Data.Array.Accelerate.Smart.Exp (a, b, c)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp b
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ b
                       @ (a, b, c)
                       lvl91
                       lvl92
                       $dElt1
                       (Data.Array.Accelerate.Smart.tix1 @ ((), a) @ b @ c)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                            <b>_N <a>_N))
                                  <c>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                         <c>_N <b>_N <a>_N)))
                          <b>_N)_R
                       x
                 } in
                 let {
                   lvl95 :: Data.Array.Accelerate.Smart.Exp (a, b, c)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp c
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ c
                       @ (a, b, c)
                       lvl91
                       lvl92
                       $dElt2
                       (Data.Array.Accelerate.Product.$WZeroTupIdx @ c @ (((), a), b))
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                            <b>_N <a>_N))
                                  <c>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                         <c>_N <b>_N <a>_N)))
                          <c>_N)_R
                       x
                 } in
                 \ (xs :: Data.Array.Accelerate.Smart.Acc
                            (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c))) ->
                 (Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c)
                    @ a
                    $dShape
                    lvl91
                    $dElt
                    lvl93
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c)
                    @ b
                    $dShape
                    lvl91
                    $dElt1
                    lvl94
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c)
                    @ c
                    $dShape
                    lvl91
                    $dElt2
                    lvl95
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                    xs) } } }) -}
30cea635ebda986eac912223f768d089
  unzip4 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d))
    -> (Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh a),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh b),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh c),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh d))
  {- Arity: 5,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d) ->
                 let {
                   lvl91 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d)
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,,,)
                       @ a
                       @ b
                       @ c
                       @ d
                       $dElt
                       $dElt1
                       $dElt2
                       $dElt3
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d)
                   = Data.Array.Accelerate.Product.$fIsProductcst(,,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ a
                       @ b
                       @ c
                       @ d
                       $dElt
                       $dElt1
                       $dElt2
                       $dElt3
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl93 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp a
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ a
                       @ (a, b, c, d)
                       lvl91
                       lvl92
                       $dElt
                       (Data.Array.Accelerate.Smart.tix3 @ () @ a @ b @ c @ d)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                    <b>_N <a>_N))
                                          <c>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                 <c>_N <b>_N <a>_N)))
                                  <d>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                         <d>_N <c>_N <b>_N <a>_N)))
                          <a>_N)_R
                       x
                 } in
                 let {
                   lvl94 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp b
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ b
                       @ (a, b, c, d)
                       lvl91
                       lvl92
                       $dElt1
                       (Data.Array.Accelerate.Smart.tix2 @ ((), a) @ b @ c @ d)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                    <b>_N <a>_N))
                                          <c>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                 <c>_N <b>_N <a>_N)))
                                  <d>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                         <d>_N <c>_N <b>_N <a>_N)))
                          <b>_N)_R
                       x
                 } in
                 let {
                   lvl95 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp c
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ c
                       @ (a, b, c, d)
                       lvl91
                       lvl92
                       $dElt2
                       (Data.Array.Accelerate.Smart.tix1 @ (((), a), b) @ c @ d)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                    <b>_N <a>_N))
                                          <c>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                 <c>_N <b>_N <a>_N)))
                                  <d>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                         <d>_N <c>_N <b>_N <a>_N)))
                          <c>_N)_R
                       x
                 } in
                 let {
                   lvl96 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp d
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ d
                       @ (a, b, c, d)
                       lvl91
                       lvl92
                       $dElt3
                       (Data.Array.Accelerate.Product.$WZeroTupIdx
                          @ d
                          @ ((((), a), b), c))
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                    <b>_N <a>_N))
                                          <c>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                 <c>_N <b>_N <a>_N)))
                                  <d>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                         <d>_N <c>_N <b>_N <a>_N)))
                          <d>_N)_R
                       x
                 } in
                 \ (xs :: Data.Array.Accelerate.Smart.Acc
                            (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d))) ->
                 (Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d)
                    @ a
                    $dShape
                    lvl91
                    $dElt
                    lvl93
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d)
                    @ b
                    $dShape
                    lvl91
                    $dElt1
                    lvl94
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d)
                    @ c
                    $dShape
                    lvl91
                    $dElt2
                    lvl95
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d)
                    @ d
                    $dShape
                    lvl91
                    $dElt3
                    lvl96
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)
                    xs) } } }) -}
a4364229fb8440f736024e007bed4bda
  unzip5 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d, e))
    -> (Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh a),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh b),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh c),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh d),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh e))
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 let {
                   lvl91 :: Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e)
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,,,,)
                       @ a
                       @ b
                       @ c
                       @ d
                       @ e
                       $dElt
                       $dElt1
                       $dElt2
                       $dElt3
                       $dElt4
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt (a, b, c, d, e)
                   = Data.Array.Accelerate.Product.$fIsProductcst(,,,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ a
                       @ b
                       @ c
                       @ d
                       @ e
                       $dElt
                       $dElt1
                       $dElt2
                       $dElt3
                       $dElt4
                 } in
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl93 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp a
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ a
                       @ (a, b, c, d, e)
                       lvl91
                       lvl92
                       $dElt
                       (Data.Array.Accelerate.Smart.tix4 @ () @ a @ b @ c @ d @ e)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Trans
                                               ((,)
                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                            <b>_N <a>_N))
                                                  <c>_N)_N
                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                         <c>_N <b>_N <a>_N)))
                                          <d>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                 <d>_N <c>_N <b>_N <a>_N)))
                                  <e>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                         <e>_N <d>_N <c>_N <b>_N <a>_N)))
                          <a>_N)_R
                       x
                 } in
                 let {
                   lvl94 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp b
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ b
                       @ (a, b, c, d, e)
                       lvl91
                       lvl92
                       $dElt1
                       (Data.Array.Accelerate.Smart.tix3 @ ((), a) @ b @ c @ d @ e)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Trans
                                               ((,)
                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                            <b>_N <a>_N))
                                                  <c>_N)_N
                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                         <c>_N <b>_N <a>_N)))
                                          <d>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                 <d>_N <c>_N <b>_N <a>_N)))
                                  <e>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                         <e>_N <d>_N <c>_N <b>_N <a>_N)))
                          <b>_N)_R
                       x
                 } in
                 let {
                   lvl95 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp c
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ c
                       @ (a, b, c, d, e)
                       lvl91
                       lvl92
                       $dElt2
                       (Data.Array.Accelerate.Smart.tix2 @ (((), a), b) @ c @ d @ e)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Trans
                                               ((,)
                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                            <b>_N <a>_N))
                                                  <c>_N)_N
                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                         <c>_N <b>_N <a>_N)))
                                          <d>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                 <d>_N <c>_N <b>_N <a>_N)))
                                  <e>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                         <e>_N <d>_N <c>_N <b>_N <a>_N)))
                          <c>_N)_R
                       x
                 } in
                 let {
                   lvl96 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp d
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ d
                       @ (a, b, c, d, e)
                       lvl91
                       lvl92
                       $dElt3
                       (Data.Array.Accelerate.Smart.tix1 @ ((((), a), b), c) @ d @ e)
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Trans
                                               ((,)
                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                            <b>_N <a>_N))
                                                  <c>_N)_N
                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                         <c>_N <b>_N <a>_N)))
                                          <d>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                 <d>_N <c>_N <b>_N <a>_N)))
                                  <e>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                         <e>_N <d>_N <c>_N <b>_N <a>_N)))
                          <d>_N)_R
                       x
                 } in
                 let {
                   lvl97 :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)
                            -> Data.Array.Accelerate.Smart.PreExp
                                 Data.Array.Accelerate.Smart.Acc Data.Array.Accelerate.Smart.Exp e
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)) ->
                     Data.Array.Accelerate.Smart.Prj
                       @ Data.Array.Accelerate.Smart.Acc
                       @ Data.Array.Accelerate.Smart.Exp
                       @ e
                       @ (a, b, c, d, e)
                       lvl91
                       lvl92
                       $dElt4
                       (Data.Array.Accelerate.Product.$WZeroTupIdx
                          @ e
                          @ (((((), a), b), c), d))
                         `cast`
                       (Data.Array.Accelerate.Product.TupleIdx
                          (Trans
                               ((,)
                                  (Trans
                                       ((,)
                                          (Trans
                                               ((,)
                                                  (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                            <b>_N <a>_N))
                                                  <c>_N)_N
                                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                         <c>_N <b>_N <a>_N)))
                                          <d>_N)_N
                                       (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                                 <d>_N <c>_N <b>_N <a>_N)))
                                  <e>_N)_N
                               (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,,)[0]
                                         <e>_N <d>_N <c>_N <b>_N <a>_N)))
                          <e>_N)_R
                       x
                 } in
                 \ (xs :: Data.Array.Accelerate.Smart.Acc
                            (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d, e))) ->
                 (Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d, e)
                    @ a
                    $dShape
                    lvl91
                    $dElt
                    lvl93
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <a>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d, e)
                    @ b
                    $dShape
                    lvl91
                    $dElt1
                    lvl94
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <b>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d, e)
                    @ c
                    $dShape
                    lvl91
                    $dElt2
                    lvl95
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <c>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d, e)
                    @ d
                    $dShape
                    lvl91
                    $dElt3
                    lvl96
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <d>_N)
                    xs,
                  Data.Array.Accelerate.Language.map
                    @ sh
                    @ (a, b, c, d, e)
                    @ e
                    $dShape
                    lvl91
                    $dElt4
                    lvl97
                      `cast`
                    (<Data.Array.Accelerate.Smart.Exp (a, b, c, d, e)>_R
                     ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <e>_N)
                    xs) } } }) -}
24543415dde4d3c3380526628c7eead9
  unzip6 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d, e, f))
    -> (Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh a),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh b),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh c),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh d),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh e),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh f))
  {- Arity: 7,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)> -}
67d588e6cb9c02b042863aba63d88541
  unzip7 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d, e, f, g))
    -> (Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh a),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh b),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh c),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh d),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh e),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh f),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh g))
  {- Arity: 8,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)> -}
a37a863edb54df5224071e111b644053
  unzip8 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         sh (a, b, c, d, e, f, g, h))
    -> (Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh a),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh b),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh c),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh d),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh e),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh f),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh g),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh h))
  {- Arity: 9,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)> -}
76f9bbbab847d6c9c6e928d7d797e160
  unzip9 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h,
     Data.Array.Accelerate.Array.Sugar.Elt i) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array
         sh (a, b, c, d, e, f, g, h, i))
    -> (Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh a),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh b),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh c),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh d),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh e),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh f),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh g),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh h),
        Data.Array.Accelerate.Smart.Acc
          (Data.Array.Accelerate.Array.Sugar.Array sh i))
  {- Arity: 10,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)> -}
502321ab1c85be5419fac3132419ccdb
  zip ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh (a, b))
  {- Arity: 3,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b))
                   = Data.Array.Accelerate.Product.$fIsProductcst(,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b))
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                 } in
                 Data.Array.Accelerate.Language.zipWith
                   @ sh
                   @ a
                   @ b
                   @ (a, b)
                   $dShape
                   $dElt
                   $dElt1
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,) @ a @ b $dElt $dElt1)
                   (\ (x :: Data.Array.Accelerate.Smart.Exp a)
                      (y :: Data.Array.Accelerate.Smart.Exp b) ->
                    Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp a,
                            Data.Array.Accelerate.Smart.Exp b))
                      lvl92
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                   <Data.Array.Accelerate.Smart.Exp b>_N
                                   <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                      lvl91
                        `cast`
                      (Data.Array.Accelerate.Product.IsProduct
                         <Data.Array.Accelerate.Array.Sugar.Elt>_N
                         (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                   <Data.Array.Accelerate.Smart.Exp b>_N
                                   <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))
                         @ (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))
                         @ ((),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp a))
                         @~ <(((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp b))>_N
                         $dElt1
                           `cast`
                         (Data.Array.Accelerate.Array.Sugar.Elt
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a))
                            @ (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a))
                            @ ()
                            @~ <((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp a))>_N
                            $dElt
                              `cast`
                            (Data.Array.Accelerate.Array.Sugar.Elt
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                            (Data.Array.Accelerate.Array.Sugar.$WNilTup
                               @ Data.Array.Accelerate.Smart.Exp)
                            x `cast`
                            (Data.Array.Accelerate.Smart.Exp
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                         y `cast`
                         (Data.Array.Accelerate.Smart.Exp
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Trans
                              (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                        <Data.Array.Accelerate.Lift.Plain
                                           (Data.Array.Accelerate.Smart.Exp b)>_N
                                        <Data.Array.Accelerate.Lift.Plain
                                           (Data.Array.Accelerate.Smart.Exp a)>_N))
                              (Data.Array.Accelerate.Product.ProdRepr
                                 (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,)0[0]
                                           <Data.Array.Accelerate.Smart.Exp b>_N
                                           <Data.Array.Accelerate.Smart.Exp a>_N)))_N))_R)
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp a>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                    ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                         (Data.Array.Accelerate.Lift.D:R:Plain(,)[0]
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 b>_N
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 a>_N)
                                                                         ((,)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <a>_N)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <b>_N))_N)) } } }) -}
2d8ed65bf7172b73b72683f83f26783c
  zip3 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c))
  {- Arity: 4,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c))
                   = Data.Array.Accelerate.Product.$fIsProductcst(,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c))
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                 } in
                 Data.Array.Accelerate.Prelude.zipWith3
                   @ sh
                   @ a
                   @ b
                   @ c
                   @ (a, b, c)
                   $dShape
                   $dElt
                   $dElt1
                   $dElt2
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,,)
                      @ a
                      @ b
                      @ c
                      $dElt
                      $dElt1
                      $dElt2)
                   (\ (a1 :: Data.Array.Accelerate.Smart.Exp a)
                      (b1 :: Data.Array.Accelerate.Smart.Exp b)[OneShot]
                      (c1 :: Data.Array.Accelerate.Smart.Exp c)[OneShot] ->
                    Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp a,
                            Data.Array.Accelerate.Smart.Exp b,
                            Data.Array.Accelerate.Smart.Exp c))
                      lvl92
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                   <Data.Array.Accelerate.Smart.Exp c>_N
                                   <Data.Array.Accelerate.Smart.Exp b>_N
                                   <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                      lvl91
                        `cast`
                      (Data.Array.Accelerate.Product.IsProduct
                         <Data.Array.Accelerate.Array.Sugar.Elt>_N
                         (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                   <Data.Array.Accelerate.Smart.Exp c>_N
                                   <Data.Array.Accelerate.Smart.Exp b>_N
                                   <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ ((((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp c))
                         @ (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp c))
                         @ (((),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp a)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp b))
                         @~ <((((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp c))>_N
                         $dElt2
                           `cast`
                         (Data.Array.Accelerate.Array.Sugar.Elt
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ (((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b))
                            @ (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b))
                            @ ((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a))
                            @~ <(((),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a)),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp b))>_N
                            $dElt1
                              `cast`
                            (Data.Array.Accelerate.Array.Sugar.Elt
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                            (Data.Array.Accelerate.Array.Sugar.SnocTup
                               @ Data.Array.Accelerate.Smart.Exp
                               @ ((),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a))
                               @ (Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a))
                               @ ()
                               @~ <((),
                                    Data.Array.Accelerate.Lift.Plain
                                      (Data.Array.Accelerate.Smart.Exp a))>_N
                               $dElt
                                 `cast`
                               (Data.Array.Accelerate.Array.Sugar.Elt
                                  (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                               (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                  @ Data.Array.Accelerate.Smart.Exp)
                               a1
                                 `cast`
                               (Data.Array.Accelerate.Smart.Exp
                                  (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                            b1
                              `cast`
                            (Data.Array.Accelerate.Smart.Exp
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                         c1
                           `cast`
                         (Data.Array.Accelerate.Smart.Exp
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Trans
                              ((,)
                                 (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp b)>_N
                                           <Data.Array.Accelerate.Lift.Plain
                                              (Data.Array.Accelerate.Smart.Exp a)>_N))
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp c)>_N)_N
                              (Trans
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                             <Data.Array.Accelerate.Lift.Plain
                                                (Data.Array.Accelerate.Smart.Exp c)>_N
                                             <Data.Array.Accelerate.Lift.Plain
                                                (Data.Array.Accelerate.Smart.Exp b)>_N
                                             <Data.Array.Accelerate.Lift.Plain
                                                (Data.Array.Accelerate.Smart.Exp a)>_N))
                                   (Data.Array.Accelerate.Product.ProdRepr
                                      (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,)0[0]
                                                <Data.Array.Accelerate.Smart.Exp c>_N
                                                <Data.Array.Accelerate.Smart.Exp b>_N
                                                <Data.Array.Accelerate.Smart.Exp a>_N)))_N)))_R)
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp a>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp c>_R
                    ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                         (Data.Array.Accelerate.Lift.D:R:Plain(,,)[0]
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 c>_N
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 b>_N
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 a>_N)
                                                                         ((,,)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <a>_N)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <b>_N)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <c>_N))_N)) } } }) -}
dbfd5603430323779956e1f3fb8d9bf4
  zip4 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d))
  {- Arity: 5,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: Data.Array.Accelerate.Product.IsProduct
                              Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp d))
                   = Data.Array.Accelerate.Product.$fIsProductcst(,,,)
                       @ Data.Array.Accelerate.Array.Sugar.Elt
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       $dElt3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                 } in
                 let {
                   lvl92 :: Data.Array.Accelerate.Array.Sugar.Elt
                              (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp d))
                   = Data.Array.Accelerate.Array.Sugar.$fElt(,,,)
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       $dElt3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                 } in
                 Data.Array.Accelerate.Prelude.zipWith4
                   @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ (a, b, c, d)
                   $dShape
                   $dElt
                   $dElt1
                   $dElt2
                   $dElt3
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,,,)
                      @ a
                      @ b
                      @ c
                      @ d
                      $dElt
                      $dElt1
                      $dElt2
                      $dElt3)
                   (\ (a1 :: Data.Array.Accelerate.Smart.Exp a)
                      (b1 :: Data.Array.Accelerate.Smart.Exp b)[OneShot]
                      (c1 :: Data.Array.Accelerate.Smart.Exp c)[OneShot]
                      (d1 :: Data.Array.Accelerate.Smart.Exp d)[OneShot] ->
                    Data.Array.Accelerate.Smart.Tuple
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ (Data.Array.Accelerate.Lift.Plain
                           (Data.Array.Accelerate.Smart.Exp a,
                            Data.Array.Accelerate.Smart.Exp b,
                            Data.Array.Accelerate.Smart.Exp c,
                            Data.Array.Accelerate.Smart.Exp d))
                      lvl92
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Elt
                         (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                   <Data.Array.Accelerate.Smart.Exp d>_N
                                   <Data.Array.Accelerate.Smart.Exp c>_N
                                   <Data.Array.Accelerate.Smart.Exp b>_N
                                   <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                      lvl91
                        `cast`
                      (Data.Array.Accelerate.Product.IsProduct
                         <Data.Array.Accelerate.Array.Sugar.Elt>_N
                         (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                   <Data.Array.Accelerate.Smart.Exp d>_N
                                   <Data.Array.Accelerate.Smart.Exp c>_N
                                   <Data.Array.Accelerate.Smart.Exp b>_N
                                   <Data.Array.Accelerate.Smart.Exp a>_N)))_R
                      (Data.Array.Accelerate.Array.Sugar.SnocTup
                         @ Data.Array.Accelerate.Smart.Exp
                         @ (((((),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp a)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp c)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp d))
                         @ (Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp d))
                         @ ((((),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Lift.Plain
                               (Data.Array.Accelerate.Smart.Exp b)),
                            Data.Array.Accelerate.Lift.Plain
                              (Data.Array.Accelerate.Smart.Exp c))
                         @~ <(((((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp a)),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c)),
                              Data.Array.Accelerate.Lift.Plain
                                (Data.Array.Accelerate.Smart.Exp d))>_N
                         $dElt3
                           `cast`
                         (Data.Array.Accelerate.Array.Sugar.Elt
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                         (Data.Array.Accelerate.Array.Sugar.SnocTup
                            @ Data.Array.Accelerate.Smart.Exp
                            @ ((((),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp a)),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c))
                            @ (Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp c))
                            @ (((),
                                Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                               Data.Array.Accelerate.Lift.Plain
                                 (Data.Array.Accelerate.Smart.Exp b))
                            @~ <((((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b)),
                                 Data.Array.Accelerate.Lift.Plain
                                   (Data.Array.Accelerate.Smart.Exp c))>_N
                            $dElt2
                              `cast`
                            (Data.Array.Accelerate.Array.Sugar.Elt
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                            (Data.Array.Accelerate.Array.Sugar.SnocTup
                               @ Data.Array.Accelerate.Smart.Exp
                               @ (((),
                                   Data.Array.Accelerate.Lift.Plain
                                     (Data.Array.Accelerate.Smart.Exp a)),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b))
                               @ (Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b))
                               @ ((),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a))
                               @~ <(((),
                                     Data.Array.Accelerate.Lift.Plain
                                       (Data.Array.Accelerate.Smart.Exp a)),
                                    Data.Array.Accelerate.Lift.Plain
                                      (Data.Array.Accelerate.Smart.Exp b))>_N
                               $dElt1
                                 `cast`
                               (Data.Array.Accelerate.Array.Sugar.Elt
                                  (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                               (Data.Array.Accelerate.Array.Sugar.SnocTup
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ ((),
                                     Data.Array.Accelerate.Lift.Plain
                                       (Data.Array.Accelerate.Smart.Exp a))
                                  @ (Data.Array.Accelerate.Lift.Plain
                                       (Data.Array.Accelerate.Smart.Exp a))
                                  @ ()
                                  @~ <((),
                                       Data.Array.Accelerate.Lift.Plain
                                         (Data.Array.Accelerate.Smart.Exp a))>_N
                                  $dElt
                                    `cast`
                                  (Data.Array.Accelerate.Array.Sugar.Elt
                                     (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                                  (Data.Array.Accelerate.Array.Sugar.$WNilTup
                                     @ Data.Array.Accelerate.Smart.Exp)
                                  a1
                                    `cast`
                                  (Data.Array.Accelerate.Smart.Exp
                                     (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R)
                               b1
                                 `cast`
                               (Data.Array.Accelerate.Smart.Exp
                                  (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R)
                            c1
                              `cast`
                            (Data.Array.Accelerate.Smart.Exp
                               (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R)
                         d1
                           `cast`
                         (Data.Array.Accelerate.Smart.Exp
                            (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R)
                        `cast`
                      (Data.Array.Accelerate.Array.Sugar.Tuple
                         <Data.Array.Accelerate.Smart.Exp>_R
                         (Trans
                              ((,)
                                 (Trans
                                      ((,)
                                         (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,)[0]
                                                   <Data.Array.Accelerate.Lift.Plain
                                                      (Data.Array.Accelerate.Smart.Exp b)>_N
                                                   <Data.Array.Accelerate.Lift.Plain
                                                      (Data.Array.Accelerate.Smart.Exp a)>_N))
                                         <Data.Array.Accelerate.Lift.Plain
                                            (Data.Array.Accelerate.Smart.Exp c)>_N)_N
                                      (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,)[0]
                                                <Data.Array.Accelerate.Lift.Plain
                                                   (Data.Array.Accelerate.Smart.Exp c)>_N
                                                <Data.Array.Accelerate.Lift.Plain
                                                   (Data.Array.Accelerate.Smart.Exp b)>_N
                                                <Data.Array.Accelerate.Lift.Plain
                                                   (Data.Array.Accelerate.Smart.Exp a)>_N)))
                                 <Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp d)>_N)_N
                              (Trans
                                   (Sym (Data.Array.Accelerate.Product.D:R:ProdRepr(,,,)[0]
                                             <Data.Array.Accelerate.Lift.Plain
                                                (Data.Array.Accelerate.Smart.Exp d)>_N
                                             <Data.Array.Accelerate.Lift.Plain
                                                (Data.Array.Accelerate.Smart.Exp c)>_N
                                             <Data.Array.Accelerate.Lift.Plain
                                                (Data.Array.Accelerate.Smart.Exp b)>_N
                                             <Data.Array.Accelerate.Lift.Plain
                                                (Data.Array.Accelerate.Smart.Exp a)>_N))
                                   (Data.Array.Accelerate.Product.ProdRepr
                                      (Sym (Data.Array.Accelerate.Lift.D:R:Plain(,,,)0[0]
                                                <Data.Array.Accelerate.Smart.Exp d>_N
                                                <Data.Array.Accelerate.Smart.Exp c>_N
                                                <Data.Array.Accelerate.Smart.Exp b>_N
                                                <Data.Array.Accelerate.Smart.Exp a>_N)))_N)))_R)
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp a>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp c>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp d>_R
                    ->_R Sym (Data.Array.Accelerate.Smart.N:Exp[0]) (Trans
                                                                         (Data.Array.Accelerate.Lift.D:R:Plain(,,,)[0]
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 d>_N
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 c>_N
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 b>_N
                                                                              <Data.Array.Accelerate.Smart.Exp
                                                                                 a>_N)
                                                                         ((,,,)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <a>_N)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <b>_N)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <c>_N)
                                                                            (Data.Array.Accelerate.Lift.D:R:PlainExp[0]
                                                                                 <d>_N))_N)) } } }) -}
4ad19475a3957d0c06d4b4e1b7af5c77
  zip5 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d, e))
  {- Arity: 6,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: (Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp c)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp d)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp e)))
                            -> Data.Array.Accelerate.Smart.Exp
                                 (Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp c),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp d),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp e))
                   = Data.Array.Accelerate.Smart.tup5
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp e))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       $dElt3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                       $dElt4
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R
                 } in
                 Data.Array.Accelerate.Prelude.zipWith5
                   @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ (a, b, c, d, e)
                   $dShape
                   $dElt
                   $dElt1
                   $dElt2
                   $dElt3
                   $dElt4
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,,,,)
                      @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      $dElt
                      $dElt1
                      $dElt2
                      $dElt3
                      $dElt4)
                   (\ (a1 :: Data.Array.Accelerate.Smart.Exp a)
                      (b1 :: Data.Array.Accelerate.Smart.Exp b)[OneShot]
                      (c1 :: Data.Array.Accelerate.Smart.Exp c)[OneShot]
                      (d1 :: Data.Array.Accelerate.Smart.Exp d)[OneShot]
                      (e1 :: Data.Array.Accelerate.Smart.Exp e)[OneShot] ->
                    lvl91
                      (a1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R,
                       b1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R,
                       c1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R,
                       d1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R,
                       e1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R))
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp a>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp c>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp d>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp e>_R
                    ->_R (Data.Array.Accelerate.Smart.Exp
                            ((,,,,)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N))_N)_R) } } }) -}
10b5289893d69ee62fcbb46ebc211e99
  zip6 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d, e, f))
  {- Arity: 7,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt f) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: (Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp c)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp d)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp e)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp f)))
                            -> Data.Array.Accelerate.Smart.Exp
                                 (Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp c),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp d),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp e),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp f))
                   = Data.Array.Accelerate.Smart.tup6
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp e))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp f))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       $dElt3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                       $dElt4
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R
                       $dElt5
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)))_R
                 } in
                 Data.Array.Accelerate.Prelude.zipWith6
                   @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ (a, b, c, d, e, f)
                   $dShape
                   $dElt
                   $dElt1
                   $dElt2
                   $dElt3
                   $dElt4
                   $dElt5
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,)
                      @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      $dElt
                      $dElt1
                      $dElt2
                      $dElt3
                      $dElt4
                      $dElt5)
                   (\ (a1 :: Data.Array.Accelerate.Smart.Exp a)
                      (b1 :: Data.Array.Accelerate.Smart.Exp b)[OneShot]
                      (c1 :: Data.Array.Accelerate.Smart.Exp c)[OneShot]
                      (d1 :: Data.Array.Accelerate.Smart.Exp d)[OneShot]
                      (e1 :: Data.Array.Accelerate.Smart.Exp e)[OneShot]
                      (f1 :: Data.Array.Accelerate.Smart.Exp f)[OneShot] ->
                    lvl91
                      (a1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R,
                       b1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R,
                       c1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R,
                       d1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R,
                       e1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R,
                       f1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)))_R))
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp a>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp c>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp d>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp e>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp f>_R
                    ->_R (Data.Array.Accelerate.Smart.Exp
                            ((,,,,,)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N))_N)_R) } } }) -}
05696af1ea2dde86c0dc3fb9e821028d
  zip7 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh (a, b, c, d, e, f, g))
  {- Arity: 8,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt f)
                   ($dElt6 :: Data.Array.Accelerate.Array.Sugar.Elt g) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: (Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp c)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp d)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp e)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp f)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp g)))
                            -> Data.Array.Accelerate.Smart.Exp
                                 (Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp c),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp d),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp e),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp f),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp g))
                   = Data.Array.Accelerate.Smart.tup7
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp e))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp f))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp g))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       $dElt3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                       $dElt4
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R
                       $dElt5
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)))_R
                       $dElt6
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N)))_R
                 } in
                 Data.Array.Accelerate.Prelude.zipWith7
                   @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ (a, b, c, d, e, f, g)
                   $dShape
                   $dElt
                   $dElt1
                   $dElt2
                   $dElt3
                   $dElt4
                   $dElt5
                   $dElt6
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,)
                      @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      $dElt
                      $dElt1
                      $dElt2
                      $dElt3
                      $dElt4
                      $dElt5
                      $dElt6)
                   (\ (a1 :: Data.Array.Accelerate.Smart.Exp a)
                      (b1 :: Data.Array.Accelerate.Smart.Exp b)[OneShot]
                      (c1 :: Data.Array.Accelerate.Smart.Exp c)[OneShot]
                      (d1 :: Data.Array.Accelerate.Smart.Exp d)[OneShot]
                      (e1 :: Data.Array.Accelerate.Smart.Exp e)[OneShot]
                      (f1 :: Data.Array.Accelerate.Smart.Exp f)[OneShot]
                      (g1 :: Data.Array.Accelerate.Smart.Exp g)[OneShot] ->
                    lvl91
                      (a1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R,
                       b1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R,
                       c1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R,
                       d1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R,
                       e1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R,
                       f1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)))_R,
                       g1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N)))_R))
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp a>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp c>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp d>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp e>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp f>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp g>_R
                    ->_R (Data.Array.Accelerate.Smart.Exp
                            ((,,,,,,)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N))_N)_R) } } }) -}
63b742afae582c39eea6fcafeb06e403
  zip8 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh h)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            sh (a, b, c, d, e, f, g, h))
  {- Arity: 9,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt f)
                   ($dElt6 :: Data.Array.Accelerate.Array.Sugar.Elt g)
                   ($dElt7 :: Data.Array.Accelerate.Array.Sugar.Elt h) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: (Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp c)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp d)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp e)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp f)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp g)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp h)))
                            -> Data.Array.Accelerate.Smart.Exp
                                 (Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp c),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp d),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp e),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp f),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp g),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp h))
                   = Data.Array.Accelerate.Smart.tup8
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp e))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp f))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp g))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp h))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       $dElt3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                       $dElt4
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R
                       $dElt5
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)))_R
                       $dElt6
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N)))_R
                       $dElt7
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <h>_N)))_R
                 } in
                 Data.Array.Accelerate.Prelude.zipWith8
                   @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ (a, b, c, d, e, f, g, h)
                   $dShape
                   $dElt
                   $dElt1
                   $dElt2
                   $dElt3
                   $dElt4
                   $dElt5
                   $dElt6
                   $dElt7
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,)
                      @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      $dElt
                      $dElt1
                      $dElt2
                      $dElt3
                      $dElt4
                      $dElt5
                      $dElt6
                      $dElt7)
                   (\ (a1 :: Data.Array.Accelerate.Smart.Exp a)
                      (b1 :: Data.Array.Accelerate.Smart.Exp b)[OneShot]
                      (c1 :: Data.Array.Accelerate.Smart.Exp c)[OneShot]
                      (d1 :: Data.Array.Accelerate.Smart.Exp d)[OneShot]
                      (e1 :: Data.Array.Accelerate.Smart.Exp e)[OneShot]
                      (f1 :: Data.Array.Accelerate.Smart.Exp f)[OneShot]
                      (g1 :: Data.Array.Accelerate.Smart.Exp g)[OneShot]
                      (h1 :: Data.Array.Accelerate.Smart.Exp h)[OneShot] ->
                    lvl91
                      (a1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R,
                       b1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R,
                       c1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R,
                       d1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R,
                       e1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R,
                       f1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)))_R,
                       g1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N)))_R,
                       h1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <h>_N)))_R))
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp a>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp c>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp d>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp e>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp f>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp g>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp h>_R
                    ->_R (Data.Array.Accelerate.Smart.Exp
                            ((,,,,,,,)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <h>_N))_N)_R) } } }) -}
9209e7965e6d105710182674949ce057
  zip9 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h,
     Data.Array.Accelerate.Array.Sugar.Elt i) =>
    Data.Array.Accelerate.Smart.Acc
      (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh h)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array
            sh (a, b, c, d, e, f, g, h, i))
  {- Arity: 10,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)><L,U(U(U,U,U),U,U,U(U,U,U,U,U,U,U,U,U),U,U,U)>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt f)
                   ($dElt6 :: Data.Array.Accelerate.Array.Sugar.Elt g)
                   ($dElt7 :: Data.Array.Accelerate.Array.Sugar.Elt h)
                   ($dElt8 :: Data.Array.Accelerate.Array.Sugar.Elt i) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 let {
                   lvl91 :: (Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp a)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp b)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp c)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp d)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp e)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp f)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp g)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp h)),
                             Data.Array.Accelerate.Smart.Exp
                               (Data.Array.Accelerate.Lift.Plain
                                  (Data.Array.Accelerate.Smart.Exp i)))
                            -> Data.Array.Accelerate.Smart.Exp
                                 (Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp a),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp b),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp c),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp d),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp e),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp f),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp g),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp h),
                                  Data.Array.Accelerate.Lift.Plain
                                    (Data.Array.Accelerate.Smart.Exp i))
                   = Data.Array.Accelerate.Smart.tup9
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp a))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp b))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp c))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp d))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp e))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp f))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp g))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp h))
                       @ (Data.Array.Accelerate.Lift.Plain
                            (Data.Array.Accelerate.Smart.Exp i))
                       $dElt
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R
                       $dElt1
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R
                       $dElt2
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R
                       $dElt3
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R
                       $dElt4
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R
                       $dElt5
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)))_R
                       $dElt6
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N)))_R
                       $dElt7
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <h>_N)))_R
                       $dElt8
                         `cast`
                       (Data.Array.Accelerate.Array.Sugar.Elt
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <i>_N)))_R
                 } in
                 Data.Array.Accelerate.Prelude.zipWith9
                   @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   @ h
                   @ i
                   @ (a, b, c, d, e, f, g, h, i)
                   $dShape
                   $dElt
                   $dElt1
                   $dElt2
                   $dElt3
                   $dElt4
                   $dElt5
                   $dElt6
                   $dElt7
                   $dElt8
                   (Data.Array.Accelerate.Array.Sugar.$fElt(,,,,,,,,)
                      @ a
                      @ b
                      @ c
                      @ d
                      @ e
                      @ f
                      @ g
                      @ h
                      @ i
                      $dElt
                      $dElt1
                      $dElt2
                      $dElt3
                      $dElt4
                      $dElt5
                      $dElt6
                      $dElt7
                      $dElt8)
                   (\ (a1 :: Data.Array.Accelerate.Smart.Exp a)
                      (b1 :: Data.Array.Accelerate.Smart.Exp b)[OneShot]
                      (c1 :: Data.Array.Accelerate.Smart.Exp c)[OneShot]
                      (d1 :: Data.Array.Accelerate.Smart.Exp d)[OneShot]
                      (e1 :: Data.Array.Accelerate.Smart.Exp e)[OneShot]
                      (f1 :: Data.Array.Accelerate.Smart.Exp f)[OneShot]
                      (g1 :: Data.Array.Accelerate.Smart.Exp g)[OneShot]
                      (h1 :: Data.Array.Accelerate.Smart.Exp h)[OneShot]
                      (i1 :: Data.Array.Accelerate.Smart.Exp i)[OneShot] ->
                    lvl91
                      (a1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)))_R,
                       b1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)))_R,
                       c1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)))_R,
                       d1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)))_R,
                       e1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)))_R,
                       f1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)))_R,
                       g1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N)))_R,
                       h1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <h>_N)))_R,
                       i1
                         `cast`
                       (Data.Array.Accelerate.Smart.Exp
                          (Sym (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <i>_N)))_R))
                     `cast`
                   (<Data.Array.Accelerate.Smart.Exp a>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp b>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp c>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp d>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp e>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp f>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp g>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp h>_R
                    ->_R <Data.Array.Accelerate.Smart.Exp i>_R
                    ->_R (Data.Array.Accelerate.Smart.Exp
                            ((,,,,,,,,)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <a>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <b>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <c>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <d>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <e>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <f>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <g>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <h>_N)
                               (Data.Array.Accelerate.Lift.D:R:PlainExp[0] <i>_N))_N)_R) } } }) -}
68708222a940b29e3ad3ce1427f4a08f
  zipWith3 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   (eta :: Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c
                           -> Data.Array.Accelerate.Smart.Exp d)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b))
                   (eta3 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh c)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ d
                   $dShape
                   $dElt3
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         $dShape
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ a
                            $dShape
                            $dElt
                            eta1)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ b
                            $dShape
                            $dElt1
                            eta2)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ c
                         $dShape
                         $dElt2
                         eta3)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ b $dShape $dElt1 eta2 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ c
                         $dShape
                         $dElt2
                         eta3
                         ix)) } } }) -}
802501e440b8eec04e8d9f16e9723aa0
  zipWith4 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
  {- Arity: 11, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(U))))><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   (eta :: Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c
                           -> Data.Array.Accelerate.Smart.Exp d
                           -> Data.Array.Accelerate.Smart.Exp e)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b))
                   (eta3 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh c))
                   (eta4 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh d)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ e
                   $dShape
                   $dElt4
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         $dShape
                         (Data.Array.Accelerate.Smart.Intersect
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            $dShape
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               @ a
                               $dShape
                               $dElt
                               eta1)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               @ b
                               $dShape
                               $dElt1
                               eta2)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ c
                            $dShape
                            $dElt2
                            eta3)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ d
                         $dShape
                         $dElt3
                         eta4)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ b $dShape $dElt1 eta2 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ c $dShape $dElt2 eta3 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ d
                         $dShape
                         $dElt3
                         eta4
                         ix)) } } }) -}
35097dcd520e4ed8e8ff973adb7ca0d9
  zipWith5 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
  {- Arity: 13, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(U)))))><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt f)
                   (eta :: Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c
                           -> Data.Array.Accelerate.Smart.Exp d
                           -> Data.Array.Accelerate.Smart.Exp e
                           -> Data.Array.Accelerate.Smart.Exp f)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b))
                   (eta3 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh c))
                   (eta4 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh d))
                   (eta5 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh e)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ f
                   $dShape
                   $dElt5
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         $dShape
                         (Data.Array.Accelerate.Smart.Intersect
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            $dShape
                            (Data.Array.Accelerate.Smart.Intersect
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               $dShape
                               (Data.Array.Accelerate.Smart.Shape
                                  @ Data.Array.Accelerate.Smart.Acc
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ sh
                                  @ a
                                  $dShape
                                  $dElt
                                  eta1)
                                 `cast`
                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                               (Data.Array.Accelerate.Smart.Shape
                                  @ Data.Array.Accelerate.Smart.Acc
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ sh
                                  @ b
                                  $dShape
                                  $dElt1
                                  eta2)
                                 `cast`
                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               @ c
                               $dShape
                               $dElt2
                               eta3)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ d
                            $dShape
                            $dElt3
                            eta4)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ e
                         $dShape
                         $dElt4
                         eta5)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ b $dShape $dElt1 eta2 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ c $dShape $dElt2 eta3 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ d $dShape $dElt3 eta4 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ e
                         $dShape
                         $dElt4
                         eta5
                         ix)) } } }) -}
7ab17fb399b2977f8cbeb3e36ca8a2fc
  zipWith6 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f
     -> Data.Array.Accelerate.Smart.Exp g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
  {- Arity: 15, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(U))))))><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ sh
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ f
                   @ g
                   ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape sh)
                   ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt a)
                   ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt b)
                   ($dElt2 :: Data.Array.Accelerate.Array.Sugar.Elt c)
                   ($dElt3 :: Data.Array.Accelerate.Array.Sugar.Elt d)
                   ($dElt4 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                   ($dElt5 :: Data.Array.Accelerate.Array.Sugar.Elt f)
                   ($dElt6 :: Data.Array.Accelerate.Array.Sugar.Elt g)
                   (eta :: Data.Array.Accelerate.Smart.Exp a
                           -> Data.Array.Accelerate.Smart.Exp b
                           -> Data.Array.Accelerate.Smart.Exp c
                           -> Data.Array.Accelerate.Smart.Exp d
                           -> Data.Array.Accelerate.Smart.Exp e
                           -> Data.Array.Accelerate.Smart.Exp f
                           -> Data.Array.Accelerate.Smart.Exp g)
                   (eta1 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh a))
                   (eta2 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh b))
                   (eta3 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh c))
                   (eta4 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh d))
                   (eta5 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh e))
                   (eta6 :: Data.Array.Accelerate.Smart.Acc
                              (Data.Array.Accelerate.Array.Sugar.Array sh f)) ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.SliceShape sh)
                        @ Data.Array.Accelerate.Array.Sugar.Z
                        (Data.Array.Accelerate.Array.Sugar.$p6Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.SliceShape
                                                sh>_N <Data.Array.Accelerate.Array.Sugar.Z>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p5Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.CoSliceShape
                                                sh>_N <sh>_N) of cobox1 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ GHC.Types.*
                        @ GHC.Types.*
                        @ (Data.Array.Accelerate.Array.Sugar.FullShape sh)
                        @ sh
                        (Data.Array.Accelerate.Array.Sugar.$p4Shape @ sh $dShape)
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*>_N <Data.Array.Accelerate.Array.Sugar.FullShape
                                                sh>_N <sh>_N) of cobox2 { DEFAULT ->
                 Data.Array.Accelerate.Language.generate
                   @ sh
                   @ g
                   $dShape
                   $dElt6
                   (Data.Array.Accelerate.Smart.Intersect
                      @ Data.Array.Accelerate.Smart.Acc
                      @ Data.Array.Accelerate.Smart.Exp
                      @ sh
                      $dShape
                      (Data.Array.Accelerate.Smart.Intersect
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         $dShape
                         (Data.Array.Accelerate.Smart.Intersect
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            $dShape
                            (Data.Array.Accelerate.Smart.Intersect
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               $dShape
                               (Data.Array.Accelerate.Smart.Intersect
                                  @ Data.Array.Accelerate.Smart.Acc
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ sh
                                  $dShape
                                  (Data.Array.Accelerate.Smart.Shape
                                     @ Data.Array.Accelerate.Smart.Acc
                                     @ Data.Array.Accelerate.Smart.Exp
                                     @ sh
                                     @ a
                                     $dShape
                                     $dElt
                                     eta1)
                                    `cast`
                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                                  (Data.Array.Accelerate.Smart.Shape
                                     @ Data.Array.Accelerate.Smart.Acc
                                     @ Data.Array.Accelerate.Smart.Exp
                                     @ sh
                                     @ b
                                     $dShape
                                     $dElt1
                                     eta2)
                                    `cast`
                                  (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                                 `cast`
                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                               (Data.Array.Accelerate.Smart.Shape
                                  @ Data.Array.Accelerate.Smart.Acc
                                  @ Data.Array.Accelerate.Smart.Exp
                                  @ sh
                                  @ c
                                  $dShape
                                  $dElt2
                                  eta3)
                                 `cast`
                               (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                            (Data.Array.Accelerate.Smart.Shape
                               @ Data.Array.Accelerate.Smart.Acc
                               @ Data.Array.Accelerate.Smart.Exp
                               @ sh
                               @ d
                               $dShape
                               $dElt3
                               eta4)
                              `cast`
                            (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                         (Data.Array.Accelerate.Smart.Shape
                            @ Data.Array.Accelerate.Smart.Acc
                            @ Data.Array.Accelerate.Smart.Exp
                            @ sh
                            @ e
                            $dShape
                            $dElt4
                            eta5)
                           `cast`
                         (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                      (Data.Array.Accelerate.Smart.Shape
                         @ Data.Array.Accelerate.Smart.Acc
                         @ Data.Array.Accelerate.Smart.Exp
                         @ sh
                         @ f
                         $dShape
                         $dElt5
                         eta6)
                        `cast`
                      (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N))
                     `cast`
                   (Sym (Data.Array.Accelerate.Smart.N:Exp[0]) <sh>_N)
                   (\ (ix :: Data.Array.Accelerate.Smart.Exp sh) ->
                    eta
                      (Data.Array.Accelerate.Language.! @ sh @ a $dShape $dElt eta1 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ b $dShape $dElt1 eta2 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ c $dShape $dElt2 eta3 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ d $dShape $dElt3 eta4 ix)
                      (Data.Array.Accelerate.Language.! @ sh @ e $dShape $dElt4 eta5 ix)
                      (Data.Array.Accelerate.Language.!
                         @ sh
                         @ f
                         $dShape
                         $dElt5
                         eta6
                         ix)) } } }) -}
824af4b4e16a7840e92f8328b076621a
  zipWith7 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f
     -> Data.Array.Accelerate.Smart.Exp g
     -> Data.Array.Accelerate.Smart.Exp h)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh h)
  {- Arity: 17, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(C1(U)))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
3253f432be82136e85f054ada9bc9fbb
  zipWith8 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h,
     Data.Array.Accelerate.Array.Sugar.Elt i) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f
     -> Data.Array.Accelerate.Smart.Exp g
     -> Data.Array.Accelerate.Smart.Exp h
     -> Data.Array.Accelerate.Smart.Exp i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh h)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh i)
  {- Arity: 19, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(C1(C1(U))))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
82d36681f5f7c19bf6c09522ae2a2ef0
  zipWith9 ::
    (Data.Array.Accelerate.Array.Sugar.Shape sh,
     Data.Array.Accelerate.Array.Sugar.Elt a,
     Data.Array.Accelerate.Array.Sugar.Elt b,
     Data.Array.Accelerate.Array.Sugar.Elt c,
     Data.Array.Accelerate.Array.Sugar.Elt d,
     Data.Array.Accelerate.Array.Sugar.Elt e,
     Data.Array.Accelerate.Array.Sugar.Elt f,
     Data.Array.Accelerate.Array.Sugar.Elt g,
     Data.Array.Accelerate.Array.Sugar.Elt h,
     Data.Array.Accelerate.Array.Sugar.Elt i,
     Data.Array.Accelerate.Array.Sugar.Elt j) =>
    (Data.Array.Accelerate.Smart.Exp a
     -> Data.Array.Accelerate.Smart.Exp b
     -> Data.Array.Accelerate.Smart.Exp c
     -> Data.Array.Accelerate.Smart.Exp d
     -> Data.Array.Accelerate.Smart.Exp e
     -> Data.Array.Accelerate.Smart.Exp f
     -> Data.Array.Accelerate.Smart.Exp g
     -> Data.Array.Accelerate.Smart.Exp h
     -> Data.Array.Accelerate.Smart.Exp i
     -> Data.Array.Accelerate.Smart.Exp j)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh a)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh b)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh c)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh d)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh e)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh f)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh g)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh h)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh i)
    -> Data.Array.Accelerate.Smart.Acc
         (Data.Array.Accelerate.Array.Sugar.Array sh j)
  {- Arity: 21, HasNoCafRefs,
     Strictness: <S(LLLS(S)S(S)S(S)LLLLLLLLLLLLLLLL),U(U,U,U,U(U),U(U),U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,C(C1(C1(C1(C1(C1(C1(C1(C1(U)))))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U> -}
instance Data.Array.Accelerate.Prelude.IfThenElse [Data.Array.Accelerate.Smart.Acc]
  = Data.Array.Accelerate.Prelude.$fIfThenElseAcc
instance Data.Array.Accelerate.Prelude.IfThenElse [Data.Array.Accelerate.Smart.Exp]
  = Data.Array.Accelerate.Prelude.$fIfThenElseExp
family instance Data.Array.Accelerate.Prelude.EltT [Data.Array.Accelerate.Smart.Exp],
                                                   [.]
  = Data.Array.Accelerate.Prelude.D:R:EltTExpt
family instance Data.Array.Accelerate.Prelude.EltT [Data.Array.Accelerate.Smart.Acc],
                                                   [.]
  = Data.Array.Accelerate.Prelude.D:R:EltTAcca
"ACC filter/filter" [ALWAYS] forall @ e
                                    ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                  Data.Array.Accelerate.Array.Sugar.DIM0)
                                    ($dSlice :: Data.Array.Accelerate.Array.Sugar.Slice
                                                  Data.Array.Accelerate.Array.Sugar.DIM0)
                                    ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt e)
                                    ($dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays
                                                    (Data.Array.Accelerate.Array.Sugar.Vector e))
                                    ($dArrays2 :: Data.Array.Accelerate.Array.Sugar.Arrays
                                                    (Data.Array.Accelerate.Array.Sugar.Array
                                                       Data.Array.Accelerate.Array.Sugar.DIM0
                                                       GHC.Types.Int))
                                    ($dShape1 :: Data.Array.Accelerate.Array.Sugar.Shape
                                                   Data.Array.Accelerate.Array.Sugar.DIM0)
                                    ($dSlice1 :: Data.Array.Accelerate.Array.Sugar.Slice
                                                   Data.Array.Accelerate.Array.Sugar.DIM0)
                                    ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt e)
                                    (f :: Data.Array.Accelerate.Smart.Exp e
                                          -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                                    (g :: Data.Array.Accelerate.Smart.Exp e
                                          -> Data.Array.Accelerate.Smart.Exp GHC.Types.Bool)
                                    (arr :: Data.Array.Accelerate.Smart.Acc
                                              (Data.Array.Accelerate.Array.Sugar.Array
                                                 (Data.Array.Accelerate.Array.Sugar.DIM0
                                                  Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                                 e))
  Data.Array.Accelerate.Prelude.filter @ Data.Array.Accelerate.Array.Sugar.Z
                                       @ e
                                       $dShape
                                       $dSlice
                                       $dElt
                                       f
                                       (Data.Array.Accelerate.Prelude.afst
                                          @ (Data.Array.Accelerate.Array.Sugar.Vector e)
                                          @ (Data.Array.Accelerate.Array.Sugar.Array
                                               Data.Array.Accelerate.Array.Sugar.DIM0 GHC.Types.Int)
                                          $dArrays1
                                          $dArrays2
                                          (Data.Array.Accelerate.Prelude.filter
                                             @ Data.Array.Accelerate.Array.Sugar.DIM0
                                             @ e
                                             $dShape1
                                             $dSlice1
                                             $dElt1
                                             g
                                             arr))
  = let {
      $dShape2 :: Data.Array.Accelerate.Array.Sugar.Shape
                    (Data.Array.Accelerate.Array.Sugar.FullShape
                       Data.Array.Accelerate.Array.Sugar.DIM0)
      = Data.Array.Accelerate.Array.Sugar.$p4Slice
          @ Data.Array.Accelerate.Array.Sugar.DIM0
          $dSlice1
    } in
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p4Shape
                 @ (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape2)) of cobox0 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p5Shape
                 @ (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape2)) of cobox1 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ Data.Array.Accelerate.Array.Sugar.Z
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ Data.Array.Accelerate.Array.Sugar.Z
              (Data.Array.Accelerate.Array.Sugar.$p6Shape
                 @ (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape2)) of cobox2 { DEFAULT ->
    let {
      $dShape3 :: Data.Array.Accelerate.Array.Sugar.Shape
                    (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                       Data.Array.Accelerate.Array.Sugar.DIM0)
      = Data.Array.Accelerate.Array.Sugar.$p3Slice
          @ Data.Array.Accelerate.Array.Sugar.DIM0
          $dSlice1
    } in
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p4Shape
                 @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape3)) of cobox3 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p5Shape
                 @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape3)) of cobox4 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ Data.Array.Accelerate.Array.Sugar.Z
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ Data.Array.Accelerate.Array.Sugar.Z
              (Data.Array.Accelerate.Array.Sugar.$p6Shape
                 @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape3)) of cobox5 { DEFAULT ->
    let {
      $dShape4 :: Data.Array.Accelerate.Array.Sugar.Shape
                    (Data.Array.Accelerate.Array.Sugar.SliceShape
                       Data.Array.Accelerate.Array.Sugar.DIM0)
      = Data.Array.Accelerate.Array.Sugar.$p2Slice
          @ Data.Array.Accelerate.Array.Sugar.DIM0
          $dSlice1
    } in
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p4Shape
                 @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape4)) of cobox6 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p5Shape
                 @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape4)) of cobox7 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ Data.Array.Accelerate.Array.Sugar.Z
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ Data.Array.Accelerate.Array.Sugar.Z
              (Data.Array.Accelerate.Array.Sugar.$p6Shape
                 @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape4)) of cobox8 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           @ Data.Array.Accelerate.Array.Sugar.Z
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              @ Data.Array.Accelerate.Array.Sugar.Z
              (Data.Array.Accelerate.Array.Sugar.$p6Shape
                 @ Data.Array.Accelerate.Array.Sugar.DIM0
                 $dShape1)) of cobox9 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           @ Data.Array.Accelerate.Array.Sugar.DIM0
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              @ Data.Array.Accelerate.Array.Sugar.DIM0
              (Data.Array.Accelerate.Array.Sugar.$p5Shape
                 @ Data.Array.Accelerate.Array.Sugar.DIM0
                 $dShape1)) of cobox10 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           @ Data.Array.Accelerate.Array.Sugar.DIM0
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              @ Data.Array.Accelerate.Array.Sugar.DIM0
              (Data.Array.Accelerate.Array.Sugar.$p4Shape
                 @ Data.Array.Accelerate.Array.Sugar.DIM0
                 $dShape1)) of cobox11 { DEFAULT ->
    let {
      $dShape5 :: Data.Array.Accelerate.Array.Sugar.Shape
                    (Data.Array.Accelerate.Array.Sugar.FullShape
                       Data.Array.Accelerate.Array.Sugar.DIM0)
      = Data.Array.Accelerate.Array.Sugar.$p4Slice
          @ Data.Array.Accelerate.Array.Sugar.DIM0
          $dSlice
    } in
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p4Shape
                 @ (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape5)) of cobox12 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p5Shape
                 @ (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape5)) of cobox13 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ Data.Array.Accelerate.Array.Sugar.Z
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ Data.Array.Accelerate.Array.Sugar.Z
              (Data.Array.Accelerate.Array.Sugar.$p6Shape
                 @ (Data.Array.Accelerate.Array.Sugar.FullShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape5)) of cobox14 { DEFAULT ->
    let {
      $dShape6 :: Data.Array.Accelerate.Array.Sugar.Shape
                    (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                       Data.Array.Accelerate.Array.Sugar.DIM0)
      = Data.Array.Accelerate.Array.Sugar.$p3Slice
          @ Data.Array.Accelerate.Array.Sugar.DIM0
          $dSlice
    } in
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p4Shape
                 @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape6)) of cobox15 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p5Shape
                 @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape6)) of cobox16 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ Data.Array.Accelerate.Array.Sugar.Z
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ Data.Array.Accelerate.Array.Sugar.Z
              (Data.Array.Accelerate.Array.Sugar.$p6Shape
                 @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape6)) of cobox17 { DEFAULT ->
    let {
      $dShape7 :: Data.Array.Accelerate.Array.Sugar.Shape
                    (Data.Array.Accelerate.Array.Sugar.SliceShape
                       Data.Array.Accelerate.Array.Sugar.DIM0)
      = Data.Array.Accelerate.Array.Sugar.$p2Slice
          @ Data.Array.Accelerate.Array.Sugar.DIM0
          $dSlice
    } in
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p4Shape
                 @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape7)) of cobox18 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              (Data.Array.Accelerate.Array.Sugar.$p5Shape
                 @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape7)) of cobox19 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0))
           @ Data.Array.Accelerate.Array.Sugar.Z
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0))
              @ Data.Array.Accelerate.Array.Sugar.Z
              (Data.Array.Accelerate.Array.Sugar.$p6Shape
                 @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                      Data.Array.Accelerate.Array.Sugar.DIM0)
                 $dShape7)) of cobox20 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           @ Data.Array.Accelerate.Array.Sugar.Z
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.SliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              @ Data.Array.Accelerate.Array.Sugar.Z
              (Data.Array.Accelerate.Array.Sugar.$p6Shape
                 @ Data.Array.Accelerate.Array.Sugar.DIM0
                 $dShape)) of cobox21 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           @ Data.Array.Accelerate.Array.Sugar.DIM0
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.CoSliceShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              @ Data.Array.Accelerate.Array.Sugar.DIM0
              (Data.Array.Accelerate.Array.Sugar.$p5Shape
                 @ Data.Array.Accelerate.Array.Sugar.DIM0
                 $dShape)) of cobox22 { DEFAULT ->
    case GHC.Types.HEq_sc
           @ GHC.Types.*
           @ GHC.Types.*
           @ (Data.Array.Accelerate.Array.Sugar.FullShape
                Data.Array.Accelerate.Array.Sugar.DIM0)
           @ Data.Array.Accelerate.Array.Sugar.DIM0
           (Data.Type.Equality.$p1~
              @ GHC.Types.*
              @ (Data.Array.Accelerate.Array.Sugar.FullShape
                   Data.Array.Accelerate.Array.Sugar.DIM0)
              @ Data.Array.Accelerate.Array.Sugar.DIM0
              (Data.Array.Accelerate.Array.Sugar.$p4Shape
                 @ Data.Array.Accelerate.Array.Sugar.DIM0
                 $dShape)) of cobox23 { DEFAULT ->
    Data.Array.Accelerate.Prelude.filter
      @ Data.Array.Accelerate.Array.Sugar.DIM0
      @ e
      $dShape7
        `cast`
      (Data.Array.Accelerate.Array.Sugar.Shape
         (Data.Array.Accelerate.Array.Sugar.D:R:SliceShapeZ[0]))_R
      $dSlice
      $dElt
      (\ (x :: Data.Array.Accelerate.Smart.Exp e) ->
       Data.Array.Accelerate.Classes.Eq.&& (g x) (f x))
      arr } } } } } } } } } } } } } } } } } } } } } } } }
"SPEC/Data.Array.Accelerate.Prelude $fElt:. @ Z @ Int" [ALWAYS] forall ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                    GHC.Types.Int)
                                                                       ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                   Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fElt:. @ Data.Array.Accelerate.Array.Sugar.Z
                                            @ GHC.Types.Int
                                            $dElt
                                            $dElt1
  = Data.Array.Accelerate.Prelude.$s$fElt:.
"SPEC/Data.Array.Accelerate.Prelude $fElt:._$cfromElt @ Z @ Int" [ALWAYS] forall ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                              GHC.Types.Int)
                                                                                 ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                             Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fElt:._$cfromElt @ Data.Array.Accelerate.Array.Sugar.Z
                                                      @ GHC.Types.Int
                                                      $dElt
                                                      $dElt1
  = Data.Array.Accelerate.Prelude.$s$fElt:._$s$fElt:._$cfromElt
"SPEC/Data.Array.Accelerate.Prelude $fElt:._$cp1Elt @ Z @ Int" [ALWAYS] forall ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                            GHC.Types.Int)
                                                                               ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                           Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fElt:._$cp1Elt @ Data.Array.Accelerate.Array.Sugar.Z
                                                    @ GHC.Types.Int
                                                    $dElt
                                                    $dElt1
  = Data.Array.Accelerate.Prelude.$s$fElt:._$s$fElt:._$cp1Elt
"SPEC/Data.Array.Accelerate.Prelude $fElt:._$ctoElt @ Z @ Int" [ALWAYS] forall ($dElt1 :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                            GHC.Types.Int)
                                                                               ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                           Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fElt:._$ctoElt @ Data.Array.Accelerate.Array.Sugar.Z
                                                    @ GHC.Types.Int
                                                    $dElt
                                                    $dElt1
  = Data.Array.Accelerate.Prelude.$s$fElt:._$s$fElt:._$ctoElt
"SPEC/Data.Array.Accelerate.Prelude $fShape:. @ (Z :. Int)" [ALWAYS] forall ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                                                          (Data.Array.Accelerate.Array.Sugar.Z
                                                                                           Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int))
  Data.Array.Accelerate.Array.Sugar.$fShape:. @ (Data.Array.Accelerate.Array.Sugar.Z
                                                 Data.Array.Accelerate.Array.Sugar.:. GHC.Types.Int)
                                              $dShape
  = Data.Array.Accelerate.Prelude.$s$fShape:.1
"SPEC/Data.Array.Accelerate.Prelude $fShape:. @ Z" [ALWAYS] forall ($dShape :: Data.Array.Accelerate.Array.Sugar.Shape
                                                                                 Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fShape:. @ Data.Array.Accelerate.Array.Sugar.Z
                                              $dShape
  = Data.Array.Accelerate.Prelude.$s$fShape:.
"SPEC/Data.Array.Accelerate.Prelude $fShow:. @ Z @ Int" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                      GHC.Types.Int)
                                                                        ($dShow :: GHC.Show.Show
                                                                                     Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fShow:. @ Data.Array.Accelerate.Array.Sugar.Z
                                             @ GHC.Types.Int
                                             $dShow
                                             $dShow1
  = Data.Array.Accelerate.Prelude.$s$fElt:._$s$fShow:.
"SPEC/Data.Array.Accelerate.Prelude $fShow:._$cshowList @ Z @ Int" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                                 GHC.Types.Int)
                                                                                   ($dShow :: GHC.Show.Show
                                                                                                Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fShow:._$cshowList @ Data.Array.Accelerate.Array.Sugar.Z
                                                        @ GHC.Types.Int
                                                        $dShow
                                                        $dShow1
  = Data.Array.Accelerate.Prelude.$s$fElt:._$s$fShow:._$cshowList
"SPEC/Data.Array.Accelerate.Prelude $fSlice:. @ Z" [ALWAYS] forall ($dSlice :: Data.Array.Accelerate.Array.Sugar.Slice
                                                                                 Data.Array.Accelerate.Array.Sugar.Z)
  Data.Array.Accelerate.Array.Sugar.$fSlice:. @ Data.Array.Accelerate.Array.Sugar.Z
                                              $dSlice
  = Data.Array.Accelerate.Prelude.$s$fSlice:.
"SPEC/Data.Array.Accelerate.Prelude $fUnliftExp:.0 @ Int @ Z" [ALWAYS] forall ($dUnlift :: Data.Array.Accelerate.Lift.Unlift
                                                                                             Data.Array.Accelerate.Smart.Exp
                                                                                             Data.Array.Accelerate.Array.Sugar.Z)
                                                                              ($dSlice :: Data.Array.Accelerate.Array.Sugar.Slice
                                                                                            (Data.Array.Accelerate.Lift.Plain
                                                                                               Data.Array.Accelerate.Array.Sugar.Z))
                                                                              ($dElt :: Data.Array.Accelerate.Array.Sugar.Elt
                                                                                          GHC.Types.Int)
  Data.Array.Accelerate.Lift.$fUnliftExp:.0 @ GHC.Types.Int
                                            @ Data.Array.Accelerate.Array.Sugar.Z
                                            $dElt
                                            $dSlice
                                            $dUnlift
  = Data.Array.Accelerate.Prelude.$s$fUnliftExp:.0
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

