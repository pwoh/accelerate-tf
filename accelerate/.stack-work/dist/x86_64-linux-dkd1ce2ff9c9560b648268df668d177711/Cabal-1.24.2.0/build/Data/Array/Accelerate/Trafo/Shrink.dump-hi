
==================== FINAL INTERFACE ====================
2017-08-29 05:28:27.628931 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Shrink 8002
  interface hash: 6e7124153279174a8747dfc074cdd03f
  ABI hash: 43e16357d55e3a65c98ce3f7cc040f6e
  export-list hash: 1b181afc0b272f930ca63b5acbf2b41a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ce1f3234399ff43bcb4128deb3b41e7d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Array.Accelerate.Trafo.Shrink.basicReduceAcc
  Data.Array.Accelerate.Trafo.Shrink.shrinkPreAcc
  Data.Array.Accelerate.Trafo.Shrink.usesOfExp
  Data.Array.Accelerate.Trafo.Shrink.usesOfPreAcc
  Data.Array.Accelerate.Trafo.Shrink.Shrink{Data.Array.Accelerate.Trafo.Shrink.shrink Data.Array.Accelerate.Trafo.Shrink.shrink'}
  Data.Array.Accelerate.Trafo.Shrink.ShrinkAcc
  Data.Array.Accelerate.Trafo.Shrink.UsesOfAcc
module dependencies: Data.Array.Accelerate.AST
                     Data.Array.Accelerate.Analysis.Hash
                     Data.Array.Accelerate.Analysis.Hash.TH
                     Data.Array.Accelerate.Analysis.Match
                     Data.Array.Accelerate.Array.Data
                     Data.Array.Accelerate.Array.Representation
                     Data.Array.Accelerate.Array.Sugar
                     Data.Array.Accelerate.Array.Unique Data.Array.Accelerate.Debug
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Stats Data.Array.Accelerate.Debug.Timed
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Lifetime
                     Data.Array.Accelerate.Pretty.Graphviz
                     Data.Array.Accelerate.Pretty.Graphviz.Monad
                     Data.Array.Accelerate.Pretty.Graphviz.Type
                     Data.Array.Accelerate.Pretty.Print Data.Array.Accelerate.Product
                     Data.Array.Accelerate.Trafo.Base
                     Data.Array.Accelerate.Trafo.Substitution Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3 template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Representation
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Sugar
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Product
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Base
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Trafo.Substitution
                         accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
import  -/  Data.Array.Accelerate.AST 4907563d36aadcb5fe024fe0eaf42ffa
  exports: 14f3cf8c02b472222e546556891c5be1
  Abody ee120ad61e0a5f248fbde7e991e9af28
  Acond 750209431eae401dfff3c860bd1e2fc6
  Aforeign 5214b73c1fba23d3d4e7f85cb199ac1c
  Alam 9e3e3605bc50ad599485b7c0977e13d9
  Alet 0ab0425bc7b0ec829dbc083ffa16825d
  Apply acd8c8af26b0a8b682df360df59fa8be
  Aprj 404b31d0a415df80893151ff13fb0846
  Atuple 902517e36fd9d4d0cfb6191b1c6684eb
  Avar b9746522dbbe78edef452606b6656a87
  Awhile 14384d8a9ba2da72092122c848e2ae32
  Backpermute 4f66d0e89ef4df5962354aa16441f617
  Body 1196576b2aa6a07bc2357625785ef2e5
  Cond 85b737c39381609050fcedb2a2391a92
  Const d4b278465afaa56210a92bc3030b1c81
  Fold bb3f680fb271e4fc52befb09d536ab67
  Fold1 81a218046119358257d76f4180b62916
  Fold1Seg e17f7dec7f49bed9b09c5dddc31f075f
  FoldSeg 066501eca698e8d157f1bbd44032854e
  Foreign cd3ba341b3611dd6c5a93df013aa5a0f
  FromIndex 175bd7890f27a032cb2a1e79fa38d269
  Generate 36e058fa32bd3e74acd8e2c33b47dc54
  Idx 9e7661ad7cc1bdaa299ff04fb99275fb
  Index 63200e0b9961802f7b038a2e740789b0
  IndexAny 76a617483a4b1532550fe134ec1b4e43
  IndexCons a015173a5dad6ebd2b8e31b35afb501a
  IndexFull b79f06d91ed5766f10b485089815d3f3
  IndexHead 3f325360371c4024fd7e59caec7726dd
  IndexNil 8331ee2296cdcd4d19411e11e8205177
  IndexSlice 45dcf8fd2ee557f7e6b7acb3cb7bd68d
  IndexTail 08923ce42f0b849d79fabcb6207dc0a4
  Intersect d61777171aa2d140c0046919d45de878
  Lam 158725fe690b603ce6a570d589782162
  Let fb7635520863b39ad81ae4c22c0dfd53
  LinearIndex d5e9e584798a5b18adfd76ceee4f21f3
  Map c186fc6c7cc5f818dedf44e9c7679cfc
  Permute 0d48aeaf25db12c40fda0dfdecef40cf
  PreOpenAcc 1c6afba98b6c67e35689096ef2f6efe3
  PreOpenAfun 2e727f8d346dd6a6266c06baf474000a
  PreOpenExp d3bf8e354493ff12972ab24a46d8ebad
  PreOpenFun d3bf8e354493ff12972ab24a46d8ebad
  PrimApp 4153e64d1996ff9e8d5bab83757d04cc
  PrimConst c3e9d3e0be46d673c989e142b6fb53f5
  Prj ea0969c2ebd78e8f97f90fdce0ec5b85
  Replicate b45b307c3ac5834be45157f9b97164b0
  Reshape 47f08dcad6d10e3aa1cb6093ba11dd85
  Scanl 396bf0430f22f20afe3957f5ca59a08b
  Scanl' 1adc9e003ccf30f16828abd0fd78615a
  Scanl1 1276c7f35ce3c67a27dcc2ffd5def021
  Scanr 1a875086cf9a77ee605ee5eb6845fb3d
  Scanr' 93cb828599b9e47e6605e12c5a38e182
  Scanr1 80c7de53ede553c41fe8bb104ed3dbc8
  Shape 188e3cfc394232139edff3a93b6fc738
  ShapeSize f339b41eb7026d658f318c6ff3b1ddbd
  Slice 0f021a8f0af5175920645825ac2450a8
  Stencil 09b6572f0048c550f2782ea5ac548286
  Stencil2 bbe92a77ce856793eceb2afaa356761b
  SuccIdx 076f2d7bd7da8ff1d9570f0dbeb5674a
  ToIndex 1778bb2206e9b9af2bfb73385aa8fcf6
  Transform 3346841e54e9c2cae2cf221c490a757d
  Tuple 286fa31822ac85195775eaca8264e583
  Union a7d3a050ed47fbfc04189bf738e5cbf8
  Unit 6a040b1551bc804afa771300d0236e16
  Use d69e2b4a5c6ddbf9268deeebd8e6f6e2
  Var 316870341ee21060a306c8836bf702a6
  While e1c4381be88ce0fc5eeff6f5cfbbbe14
  ZeroIdx 2872af3fb6867732883d5517094bca30
  ZipWith 51d1ce30678f2f98e0a9db1215a02e6e
import  -/  Data.Array.Accelerate.Array.Sugar 1095a84a969562bd64b7800341e0d23c
  exports: a6dd551b39ab2a3a217fc8c2a6979cd5
  Atuple 6feaa0161ffad15a746afb867f21f70b
  NilAtup cc36880f178a7e9e125505f43c8172e2
  NilTup 36796631cb3a95a68e6a4dde7e7b2bbe
  SnocAtup 8508890a48fc19a3130443094eda67f2
  SnocTup ef3a739bcf04e48a53d49112dce542ea
  Tuple 878418f2d4c18f6518d438b74451ef4e
import  -/  Data.Array.Accelerate.Debug 48fd217a26d4240434223974d5084c0c
  exports: 7e8587d30c425be122b3b310eb4ec0ea
import  -/  Data.Array.Accelerate.Debug.Stats 233b556167dd26bfa71d8540af4d79bd
  betaReduce 4c3e5128011849b171ea8c54de850a86
  inline 46a5ffda24dd0c2be1ab1f9ee38ddb39
  substitution 8d30b18fdbea434f732e01539cdc959a
import  -/  Data.Array.Accelerate.Trafo.Base f39e4dfe1afe26017d51fdc8678d590f
  exports: 945cc7ccce908b35cd85c2d690c34974
  Kit 7736eeb535c49ebb0bc1fc50dc5eadf9
  match 34f00e9fb250aca9b5d16a94e2ebf396
import  -/  Data.Array.Accelerate.Trafo.Substitution 1ab9162bd3f0f153d1c21a8dd76bc781
  exports: 3e411ea0b6662b69d52e36eb3bfba800
  inline 0c6ca03756168e5ed82cdc99d67e19c9
  rebuildA 955201f71f306550e8336c5367bfdb03
  subAtop e6bc0c2586c6e7948b537e1127b8779e
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:Data.Type.Equality e58d97d060ef5a0f7906bf33d6e50df2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
78413cb96f2e6416155a7b9a700a287e
  $dmshrink :: Data.Array.Accelerate.Trafo.Shrink.Shrink f => f -> f
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(S(LS))),1*U(A,1*C1(U(A,1*U)))><L,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ f
                   ($dShrink :: Data.Array.Accelerate.Trafo.Shrink.Shrink f)
                   (eta :: f) ->
                 Data.Tuple.snd
                   @ GHC.Types.Bool
                   @ f
                   (Data.Array.Accelerate.Trafo.Shrink.shrink' @ f $dShrink eta)) -}
95d34a5663dc2b815024aa6349005634
  $fShrinkPreOpenExp ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.Trafo.Shrink.Shrink
      (Data.Array.Accelerate.AST.PreOpenExp acc env aenv e)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(U,U(U)),A,A,A,A,A,A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      @ env
                      @ aenv
                      @ e
                      ($dKit :: Data.Array.Accelerate.Trafo.Base.Kit acc).
                  @ (Data.Array.Accelerate.AST.PreOpenExp acc env aenv e)
                  (Data.Array.Accelerate.Trafo.Shrink.$fShrinkPreOpenExp_$cshrink
                     @ acc
                     @ env
                     @ aenv
                     @ e
                     $dKit)
                  (Data.Array.Accelerate.Trafo.Shrink.$fShrinkPreOpenExp_$cshrink'
                     @ acc
                     @ env
                     @ aenv
                     @ e
                     $dKit) -}
86bb24201c90f7531586f7069a5540dd
  $fShrinkPreOpenExp_$cshrink ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.AST.PreOpenExp acc env aenv e
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv e
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S))LLLLLLL),U(U(U,U(U)),A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ e
                   ($dKit :: Data.Array.Accelerate.Trafo.Base.Kit acc)
                   (eta :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv e) ->
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           (Data.Array.Accelerate.Trafo.Base.$p1Kit @ acc $dKit))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox0 { DEFAULT ->
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           (Data.Array.Accelerate.Trafo.Base.$p1Kit @ acc $dKit))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox1 { DEFAULT ->
                 case Data.Array.Accelerate.Trafo.Shrink.$wshrinkE
                        @ acc
                        @ env
                        @ aenv
                        @ e
                        $dKit
                        eta of ww { (#,#) ww1 ww2 ->
                 ww2 } } }) -}
38bc2e72308e36debc9414c36386a6cf
  $fShrinkPreOpenExp_$cshrink' ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.AST.PreOpenExp acc env aenv e
    -> (GHC.Types.Bool,
        Data.Array.Accelerate.AST.PreOpenExp acc env aenv e)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S))LLLLLLL),U(U(U,U(U)),A,A,A,A,A,A,A)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ e
                   (w :: Data.Array.Accelerate.Trafo.Base.Kit acc)
                   (w1 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv e) ->
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           (Data.Array.Accelerate.Trafo.Base.$p1Kit @ acc w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox0 { DEFAULT ->
                 case Data.Array.Accelerate.Trafo.Shrink.$wshrinkE
                        @ acc
                        @ env
                        @ aenv
                        @ e
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1 `cast` (Data.Monoid.N:Any[0]), ww2) } }) -}
95d34a5663dc2b815024aa6349005634
  $fShrinkPreOpenFun ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.Trafo.Shrink.Shrink
      (Data.Array.Accelerate.AST.PreOpenFun acc env aenv f)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(U,U(U)),A,A,A,A,A,A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ (acc :: * -> * -> *)
                      @ env
                      @ aenv
                      @ f
                      ($dKit :: Data.Array.Accelerate.Trafo.Base.Kit acc).
                  @ (Data.Array.Accelerate.AST.PreOpenFun acc env aenv f)
                  (Data.Array.Accelerate.Trafo.Shrink.$fShrinkPreOpenFun_$cshrink
                     @ acc
                     @ env
                     @ aenv
                     @ f
                     $dKit)
                  (Data.Array.Accelerate.Trafo.Shrink.$fShrinkPreOpenFun_$cshrink'
                     @ acc
                     @ env
                     @ aenv
                     @ f
                     $dKit) -}
36bf885324e19fec997c6b40247e3a5b
  $fShrinkPreOpenFun_$cshrink ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.AST.PreOpenFun acc env aenv f
    -> Data.Array.Accelerate.AST.PreOpenFun acc env aenv f
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S))LLLLLLL),U(U(U,U(U)),A,A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ f
                   ($dKit :: Data.Array.Accelerate.Trafo.Base.Kit acc)
                   (eta :: Data.Array.Accelerate.AST.PreOpenFun acc env aenv f) ->
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           (Data.Array.Accelerate.Trafo.Base.$p1Kit @ acc $dKit))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox0 { DEFAULT ->
                 case Data.Array.Accelerate.Trafo.Shrink.$w$cshrink'
                        @ acc
                        @ env
                        @ aenv
                        @ f
                        $dKit
                        eta of ww { (#,#) ww1 ww2 ->
                 ww2 } }) -}
721bf5395584caf2ede0ebf08a3cdebf
  $fShrinkPreOpenFun_$cshrink' ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.AST.PreOpenFun acc env aenv f
    -> (GHC.Types.Bool,
        Data.Array.Accelerate.AST.PreOpenFun acc env aenv f)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S))LLLLLLL),U(U(U,U(U)),A,A,A,A,A,A,A)><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ f
                   (w :: Data.Array.Accelerate.Trafo.Base.Kit acc)
                   (w1 :: Data.Array.Accelerate.AST.PreOpenFun acc env aenv f) ->
                 case Data.Array.Accelerate.Trafo.Shrink.$w$cshrink'
                        @ acc
                        @ env
                        @ aenv
                        @ f
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d088ea8c7a4983b4ba41674859aefafb
  $tc'C:Shrink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9182363229240679484##
                   2953865116351758613##
                   Data.Array.Accelerate.Trafo.Shrink.$trModule
                   Data.Array.Accelerate.Trafo.Shrink.$tc'C:Shrink1) -}
ae6f30aa96173cd4221eb1dddf4ce67a
  $tc'C:Shrink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Shrink"#) -}
05cb164a3620eeb3ee9ff7326d3043b8
  $tcShrink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5805371172692037176##
                   14334191557851427379##
                   Data.Array.Accelerate.Trafo.Shrink.$trModule
                   Data.Array.Accelerate.Trafo.Shrink.$tcShrink1) -}
b672ba4fbbea5145ad239530ef021f0e
  $tcShrink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Shrink"#) -}
414d5eb2f9a24c48c1c414f9966ad004
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Trafo.Shrink.$trModule2
                   Data.Array.Accelerate.Trafo.Shrink.$trModule1) -}
58690baf9fb933155b0ccce06e11abc8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Trafo.Shrink"#) -}
cc8e4d14c2b36cd7bd19f04a80ea381e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
1e677d10fc1a3cb3d4776a955ead62cd
  $w$cshrink' ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.AST.PreOpenFun acc env aenv f
    -> (# GHC.Types.Bool,
          Data.Array.Accelerate.AST.PreOpenFun acc env aenv f #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S))LLLLLLL),U(U(U,U(U)),A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ (acc :: * -> * -> *)
                   @ env
                   @ aenv
                   @ f
                   (w :: Data.Array.Accelerate.Trafo.Base.Kit acc)
                   (w1 :: Data.Array.Accelerate.AST.PreOpenFun acc env aenv f) ->
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           (Data.Array.Accelerate.Trafo.Base.$p1Kit @ acc w))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox0 { DEFAULT ->
                 Data.Array.Accelerate.Trafo.Shrink.$wshrinkFun
                   @ acc
                   @ env
                   @ aenv
                   @ f
                   w
                   w1 }) -}
f74fb54ef40054a1a812177b83564c3c
  $wshrinkE ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> (# Data.Monoid.Any,
          Data.Array.Accelerate.AST.PreOpenExp acc env aenv t #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),U(U(U,U(U)),A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
e5a5211ba8fd3512ed1f8e368ee0a5e6
  $wshrinkFun ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    Data.Array.Accelerate.AST.PreOpenFun acc env aenv f
    -> (# GHC.Types.Bool,
          Data.Array.Accelerate.AST.PreOpenFun acc env aenv f #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LS(S))LLLLLLL),U(U(U,U(U)),A,A,A,A,A,A,A)><S,1*U>,
     Inline: [0] -}
701f053acc715ba98101198d4bbc2017
  $wusesOfExp ::
    Data.Array.Accelerate.AST.Idx env s
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
a03787ccd3ccf6237b602f277a2ff0a0
  type ReduceAcc (acc :: * -> * -> *) =
    forall aenv s t.
    acc aenv s
    -> acc (aenv, s) t
    -> GHC.Base.Maybe (Data.Array.Accelerate.AST.PreOpenAcc acc aenv t)
95d34a5663dc2b815024aa6349005634
  class Shrink f where
    shrink :: f -> f
    shrink' :: f -> (GHC.Types.Bool, f)
    {-# MINIMAL shrink' #-}
b1bbf733d427b270a714e8e11da0dfe9
  type ShrinkAcc (acc :: * -> * -> *) =
    forall aenv a. acc aenv a -> acc aenv a
94d01bf56757a51bc7093741f15d5b6a
  type UsesOfAcc (acc :: * -> * -> *) =
    forall aenv s t.
    GHC.Types.Bool
    -> Data.Array.Accelerate.AST.Idx aenv s
    -> acc aenv t
    -> GHC.Types.Int
90aad599fc6df87dc8ed76f884507c8f
  basicReduceAcc ::
    Data.Array.Accelerate.Trafo.Base.Kit acc =>
    (forall aenv a.
     acc aenv a -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv a)
    -> Data.Array.Accelerate.Trafo.Shrink.UsesOfAcc acc
    -> Data.Array.Accelerate.Trafo.Shrink.ReduceAcc acc
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,A,A,A,A,A,A,A)><C(S),C(U)><L,1*C1(C1(C1(U(U))))><L,U><L,U>,
     Unfolding: (\ @ (acc :: * -> * -> *)
                   ($dKit :: Data.Array.Accelerate.Trafo.Base.Kit acc)
                   (eta :: forall aenv a.
                           acc aenv a -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv a)
                   (eta1 :: Data.Array.Accelerate.Trafo.Shrink.UsesOfAcc acc)
                   @ aenv
                   @ s
                   @ t
                   (eta2 :: acc aenv s)
                   (eta3 :: acc (aenv, s) t) ->
                 let {
                   $d(%,%) :: Data.Array.Accelerate.Trafo.Substitution.RebuildableAcc
                                acc
                   = Data.Array.Accelerate.Trafo.Base.$p1Kit @ acc $dKit
                 } in
                 case GHC.Types.HEq_sc
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                        @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc)
                        @ acc
                        (GHC.Classes.$p2(%,%)
                           @ (Data.Array.Accelerate.Trafo.Substitution.Rebuildable acc)
                           @ (Data.Array.Accelerate.Trafo.Substitution.AccClo acc
                              Data.Type.Equality.~ acc)
                           $d(%,%))
                          `cast`
                        (Data.Type.Equality.N:~[0]
                             <GHC.Types.*
                              -> GHC.Types.*
                              -> GHC.Types.*>_N <Data.Array.Accelerate.Trafo.Substitution.AccClo
                                                   acc>_N <acc>_N) of cobox0 { DEFAULT ->
                 case eta @ aenv @ s eta2 of wild {
                   DEFAULT
                   -> case eta1
                             @ (aenv, s)
                             @ s
                             @ t
                             GHC.Types.True
                             (Data.Array.Accelerate.AST.$WZeroIdx @ s @ aenv)
                             eta3 of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# x 0#) of wild2 {
                        GHC.Types.False
                        -> GHC.Base.Nothing
                             @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv t)
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv t)
                             (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAcc_$crebuildA
                                @ acc
                                $d(%,%)
                                @ Data.Array.Accelerate.AST.PreOpenAcc
                                @ (aenv, s)
                                @ aenv
                                @ t
                                Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc
                                (\ @ a'
                                   ($dArrays :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                                   (eta4 :: Data.Array.Accelerate.AST.Idx (aenv, s) a') ->
                                 case eta4 of wild3 {
                                   Data.Array.Accelerate.AST.ZeroIdx env cobox1
                                   -> wild
                                        `cast`
                                      (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_R <aenv>_N (Nth:1 cobox1))_R
                                   Data.Array.Accelerate.AST.SuccIdx env s1 cobox1 idx
                                   -> (Data.Array.Accelerate.AST.Avar @ acc @ env @ a' $dArrays idx)
                                        `cast`
                                      (Data.Array.Accelerate.AST.PreOpenAcc
                                         <acc>_R (Nth:0 (Sym cobox1)) <a'>_N)_R })
                                  `cast`
                                (forall (a' :: <*>_N).
                                 <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                                 ->_R <Data.Array.Accelerate.AST.Idx (aenv, s) a'>_R
                                 ->_R (Data.Array.Accelerate.AST.PreOpenAcc
                                         (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenAcc[0]
                                                        <acc>_N)))
                                         <aenv>_N
                                         <a'>_N)_R)
                                (eta @ (aenv, s) @ t eta3)) } }
                   Data.Array.Accelerate.AST.Avar $dArrays ds
                   -> GHC.Base.Just
                        @ (Data.Array.Accelerate.AST.PreOpenAcc acc aenv t)
                        (Data.Array.Accelerate.Trafo.Substitution.$fRebuildablePreOpenAcc_$crebuildA
                           @ acc
                           $d(%,%)
                           @ Data.Array.Accelerate.AST.PreOpenAcc
                           @ (aenv, s)
                           @ aenv
                           @ t
                           Data.Array.Accelerate.Trafo.Substitution.$fSyntacticAccPreOpenAcc
                           (\ @ a'
                              ($dArrays1 :: Data.Array.Accelerate.Array.Sugar.Arrays a')
                              (eta4 :: Data.Array.Accelerate.AST.Idx (aenv, s) a') ->
                            case eta4 of wild1 {
                              Data.Array.Accelerate.AST.ZeroIdx env cobox1
                              -> wild
                                   `cast`
                                 (Data.Array.Accelerate.AST.PreOpenAcc
                                    <acc>_R <aenv>_N (Nth:1 cobox1))_R
                              Data.Array.Accelerate.AST.SuccIdx env s1 cobox1 idx
                              -> (Data.Array.Accelerate.AST.Avar @ acc @ env @ a' $dArrays1 idx)
                                   `cast`
                                 (Data.Array.Accelerate.AST.PreOpenAcc
                                    <acc>_R (Nth:0 (Sym cobox1)) <a'>_N)_R })
                             `cast`
                           (forall (a' :: <*>_N).
                            <Data.Array.Accelerate.Array.Sugar.Arrays a'>_R
                            ->_R <Data.Array.Accelerate.AST.Idx (aenv, s) a'>_R
                            ->_R (Data.Array.Accelerate.AST.PreOpenAcc
                                    (Sub (Sym (Data.Array.Accelerate.Trafo.Substitution.D:R:AccCloPreOpenAcc[0]
                                                   <acc>_N)))
                                    <aenv>_N
                                    <a'>_N)_R)
                           (eta @ (aenv, s) @ t eta3)) } }) -}
56cbffc359a72d05e80e4126ab8a700b
  shrinkPreAcc ::
    Data.Array.Accelerate.Trafo.Shrink.ShrinkAcc acc
    -> Data.Array.Accelerate.Trafo.Shrink.ReduceAcc acc
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv arrs
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv arrs
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><L,C(C1(U))><S,1*U> -}
0cee25bd5b29d9f3532725e7f7267f42
  usesOfExp ::
    Data.Array.Accelerate.AST.Idx env s
    -> Data.Array.Accelerate.AST.PreOpenExp acc env aenv t
    -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ (acc :: GHC.Types.* -> GHC.Types.* -> GHC.Types.*)
                   @ env
                   @ aenv
                   @ s
                   @ t
                   (w :: Data.Array.Accelerate.AST.Idx env s)
                   (w1 :: Data.Array.Accelerate.AST.PreOpenExp acc env aenv t) ->
                 case Data.Array.Accelerate.Trafo.Shrink.$wusesOfExp
                        @ acc
                        @ env
                        @ aenv
                        @ s
                        @ t
                        w
                        w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
36584686432c10701aeb8324efcd42ea
  usesOfPreAcc ::
    GHC.Types.Bool
    -> Data.Array.Accelerate.Trafo.Shrink.UsesOfAcc acc
    -> Data.Array.Accelerate.AST.Idx aenv s
    -> Data.Array.Accelerate.AST.PreOpenAcc acc aenv t
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,C(C1(U))><L,U> -}
instance Data.Array.Accelerate.Trafo.Shrink.Shrink [Data.Array.Accelerate.AST.PreOpenExp]
  = Data.Array.Accelerate.Trafo.Shrink.$fShrinkPreOpenExp
instance Data.Array.Accelerate.Trafo.Shrink.Shrink [Data.Array.Accelerate.AST.PreOpenFun]
  = Data.Array.Accelerate.Trafo.Shrink.$fShrinkPreOpenFun
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

