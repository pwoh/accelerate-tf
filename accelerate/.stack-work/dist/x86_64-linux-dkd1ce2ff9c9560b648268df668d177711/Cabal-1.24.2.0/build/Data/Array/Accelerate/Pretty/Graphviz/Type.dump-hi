
==================== FINAL INTERFACE ====================
2017-08-29 05:26:53.975707 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Pretty.Graphviz.Type 8002
  interface hash: b4050b61d77d79e838b589df72e5ff11
  ABI hash: a76ff553665b62c8638b260f9275d644
  export-list hash: a2d91d49bf2eb9a1e34adc7dffe19362
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8b2ef338a567ab9e40c673620b014309
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.Array.Accelerate.Pretty.Graphviz.Type.ppEdge
  Data.Array.Accelerate.Pretty.Graphviz.Type.ppGraph
  Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode
  Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeId
  Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree
  Data.Array.Accelerate.Pretty.Graphviz.Type.ppStatement
  Data.Array.Accelerate.Pretty.Graphviz.Type.ppSubgraph
  Data.Array.Accelerate.Pretty.Graphviz.Type.ppVertex
  Data.Array.Accelerate.Pretty.Graphviz.Type.Edge{Data.Array.Accelerate.Pretty.Graphviz.Type.Edge}
  Data.Array.Accelerate.Pretty.Graphviz.Type.Graph{Data.Array.Accelerate.Pretty.Graphviz.Type.Graph}
  Data.Array.Accelerate.Pretty.Graphviz.Type.Label
  Data.Array.Accelerate.Pretty.Graphviz.Type.Node{Data.Array.Accelerate.Pretty.Graphviz.Type.Node}
  Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId{Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId}
  Data.Array.Accelerate.Pretty.Graphviz.Type.Port
  Data.Array.Accelerate.Pretty.Graphviz.Type.Statement{Data.Array.Accelerate.Pretty.Graphviz.Type.E Data.Array.Accelerate.Pretty.Graphviz.Type.G Data.Array.Accelerate.Pretty.Graphviz.Type.N}
  Data.Array.Accelerate.Pretty.Graphviz.Type.Tree{Data.Array.Accelerate.Pretty.Graphviz.Type.Forest Data.Array.Accelerate.Pretty.Graphviz.Type.Leaf}
  Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex{Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol*
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable 27b03ff780e9d73195c5aaa1719f6919
import  -/  hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Class a1b222b41dee000240e3f24bda9d56d9
import  -/  pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint abe8aeb00d775221281f89090d9fbe2a
import  -/  pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ 47c87fc2a972d58594fb2a8a503ead58
import  -/  pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ 5fd6ee2fcb3f4a1e810ed36714963e44
013d0295203ef1076b8b2216e96ac311
  $fEqNodeId ::
    GHC.Classes.Eq Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fEqNodeId_$c==
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fEqNodeId_$c/= -}
013d0295203ef1076b8b2216e96ac311
  $fEqNodeId_$c/= ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId)
                   (b :: Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId) ->
                 case a of wild { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId dt ->
                 case b of wild1 { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId dt1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# dt dt1) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
013d0295203ef1076b8b2216e96ac311
  $fEqNodeId_$c== ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId)
                   (ds1 :: Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId) ->
                 case ds of wild { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId dt ->
                 case ds1 of wild1 { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId dt1 ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# dt dt1) } }) -}
5acae7042a0b429cdbdf814f5912f6e0
  $fEqVertex ::
    GHC.Classes.Eq Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fEqVertex_$c==
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fEqVertex_$c/= -}
5acae7042a0b429cdbdf814f5912f6e0
  $fEqVertex_$c/= ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex)
                   (b :: Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex) ->
                 case Data.Array.Accelerate.Pretty.Graphviz.Type.$fEqVertex_$c==
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5acae7042a0b429cdbdf814f5912f6e0
  $fEqVertex_$c== ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U)><S(S(S)L),1*U(1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex)
                   (w1 :: Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex) ->
                 case w of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex ww1 ww2 ->
                 case ww1 of ww3 { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId ww4 ->
                 case w1 of ww5 { Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex ww6 ww7 ->
                 case ww6 of ww8 { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId ww9 ->
                 Data.Array.Accelerate.Pretty.Graphviz.Type.$w$c==
                   ww4
                   ww2
                   ww9
                   ww7 } } } }) -}
b76eb97e89c51c1a64444c49b91a53b7
  $fFunctorTree ::
    GHC.Base.Functor Data.Array.Accelerate.Pretty.Graphviz.Type.Tree
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Pretty.Graphviz.Type.Tree
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fFunctorTree_$cfmap
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fFunctorTree_$c<$ -}
b76eb97e89c51c1a64444c49b91a53b7
  $fFunctorTree_$c<$ ::
    a
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.Tree b
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.Tree a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (eta :: a)
                   (eta1 :: Data.Array.Accelerate.Pretty.Graphviz.Type.Tree b) ->
                 Data.Array.Accelerate.Pretty.Graphviz.Type.$fFunctorTree_$cfmap
                   @ b
                   @ a
                   (\ (ds :: b) -> eta)
                   eta1) -}
b76eb97e89c51c1a64444c49b91a53b7
  $fFunctorTree_$cfmap ::
    (a -> b)
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.Tree a
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.Tree b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
013d0295203ef1076b8b2216e96ac311
  $fHashableNodeId ::
    Data.Hashable.Class.Hashable
      Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fHashableNodeId_$chashWithSalt
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fHashableNodeId_$chash -}
013d0295203ef1076b8b2216e96ac311
  $fHashableNodeId_$chash ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.Array.Accelerate.Pretty.Graphviz.Type.$fHashableNodeId_$chashWithSalt
                   Data.Hashable.Class.defaultSalt) -}
013d0295203ef1076b8b2216e96ac311
  $fHashableNodeId_$chashWithSalt ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
    -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (salt :: GHC.Types.Int)
                   (ds :: Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId) ->
                 case ds of wild { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId dt ->
                 case salt of wild1 { GHC.Types.I# x ->
                 GHC.Types.I# (GHC.Prim.xorI# (GHC.Prim.*# x 16777619#) dt) } }) -}
34a982a49eb2afcbac7df3b42d42f45f
  $fShowGraph ::
    GHC.Show.Show Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_$cshowsPrec
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_$cshow
                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_$cshowList -}
34a982a49eb2afcbac7df3b42d42f45f
  $fShowGraph1 ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (x :: Data.Array.Accelerate.Pretty.Graphviz.Type.Graph)
                   (s1 :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Text.PrettyPrint.Annotated.HughesPJ.fullRenderAnn
                      @ ()
                      @ GHC.Base.String
                      Text.PrettyPrint.Annotated.HughesPJ.PageMode
                      Text.PrettyPrint.Annotated.HughesPJ.render3
                      Text.PrettyPrint.Annotated.HughesPJ.render2
                      Text.PrettyPrint.HughesPJ.$fEqDoc1
                      (GHC.Types.[] @ GHC.Types.Char)
                      (case x of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.Graph ww1 ww2 ->
                       (Data.Array.Accelerate.Pretty.Graphviz.Type.$wppGraph ww1 ww2)
                         `cast`
                       (Text.PrettyPrint.HughesPJ.N:Doc[0]) }))
                   s1) -}
e563f0de2e1d9fb12d7723cd741c21f2
  $fShowGraph2 :: [Text.PrettyPrint.Annotated.HughesPJ.Doc ()]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Text.PrettyPrint.Annotated.HughesPJ.Doc ())
                   Text.PrettyPrint.HughesPJ.braces1
                   (GHC.Types.[] @ (Text.PrettyPrint.Annotated.HughesPJ.Doc ()))) -}
4de79b866bc2c750b0cb62c9c018df68
  $fShowGraph3 :: Text.PrettyPrint.HughesPJ.Doc
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_s
                        0# of ww2 { DEFAULT ->
                 (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                    @ ()
                    (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                       @ ()
                       Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph4
                       ww2)
                    (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                   `cast`
                 (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }) -}
ce8d5983fc41890ffafe47b172699997
  $fShowGraph4 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Str
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_s) -}
c403b13d7aa17ae401d88c6f6dd6494b
  $fShowGraph5 :: Text.PrettyPrint.HughesPJ.Doc
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_s1
                        0# of ww2 { DEFAULT ->
                 (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                    @ ()
                    (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                       @ ()
                       Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph6
                       ww2)
                    (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                   `cast`
                 (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }) -}
b7059c047ac72f4ad6367ae9babe805b
  $fShowGraph6 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Str
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_s1) -}
99c62e35aaecf2752a9965308e0753de
  $fShowGraph7 :: Text.PrettyPrint.HughesPJ.Doc
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_s2
                        0# of ww2 { DEFAULT ->
                 (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                    @ ()
                    (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                       @ ()
                       Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph8
                       ww2)
                    (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                   `cast`
                 (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }) -}
9a850b7711904544e045ef9e807f0c75
  $fShowGraph8 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Str
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_s2) -}
34a982a49eb2afcbac7df3b42d42f45f
  $fShowGraph_$cshow ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Graph -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,1*U)>,
     Unfolding: (\ (x :: Data.Array.Accelerate.Pretty.Graphviz.Type.Graph) ->
                 Text.PrettyPrint.Annotated.HughesPJ.fullRenderAnn
                   @ ()
                   @ GHC.Base.String
                   Text.PrettyPrint.Annotated.HughesPJ.PageMode
                   Text.PrettyPrint.Annotated.HughesPJ.render3
                   Text.PrettyPrint.Annotated.HughesPJ.render2
                   Text.PrettyPrint.HughesPJ.$fEqDoc1
                   (GHC.Types.[] @ GHC.Types.Char)
                   (Data.Array.Accelerate.Pretty.Graphviz.Type.ppGraph x)
                     `cast`
                   (Text.PrettyPrint.HughesPJ.N:Doc[0])) -}
34a982a49eb2afcbac7df3b42d42f45f
  $fShowGraph_$cshowList ::
    [Data.Array.Accelerate.Pretty.Graphviz.Type.Graph]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Data.Array.Accelerate.Pretty.Graphviz.Type.Graph])
                   (s1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph1
                   ls
                   s1) -}
34a982a49eb2afcbac7df3b42d42f45f
  $fShowGraph_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U(U,1*U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Data.Array.Accelerate.Pretty.Graphviz.Type.Graph)
                   (w2 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Pretty.Graphviz.Type.$w$cshowsPrec w1 w2) -}
4b504db99e70eddb80868590a6027b94
  $fShowGraph_$sgo ::
    Text.PrettyPrint.HughesPJ.Doc
    -> [Text.PrettyPrint.HughesPJ.Doc]
    -> [Text.PrettyPrint.Annotated.HughesPJ.Doc ()]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U> -}
b5165492a7a04f93e5a149654f3a57b4
  $fShowGraph_s :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "node  [shape=record,fontsize=10]"#) -}
3cab5e2dbd5551b115a7547d6b489bda
  $fShowGraph_s1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   "graph [compound=true]"#) -}
474ad4f2de037db2ba7992c779230f06
  $fShowGraph_s2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "digraph"#) -}
94daa2dd55aa908089e2b22ab5580656
  $tc'E :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9641505795070291080##
                   11098342947196038234##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'E1) -}
97a0cceb871b0b16ebd77d3157dd944f
  $tc'E1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'E"#) -}
4050e5032ef7305e8d6346e4bc0ffa8a
  $tc'Edge :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17847239920372750994##
                   1117445528044707683##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'Edge1) -}
bda3d3ef51339e797cce855132c8ee80
  $tc'Edge1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Edge"#) -}
7616aaffce09f4266ff3e58f00ced2c5
  $tc'Forest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2179376921680753731##
                   12299577397512703283##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'Forest1) -}
9d06320709c28a8782d6b7257cd18a59
  $tc'Forest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Forest"#) -}
6e93054bd3b35c48d73234600e992268
  $tc'G :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18103443171536379673##
                   1986399788367926063##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'G1) -}
59a61089d620845dfaf8f08333000f9b
  $tc'G1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'G"#) -}
cdc582fe038a697580ffddf84ead0e3e
  $tc'Graph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4053432435597614269##
                   13224464851860889527##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'Graph1) -}
31a3daef41ffba9f01564e0f7de26a32
  $tc'Graph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Graph"#) -}
fa422ca26f6a8776aa8f2dbc3aae27b0
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8011173583249041625##
                   16782319990302993629##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'Leaf1) -}
1d28c4114205dcd0b1d1a66618d23ec4
  $tc'Leaf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Leaf"#) -}
abe85bdb779ecdae12b47243b8904fea
  $tc'N :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1759269036620044137##
                   9966603809702239084##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'N1) -}
78ea3885b1db3f18bcc0d6c47c3083a5
  $tc'N1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'N"#) -}
891cf012cea766e89117c146d59bb9b5
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17560235346722215121##
                   11754265167316390920##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'Node1) -}
344483c7e225ff8180fcfa5b52d19a92
  $tc'Node1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Node"#) -}
518da2cbfa31e551997d9b174dff3327
  $tc'NodeId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15642971115789509100##
                   416786332161603183##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'NodeId1) -}
602984d9095f686473907c89241662be
  $tc'NodeId1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NodeId"#) -}
a21b85567a319a9c4c34dae33d8cd619
  $tc'Vertex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8381530424552008525##
                   1337422005597994473##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tc'Vertex1) -}
116023c46f2795994ecd8a908c41d75a
  $tc'Vertex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Vertex"#) -}
29fb80d022374d551b7a5420359f8e0c
  $tcEdge :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4892513282430375890##
                   6651005764939681675##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tcEdge1) -}
ec0a5e6870b287c4fa7f1b131e74fa41
  $tcEdge1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Edge"#) -}
fb517dc6958c99e16ff3af1469f55232
  $tcGraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3621659522252741769##
                   15370476286453776282##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tcGraph1) -}
8f8834058a807e12a57d22f9f9c2fad0
  $tcGraph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Graph"#) -}
0d117809fcb3931adfab2a8ddf0024bf
  $tcNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12136820826365915298##
                   12645671290635561663##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tcNode1) -}
262c32355c2391f7d1588dd6715dd747
  $tcNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Node"#) -}
f5bd6def837111479e0a8f303b3ad55e
  $tcNodeId :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6098269878403524188##
                   1592199635720332515##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tcNodeId1) -}
93998a978f199a1fa07da4b17f3c6ed8
  $tcNodeId1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "NodeId"#) -}
f45327fe93c1e401fd2efd8c13e4252d
  $tcStatement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7459247186681405735##
                   9188355736937822279##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tcStatement1) -}
248000f77de9100c404d819455eb7f59
  $tcStatement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Statement"#) -}
162bb5a437f302868490e0c0e4a0c72b
  $tcTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12400146775037742129##
                   8339121514519369078##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tcTree1) -}
0cfc940c02302f69a03d9d1f3d8fcd5a
  $tcTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Tree"#) -}
30fd483a275f080e2556516d862a765a
  $tcVertex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1554216612314867008##
                   3830811299655556173##
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$tcVertex1) -}
2f35ddba6701d10f9b324e52246b19ab
  $tcVertex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Vertex"#) -}
8d1c09a0abcca8703799840a547627a5
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule2
                   Data.Array.Accelerate.Pretty.Graphviz.Type.$trModule1) -}
47d7288d3e127dbf02c2dd3dff7ea331
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Pretty.Graphviz.Type"#) -}
42045d265d208413cace9b65f5e90fd8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
c6da6e9ae95af9c0045e7f5e06edde2e
  $w$c== ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,1*U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe
                             Data.Array.Accelerate.Pretty.Graphviz.Type.Port)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Base.Maybe
                             Data.Array.Accelerate.Pretty.Graphviz.Type.Port) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww ww2) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 {
                        GHC.Base.Nothing
                        -> case ww3 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.True
                             GHC.Base.Just ipv -> GHC.Types.False }
                        GHC.Base.Just a1
                        -> case ww3 of wild2 {
                             GHC.Base.Nothing -> GHC.Types.False
                             GHC.Base.Just b1 -> GHC.Base.eqString a1 b1 } } }) -}
34a982a49eb2afcbac7df3b42d42f45f
  $w$cshowsPrec ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U(U,1*U)><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Array.Accelerate.Pretty.Graphviz.Type.Graph)
                   (w1 :: GHC.Base.String) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (Text.PrettyPrint.Annotated.HughesPJ.fullRenderAnn
                      @ ()
                      @ GHC.Base.String
                      Text.PrettyPrint.Annotated.HughesPJ.PageMode
                      Text.PrettyPrint.Annotated.HughesPJ.render3
                      Text.PrettyPrint.Annotated.HughesPJ.render2
                      Text.PrettyPrint.HughesPJ.$fEqDoc1
                      (GHC.Types.[] @ GHC.Types.Char)
                      (case w of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.Graph ww1 ww2 ->
                       (Data.Array.Accelerate.Pretty.Graphviz.Type.$wppGraph ww1 ww2)
                         `cast`
                       (Text.PrettyPrint.HughesPJ.N:Doc[0]) }))
                   w1) -}
7d0ded2ef9ba89a11398bc8284ec83b7
  $wppEdge ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe
                             Data.Array.Accelerate.Pretty.Graphviz.Type.Port)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Base.Maybe
                             Data.Array.Accelerate.Pretty.Graphviz.Type.Port) ->
                 let {
                   $j :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
                         -> Text.PrettyPrint.HughesPJ.Doc
                     {- Arity: 1 -}
                   = \ (wild :: Text.PrettyPrint.Annotated.HughesPJ.Doc
                                  ())[OneShot] ->
                     case Data.Array.Accelerate.Pretty.Graphviz.Type.ppEdge3
                            `cast`
                          (Text.PrettyPrint.HughesPJ.N:Doc[0]) of wild1 {
                       DEFAULT
                       -> case ww1 of wild2 {
                            GHC.Base.Nothing
                            -> case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                                      ww of ww4 { (#,#) ww5 ww6 ->
                               (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                  @ ()
                                  (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                     @ ()
                                     (Text.PrettyPrint.Annotated.HughesPJ.TextBeside @ () ww5 ww6)
                                     GHC.Types.True
                                     wild1)
                                  GHC.Types.True
                                  wild)
                                 `cast`
                               (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }
                            GHC.Base.Just x
                            -> case GHC.List.$wlenAcc @ GHC.Types.Char x 0# of ww4 { DEFAULT ->
                               case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                                      ww of ww5 { (#,#) ww6 ww7 ->
                               (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                  @ ()
                                  (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                     @ ()
                                     (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                        @ ()
                                        (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                           @ ()
                                           ww6
                                           ww7)
                                        GHC.Types.False
                                        (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                           @ ()
                                           Text.PrettyPrint.HughesPJ.colon1
                                           GHC.Types.False
                                           (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                              @ ()
                                              (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                                 @ ()
                                                 (Text.PrettyPrint.Annotated.HughesPJ.Str x)
                                                 ww4)
                                              (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))))
                                     GHC.Types.True
                                     wild1)
                                  GHC.Types.True
                                  wild)
                                 `cast`
                               (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } } }
                       Text.PrettyPrint.Annotated.HughesPJ.Empty
                       -> case ww1 of wild2 {
                            GHC.Base.Nothing
                            -> case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                                      ww of ww4 { (#,#) ww5 ww6 ->
                               (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                  @ ()
                                  (Text.PrettyPrint.Annotated.HughesPJ.TextBeside @ () ww5 ww6)
                                  GHC.Types.True
                                  wild)
                                 `cast`
                               (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }
                            GHC.Base.Just x
                            -> case GHC.List.$wlenAcc @ GHC.Types.Char x 0# of ww4 { DEFAULT ->
                               case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                                      ww of ww5 { (#,#) ww6 ww7 ->
                               (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                  @ ()
                                  (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                     @ ()
                                     (Text.PrettyPrint.Annotated.HughesPJ.TextBeside @ () ww6 ww7)
                                     GHC.Types.False
                                     (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                        @ ()
                                        Text.PrettyPrint.HughesPJ.colon1
                                        GHC.Types.False
                                        (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                           @ ()
                                           (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                              @ ()
                                              (Text.PrettyPrint.Annotated.HughesPJ.Str x)
                                              ww4)
                                           (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))))
                                  GHC.Types.True
                                  wild)
                                 `cast`
                               (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } } } }
                 } in
                 case ww3 of wild {
                   GHC.Base.Nothing
                   -> case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                             ww2 of ww4 { (#,#) ww5 ww6 ->
                      $j (Text.PrettyPrint.Annotated.HughesPJ.TextBeside @ () ww5 ww6) }
                   GHC.Base.Just x
                   -> case GHC.List.$wlenAcc @ GHC.Types.Char x 0# of ww4 { DEFAULT ->
                      case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                             ww2 of ww5 { (#,#) ww6 ww7 ->
                      $j
                        (Text.PrettyPrint.Annotated.HughesPJ.Beside
                           @ ()
                           (Text.PrettyPrint.Annotated.HughesPJ.TextBeside @ () ww6 ww7)
                           GHC.Types.False
                           (Text.PrettyPrint.Annotated.HughesPJ.Beside
                              @ ()
                              Text.PrettyPrint.HughesPJ.colon1
                              GHC.Types.False
                              (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                 @ ()
                                 (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                    @ ()
                                    (Text.PrettyPrint.Annotated.HughesPJ.Str x)
                                    ww4)
                                 (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ())))) } } }) -}
34a982a49eb2afcbac7df3b42d42f45f
  $wppGraph ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Label
    -> [Data.Array.Accelerate.Pretty.Graphviz.Type.Statement]
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Array.Accelerate.Pretty.Graphviz.Type.Label)
                   (ww1 :: [Data.Array.Accelerate.Pretty.Graphviz.Type.Statement]) ->
                 case Text.PrettyPrint.Annotated.HughesPJ.$wreduceVert
                        @ ()
                        (Text.PrettyPrint.Annotated.HughesPJ.vcat1
                           @ ()
                           (GHC.Types.:
                              @ (Text.PrettyPrint.Annotated.HughesPJ.Doc ())
                              (case GHC.List.$wlenAcc @ GHC.Types.Char ww 0# of ww2 { DEFAULT ->
                               case Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph7
                                      `cast`
                                    (Text.PrettyPrint.HughesPJ.N:Doc[0]) of wild1 {
                                 DEFAULT
                                 -> Text.PrettyPrint.Annotated.HughesPJ.Beside
                                      @ ()
                                      (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                         @ ()
                                         wild1
                                         GHC.Types.True
                                         (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                            @ ()
                                            (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                               @ ()
                                               (Text.PrettyPrint.Annotated.HughesPJ.Str ww)
                                               ww2)
                                            (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ())))
                                      GHC.Types.True
                                      Text.PrettyPrint.HughesPJ.braces4
                                 Text.PrettyPrint.Annotated.HughesPJ.Empty
                                 -> Text.PrettyPrint.Annotated.HughesPJ.Beside
                                      @ ()
                                      (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                         @ ()
                                         (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                            @ ()
                                            (Text.PrettyPrint.Annotated.HughesPJ.Str ww)
                                            ww2)
                                         (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                                      GHC.Types.True
                                      Text.PrettyPrint.HughesPJ.braces4 } })
                              (GHC.Types.:
                                 @ (Text.PrettyPrint.Annotated.HughesPJ.Doc ())
                                 (case Text.PrettyPrint.Annotated.HughesPJ.$wreduceVert
                                         @ ()
                                         (Text.PrettyPrint.Annotated.HughesPJ.vcat1
                                            @ ()
                                            (Text.PrettyPrint.Annotated.HughesPJ.punctuate
                                               @ ()
                                               Text.PrettyPrint.HughesPJ.semi1
                                               (Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph_$sgo
                                                  Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph5
                                                  (GHC.Types.:
                                                     @ Text.PrettyPrint.HughesPJ.Doc
                                                     Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph3
                                                     (GHC.Base.map
                                                        @ Data.Array.Accelerate.Pretty.Graphviz.Type.Statement
                                                        @ Text.PrettyPrint.HughesPJ.Doc
                                                        Data.Array.Accelerate.Pretty.Graphviz.Type.ppStatement
                                                        ww1))))) of ww2 { (#,#) ww3 ww4 ->
                                  Text.PrettyPrint.Annotated.HughesPJ.$wmkNest
                                    @ ()
                                    4#
                                    (Text.PrettyPrint.Annotated.HughesPJ.reduceDoc @ () ww4) })
                                 Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph2))) of ww2 { (#,#) ww3 ww4 ->
                 ww4 `cast` (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }) -}
8d36482803884e0c114a5099d1f03b76
  $wppNode ::
    GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Label
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
    -> Data.Array.Accelerate.Pretty.Graphviz.Type.Tree
         (GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port,
          Text.PrettyPrint.HughesPJ.Doc)
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Data.Array.Accelerate.Pretty.Graphviz.Type.Label)
                   (ww1 :: Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId)
                   (ww2 :: Data.Array.Accelerate.Pretty.Graphviz.Type.Tree
                             (GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port,
                              Text.PrettyPrint.HughesPJ.Doc)) ->
                 case Text.PrettyPrint.Annotated.HughesPJ.$wreduceHoriz
                        @ ()
                        (Text.PrettyPrint.Annotated.HughesPJ.hcat1
                           @ ()
                           (GHC.Types.:
                              @ (Text.PrettyPrint.Annotated.HughesPJ.Doc ())
                              (Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeId ww1)
                                `cast`
                              (Text.PrettyPrint.HughesPJ.N:Doc[0])
                              (GHC.Types.:
                                 @ (Text.PrettyPrint.Annotated.HughesPJ.Doc ())
                                 (case Text.PrettyPrint.Annotated.HughesPJ.$wreduceHoriz
                                         @ ()
                                         (Text.PrettyPrint.Annotated.HughesPJ.hcat1
                                            @ ()
                                            (Text.PrettyPrint.Annotated.HughesPJ.punctuate
                                               @ ()
                                               Text.PrettyPrint.HughesPJ.comma1
                                               (Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_go
                                                  (Data.Maybe.catMaybes1
                                                     @ Text.PrettyPrint.HughesPJ.Doc
                                                     (GHC.Types.:
                                                        @ (GHC.Base.Maybe
                                                             Text.PrettyPrint.HughesPJ.Doc)
                                                        (case ww of wild {
                                                           GHC.Base.Nothing
                                                           -> GHC.Base.Nothing
                                                                @ Text.PrettyPrint.HughesPJ.Doc
                                                           GHC.Base.Just x
                                                           -> GHC.Base.Just
                                                                @ Text.PrettyPrint.HughesPJ.Doc
                                                                (case GHC.List.$wlenAcc
                                                                        @ GHC.Types.Char
                                                                        x
                                                                        0# of ww3 { DEFAULT ->
                                                                 case Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_p1 of wild1 {
                                                                   DEFAULT
                                                                   -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                         @ ()
                                                                         Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode7
                                                                         GHC.Types.False
                                                                         (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                            @ ()
                                                                            (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                               @ ()
                                                                               Text.PrettyPrint.HughesPJ.doubleQuotes1
                                                                               GHC.Types.False
                                                                               (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                                                                  @ ()
                                                                                  (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                                                                     @ ()
                                                                                     (Text.PrettyPrint.Annotated.HughesPJ.Str
                                                                                        x)
                                                                                     ww3)
                                                                                  (Text.PrettyPrint.Annotated.HughesPJ.Empty
                                                                                     @ ())))
                                                                            GHC.Types.False
                                                                            Text.PrettyPrint.HughesPJ.doubleQuotes1))
                                                                        `cast`
                                                                      (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                                                                   Text.PrettyPrint.Annotated.HughesPJ.Empty
                                                                   -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                         @ ()
                                                                         Text.PrettyPrint.HughesPJ.equals1
                                                                         GHC.Types.False
                                                                         (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                            @ ()
                                                                            (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                               @ ()
                                                                               Text.PrettyPrint.HughesPJ.doubleQuotes1
                                                                               GHC.Types.False
                                                                               (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                                                                  @ ()
                                                                                  (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                                                                     @ ()
                                                                                     (Text.PrettyPrint.Annotated.HughesPJ.Str
                                                                                        x)
                                                                                     ww3)
                                                                                  (Text.PrettyPrint.Annotated.HughesPJ.Empty
                                                                                     @ ())))
                                                                            GHC.Types.False
                                                                            Text.PrettyPrint.HughesPJ.doubleQuotes1))
                                                                        `cast`
                                                                      (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } }) })
                                                        (GHC.Types.:
                                                           @ (GHC.Base.Maybe
                                                                Text.PrettyPrint.HughesPJ.Doc)
                                                           (GHC.Base.Just
                                                              @ Text.PrettyPrint.HughesPJ.Doc
                                                              (case (Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree
                                                                       ww2)
                                                                      `cast`
                                                                    (Text.PrettyPrint.HughesPJ.N:Doc[0]) of wild {
                                                                 DEFAULT
                                                                 -> case Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_p of wild1 {
                                                                      DEFAULT
                                                                      -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                            @ ()
                                                                            Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode5
                                                                            GHC.Types.False
                                                                            (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                               @ ()
                                                                               (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                                  @ ()
                                                                                  Text.PrettyPrint.HughesPJ.doubleQuotes1
                                                                                  GHC.Types.False
                                                                                  wild)
                                                                               GHC.Types.False
                                                                               Text.PrettyPrint.HughesPJ.doubleQuotes1))
                                                                           `cast`
                                                                         (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                                                                      Text.PrettyPrint.Annotated.HughesPJ.Empty
                                                                      -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                            @ ()
                                                                            Text.PrettyPrint.HughesPJ.equals1
                                                                            GHC.Types.False
                                                                            (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                               @ ()
                                                                               (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                                                  @ ()
                                                                                  Text.PrettyPrint.HughesPJ.doubleQuotes1
                                                                                  GHC.Types.False
                                                                                  wild)
                                                                               GHC.Types.False
                                                                               Text.PrettyPrint.HughesPJ.doubleQuotes1))
                                                                           `cast`
                                                                         (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }
                                                                 Text.PrettyPrint.Annotated.HughesPJ.Empty
                                                                 -> case Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_p of wild1 {
                                                                      DEFAULT
                                                                      -> Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode4
                                                                           `cast`
                                                                         (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                                                                      Text.PrettyPrint.Annotated.HughesPJ.Empty
                                                                      -> Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode2
                                                                           `cast`
                                                                         (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } }))
                                                           (GHC.Types.[]
                                                              @ (GHC.Base.Maybe
                                                                   Text.PrettyPrint.HughesPJ.Doc)))))))) of ww3 { (#,#) ww4 ww5 ->
                                  case ww5 of wild {
                                    DEFAULT
                                    -> Text.PrettyPrint.Annotated.HughesPJ.Beside
                                         @ ()
                                         (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                            @ ()
                                            Text.PrettyPrint.HughesPJ.brackets4
                                            GHC.Types.False
                                            wild)
                                         GHC.Types.False
                                         Text.PrettyPrint.HughesPJ.brackets1
                                    Text.PrettyPrint.Annotated.HughesPJ.Empty
                                    -> Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode1 } })
                                 (GHC.Types.[]
                                    @ (Text.PrettyPrint.Annotated.HughesPJ.Doc
                                         ()))))) of ww3 { (#,#) ww4 ww5 ->
                 ww5 `cast` (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }) -}
d60f2247cb7ee97e085827b8fce25c78
  $wppNodeId ::
    GHC.Prim.Int#
    -> (# Text.PrettyPrint.Annotated.HughesPJ.AnnotDetails (),
          Text.PrettyPrint.Annotated.HughesPJ.Doc () #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   a1 :: GHC.Types.Int {- Strictness: m -} = GHC.Types.I# ww
                 } in
                 let {
                   s1 :: GHC.Base.String
                   = Data.Array.Accelerate.Pretty.Graphviz.Type.ppEdge2
                       Data.Array.Accelerate.Pretty.Graphviz.Type.ppEdge1
                       (GHC.Types.:
                          @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                          (Text.Printf.$wparseIntFormat @ GHC.Types.Int,
                           \ (w1 :: Text.Printf.FieldFormat) ->
                           case w1 of ww1 { Text.Printf.FieldFormat ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                           case ww8 of ww9 { GHC.Types.C# ww10 ->
                           Text.Printf.$w$sformatInt a1 ww2 ww3 ww4 ww5 ww6 ww7 ww10 } })
                          (GHC.Types.[] @ Text.Printf.UPrintf))
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char s1 0# of ww2 { DEFAULT ->
                 (# Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                      @ ()
                      (Text.PrettyPrint.Annotated.HughesPJ.Str s1)
                      ww2,
                    Text.PrettyPrint.Annotated.HughesPJ.Empty @ () #) }) -}
34a982a49eb2afcbac7df3b42d42f45f
  $wppSubgraph ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Label
    -> [Data.Array.Accelerate.Pretty.Graphviz.Type.Statement]
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0] -}
fc97d60860fb484f3b94358831e52994
  $wppVertex ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe
                             Data.Array.Accelerate.Pretty.Graphviz.Type.Port) ->
                 case ww1 of wild {
                   GHC.Base.Nothing
                   -> case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                             ww of ww2 { (#,#) ww3 ww4 ->
                      (Text.PrettyPrint.Annotated.HughesPJ.TextBeside @ () ww3 ww4)
                        `cast`
                      (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }
                   GHC.Base.Just x
                   -> case GHC.List.$wlenAcc @ GHC.Types.Char x 0# of ww2 { DEFAULT ->
                      case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                             ww of ww3 { (#,#) ww4 ww5 ->
                      (Text.PrettyPrint.Annotated.HughesPJ.Beside
                         @ ()
                         (Text.PrettyPrint.Annotated.HughesPJ.TextBeside @ () ww4 ww5)
                         GHC.Types.False
                         (Text.PrettyPrint.Annotated.HughesPJ.Beside
                            @ ()
                            Text.PrettyPrint.HughesPJ.colon1
                            GHC.Types.False
                            (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                               @ ()
                               (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                  @ ()
                                  (Text.PrettyPrint.Annotated.HughesPJ.Str x)
                                  ww2)
                               (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))))
                        `cast`
                      (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } } }) -}
0da379cef6040c978614b1d0e097a66d
  data Edge
    = Edge Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
           Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
34a982a49eb2afcbac7df3b42d42f45f
  data Graph
    = Graph Data.Array.Accelerate.Pretty.Graphviz.Type.Label
            [Data.Array.Accelerate.Pretty.Graphviz.Type.Statement]
6d4549ed4e413ca9c360072a7a55d7fd
  type Label = GHC.Base.String
33e09ea5fc021af7aefbc8df2dd3af64
  data Node
    = Node (GHC.Base.Maybe
              Data.Array.Accelerate.Pretty.Graphviz.Type.Label)
           Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
           (Data.Array.Accelerate.Pretty.Graphviz.Type.Tree
              (GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port,
               Text.PrettyPrint.HughesPJ.Doc))
013d0295203ef1076b8b2216e96ac311
  data NodeId = NodeId {-# UNPACK #-}GHC.Types.Int
dd9a98a77557ec31d20e3c329469d5b3
  type Port = GHC.Base.String
34a982a49eb2afcbac7df3b42d42f45f
  data Statement
    = N Data.Array.Accelerate.Pretty.Graphviz.Type.Node
    | E Data.Array.Accelerate.Pretty.Graphviz.Type.Edge
    | G Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
b76eb97e89c51c1a64444c49b91a53b7
  data Tree a
    = Leaf a
    | Forest [Data.Array.Accelerate.Pretty.Graphviz.Type.Tree a]
5acae7042a0b429cdbdf814f5912f6e0
  data Vertex
    = Vertex Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
             (GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port)
5a2c919939fd915cec4d885f1c755e72
  ppEdge ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Edge
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1,
     Strictness: <S(S(SS)S(SS)),1*U(1*U(1*U(U),1*U),1*U(1*U(U),1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Pretty.Graphviz.Type.Edge) ->
                 case w of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.Edge ww1 ww2 ->
                 case ww1 of ww3 { Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex ww4 ww5 ->
                 case ww4 of ww6 { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId ww7 ->
                 case ww2 of ww8 { Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex ww9 ww10 ->
                 case ww9 of ww11 { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId ww12 ->
                 Data.Array.Accelerate.Pretty.Graphviz.Type.$wppEdge
                   ww7
                   ww5
                   ww12
                   ww10 } } } } }) -}
e3249fe3da7de0b69780731ec73b1152
  ppEdge1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Node_%#0x"#) -}
4941fb79d181e5e74d9898488cfd9459
  ppEdge2 ::
    GHC.Base.String -> [Text.Printf.UPrintf] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (fmts :: GHC.Base.String)
                   (args :: [Text.Printf.UPrintf]) ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Text.Printf.$fIsCharChar_$cfromChar
                   (Text.Printf.uprintfs
                      fmts
                      (GHC.List.reverse1
                         @ Text.Printf.UPrintf
                         args
                         (GHC.Types.[] @ Text.Printf.UPrintf))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
092c3891c1dd929de0cf86d1096ae4a8
  ppEdge3 :: Text.PrettyPrint.HughesPJ.Doc
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Pretty.Graphviz.Type.ppEdge_s
                        0# of ww2 { DEFAULT ->
                 (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                    @ ()
                    (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                       @ ()
                       Data.Array.Accelerate.Pretty.Graphviz.Type.ppEdge4
                       ww2)
                    (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                   `cast`
                 (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }) -}
b27ec42b602019eb33d4900aa4332e8a
  ppEdge4 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Str
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppEdge_s) -}
9da8601758058d34aa37dab72581acac
  ppEdge_s :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "->"#) -}
34a982a49eb2afcbac7df3b42d42f45f
  ppGraph ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Pretty.Graphviz.Type.Graph) ->
                 case w of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.Graph ww1 ww2 ->
                 Data.Array.Accelerate.Pretty.Graphviz.Type.$wppGraph ww1 ww2 }) -}
c471f2084b0dff282f35f6fdd7689923
  ppNode ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Node
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Pretty.Graphviz.Type.Node) ->
                 case w of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.Node ww1 ww2 ww3 ->
                 Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNode
                   ww1
                   ww2
                   ww3 }) -}
fa7dab5f8ff17e49206f954f917a98c4
  ppNode1 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Beside
                   @ ()
                   Text.PrettyPrint.HughesPJ.brackets4
                   GHC.Types.False
                   Text.PrettyPrint.HughesPJ.brackets1) -}
2df01cafb7a151bc473c8bbc65ad04c0
  ppNode2 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Beside
                   @ ()
                   Text.PrettyPrint.HughesPJ.equals1
                   GHC.Types.False
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode3) -}
c07ad48c3fab37e41da88426c59b50bc
  ppNode3 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Beside
                   @ ()
                   Text.PrettyPrint.HughesPJ.doubleQuotes1
                   GHC.Types.False
                   Text.PrettyPrint.HughesPJ.doubleQuotes1) -}
6232976058d3e8bcceacfea48f0cedf2
  ppNode4 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Beside
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode5
                   GHC.Types.False
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode3) -}
7bd10a4e27695185f1aa2f1dbaabdcfd
  ppNode5 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Beside
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_p
                   GHC.Types.False
                   Text.PrettyPrint.HughesPJ.equals1) -}
b19240ee549b4365ab9472e72e0d79fc
  ppNode6 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Str
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_s) -}
567f0bb33ac5f6c06c9e70acf7677e70
  ppNode7 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Beside
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_p1
                   GHC.Types.False
                   Text.PrettyPrint.HughesPJ.equals1) -}
fc5a7736c2fa0e72f62f0bda197965a2
  ppNode8 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Str
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_s1) -}
f851b0ff8c5df24ffd48b1e42af13b4c
  ppNodeId ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U(U)>m3, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId) ->
                 case w of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId ww1 ->
                 case Data.Array.Accelerate.Pretty.Graphviz.Type.$wppNodeId
                        ww1 of ww2 { (#,#) ww3 ww4 ->
                 (Text.PrettyPrint.Annotated.HughesPJ.TextBeside @ () ww3 ww4)
                   `cast`
                 (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } }) -}
543db2af1c2b6e0336cf6f9054d85a7f
  ppNodeTree ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Tree
      (GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port,
       Text.PrettyPrint.HughesPJ.Doc)
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Array.Accelerate.Pretty.Graphviz.Type.Tree
                            (GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port,
                             Text.PrettyPrint.HughesPJ.Doc)) ->
                 case ds of wild {
                   Data.Array.Accelerate.Pretty.Graphviz.Type.Leaf ds1
                   -> case ds1 of wild1 { (,) port body ->
                      let {
                        p :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
                        = case port of wild2 {
                            GHC.Base.Nothing -> Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()
                            GHC.Base.Just x
                            -> case GHC.List.$wlenAcc @ GHC.Types.Char x 0# of ww2 { DEFAULT ->
                               Text.PrettyPrint.Annotated.HughesPJ.Beside
                                 @ ()
                                 (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                    @ ()
                                    Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree12
                                    GHC.Types.False
                                    (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                       @ ()
                                       (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                          @ ()
                                          (Text.PrettyPrint.Annotated.HughesPJ.Str x)
                                          ww2)
                                       (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ())))
                                 GHC.Types.False
                                 Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree9 } }
                      } in
                      case Data.OldList.lines
                             (Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree_go1
                                (Text.PrettyPrint.Annotated.HughesPJ.fullRenderAnn
                                   @ ()
                                   @ GHC.Base.String
                                   Text.PrettyPrint.Annotated.HughesPJ.PageMode
                                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree8
                                   Text.PrettyPrint.Annotated.HughesPJ.render2
                                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree7
                                   (GHC.Types.[] @ GHC.Types.Char)
                                   body `cast` (Text.PrettyPrint.HughesPJ.N:Doc[0]))) of wild2 {
                        [] -> p `cast` (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                        : x ds2
                        -> case ds2 of wild3 {
                             []
                             -> case GHC.List.$wlenAcc @ GHC.Types.Char x 0# of ww2 { DEFAULT ->
                                case p of wild4 {
                                  DEFAULT
                                  -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                        @ ()
                                        wild4
                                        GHC.Types.False
                                        (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                           @ ()
                                           (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                              @ ()
                                              (Text.PrettyPrint.Annotated.HughesPJ.Str x)
                                              ww2)
                                           (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ())))
                                       `cast`
                                     (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                                  Text.PrettyPrint.Annotated.HughesPJ.Empty
                                  -> (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                        @ ()
                                        (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                           @ ()
                                           (Text.PrettyPrint.Annotated.HughesPJ.Str x)
                                           ww2)
                                        (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                                       `cast`
                                     (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } }
                             : ipv ipv1
                             -> let {
                                  s1 :: GHC.Base.String
                                  = Data.OldList.intercalate_$spoly_go
                                      @ GHC.Types.Char
                                      x
                                      (Data.OldList.prependToAll
                                         @ [GHC.Types.Char]
                                         Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree_s
                                         wild3)
                                } in
                                case GHC.List.$wlenAcc @ GHC.Types.Char s1 0# of ww2 { DEFAULT ->
                                case Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree5
                                       `cast`
                                     (Text.PrettyPrint.HughesPJ.N:Doc[0]) of wild4 {
                                  DEFAULT
                                  -> case p of wild5 {
                                       DEFAULT
                                       -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                             @ ()
                                             wild5
                                             GHC.Types.False
                                             (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                                @ ()
                                                (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                                   @ ()
                                                   (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                                      @ ()
                                                      (Text.PrettyPrint.Annotated.HughesPJ.Str s1)
                                                      ww2)
                                                   (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                                                GHC.Types.False
                                                wild4))
                                            `cast`
                                          (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                                       Text.PrettyPrint.Annotated.HughesPJ.Empty
                                       -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                             @ ()
                                             (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                                @ ()
                                                (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                                   @ ()
                                                   (Text.PrettyPrint.Annotated.HughesPJ.Str s1)
                                                   ww2)
                                                (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                                             GHC.Types.False
                                             wild4)
                                            `cast`
                                          (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }
                                  Text.PrettyPrint.Annotated.HughesPJ.Empty
                                  -> case p of wild5 {
                                       DEFAULT
                                       -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                             @ ()
                                             wild5
                                             GHC.Types.False
                                             (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                                @ ()
                                                (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                                   @ ()
                                                   (Text.PrettyPrint.Annotated.HughesPJ.Str s1)
                                                   ww2)
                                                (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ())))
                                            `cast`
                                          (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                                       Text.PrettyPrint.Annotated.HughesPJ.Empty
                                       -> (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                                             @ ()
                                             (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                                                @ ()
                                                (Text.PrettyPrint.Annotated.HughesPJ.Str s1)
                                                ww2)
                                             (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                                            `cast`
                                          (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } } } } } }
                   Data.Array.Accelerate.Pretty.Graphviz.Type.Forest trees
                   -> case Text.PrettyPrint.Annotated.HughesPJ.$wreduceHoriz
                             @ ()
                             (Text.PrettyPrint.Annotated.HughesPJ.hcat1
                                @ ()
                                (Text.PrettyPrint.Annotated.HughesPJ.punctuate
                                   @ ()
                                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree2
                                   (Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree_go
                                      trees))) of ww { (#,#) ww1 ww2 ->
                      case ww2 of wild1 {
                        DEFAULT
                        -> (Text.PrettyPrint.Annotated.HughesPJ.Beside
                              @ ()
                              (Text.PrettyPrint.Annotated.HughesPJ.Beside
                                 @ ()
                                 Text.PrettyPrint.HughesPJ.braces4
                                 GHC.Types.False
                                 wild1)
                              GHC.Types.False
                              Text.PrettyPrint.HughesPJ.braces1)
                             `cast`
                           (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0]))
                        Text.PrettyPrint.Annotated.HughesPJ.Empty
                        -> Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree1
                             `cast`
                           (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) } } }) -}
ab1f4fff1d0681cce4108fdbd9aab29e
  ppNodeTree1 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Beside
                   @ ()
                   Text.PrettyPrint.HughesPJ.braces4
                   GHC.Types.False
                   Text.PrettyPrint.HughesPJ.braces1) -}
e89f0336b3545df5cad8b579076c6149
  ppNodeTree10 :: Text.PrettyPrint.Annotated.HughesPJ.AnnotDetails ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree11
                   1#) -}
413b4fa7c2e1543691f6e9db271e629a
  ppNodeTree11 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Chr '>'#) -}
2b546d5df5712ce46d4c6c90f21367ea
  ppNodeTree12 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree13
                   (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ())) -}
6435dff8485139250489525e52cb3faf
  ppNodeTree13 :: Text.PrettyPrint.Annotated.HughesPJ.AnnotDetails ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree14
                   1#) -}
4bcf59be1217030e7115713afe97348a
  ppNodeTree14 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Chr '<'#) -}
76c396ca4b79a0203e0d7bc5699a1059
  ppNodeTree2 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree3
                   (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ())) -}
1ce9ed831ee11fe00479adb513769577
  ppNodeTree3 :: Text.PrettyPrint.Annotated.HughesPJ.AnnotDetails ()
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree4
                   1#) -}
b522371cd8e9c3340e9573c6c4d19a57
  ppNodeTree4 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Chr '|'#) -}
9265320d8fbec435c0bbde601cfefd0f
  ppNodeTree5 :: Text.PrettyPrint.HughesPJ.Doc
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree_s
                        0# of ww2 { DEFAULT ->
                 (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                    @ ()
                    (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                       @ ()
                       Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree6
                       ww2)
                    (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()))
                   `cast`
                 (Sym (Text.PrettyPrint.HughesPJ.N:Doc[0])) }) -}
7c2b61d541fef50b2f3b1b2a7aa639c6
  ppNodeTree6 :: Text.PrettyPrint.Annotated.HughesPJ.TextDetails
  {- Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.Str
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree_s) -}
c8d929b7139d338ca3f2524009bfd2ac
  ppNodeTree7 ::
    Text.PrettyPrint.Annotated.HughesPJ.AnnotDetails ()
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Text.PrettyPrint.Annotated.HughesPJ.AnnotDetails
                            ())
                   (eta :: GHC.Base.String)[OneShot] ->
                 case ds of wild {
                   DEFAULT -> eta
                   Text.PrettyPrint.Annotated.HughesPJ.NoAnnot s1 dt1
                   -> case s1 of wild1 {
                        Text.PrettyPrint.Annotated.HughesPJ.Chr dt
                        -> GHC.Types.: @ GHC.Types.Char (GHC.Types.C# dt) eta
                        Text.PrettyPrint.Annotated.HughesPJ.Str s2
                        -> GHC.Base.++ @ GHC.Types.Char s2 eta
                        Text.PrettyPrint.Annotated.HughesPJ.PStr s2
                        -> GHC.Base.++ @ GHC.Types.Char s2 eta } }) -}
faa59eb70795892a1a6f6b76168a2bac
  ppNodeTree8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 200#) -}
7784f935aba7718ce79a46a5d778466d
  ppNodeTree9 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- HasNoCafRefs,
     Unfolding: (Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                   @ ()
                   Data.Array.Accelerate.Pretty.Graphviz.Type.ppNodeTree10
                   (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ())) -}
5ba8fc96f1e4fd9743d82b950ae53f3e
  ppNodeTree_go ::
    [Data.Array.Accelerate.Pretty.Graphviz.Type.Tree
       (GHC.Base.Maybe Data.Array.Accelerate.Pretty.Graphviz.Type.Port,
        Text.PrettyPrint.HughesPJ.Doc)]
    -> [Text.PrettyPrint.Annotated.HughesPJ.Doc ()]
  {- Arity: 1, Strictness: <S,1*U> -}
1ab3037b1dfb67674e159590bc20d7c3
  ppNodeTree_go1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
390a1a6f282156ca0289f0ca4cca9a68
  ppNodeTree_s :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "\\l"#) -}
14eb348773e939170fb3e9aadb0c91d6
  ppNode_go ::
    [Text.PrettyPrint.HughesPJ.Doc]
    -> [Text.PrettyPrint.Annotated.HughesPJ.Doc ()]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
aed9824ebe6eed30111bbe534c2fa743
  ppNode_p :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_s
                        0# of ww2 { DEFAULT ->
                 Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                   @ ()
                   (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                      @ ()
                      Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode6
                      ww2)
                   (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()) }) -}
50387bdff293ad43facac4b0d85c470a
  ppNode_p1 :: Text.PrettyPrint.Annotated.HughesPJ.Doc ()
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode_s1
                        0# of ww2 { DEFAULT ->
                 Text.PrettyPrint.Annotated.HughesPJ.TextBeside
                   @ ()
                   (Text.PrettyPrint.Annotated.HughesPJ.NoAnnot
                      @ ()
                      Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode8
                      ww2)
                   (Text.PrettyPrint.Annotated.HughesPJ.Empty @ ()) }) -}
cb780fb2963a0d0d31ac9b0792e41e6e
  ppNode_s :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "label"#) -}
eff2291c5a91dba6c9e1f48a3357398b
  ppNode_s1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "xlabel"#) -}
34a982a49eb2afcbac7df3b42d42f45f
  ppStatement ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Statement
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Array.Accelerate.Pretty.Graphviz.Type.Statement) ->
                 case ds of wild {
                   Data.Array.Accelerate.Pretty.Graphviz.Type.N n
                   -> Data.Array.Accelerate.Pretty.Graphviz.Type.ppNode n
                   Data.Array.Accelerate.Pretty.Graphviz.Type.E e
                   -> Data.Array.Accelerate.Pretty.Graphviz.Type.ppEdge e
                   Data.Array.Accelerate.Pretty.Graphviz.Type.G g
                   -> Data.Array.Accelerate.Pretty.Graphviz.Type.ppSubgraph g }) -}
34a982a49eb2afcbac7df3b42d42f45f
  ppSubgraph ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Graph
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Pretty.Graphviz.Type.Graph) ->
                 case w of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.Graph ww1 ww2 ->
                 Data.Array.Accelerate.Pretty.Graphviz.Type.$wppSubgraph
                   ww1
                   ww2 }) -}
725fdf582eb5b13c91443924098631bb
  ppVertex ::
    Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex
    -> Text.PrettyPrint.HughesPJ.Doc
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex) ->
                 case w of ww { Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex ww1 ww2 ->
                 case ww1 of ww3 { Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId ww4 ->
                 Data.Array.Accelerate.Pretty.Graphviz.Type.$wppVertex
                   ww4
                   ww2 } }) -}
instance [safe] GHC.Classes.Eq [Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId]
  = Data.Array.Accelerate.Pretty.Graphviz.Type.$fEqNodeId
instance [safe] GHC.Classes.Eq [Data.Array.Accelerate.Pretty.Graphviz.Type.Vertex]
  = Data.Array.Accelerate.Pretty.Graphviz.Type.$fEqVertex
instance [safe] GHC.Base.Functor [Data.Array.Accelerate.Pretty.Graphviz.Type.Tree]
  = Data.Array.Accelerate.Pretty.Graphviz.Type.$fFunctorTree
instance [safe] Data.Hashable.Class.Hashable [Data.Array.Accelerate.Pretty.Graphviz.Type.NodeId]
  = Data.Array.Accelerate.Pretty.Graphviz.Type.$fHashableNodeId
instance [safe] GHC.Show.Show [Data.Array.Accelerate.Pretty.Graphviz.Type.Graph]
  = Data.Array.Accelerate.Pretty.Graphviz.Type.$fShowGraph
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

