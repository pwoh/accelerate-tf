
==================== FINAL INTERFACE ====================
2017-08-29 05:26:57.832327 UTC

interface accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Array.Data [family instance module] 8002
  interface hash: d689256a0f69700c07909865e2ef604d
  ABI hash: 0f7788ba6235b9caff0f10d41744f81c
  export-list hash: 2e401fd3c8bac4bea058169f3641bb3b
  orphan hash: 06ae6b5db08ca305fa6d8a3981448637
  flag hash: 73607d8f0cdbb63f2ffac942864f2b9d
  sig of: Nothing
  used TH splices: True
  where
exports:
  Data.Array.Accelerate.Array.Data.fstArrayData
  Data.Array.Accelerate.Array.Data.pairArrayData
  Data.Array.Accelerate.Array.Data.registerForeignPtrAllocator
  Data.Array.Accelerate.Array.Data.runArrayData
  Data.Array.Accelerate.Array.Data.sndArrayData
  Data.Array.Accelerate.Array.Data.ArrayData
  Data.Array.Accelerate.Array.Data.ArrayElt{Data.Array.Accelerate.Array.Data.ArrayPtrs Data.Array.Accelerate.Array.Data.arrayElt Data.Array.Accelerate.Array.Data.newArrayData Data.Array.Accelerate.Array.Data.ptrsOfArrayData Data.Array.Accelerate.Array.Data.ptrsOfMutableArrayData Data.Array.Accelerate.Array.Data.touchArrayData Data.Array.Accelerate.Array.Data.unsafeFreezeArrayData Data.Array.Accelerate.Array.Data.unsafeIndexArrayData Data.Array.Accelerate.Array.Data.unsafeReadArrayData Data.Array.Accelerate.Array.Data.unsafeWriteArrayData}
  Data.Array.Accelerate.Array.Data.ArrayEltR{Data.Array.Accelerate.Array.Data.ArrayEltRbool Data.Array.Accelerate.Array.Data.ArrayEltRcchar Data.Array.Accelerate.Array.Data.ArrayEltRcdouble Data.Array.Accelerate.Array.Data.ArrayEltRcfloat Data.Array.Accelerate.Array.Data.ArrayEltRchar Data.Array.Accelerate.Array.Data.ArrayEltRcint Data.Array.Accelerate.Array.Data.ArrayEltRcllong Data.Array.Accelerate.Array.Data.ArrayEltRclong Data.Array.Accelerate.Array.Data.ArrayEltRcschar Data.Array.Accelerate.Array.Data.ArrayEltRcshort Data.Array.Accelerate.Array.Data.ArrayEltRcuchar Data.Array.Accelerate.Array.Data.ArrayEltRcuint Data.Array.Accelerate.Array.Data.ArrayEltRcullong Data.Array.Accelerate.Array.Data.ArrayEltRculong Data.Array.Accelerate.Array.Data.ArrayEltRcushort Data.Array.Accelerate.Array.Data.ArrayEltRdouble Data.Array.Accelerate.Array.Data.ArrayEltRfloat Data.Array.Accelerate.Array.Data.ArrayEltRint Data.Array.Accelerate.Array.Data.ArrayEltRint16 Data.Array.Accelerate.Array.Data.ArrayEltRint32 Data.Array.Accelerate.Array.Data.ArrayEltRint64 Data.Array.Accelerate.Array.Data.ArrayEltRint8 Data.Array.Accelerate.Array.Data.ArrayEltRpair Data.Array.Accelerate.Array.Data.ArrayEltRunit Data.Array.Accelerate.Array.Data.ArrayEltRword Data.Array.Accelerate.Array.Data.ArrayEltRword16 Data.Array.Accelerate.Array.Data.ArrayEltRword32 Data.Array.Accelerate.Array.Data.ArrayEltRword64 Data.Array.Accelerate.Array.Data.ArrayEltRword8}
  Data.Array.Accelerate.Array.Data.GArrayData{Data.Array.Accelerate.Array.Data.AD_Bool Data.Array.Accelerate.Array.Data.AD_CChar Data.Array.Accelerate.Array.Data.AD_CDouble Data.Array.Accelerate.Array.Data.AD_CFloat Data.Array.Accelerate.Array.Data.AD_CInt Data.Array.Accelerate.Array.Data.AD_CLLong Data.Array.Accelerate.Array.Data.AD_CLong Data.Array.Accelerate.Array.Data.AD_CSChar Data.Array.Accelerate.Array.Data.AD_CShort Data.Array.Accelerate.Array.Data.AD_CUChar Data.Array.Accelerate.Array.Data.AD_CUInt Data.Array.Accelerate.Array.Data.AD_CULLong Data.Array.Accelerate.Array.Data.AD_CULong Data.Array.Accelerate.Array.Data.AD_CUShort Data.Array.Accelerate.Array.Data.AD_Char Data.Array.Accelerate.Array.Data.AD_Double Data.Array.Accelerate.Array.Data.AD_Float Data.Array.Accelerate.Array.Data.AD_Int Data.Array.Accelerate.Array.Data.AD_Int16 Data.Array.Accelerate.Array.Data.AD_Int32 Data.Array.Accelerate.Array.Data.AD_Int64 Data.Array.Accelerate.Array.Data.AD_Int8 Data.Array.Accelerate.Array.Data.AD_Pair Data.Array.Accelerate.Array.Data.AD_Unit Data.Array.Accelerate.Array.Data.AD_Word Data.Array.Accelerate.Array.Data.AD_Word16 Data.Array.Accelerate.Array.Data.AD_Word32 Data.Array.Accelerate.Array.Data.AD_Word64 Data.Array.Accelerate.Array.Data.AD_Word8}
  Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
  Data.Array.Accelerate.Array.Data.HTYPE_INT
  Data.Array.Accelerate.Array.Data.HTYPE_LONG
  Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
  Data.Array.Accelerate.Array.Data.HTYPE_WORD
  Data.Array.Accelerate.Array.Data.MutableArrayData
module dependencies: Data.Array.Accelerate.Array.Unique
                     Data.Array.Accelerate.Debug.Flags
                     Data.Array.Accelerate.Debug.Monitoring
                     Data.Array.Accelerate.Debug.Trace Data.Array.Accelerate.Error
                     Data.Array.Accelerate.Lifetime Data.Array.Accelerate.Type
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      unique-0@unique-0-9CJQKYGbqiDaFUmoekKeA
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         fclabels-2.0.3.2@fclabels-2.0.3.2-4EezQlp7n1w9uoh5Y3yxAt:Data.Label.Point
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: accelerate-1.0.0.0@accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw:Data.Array.Accelerate.Type
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
import  -/  Data.Array.Accelerate.Array.Unique 90e2b2f850959b7fbd4fd9b5b72b1848
  exports: 1216d67c5ec81a0e89fcee38d45cba1e
  UniqueArray f0af8e3da78e0824d4c0a6abff37a9bb
  newUniqueArray c21c90a405a9a7f6ee0b911689c6806c
  touchUniqueArray d557d0f21570c96bb850f96c85357fbb
  unsafeUniqueArrayPtr e316e2326e3dd4edb7973ca7252c09fe
  withUniqueArrayPtr 8d95f2726b26d87e89f5888fbdff8c91
import  -/  Data.Array.Accelerate.Debug.Flags 4ae65d880031597019ea1d1d62ef661e
  exports: 13ef378da3ed97cd263f65489c45c172
  dump_gc 3f516b9cb45832ff1a83110fbafce5b1
import  -/  Data.Array.Accelerate.Debug.Monitoring c306cb0432a1d9ab3d42c81522d7d428
  exports: 30ceb5925397aaad73f196e20cbd6855
  didAllocateBytesLocal 438952de2eb68454f36df6c77cb0547c
import  -/  Data.Array.Accelerate.Debug.Trace 365190b9829a1554a2d495d3f4fb1682
  exports: fc0e54c6e0326121433c4f1f751ba0d8
  traceIO bf3190e68fbfa59511d56a82757db26c
import  -/  Data.Array.Accelerate.Error 9ed2d4a71009d558f562e118e9d36a23
  exports: f46a01ad5e78f9618f7a91c4ba90bc31
  Internal 354d17f13fa8c5b135052bcadc13dc67
  call 95bf4b02947c8c3e282c15050c022fa9
  doChecks ceda3ca04bd3b8516235aa07ff825eef
  internalCheck b5e5bdf15bb75000e14453e6b2e53ba6
  message 43164dbb4cecc9911948fd9ecaf0a042
import  -/  Data.Array.Accelerate.Type a1c7885f4a79193eaa1f192a9acbec78
  exports: 7aad7ca015788892b1349ebab929b71f
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Bits d707ac81dd0124c7a7fb3234df2c8548
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.IORef 71c87b0b25a8bca3e3f4497725f5e543
import  -/  base-4.9.1.0:Data.Typeable 9257e47d10882145c67c5b489965cfb7
import  -/  base-4.9.1.0:Data.Typeable.Internal 0e9bdefa4325a0112d8e73b5e1e1f85d
import  -/  base-4.9.1.0:Foreign.C.Types bf568ee9a3ec4aa42333a0da5f4345de
import  -/  base-4.9.1.0:Foreign.ForeignPtr a57f95ad34cceecd3d53cb6caf640c90
import  -/  base-4.9.1.0:Foreign.Ptr 436587875917047a95f3be0fc1891fc4
import  -/  base-4.9.1.0:Foreign.Storable 085c8d7f42ceec1dbb4e818f06339b9d
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.ForeignPtr 20e761047d2a09f17f566a747b24664a
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.IORef 306bd532f2f3b000347cbe6316adc20e
import  -/  base-4.9.1.0:GHC.Int e6f85fcab22769385fba2b5fce0acb40
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Ptr 427a6ad9312f04edb98e0f5b7c4e2596
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Word 2f8cb4e909eeef2f95e1563807dd9268
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  base-4.9.1.0:Text.Printf 6701574960cd2af960fec5d940be0c25
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH d856a1f9d606be57026da48a46c8b0a9
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH.Syntax f73a6f51a55e744c097972689232ddf4
e7ec1d5a4336a0a9727e5e8a911d516e
  $dmptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayElt e =>
    Data.Array.Accelerate.Array.Data.MutableArrayData e
    -> GHC.Types.IO (Data.Array.Accelerate.Array.Data.ArrayPtrs e)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(U),A,A,A,A,A,A)><L,U><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, True, False)
                (\ @ e
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt e)
                   (eta :: Data.Array.Accelerate.Array.Data.ArrayData e)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs e)
                    (Data.Array.Accelerate.Array.Data.ptrsOfArrayData
                       @ e
                       $dArrayElt
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs e>_R)
                   eta1)
                  `cast`
                (forall (e :: <GHC.Types.*>_N).
                 <Data.Array.Accelerate.Array.Data.ArrayElt e>_R
                 ->_R <Data.Array.Accelerate.Array.Data.ArrayData e>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs e>_R)) -}
208cbda5d21ba90daa44d6488bb3a893
  $dmunsafeFreezeArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayElt e =>
    Data.Array.Accelerate.Array.Data.MutableArrayData e
    -> GHC.Types.IO (Data.Array.Accelerate.Array.Data.ArrayData e)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, True, True)
                (\ @ e
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt e)
                   (eta :: Data.Array.Accelerate.Array.Data.ArrayData e)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayData e)
                    eta)
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayData e>_R)
                   eta1)
                  `cast`
                (forall (e :: <GHC.Types.*>_N).
                 <Data.Array.Accelerate.Array.Data.ArrayElt e>_R
                 ->_R <Data.Array.Accelerate.Array.Data.ArrayData e>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayData e>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt() :: Data.Array.Accelerate.Array.Data.ArrayElt ()
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ()
                  Data.Array.Accelerate.Array.Data.$WArrayEltRunit
                  Data.Array.Accelerate.Array.Data.$fArrayElt()_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayElt()_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayElt()_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayElt()_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayElt()_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayElt()_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData ())
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData ())
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData ()>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData ()>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData ()>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayElt()_$cptrsOfMutableArrayData -}
1e3c6e01eae531701b0081f5ff92b449
  $fArrayElt()_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData ())
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case size of size1 { GHC.Types.I# ipv ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray ())
                    (Data.Array.Accelerate.Array.Data.AD_Unit
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                      `cast`
                    (Sym (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba()0[0]
                              <Data.Array.Accelerate.Array.Unique.UniqueArray>_N)))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.MutableArrayData ()>_R)
                   eta })
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.MutableArrayData ()>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt()_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData ()
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData ()) ->
                 case ds of tpl { DEFAULT ->
                 GHC.Tuple.()
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrs()[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt()_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData ()
    -> GHC.Types.IO (Data.Array.Accelerate.Array.Data.ArrayPtrs ())
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData ())
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs ())
                    (Data.Array.Accelerate.Array.Data.$fArrayElt()_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs ()>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData ()>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs ()>_R)) -}
547cd0762d162ecbf5bbe0f61d295ca6
  $fArrayElt()_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData () -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData ())
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of tpl { DEFAULT ->
                 (GHC.Base.returnIO @ () GHC.Tuple.())
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData ()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f271c2d971642cbaea97eea759b4b329
  $fArrayElt()_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData ()
    -> GHC.Types.Int -> ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*H>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData ())
                   (i :: GHC.Types.Int) ->
                 case ds of tpl { DEFAULT ->
                 case i of i1 { GHC.Types.I# ipv -> GHC.Tuple.() } }) -}
e709aef92885794c9c34f02a2c37480e
  $fArrayElt()_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData ()
    -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*H><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData ())
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of tpl { DEFAULT ->
                 case i of i1 { GHC.Types.I# ipv ->
                 (GHC.Base.returnIO @ () GHC.Tuple.())
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta } })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData ()>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
251c8306b583108949e36e53d775b496
  $fArrayElt()_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData ()
    -> GHC.Types.Int -> () -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs, Strictness: <S,1*U><S,1*H><S,1*H><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData ())
                   (i :: GHC.Types.Int)
                   (ds1 :: ())
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of tpl { DEFAULT ->
                 case ds1 of wild { () ->
                 case i of i1 { GHC.Types.I# ipv ->
                 (GHC.Base.returnIO @ () GHC.Tuple.())
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta } } })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData ()>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <()>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,) ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.ArrayElt (a, b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U,U,U)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                      ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b).
                  @ (a, b)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$carrayElt
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$cunsafeIndexArrayData
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$cptrsOfArrayData
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$ctouchArrayData
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$cnewArrayData
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$cunsafeReadArrayData
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$cunsafeWriteArrayData
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$cunsafeFreezeArrayData
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1)
                  (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$cptrsOfMutableArrayData
                     @ a
                     @ b
                     $dArrayElt
                     $dArrayElt1) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$carrayElt ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.ArrayEltR (a, b)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b) ->
                 Data.Array.Accelerate.Array.Data.ArrayEltRpair
                   @ (a, b)
                   @ a
                   @ b
                   @~ <(a, b)>_N
                   $dArrayElt
                   $dArrayElt1
                   (Data.Array.Accelerate.Array.Data.arrayElt @ a $dArrayElt)
                   (Data.Array.Accelerate.Array.Data.arrayElt @ b $dArrayElt1)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$cnewArrayData ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData (a, b))
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLC(C(S(SL)))LLLL),1*U(A,A,A,A,1*C1(C1(U(U,U))),A,A,A,A)><L,1*U(A,A,A,A,1*C1(C1(U(U,U))),A,A,A,A)><L,U><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b)
                   (size :: GHC.Types.Int) ->
                 GHC.Base.$fApplicativeIO_$sap
                   @ (Data.Array.Accelerate.Array.Data.GArrayData
                        Data.Array.Accelerate.Array.Unique.UniqueArray b)
                   @ (Data.Array.Accelerate.Array.Data.GArrayData
                        Data.Array.Accelerate.Array.Unique.UniqueArray (a, b))
                   (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                      @ (Data.Array.Accelerate.Array.Data.GArrayData
                           Data.Array.Accelerate.Array.Unique.UniqueArray a)
                      @ (Data.Array.Accelerate.Array.Data.GArrayData
                           Data.Array.Accelerate.Array.Unique.UniqueArray b
                         -> Data.Array.Accelerate.Array.Data.GArrayData
                              Data.Array.Accelerate.Array.Unique.UniqueArray (a, b))
                      (Data.Array.Accelerate.Array.Data.$WAD_Pair
                         @ b
                         @ a
                         @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                      (Data.Array.Accelerate.Array.Data.newArrayData
                         @ a
                         $dArrayElt
                         size))
                   (Data.Array.Accelerate.Array.Data.newArrayData
                      @ b
                      $dArrayElt1
                      size)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$cptrsOfArrayData ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.ArrayData (a, b)
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs (a, b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(U),A,A,A,A,A,A)><L,1*U(A,A,1*C1(U),A,A,A,A,A,A)><S,1*U(U,U)>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b)
                   (ds :: Data.Array.Accelerate.Array.Data.ArrayData (a, b)) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair a1 b1 ->
                 (Data.Array.Accelerate.Array.Data.ptrsOfArrayData
                    @ a
                    $dArrayElt
                    a1,
                  Data.Array.Accelerate.Array.Data.ptrsOfArrayData
                    @ b
                    $dArrayElt1
                    b1)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrs(,)[0]
                                <b>_N <a>_N))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$cptrsOfMutableArrayData ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.MutableArrayData (a, b)
    -> GHC.Types.IO (Data.Array.Accelerate.Array.Data.ArrayPtrs (a, b))
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLLC(C(S(SL)))),1*U(A,A,A,A,A,A,A,A,1*C1(C1(U(U,U))))><L,1*U(A,A,A,A,A,A,A,A,1*C1(C1(U(U,U))))><S,1*U(U,U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b)
                   (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData (a, b)) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair a1 b1 ->
                 (GHC.Base.$fApplicativeIO_$sap
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs b)
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs a,
                       Data.Array.Accelerate.Array.Data.ArrayPtrs b)
                    (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                       @ (Data.Array.Accelerate.Array.Data.ArrayPtrs a)
                       @ (Data.Array.Accelerate.Array.Data.ArrayPtrs b
                          -> (Data.Array.Accelerate.Array.Data.ArrayPtrs a,
                              Data.Array.Accelerate.Array.Data.ArrayPtrs b))
                       (GHC.Tuple.(,)
                          @ (Data.Array.Accelerate.Array.Data.ArrayPtrs a)
                          @ (Data.Array.Accelerate.Array.Data.ArrayPtrs b))
                       (Data.Array.Accelerate.Array.Data.ptrsOfMutableArrayData
                          @ a
                          $dArrayElt
                          a1))
                    (Data.Array.Accelerate.Array.Data.ptrsOfMutableArrayData
                       @ b
                       $dArrayElt1
                       b1))
                   `cast`
                 (GHC.Types.IO
                    (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrs(,)[0]
                                   <b>_N <a>_N))))_R }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$ctouchArrayData ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.ArrayData (a, b)
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLC(C(S(SL)))LLLLL),1*U(A,A,A,1*C1(C1(U(U,A))),A,A,A,A,A)><L,1*U(A,A,A,1*C1(C1(U(U,U))),A,A,A,A,A)><S,1*U(U,U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b)
                   (ds :: Data.Array.Accelerate.Array.Data.ArrayData (a, b)) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair a1 b1 ->
                 GHC.Base.thenIO
                   @ ()
                   @ ()
                   (Data.Array.Accelerate.Array.Data.touchArrayData @ a $dArrayElt a1)
                   (Data.Array.Accelerate.Array.Data.touchArrayData
                      @ b
                      $dArrayElt1
                      b1) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$cunsafeFreezeArrayData ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.MutableArrayData (a, b)
    -> GHC.Types.IO (Data.Array.Accelerate.Array.Data.ArrayData (a, b))
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLLLLLLC(C(S(SL)))L),1*U(A,A,A,A,A,A,A,1*C1(C1(U(U,U))),A)><L,1*U(A,A,A,A,A,A,A,1*C1(C1(U(U,U))),A)><S,1*U(U,U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b)
                   (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData (a, b)) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair a1 b1 ->
                 GHC.Base.$fApplicativeIO_$sap
                   @ (Data.Array.Accelerate.Array.Data.GArrayData
                        Data.Array.Accelerate.Array.Unique.UniqueArray b)
                   @ (Data.Array.Accelerate.Array.Data.GArrayData
                        Data.Array.Accelerate.Array.Unique.UniqueArray (a, b))
                   (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                      @ (Data.Array.Accelerate.Array.Data.GArrayData
                           Data.Array.Accelerate.Array.Unique.UniqueArray a)
                      @ (Data.Array.Accelerate.Array.Data.GArrayData
                           Data.Array.Accelerate.Array.Unique.UniqueArray b
                         -> Data.Array.Accelerate.Array.Data.GArrayData
                              Data.Array.Accelerate.Array.Unique.UniqueArray (a, b))
                      (Data.Array.Accelerate.Array.Data.$WAD_Pair
                         @ b
                         @ a
                         @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                      (Data.Array.Accelerate.Array.Data.unsafeFreezeArrayData
                         @ a
                         $dArrayElt
                         a1))
                   (Data.Array.Accelerate.Array.Data.unsafeFreezeArrayData
                      @ b
                      $dArrayElt1
                      b1) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$cunsafeIndexArrayData ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.ArrayData (a, b)
    -> GHC.Types.Int -> (a, b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A)><L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A,A)><S,1*U(U,U)><L,U>m,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b)
                   (ds :: Data.Array.Accelerate.Array.Data.ArrayData (a, b))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair a1 b1 ->
                 (Data.Array.Accelerate.Array.Data.unsafeIndexArrayData
                    @ a
                    $dArrayElt
                    a1
                    i,
                  Data.Array.Accelerate.Array.Data.unsafeIndexArrayData
                    @ b
                    $dArrayElt1
                    b1
                    i) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$cunsafeReadArrayData ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.MutableArrayData (a, b)
    -> GHC.Types.Int -> GHC.Types.IO (a, b)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LLLLLC(C(C(S(SL))))LLL),1*U(A,A,A,A,A,1*C1(C1(C1(U(U,U)))),A,A,A)><L,1*U(A,A,A,A,A,1*C1(C1(C1(U(U,U)))),A,A,A)><S,1*U(U,U)><L,U><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b)
                   (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData (a, b))
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair a1 b1 ->
                 GHC.Base.$fApplicativeIO_$sap
                   @ b
                   @ (a, b)
                   (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                      @ a
                      @ (b -> (a, b))
                      (GHC.Tuple.(,) @ a @ b)
                      (Data.Array.Accelerate.Array.Data.unsafeReadArrayData
                         @ a
                         $dArrayElt
                         a1
                         i))
                   (Data.Array.Accelerate.Array.Data.unsafeReadArrayData
                      @ b
                      $dArrayElt1
                      b1
                      i) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayElt(,)_$cunsafeWriteArrayData ::
    (Data.Array.Accelerate.Array.Data.ArrayElt a,
     Data.Array.Accelerate.Array.Data.ArrayElt b) =>
    Data.Array.Accelerate.Array.Data.MutableArrayData (a, b)
    -> GHC.Types.Int -> (a, b) -> GHC.Types.IO ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LLLLLLC(C(C(C(S(SL)))))LL),1*U(A,A,A,A,A,A,1*C1(C1(C1(C1(U(U,A))))),A,A)><L,1*U(A,A,A,A,A,A,1*C1(C1(C1(C1(U(U,U))))),A,A)><S,1*U(U,U)><L,U><S,1*U(U,U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ a
                   @ b
                   ($dArrayElt :: Data.Array.Accelerate.Array.Data.ArrayElt a)
                   ($dArrayElt1 :: Data.Array.Accelerate.Array.Data.ArrayElt b)
                   (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData (a, b))
                   (i :: GHC.Types.Int)
                   (ds1 :: (a, b)) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair a1 b1 ->
                 case ds1 of wild1 { (,) x y ->
                 GHC.Base.thenIO
                   @ ()
                   @ ()
                   (Data.Array.Accelerate.Array.Data.unsafeWriteArrayData
                      @ a
                      $dArrayElt
                      a1
                      i
                      x)
                   (Data.Array.Accelerate.Array.Data.unsafeWriteArrayData
                      @ b
                      $dArrayElt1
                      b1
                      i
                      y) } }) -}
b9619da6bb2540894e19b5c8064db2ec
  $fArrayElt(,)_$s<$> :: (a -> b) -> GHC.Types.IO a -> GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S(SL)),1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Base.$fFunctorIO_$cfmap -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltBool ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Types.Bool
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Bool
                  Data.Array.Accelerate.Array.Data.$WArrayEltRbool
                  Data.Array.Accelerate.Array.Data.$fArrayEltBool_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltBool_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltBool_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltBool_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltBool_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltBool_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Types.Bool)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltBool_$cptrsOfMutableArrayData -}
b3190ac7ef6ec7c69dbfcda89a493f74
  $fArrayEltBool1 ::
    Text.Printf.PrintfType
      (GHC.Types.Int -> GHC.Base.String -> GHC.Base.String)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Array.Data.$fArrayEltBool2
                  `cast`
                (Sym (Text.Printf.N:PrintfType[0]
                          <GHC.Types.Int -> GHC.Base.String -> GHC.Base.String>_N)) -}
e8e567a8ece9b7dab54de397fbfa953e
  $fArrayEltBool2 ::
    GHC.Base.String
    -> [Text.Printf.UPrintf]
    -> GHC.Types.Int
    -> [GHC.Types.Char]
    -> [GHC.Types.Char]
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,U>,
     Unfolding: (\ (fmts :: GHC.Base.String)
                   (args :: [Text.Printf.UPrintf])
                   (a1 :: GHC.Types.Int)
                   (eta :: [GHC.Types.Char]) ->
                 GHC.Base.map
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   Text.Printf.$fIsCharChar_$cfromChar
                   (Text.Printf.uprintfs
                      fmts
                      (GHC.List.reverse1
                         @ Text.Printf.UPrintf
                         (GHC.Types.:
                            @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                            (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s$fPrintfArg[]_$cparseFormat
                               eta,
                             \ (w2 :: Text.Printf.FieldFormat) ->
                             case w2 of ww { Text.Printf.FieldFormat ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                             case ww7 of ww8 { GHC.Types.C# ww9 ->
                             Text.Printf.$wformatString
                               @ GHC.Types.Char
                               Text.Printf.$fIsCharChar
                               eta
                               ww1
                               ww2
                               ww3
                               ww9 } })
                            (GHC.Types.:
                               @ (Text.Printf.ModifierParser, Text.Printf.FieldFormatter)
                               (Text.Printf.$wparseIntFormat @ GHC.Types.Int,
                                Text.Printf.$fPrintfArgInt_$sformatInt a1)
                               args))
                         (GHC.Types.[] @ Text.Printf.UPrintf))
                      (GHC.Types.[] @ GHC.Types.Char))) -}
024e379a0ef28f881cc4f671eb80defe
  $fArrayEltBool_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Bool)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Bool)
                    (Data.Array.Accelerate.Array.Data.$WAD_Bool
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word8)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word8)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord8_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word8
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word8
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Bool>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Types.Bool>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltBool_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Bool) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaBool0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Bool ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word8
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsBool[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltBool_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Bool
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Bool)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Types.Bool)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Bool)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Bool>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Bool>_R)) -}
8ee32b2a1d0c317f5a3e211dfd3917ac
  $fArrayEltBool_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Bool)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaBool0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Bool ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word8
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
63b92f7c3da4410b6687ade853f9726c
  $fArrayEltBool_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Bool
    -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Bool)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaBool0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Bool ba ->
                 case GHC.Word.eqWord8
                        (GHC.Base.$!
                           @ (GHC.Types.IO GHC.Word.Word8)
                           @ GHC.Word.Word8
                           (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word8)
                           (GHC.Base.$
                              @ 'GHC.Types.PtrRepLifted
                              @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO GHC.Word.Word8)
                              @ (GHC.Types.IO GHC.Word.Word8)
                              (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                                 @ GHC.Word.Word8
                                 @ GHC.Word.Word8
                                 ba)
                              (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                                 (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               (GHC.Storable.readWord8OffPtr ptr i)
                                 `cast`
                               (GHC.Types.N:IO[0] <GHC.Word.Word8>_R)
                                 eta)
                                `cast`
                              (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                               ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word8>_R))))
                        (GHC.Word.$fBitsWord8_$cfromInteger 0) of wild1 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
27e95f997dee4a14e8c67562534eece5
  $fArrayEltBool_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Bool
    -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Bool)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaBool0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Bool ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Word.Word8
                    @ GHC.Types.Bool
                    Data.Array.Accelerate.Array.Data.toBool
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO GHC.Word.Word8)
                       @ (GHC.Types.IO GHC.Word.Word8)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Word.Word8
                          @ GHC.Word.Word8
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readWord8OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Word.Word8>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word8>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    GHC.Types.Bool>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)) -}
ba1a42ca170ca6417a88b9d888d91ed4
  $fArrayEltBool_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Bool
    -> GHC.Types.Int -> GHC.Types.Bool -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,1*U><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Bool)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Types.Bool) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaBool0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Bool ba ->
                 let {
                   e1 :: GHC.Word.Word8
                   = case e of wild1 {
                       GHC.Types.False -> GHC.Word.$fBitsWord8_$cfromInteger 0
                       GHC.Types.True -> GHC.Word.$fBitsWord8_$cfromInteger 1 }
                 } in
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word8
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord8OffPtr ptr i e1)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
5e479f864ab31942d8a44f9adb707e00
  $fArrayEltBool_$s$fPrintfArg[]_$cparseFormat ::
    [GHC.Types.Char] -> Text.Printf.ModifierParser
  {- Arity: 2, Strictness: <L,A><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds1 :: [GHC.Types.Char]) (ds2 :: [GHC.Types.Char]) ->
                 case ds2 of wild {
                   [] -> Text.Printf.errorShortFormat @ Text.Printf.FormatParse
                   : c1 cs
                   -> Text.Printf.FormatParse
                        (GHC.Types.[] @ GHC.Types.Char)
                        c1
                        cs }) -}
ff72e0a18316386a75a703e3a1498c2f
  $fArrayEltBool_$s<=< ::
    (b -> GHC.Types.IO c)
    -> (a -> GHC.Types.IO b) -> a -> GHC.Types.IO c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U(U,U)))><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ b
                   @ c
                   @ a
                   (eta :: b -> GHC.Types.IO c)
                   (eta1 :: a -> GHC.Types.IO b)
                   (eta2 :: a)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s>=>
                    @ a
                    @ b
                    @ c
                    eta1
                    eta
                    eta2)
                   `cast`
                 (GHC.Types.N:IO[0] <c>_R)
                   eta4)
                  `cast`
                (forall (b :: <*>_N) (c :: <*>_N) (a :: <*>_N).
                 <b -> GHC.Types.IO c>_R
                 ->_R <a -> GHC.Types.IO b>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <c>_R)) -}
3fbf5eaecd81b687f826765d31fc78c0
  $fArrayEltBool_$s>=> ::
    (a -> GHC.Types.IO b)
    -> (b -> GHC.Types.IO c) -> a -> GHC.Types.IO c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   (f :: a -> GHC.Types.IO b)
                   (g :: b -> GHC.Types.IO c)
                   (x :: a) ->
                 GHC.Base.bindIO @ b @ c (f x) g) -}
cef303f6b15e52dcffaf5b99cf0e95d1
  $fArrayEltBool_$sprintf ::
    GHC.Base.String
    -> GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (fmts :: GHC.Base.String)
                   (eta :: GHC.Types.Int)
                   (eta1 :: GHC.Base.String) ->
                 Data.Array.Accelerate.Array.Data.$fArrayEltBool1
                   `cast`
                 (Text.Printf.N:PrintfType[0]
                      <GHC.Types.Int -> GHC.Base.String -> GHC.Base.String>_N)
                   fmts
                   (GHC.Types.[] @ Text.Printf.UPrintf)
                   eta
                   eta1) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCChar ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CChar
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcchar
                  Data.Array.Accelerate.Array.Data.$fArrayEltCChar_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCChar_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCChar_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCChar_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCChar_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCChar_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CChar)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CChar)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CChar>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CChar>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CChar>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCChar_$cptrsOfMutableArrayData -}
2dc48798946abfa45697f610ad004bdf
  $fArrayEltCChar_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CChar)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray
                         Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CChar)
                    (Data.Array.Accelerate.Array.Data.$WAD_CChar
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray
                               Data.Array.Accelerate.Array.Data.HTYPE_CCHAR))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray
                               Data.Array.Accelerate.Array.Data.HTYPE_CCHAR))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       Data.Array.Accelerate.Array.Data.HTYPE_CCHAR))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO
                               (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_CCHAR))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Data.Array.Accelerate.Array.Data.HTYPE_CCHAR))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                             @ (GHC.Types.IO
                                  (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_CCHAR))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt8_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr
                                        Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr
                                           Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr
                                              Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CChar>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CChar>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCChar_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CChar
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CChar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CChar) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CChar ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCChar[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCChar_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CChar
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CChar)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CChar)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CChar)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCChar_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CChar>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CChar>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CChar>_R)) -}
1f39e035a0a5ad0924127dbbc4bfac34
  $fArrayEltCChar_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CChar
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CChar)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CChar ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CChar>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
f78721c067cb55baeba52ff100a22e74
  $fArrayEltCChar_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CChar
    -> GHC.Types.Int -> Foreign.C.Types.CChar
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CChar)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CChar ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CChar
                   (\ (tpl :: GHC.Int.Int8) -> tpl)
                     `cast`
                   (<GHC.Int.Int8>_R ->_R Sym (Foreign.C.Types.N:CChar[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                      @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                      (GHC.IO.Unsafe.unsafePerformIO
                         @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                            -> GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                         @ (GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                            @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr
                                      Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readInt8OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_CCHAR>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)))) }) -}
a42321a2a487ae1ad5e342c4c3619a27
  $fArrayEltCChar_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CChar
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CChar
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CChar)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CChar ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Int.Int8
                    @ Foreign.C.Types.CChar
                    (\ (tpl :: GHC.Int.Int8) -> tpl)
                      `cast`
                    (<GHC.Int.Int8>_R ->_R Sym (Foreign.C.Types.N:CChar[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                          -> GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                       @ (GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                          @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr
                                    Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readInt8OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_CCHAR>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int8>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CChar>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CChar>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CChar>_R)) -}
f4279bbdd0645b2133afff0a2f1d724e
  $fArrayEltCChar_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CChar
    -> GHC.Types.Int -> Foreign.C.Types.CChar -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CChar)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CChar) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CChar ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                      -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr
                                Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt8OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CChar[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_CCHAR>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCDouble ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CDouble
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CDouble
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcdouble
                  Data.Array.Accelerate.Array.Data.$fArrayEltCDouble_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCDouble_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCDouble_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCDouble_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCDouble_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCDouble_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CDouble)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CDouble)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CDouble>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CDouble>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CDouble>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCDouble_$cptrsOfMutableArrayData -}
fcaf03eb989d0d44f290a5cd8b2486ac
  $fArrayEltCDouble_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CDouble)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CDouble)
                    (Data.Array.Accelerate.Array.Data.$WAD_CDouble
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Types.Double)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Types.Double))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Double))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Double))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Types.Double)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableDouble_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Types.Double
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Types.Double
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CDouble>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CDouble>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCDouble_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CDouble
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CDouble
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CDouble) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CDouble ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Types.Double
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCDouble[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCDouble_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CDouble
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs
            Foreign.C.Types.CDouble)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CDouble)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CDouble)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCDouble_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CDouble>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CDouble>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CDouble>_R)) -}
84e9d704f49a0c965822a98aba5ddfb9
  $fArrayEltCDouble_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CDouble
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CDouble)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CDouble ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Types.Double
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CDouble>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5027841d781a56f034ceb78a242b00ab
  $fArrayEltCDouble_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CDouble
    -> GHC.Types.Int -> Foreign.C.Types.CDouble
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CDouble)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CDouble ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Types.Double
                   @ Foreign.C.Types.CDouble
                   (\ (tpl :: GHC.Types.Double) -> tpl)
                     `cast`
                   (<GHC.Types.Double>_R ->_R Sym (Foreign.C.Types.N:CDouble[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Types.Double)
                      @ GHC.Types.Double
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Types.Double)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Types.Double -> GHC.Types.IO GHC.Types.Double)
                         @ (GHC.Types.IO GHC.Types.Double)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Types.Double
                            @ GHC.Types.Double
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Double)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readDoubleOffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Types.Double>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Types.Double>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R)))) }) -}
8b0a577fbd0d1e4f7030267b72dd92ca
  $fArrayEltCDouble_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CDouble
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CDouble
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CDouble)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CDouble ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Types.Double
                    @ Foreign.C.Types.CDouble
                    (\ (tpl :: GHC.Types.Double) -> tpl)
                      `cast`
                    (<GHC.Types.Double>_R ->_R Sym (Foreign.C.Types.N:CDouble[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Types.Double -> GHC.Types.IO GHC.Types.Double)
                       @ (GHC.Types.IO GHC.Types.Double)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Types.Double
                          @ GHC.Types.Double
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Double)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readDoubleOffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Types.Double>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Types.Double>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CDouble>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CDouble>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CDouble>_R)) -}
118ca7011b4159979bba10e809e180c3
  $fArrayEltCDouble_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CDouble
    -> GHC.Types.Int -> Foreign.C.Types.CDouble -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CDouble)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CDouble) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CDouble ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Double -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Double
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Double)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeDoubleOffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CDouble[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Double>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCFloat ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CFloat
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CFloat
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcfloat
                  Data.Array.Accelerate.Array.Data.$fArrayEltCFloat_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCFloat_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCFloat_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCFloat_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCFloat_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCFloat_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CFloat)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CFloat)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CFloat>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CFloat>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CFloat>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCFloat_$cptrsOfMutableArrayData -}
04341362d7b7ed31bfea86087d1f031b
  $fArrayEltCFloat_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CFloat)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CFloat)
                    (Data.Array.Accelerate.Array.Data.$WAD_CFloat
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Types.Float)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Types.Float))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Float))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Float))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Types.Float)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableFloat_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Types.Float
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Types.Float
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CFloat>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CFloat>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCFloat_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CFloat
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CFloat
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CFloat) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CFloat ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Types.Float
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCFloat[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCFloat_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CFloat
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CFloat)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CFloat)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CFloat)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCFloat_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CFloat>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CFloat>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CFloat>_R)) -}
548c6ee177606ab750084c5474558565
  $fArrayEltCFloat_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CFloat
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CFloat)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CFloat ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Types.Float
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CFloat>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8b024a60303118555a1b5cc8c0cb0c16
  $fArrayEltCFloat_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CFloat
    -> GHC.Types.Int -> Foreign.C.Types.CFloat
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CFloat)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CFloat ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Types.Float
                   @ Foreign.C.Types.CFloat
                   (\ (tpl :: GHC.Types.Float) -> tpl)
                     `cast`
                   (<GHC.Types.Float>_R ->_R Sym (Foreign.C.Types.N:CFloat[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Types.Float)
                      @ GHC.Types.Float
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Types.Float)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Types.Float -> GHC.Types.IO GHC.Types.Float)
                         @ (GHC.Types.IO GHC.Types.Float)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Types.Float
                            @ GHC.Types.Float
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Float)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readFloatOffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Types.Float>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Types.Float>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Float>_R)))) }) -}
59ad772b9425e8fe1dbb25aac636fdfd
  $fArrayEltCFloat_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CFloat
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CFloat
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CFloat)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CFloat ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Types.Float
                    @ Foreign.C.Types.CFloat
                    (\ (tpl :: GHC.Types.Float) -> tpl)
                      `cast`
                    (<GHC.Types.Float>_R ->_R Sym (Foreign.C.Types.N:CFloat[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Types.Float -> GHC.Types.IO GHC.Types.Float)
                       @ (GHC.Types.IO GHC.Types.Float)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Types.Float
                          @ GHC.Types.Float
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Float)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readFloatOffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Types.Float>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Types.Float>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Float>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CFloat>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CFloat>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CFloat>_R)) -}
27a94cd25a1a1ed0b3e2b9c6a0e98c91
  $fArrayEltCFloat_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CFloat
    -> GHC.Types.Int -> Foreign.C.Types.CFloat -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CFloat)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CFloat) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CFloat ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Float -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Float
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Float)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeFloatOffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CFloat[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Float>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCInt ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CInt
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcint
                  Data.Array.Accelerate.Array.Data.$fArrayEltCInt_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCInt_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCInt_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCInt_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCInt_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCInt_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CInt)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CInt)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CInt>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CInt>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CInt>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCInt_$cptrsOfMutableArrayData -}
87c11d1ddb177a07f8837f3625893322
  $fArrayEltCInt_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CInt)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CInt)
                    (Data.Array.Accelerate.Array.Data.$WAD_CInt
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Int.Int32)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt32_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Int.Int32
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Int.Int32
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CInt>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CInt>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCInt_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CInt
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CInt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CInt) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CInt ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Int.Int32
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCInt[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCInt_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CInt
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CInt)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CInt)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CInt)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCInt_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CInt>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CInt>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CInt>_R)) -}
4bbe3f8600031ac14bfe70a15100e86c
  $fArrayEltCInt_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CInt
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CInt)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CInt ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Int.Int32
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CInt>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4d3fd6981c032e21f4fda3807167220b
  $fArrayEltCInt_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CInt
    -> GHC.Types.Int -> Foreign.C.Types.CInt
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CInt)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CInt ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Int.Int32
                   @ Foreign.C.Types.CInt
                   (\ (tpl :: GHC.Int.Int32) -> tpl)
                     `cast`
                   (<GHC.Int.Int32>_R ->_R Sym (Foreign.C.Types.N:CInt[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Int.Int32)
                      @ GHC.Int.Int32
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Int.Int32)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Int.Int32 -> GHC.Types.IO GHC.Int.Int32)
                         @ (GHC.Types.IO GHC.Int.Int32)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Int.Int32
                            @ GHC.Int.Int32
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int32)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readInt32OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Int.Int32>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Int.Int32>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int32>_R)))) }) -}
77a50f110f02e2ae2b220dc776e07438
  $fArrayEltCInt_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CInt
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CInt
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CInt)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CInt ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Int.Int32
                    @ Foreign.C.Types.CInt
                    (\ (tpl :: GHC.Int.Int32) -> tpl)
                      `cast`
                    (<GHC.Int.Int32>_R ->_R Sym (Foreign.C.Types.N:CInt[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Int.Int32 -> GHC.Types.IO GHC.Int.Int32)
                       @ (GHC.Types.IO GHC.Int.Int32)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Int.Int32
                          @ GHC.Int.Int32
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int32)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readInt32OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Int.Int32>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Int.Int32>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int32>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CInt>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CInt>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CInt>_R)) -}
5a90e583c10dd22965cd19c6ccbc0bdc
  $fArrayEltCInt_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CInt
    -> GHC.Types.Int -> Foreign.C.Types.CInt -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CInt)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CInt) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CInt ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int32 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int32
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int32)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt32OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CInt[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int32>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCLLong ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CLLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLLong
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcllong
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLLong_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLLong_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLLong_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLLong_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLLong_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLLong_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CLLong)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CLLong)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CLLong>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CLLong>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CLLong>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLLong_$cptrsOfMutableArrayData -}
cab65c13da5518b8b9ab1cd185cf108a
  $fArrayEltCLLong_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CLLong)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CLLong)
                    (Data.Array.Accelerate.Array.Data.$WAD_CLLong
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Int.Int64)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt64_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Int.Int64
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Int.Int64
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CLLong>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CLLong>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCLLong_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CLLong
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CLLong
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CLLong) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLLong ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Int.Int64
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCLLong[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCLLong_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CLLong
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CLLong)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CLLong)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CLLong)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCLLong_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CLLong>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CLLong>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CLLong>_R)) -}
1848e0217e73297b3f38838c46714675
  $fArrayEltCLLong_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CLLong
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CLLong)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLLong ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Int.Int64
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CLLong>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
323e02eb421f748c0d849801271f1cbb
  $fArrayEltCLLong_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CLLong
    -> GHC.Types.Int -> Foreign.C.Types.CLLong
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CLLong)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLLong ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CLLong
                   (\ (tpl :: GHC.Int.Int64) -> tpl)
                     `cast`
                   (<GHC.Int.Int64>_R ->_R Sym (Foreign.C.Types.N:CLLong[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Int.Int64)
                      @ GHC.Int.Int64
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Int.Int64)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Int.Int64 -> GHC.Types.IO GHC.Int.Int64)
                         @ (GHC.Types.IO GHC.Int.Int64)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Int.Int64
                            @ GHC.Int.Int64
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int64)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readInt64OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Int.Int64>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)))) }) -}
68d654b2d81fe1b0e88b06771e8cdfae
  $fArrayEltCLLong_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CLLong
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CLLong
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CLLong)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLLong ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Int.Int64
                    @ Foreign.C.Types.CLLong
                    (\ (tpl :: GHC.Int.Int64) -> tpl)
                      `cast`
                    (<GHC.Int.Int64>_R ->_R Sym (Foreign.C.Types.N:CLLong[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Int.Int64 -> GHC.Types.IO GHC.Int.Int64)
                       @ (GHC.Types.IO GHC.Int.Int64)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Int.Int64
                          @ GHC.Int.Int64
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int64)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readInt64OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Int.Int64>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int64>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CLLong>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CLLong>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CLLong>_R)) -}
47a8477c99e1b6da4df384e728a168bf
  $fArrayEltCLLong_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CLLong
    -> GHC.Types.Int -> Foreign.C.Types.CLLong -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CLLong)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CLLong) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLLong ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int64 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int64
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int64)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt64OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CLLong[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int64>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCLong ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CLong
                  Data.Array.Accelerate.Array.Data.$WArrayEltRclong
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLong_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLong_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLong_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLong_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLong_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLong_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CLong)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CLong)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CLong>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CLong>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CLong>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCLong_$cptrsOfMutableArrayData -}
acabe488e66c26ebfed0d2ac8bfad17e
  $fArrayEltCLong_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CLong)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray
                         Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CLong)
                    (Data.Array.Accelerate.Array.Data.$WAD_CLong
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray
                               Data.Array.Accelerate.Array.Data.HTYPE_LONG))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray
                               Data.Array.Accelerate.Array.Data.HTYPE_LONG))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     Data.Array.Accelerate.Array.Data.HTYPE_LONG)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       Data.Array.Accelerate.Array.Data.HTYPE_LONG))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO
                               (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_LONG))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Data.Array.Accelerate.Array.Data.HTYPE_LONG))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                             @ (GHC.Types.IO
                                  (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_LONG))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_LONG)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt64_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr
                                        Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr
                                           Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr
                                              Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CLong>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CLong>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCLong_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CLong
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CLong
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CLong) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLong ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCLong[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCLong_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CLong
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CLong)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CLong)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CLong)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCLong_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CLong>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CLong>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CLong>_R)) -}
af1338c4bb6ebdee789983350356698f
  $fArrayEltCLong_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CLong
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CLong)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLong ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CLong>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d17d3214a98f9afc4f7f03712a5a7f51
  $fArrayEltCLong_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CLong
    -> GHC.Types.Int -> Foreign.C.Types.CLong
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CLong)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLong ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Int.Int64
                   @ Foreign.C.Types.CLong
                   (\ (tpl :: GHC.Int.Int64) -> tpl)
                     `cast`
                   (<GHC.Int.Int64>_R ->_R Sym (Foreign.C.Types.N:CLong[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                      @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                      (GHC.IO.Unsafe.unsafePerformIO
                         @ Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG
                            -> GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                         @ (GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                            @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readInt64OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)))) }) -}
5b157f1567c096030c2b3a410756173a
  $fArrayEltCLong_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CLong
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CLong
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CLong)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLong ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Int.Int64
                    @ Foreign.C.Types.CLong
                    (\ (tpl :: GHC.Int.Int64) -> tpl)
                      `cast`
                    (<GHC.Int.Int64>_R ->_R Sym (Foreign.C.Types.N:CLong[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG
                          -> GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                       @ (GHC.Types.IO Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                          @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readInt64OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int64>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CLong>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CLong>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CLong>_R)) -}
70bd6f300b6f8ebfb03b30dbb813a420
  $fArrayEltCLong_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CLong
    -> GHC.Types.Int -> Foreign.C.Types.CLong -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CLong)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CLong) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CLong ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG
                      -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ Data.Array.Accelerate.Array.Data.HTYPE_LONG
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt64OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CLong[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCSChar ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CSChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CSChar
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcschar
                  Data.Array.Accelerate.Array.Data.$fArrayEltCSChar_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCSChar_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCSChar_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCSChar_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCSChar_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCSChar_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CSChar)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CSChar)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CSChar>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CSChar>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CSChar>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCSChar_$cptrsOfMutableArrayData -}
c29a11ca10cfa90262365fe5134b79fb
  $fArrayEltCSChar_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CSChar)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CSChar)
                    (Data.Array.Accelerate.Array.Data.$WAD_CSChar
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Int.Int8)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt8_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Int.Int8
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Int.Int8
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CSChar>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CSChar>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCSChar_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CSChar
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CSChar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CSChar) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCSChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CSChar ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Int.Int8
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCSChar[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCSChar_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CSChar
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CSChar)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CSChar)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CSChar)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCSChar_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CSChar>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CSChar>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CSChar>_R)) -}
e3c008a9a25a9110ce7164ab8936fb3c
  $fArrayEltCSChar_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CSChar
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CSChar)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCSChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CSChar ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Int.Int8
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CSChar>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ff37f86fb727e872aaf38dbfc69525bd
  $fArrayEltCSChar_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CSChar
    -> GHC.Types.Int -> Foreign.C.Types.CSChar
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CSChar)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCSChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CSChar ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Int.Int8
                   @ Foreign.C.Types.CSChar
                   (\ (tpl :: GHC.Int.Int8) -> tpl)
                     `cast`
                   (<GHC.Int.Int8>_R ->_R Sym (Foreign.C.Types.N:CSChar[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Int.Int8)
                      @ GHC.Int.Int8
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Int.Int8)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Int.Int8 -> GHC.Types.IO GHC.Int.Int8)
                         @ (GHC.Types.IO GHC.Int.Int8)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Int.Int8
                            @ GHC.Int.Int8
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int8)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readInt8OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Int.Int8>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)))) }) -}
c34921b66ce95ffe1bca5e09a82154cd
  $fArrayEltCSChar_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CSChar
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CSChar
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CSChar)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCSChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CSChar ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Int.Int8
                    @ Foreign.C.Types.CSChar
                    (\ (tpl :: GHC.Int.Int8) -> tpl)
                      `cast`
                    (<GHC.Int.Int8>_R ->_R Sym (Foreign.C.Types.N:CSChar[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Int.Int8 -> GHC.Types.IO GHC.Int.Int8)
                       @ (GHC.Types.IO GHC.Int.Int8)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Int.Int8
                          @ GHC.Int.Int8
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int8)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readInt8OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Int.Int8>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int8>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CSChar>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CSChar>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CSChar>_R)) -}
61ef621d6037154f0c1ccc282e6fd708
  $fArrayEltCSChar_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CSChar
    -> GHC.Types.Int -> Foreign.C.Types.CSChar -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CSChar)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CSChar) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCSChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CSChar ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int8 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int8
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int8)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt8OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CSChar[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int8>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCShort ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CShort
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcshort
                  Data.Array.Accelerate.Array.Data.$fArrayEltCShort_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCShort_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCShort_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCShort_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCShort_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCShort_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CShort)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CShort)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CShort>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CShort>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CShort>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCShort_$cptrsOfMutableArrayData -}
5c49194bad4bd50545d5671d902cd9f7
  $fArrayEltCShort_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CShort)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CShort)
                    (Data.Array.Accelerate.Array.Data.$WAD_CShort
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Int.Int16)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt16_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Int.Int16
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Int.Int16
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CShort>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CShort>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCShort_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CShort
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CShort
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CShort) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CShort ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Int.Int16
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCShort[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCShort_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CShort
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CShort)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CShort)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CShort)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCShort_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CShort>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CShort>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CShort>_R)) -}
968a31d281129c29b327dbd980940274
  $fArrayEltCShort_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CShort
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CShort)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CShort ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Int.Int16
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CShort>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
04b60b8615b28468854350f0cbb666fc
  $fArrayEltCShort_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CShort
    -> GHC.Types.Int -> Foreign.C.Types.CShort
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CShort)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CShort ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Int.Int16
                   @ Foreign.C.Types.CShort
                   (\ (tpl :: GHC.Int.Int16) -> tpl)
                     `cast`
                   (<GHC.Int.Int16>_R ->_R Sym (Foreign.C.Types.N:CShort[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Int.Int16)
                      @ GHC.Int.Int16
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Int.Int16)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Int.Int16 -> GHC.Types.IO GHC.Int.Int16)
                         @ (GHC.Types.IO GHC.Int.Int16)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Int.Int16
                            @ GHC.Int.Int16
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int16)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readInt16OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Int.Int16>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Int.Int16>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int16>_R)))) }) -}
9e80731dea62d7d8abcd1a81ca144478
  $fArrayEltCShort_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CShort
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CShort
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CShort)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CShort ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Int.Int16
                    @ Foreign.C.Types.CShort
                    (\ (tpl :: GHC.Int.Int16) -> tpl)
                      `cast`
                    (<GHC.Int.Int16>_R ->_R Sym (Foreign.C.Types.N:CShort[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Int.Int16 -> GHC.Types.IO GHC.Int.Int16)
                       @ (GHC.Types.IO GHC.Int.Int16)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Int.Int16
                          @ GHC.Int.Int16
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int16)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readInt16OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Int.Int16>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Int.Int16>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int16>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CShort>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CShort>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CShort>_R)) -}
81ef9a8ad97eec629ccf90af358fb796
  $fArrayEltCShort_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CShort
    -> GHC.Types.Int -> Foreign.C.Types.CShort -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CShort)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CShort) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CShort ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int16 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int16
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int16)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt16OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CShort[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int16>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUChar ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CUChar
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUChar
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcuchar
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUChar_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUChar_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUChar_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUChar_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUChar_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUChar_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CUChar)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CUChar)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CUChar>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CUChar>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CUChar>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUChar_$cptrsOfMutableArrayData -}
3e88ac26e3e2b2a57579c315f2e36f4d
  $fArrayEltCUChar_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CUChar)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CUChar)
                    (Data.Array.Accelerate.Array.Data.$WAD_CUChar
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word8)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word8)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord8_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word8
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word8
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CUChar>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CUChar>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUChar_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUChar
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CUChar
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUChar) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUChar ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word8
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCUChar[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUChar_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUChar
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CUChar)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CUChar)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CUChar)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCUChar_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CUChar>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CUChar>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CUChar>_R)) -}
da8b07fb91eef8a54a934b0c1b44316e
  $fArrayEltCUChar_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUChar
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUChar)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUChar ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word8
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CUChar>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e799596d755a3006675d17414dced069
  $fArrayEltCUChar_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUChar
    -> GHC.Types.Int -> Foreign.C.Types.CUChar
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUChar)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUChar ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Word.Word8
                   @ Foreign.C.Types.CUChar
                   (\ (tpl :: GHC.Word.Word8) -> tpl)
                     `cast`
                   (<GHC.Word.Word8>_R ->_R Sym (Foreign.C.Types.N:CUChar[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Word.Word8)
                      @ GHC.Word.Word8
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word8)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO GHC.Word.Word8)
                         @ (GHC.Types.IO GHC.Word.Word8)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Word.Word8
                            @ GHC.Word.Word8
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readWord8OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Word.Word8>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word8>_R)))) }) -}
6f6ead947ec97d53ebf8d770bd0fc5ce
  $fArrayEltCUChar_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUChar
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CUChar
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CUChar)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUChar ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Word.Word8
                    @ Foreign.C.Types.CUChar
                    (\ (tpl :: GHC.Word.Word8) -> tpl)
                      `cast`
                    (<GHC.Word.Word8>_R ->_R Sym (Foreign.C.Types.N:CUChar[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO GHC.Word.Word8)
                       @ (GHC.Types.IO GHC.Word.Word8)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Word.Word8
                          @ GHC.Word.Word8
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readWord8OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Word.Word8>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word8>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CUChar>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CUChar>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CUChar>_R)) -}
b8810221b2471100496f9a97c91fd075
  $fArrayEltCUChar_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUChar
    -> GHC.Types.Int -> Foreign.C.Types.CUChar -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CUChar)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CUChar) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUChar ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word8
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord8OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CUChar[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUInt ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CUInt
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUInt
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcuint
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUInt_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUInt_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUInt_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUInt_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUInt_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUInt_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CUInt)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CUInt)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CUInt>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CUInt>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CUInt>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUInt_$cptrsOfMutableArrayData -}
ca4ea40ff25c705778016a7692d814d8
  $fArrayEltCUInt_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CUInt)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CUInt)
                    (Data.Array.Accelerate.Array.Data.$WAD_CUInt
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word32)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Word.Word32))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word32)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord32_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word32
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word32
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CUInt>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CUInt>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUInt_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUInt
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CUInt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUInt) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUInt ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word32
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCUInt[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUInt_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUInt
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CUInt)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CUInt)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CUInt)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCUInt_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CUInt>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CUInt>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CUInt>_R)) -}
237c550186214ec6e6d39d23ee38f398
  $fArrayEltCUInt_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUInt
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUInt)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUInt ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word32
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CUInt>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5a3bc7a79fba6def3f32f24db1b4cc59
  $fArrayEltCUInt_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUInt
    -> GHC.Types.Int -> Foreign.C.Types.CUInt
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUInt)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUInt ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Word.Word32
                   @ Foreign.C.Types.CUInt
                   (\ (tpl :: GHC.Word.Word32) -> tpl)
                     `cast`
                   (<GHC.Word.Word32>_R ->_R Sym (Foreign.C.Types.N:CUInt[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Word.Word32)
                      @ GHC.Word.Word32
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word32)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Word.Word32 -> GHC.Types.IO GHC.Word.Word32)
                         @ (GHC.Types.IO GHC.Word.Word32)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Word.Word32
                            @ GHC.Word.Word32
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word32)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readWord32OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Word.Word32>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)))) }) -}
9b61256bf4fc7be37512eae3624915c9
  $fArrayEltCUInt_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUInt
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CUInt
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CUInt)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUInt ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Word.Word32
                    @ Foreign.C.Types.CUInt
                    (\ (tpl :: GHC.Word.Word32) -> tpl)
                      `cast`
                    (<GHC.Word.Word32>_R ->_R Sym (Foreign.C.Types.N:CUInt[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Word.Word32 -> GHC.Types.IO GHC.Word.Word32)
                       @ (GHC.Types.IO GHC.Word.Word32)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Word.Word32
                          @ GHC.Word.Word32
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word32)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readWord32OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Word.Word32>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word32>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CUInt>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CUInt>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CUInt>_R)) -}
f588f3e5f85164a8c88c002b27d2a9d1
  $fArrayEltCUInt_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUInt
    -> GHC.Types.Int -> Foreign.C.Types.CUInt -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CUInt)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CUInt) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUInt ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word32 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word32
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word32)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord32OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CUInt[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word32>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCULLong ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CULLong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULLong
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcullong
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULLong_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULLong_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULLong_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULLong_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULLong_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULLong_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CULLong)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CULLong)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CULLong>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CULLong>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CULLong>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULLong_$cptrsOfMutableArrayData -}
7bca68bd8681b10384bb829009400a74
  $fArrayEltCULLong_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CULLong)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CULLong)
                    (Data.Array.Accelerate.Array.Data.$WAD_CULLong
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word64)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Word.Word64))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word64)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord64_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word64
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word64
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CULLong>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CULLong>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCULLong_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CULLong
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CULLong
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CULLong) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULLong ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word64
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCULLong[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCULLong_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CULLong
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs
            Foreign.C.Types.CULLong)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CULLong)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CULLong)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCULLong_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CULLong>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CULLong>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CULLong>_R)) -}
2bc8b4925793b59da5add62f488ca917
  $fArrayEltCULLong_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CULLong
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CULLong)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULLong ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word64
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CULLong>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
418f53c4fde8d391ece17414532b6040
  $fArrayEltCULLong_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CULLong
    -> GHC.Types.Int -> Foreign.C.Types.CULLong
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CULLong)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULLong ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CULLong
                   (\ (tpl :: GHC.Word.Word64) -> tpl)
                     `cast`
                   (<GHC.Word.Word64>_R ->_R Sym (Foreign.C.Types.N:CULLong[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Word.Word64)
                      @ GHC.Word.Word64
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word64)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Word.Word64 -> GHC.Types.IO GHC.Word.Word64)
                         @ (GHC.Types.IO GHC.Word.Word64)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Word.Word64
                            @ GHC.Word.Word64
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word64)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readWord64OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Word.Word64>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)))) }) -}
7ed26cb45f6c1516d97e9b72c6f3d29d
  $fArrayEltCULLong_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CULLong
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CULLong
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CULLong)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULLong ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Word.Word64
                    @ Foreign.C.Types.CULLong
                    (\ (tpl :: GHC.Word.Word64) -> tpl)
                      `cast`
                    (<GHC.Word.Word64>_R ->_R Sym (Foreign.C.Types.N:CULLong[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Word.Word64 -> GHC.Types.IO GHC.Word.Word64)
                       @ (GHC.Types.IO GHC.Word.Word64)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Word.Word64
                          @ GHC.Word.Word64
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word64)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readWord64OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Word.Word64>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word64>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CULLong>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CULLong>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CULLong>_R)) -}
c74b7a2cf0487f9dc20527af42da6842
  $fArrayEltCULLong_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CULLong
    -> GHC.Types.Int -> Foreign.C.Types.CULLong -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CULLong)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CULLong) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULLong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULLong ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word64 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word64
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word64)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord64OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CULLong[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word64>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCULong ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CULong
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CULong
                  Data.Array.Accelerate.Array.Data.$WArrayEltRculong
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULong_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULong_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULong_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULong_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULong_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULong_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CULong)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CULong)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CULong>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CULong>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CULong>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCULong_$cptrsOfMutableArrayData -}
3bf66857be94a2a5ac1d07139f35e5c4
  $fArrayEltCULong_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CULong)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray
                         Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CULong)
                    (Data.Array.Accelerate.Array.Data.$WAD_CULong
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray
                               Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray
                               Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO
                               (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                             @ (GHC.Types.IO
                                  (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord64_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr
                                  Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr
                                     Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr
                                        Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr
                                           Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr
                                              Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CULong>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CULong>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCULong_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CULong
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CULong
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CULong) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULong ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCULong[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCULong_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CULong
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CULong)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CULong)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CULong)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCULong_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CULong>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CULong>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CULong>_R)) -}
db034d1e8b85aec23e377978fb8b7057
  $fArrayEltCULong_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CULong
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CULong)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULong ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CULong>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
85096bb5bb8ffe1bf110b42ec348fa52
  $fArrayEltCULong_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CULong
    -> GHC.Types.Int -> Foreign.C.Types.CULong
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CULong)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULong ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Word.Word64
                   @ Foreign.C.Types.CULong
                   (\ (tpl :: GHC.Word.Word64) -> tpl)
                     `cast`
                   (<GHC.Word.Word64>_R ->_R Sym (Foreign.C.Types.N:CULong[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO
                           Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                      @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                      (GHC.IO.Unsafe.unsafePerformIO
                         @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                            -> GHC.Types.IO
                                 Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                         @ (GHC.Types.IO
                              Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                            @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr
                                      Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readWord64OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr
                             Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)))) }) -}
9b6e6dd3ce3366ab624f1cea5a18c9fc
  $fArrayEltCULong_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CULong
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CULong
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CULong)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULong ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Word.Word64
                    @ Foreign.C.Types.CULong
                    (\ (tpl :: GHC.Word.Word64) -> tpl)
                      `cast`
                    (<GHC.Word.Word64>_R ->_R Sym (Foreign.C.Types.N:CULong[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                          -> GHC.Types.IO
                               Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                       @ (GHC.Types.IO
                            Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                          @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr
                                    Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readWord64OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr
                           Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word64>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CULong>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CULong>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CULong>_R)) -}
e66a394082dc77265bacbdd8796c9f6f
  $fArrayEltCULong_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CULong
    -> GHC.Types.Int -> Foreign.C.Types.CULong -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CULong)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CULong) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULong0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CULong ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                      -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr
                                Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord64OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CULong[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr
                       Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUShort ::
    Data.Array.Accelerate.Array.Data.ArrayElt Foreign.C.Types.CUShort
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Foreign.C.Types.CUShort
                  Data.Array.Accelerate.Array.Data.$WArrayEltRcushort
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUShort_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUShort_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUShort_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUShort_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUShort_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUShort_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               Foreign.C.Types.CUShort)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CUShort)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData
                           Foreign.C.Types.CUShort>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData
                      Foreign.C.Types.CUShort>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData
                                    Foreign.C.Types.CUShort>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltCUShort_$cptrsOfMutableArrayData -}
6d02243f73450beb80da666b7df3ae57
  $fArrayEltCUShort_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            Foreign.C.Types.CUShort)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CUShort)
                    (Data.Array.Accelerate.Array.Data.$WAD_CUShort
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word16)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Word.Word16))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word16)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord16_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word16
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word16
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray
                         Foreign.C.Types.CUShort>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  Foreign.C.Types.CUShort>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUShort_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUShort
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs
         Foreign.C.Types.CUShort
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUShort) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUShort ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word16
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCUShort[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltCUShort_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUShort
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs
            Foreign.C.Types.CUShort)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             Foreign.C.Types.CUShort)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CUShort)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltCUShort_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs
                         Foreign.C.Types.CUShort>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CUShort>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  Foreign.C.Types.CUShort>_R)) -}
b83bc9ab75877e1fc60a39fd74d2b7d0
  $fArrayEltCUShort_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUShort
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUShort)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUShort ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word16
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData
                    Foreign.C.Types.CUShort>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a49dbd1216459b2753d16ef49e2fb87f
  $fArrayEltCUShort_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData Foreign.C.Types.CUShort
    -> GHC.Types.Int -> Foreign.C.Types.CUShort
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            Foreign.C.Types.CUShort)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUShort ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ GHC.Word.Word16
                   @ Foreign.C.Types.CUShort
                   (\ (tpl :: GHC.Word.Word16) -> tpl)
                     `cast`
                   (<GHC.Word.Word16>_R ->_R Sym (Foreign.C.Types.N:CUShort[0]))
                   (GHC.Base.$!
                      @ (GHC.Types.IO GHC.Word.Word16)
                      @ GHC.Word.Word16
                      (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word16)
                      (GHC.Base.$
                         @ 'GHC.Types.PtrRepLifted
                         @ (GHC.Ptr.Ptr GHC.Word.Word16 -> GHC.Types.IO GHC.Word.Word16)
                         @ (GHC.Types.IO GHC.Word.Word16)
                         (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                            @ GHC.Word.Word16
                            @ GHC.Word.Word16
                            ba)
                         (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word16)
                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          (GHC.Storable.readWord16OffPtr ptr i)
                            `cast`
                          (GHC.Types.N:IO[0] <GHC.Word.Word16>_R)
                            eta)
                           `cast`
                         (<GHC.Ptr.Ptr GHC.Word.Word16>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word16>_R)))) }) -}
4f1948936921204d91a26f8a998ea95f
  $fArrayEltCUShort_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUShort
    -> GHC.Types.Int -> GHC.Types.IO Foreign.C.Types.CUShort
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CUShort)
                   (i :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUShort ba ->
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ GHC.Word.Word16
                    @ Foreign.C.Types.CUShort
                    (\ (tpl :: GHC.Word.Word16) -> tpl)
                      `cast`
                    (<GHC.Word.Word16>_R ->_R Sym (Foreign.C.Types.N:CUShort[0]))
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Ptr.Ptr GHC.Word.Word16 -> GHC.Types.IO GHC.Word.Word16)
                       @ (GHC.Types.IO GHC.Word.Word16)
                       (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                          @ GHC.Word.Word16
                          @ GHC.Word.Word16
                          ba)
                       (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word16)
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        (GHC.Storable.readWord16OffPtr ptr i)
                          `cast`
                        (GHC.Types.N:IO[0] <GHC.Word.Word16>_R)
                          eta1)
                         `cast`
                       (<GHC.Ptr.Ptr GHC.Word.Word16>_R
                        ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word16>_R))))
                   `cast`
                 (GHC.Types.N:IO[0] <Foreign.C.Types.CUShort>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.MutableArrayData
                    Foreign.C.Types.CUShort>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Foreign.C.Types.CUShort>_R)) -}
a84e9f21b90e6a0a3ddeeef29160f72e
  $fArrayEltCUShort_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData
      Foreign.C.Types.CUShort
    -> GHC.Types.Int -> Foreign.C.Types.CUShort -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            Foreign.C.Types.CUShort)
                   (i :: GHC.Types.Int)
                   (ds1 :: Foreign.C.Types.CUShort) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUShort0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_CUShort ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word16 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word16
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word16)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord16OffPtr
                       ptr
                       i
                       ds1 `cast` (Foreign.C.Types.N:CUShort[0]))
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word16>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltChar ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Types.Char
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Char
                  Data.Array.Accelerate.Array.Data.$WArrayEltRchar
                  Data.Array.Accelerate.Array.Data.$fArrayEltChar_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltChar_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltChar_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltChar_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltChar_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltChar_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Types.Char)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltChar_$cptrsOfMutableArrayData -}
0ae21444faeff0485fc879cc914b9f8a
  $fArrayEltChar_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Char)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Char)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Char)
                    (Data.Array.Accelerate.Array.Data.$WAD_Char
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Char))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Char))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Types.Char)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Char))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Char))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Char))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Char)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Char)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Char))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Types.Char)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Char)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableChar_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Types.Char
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Char)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Char)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Char)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Char)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Char)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Types.Char
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Char>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Types.Char>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltChar_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Char
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Char) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Char ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Types.Char
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsChar[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltChar_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Char
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Char)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Types.Char)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Char)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltChar_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Char>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Char>_R)) -}
cf8d2423b1008add2603898bdb9e527c
  $fArrayEltChar_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Char)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Char ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Types.Char
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a7fc06dd752f4b498d83425a07795d5b
  $fArrayEltChar_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Char
    -> GHC.Types.Int -> GHC.Types.Char
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Char)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Char ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Types.Char)
                   @ GHC.Types.Char
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Types.Char)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Types.Char -> GHC.Types.IO GHC.Types.Char)
                      @ (GHC.Types.IO GHC.Types.Char)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Types.Char
                         @ GHC.Types.Char
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Char)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readWideCharOffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Types.Char>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Types.Char>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R))) }) -}
9fede363ac26e4d55f920879f6da04ca
  $fArrayEltChar_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Char
    -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Char
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Char)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Char ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Char -> GHC.Types.IO GHC.Types.Char)
                   @ (GHC.Types.IO GHC.Types.Char)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Char
                      @ GHC.Types.Char
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Char)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readWideCharOffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Types.Char>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Char>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Char>_R)) }) -}
07ea5e2a5b9c3b2b427c64aa17e3fc22
  $fArrayEltChar_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Char
    -> GHC.Types.Int -> GHC.Types.Char -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Char)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Types.Char) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaChar0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Char ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Char -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Char
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Char)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWideCharOffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Char>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltDouble ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Types.Double
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Double
                  Data.Array.Accelerate.Array.Data.$WArrayEltRdouble
                  Data.Array.Accelerate.Array.Data.$fArrayEltDouble_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltDouble_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltDouble_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltDouble_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltDouble_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltDouble_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Types.Double)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltDouble_$cptrsOfMutableArrayData -}
fe42b09dca43b927e7dd2c6476c33fd8
  $fArrayEltDouble_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData
            GHC.Types.Double)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double)
                    (Data.Array.Accelerate.Array.Data.$WAD_Double
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Types.Double)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Types.Double))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Double))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Double))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Types.Double)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableDouble_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Types.Double
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Double)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Types.Double
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Double>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Types.Double>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltDouble_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Double ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Types.Double
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsDouble[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltDouble_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Double
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Double)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Types.Double)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Double)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltDouble_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Double>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs
                                  GHC.Types.Double>_R)) -}
9df32c62a101e1c08bd824fc36af83f5
  $fArrayEltDouble_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Double)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Double ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Types.Double
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
223b4c7262966ec0e87decc71996050b
  $fArrayEltDouble_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Double
    -> GHC.Types.Int -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Double)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Double ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Types.Double)
                   @ GHC.Types.Double
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Types.Double)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Types.Double -> GHC.Types.IO GHC.Types.Double)
                      @ (GHC.Types.IO GHC.Types.Double)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Types.Double
                         @ GHC.Types.Double
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Double)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readDoubleOffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Types.Double>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Types.Double>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R))) }) -}
93c6547e7d18a403af78f6546bd091b0
  $fArrayEltDouble_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Double
    -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Double)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Double ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Double -> GHC.Types.IO GHC.Types.Double)
                   @ (GHC.Types.IO GHC.Types.Double)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Double
                      @ GHC.Types.Double
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Double)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readDoubleOffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Types.Double>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Double>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R)) }) -}
dd17699c5c66164704dfa37812a85ad5
  $fArrayEltDouble_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Double
    -> GHC.Types.Int -> GHC.Types.Double -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Double)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaDouble0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Double ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Double -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Double
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Double)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeDoubleOffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Double>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltFloat ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Types.Float
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Float
                  Data.Array.Accelerate.Array.Data.$WArrayEltRfloat
                  Data.Array.Accelerate.Array.Data.$fArrayEltFloat_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltFloat_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltFloat_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltFloat_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltFloat_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltFloat_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Types.Float)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltFloat_$cptrsOfMutableArrayData -}
bb2d6afe5d20b25149105baea1a12a2f
  $fArrayEltFloat_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Float)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float)
                    (Data.Array.Accelerate.Array.Data.$WAD_Float
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Types.Float)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Types.Float))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Float))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Float))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Types.Float)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableFloat_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Types.Float
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Float)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Types.Float
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Float>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Types.Float>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltFloat_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Float
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Float ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Types.Float
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsFloat[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltFloat_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Float
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Float)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Types.Float)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Float)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltFloat_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Float>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Float>_R)) -}
6c9c361caceffab9e7d7ade6332c49e8
  $fArrayEltFloat_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Float)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Float ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Types.Float
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0bfcdcbc9f4c4ae9630875be3792195e
  $fArrayEltFloat_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Float
    -> GHC.Types.Int -> GHC.Types.Float
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Float)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Float ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Types.Float)
                   @ GHC.Types.Float
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Types.Float)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Types.Float -> GHC.Types.IO GHC.Types.Float)
                      @ (GHC.Types.IO GHC.Types.Float)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Types.Float
                         @ GHC.Types.Float
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Float)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readFloatOffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Types.Float>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Types.Float>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Float>_R))) }) -}
872b82dbd4f0af5209506bbd2438360f
  $fArrayEltFloat_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Float
    -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Float
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Float)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Float ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Float -> GHC.Types.IO GHC.Types.Float)
                   @ (GHC.Types.IO GHC.Types.Float)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Float
                      @ GHC.Types.Float
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Float)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readFloatOffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Types.Float>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Float>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Float>_R)) }) -}
9f65fa8f5a9fb73f98a1ab6781ea7916
  $fArrayEltFloat_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Float
    -> GHC.Types.Int -> GHC.Types.Float -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Float)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Types.Float) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaFloat0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Float ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Float -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Float
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Float)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeFloatOffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Float>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Types.Int
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Int
                  Data.Array.Accelerate.Array.Data.$WArrayEltRint
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Types.Int)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt_$cptrsOfMutableArrayData -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt16 ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Int.Int16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int16
                  Data.Array.Accelerate.Array.Data.$WArrayEltRint16
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt16_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt16_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt16_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt16_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt16_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt16_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Int.Int16)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt16_$cptrsOfMutableArrayData -}
d74195ae9ad9453f808e74afc6b253ad
  $fArrayEltInt16_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int16)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16)
                    (Data.Array.Accelerate.Array.Data.$WAD_Int16
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Int.Int16)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt16_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Int.Int16
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int16)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Int.Int16
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int16>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Int.Int16>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt16_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int16
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Int.Int16) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int16 ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Int.Int16
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt16[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt16_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int16
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int16)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Int.Int16)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int16)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltInt16_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int16>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int16>_R)) -}
c786ef93d918a2c06f0274ad07e37581
  $fArrayEltInt16_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int16 ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Int.Int16
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
4ab55451bd77de2cd82e13845d05cee4
  $fArrayEltInt16_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16
    -> GHC.Types.Int -> GHC.Int.Int16
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int16)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int16 ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Int.Int16)
                   @ GHC.Int.Int16
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Int.Int16)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Int.Int16 -> GHC.Types.IO GHC.Int.Int16)
                      @ (GHC.Types.IO GHC.Int.Int16)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Int.Int16
                         @ GHC.Int.Int16
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int16)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readInt16OffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Int.Int16>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Int.Int16>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int16>_R))) }) -}
0a6bb174dc71c32dddeb2949a0d72bbf
  $fArrayEltInt16_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int16
    -> GHC.Types.Int -> GHC.Types.IO GHC.Int.Int16
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Int.Int16)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int16 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int16 -> GHC.Types.IO GHC.Int.Int16)
                   @ (GHC.Types.IO GHC.Int.Int16)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int16
                      @ GHC.Int.Int16
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int16)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readInt16OffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Int.Int16>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int16>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int16>_R)) }) -}
dfbca1945cb4af977455189241e76f96
  $fArrayEltInt16_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int16
    -> GHC.Types.Int -> GHC.Int.Int16 -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Int.Int16)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Int.Int16) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int16 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int16 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int16
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int16)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt16OffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int16>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt32 ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Int.Int32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int32
                  Data.Array.Accelerate.Array.Data.$WArrayEltRint32
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt32_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt32_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt32_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt32_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt32_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt32_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Int.Int32)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt32_$cptrsOfMutableArrayData -}
e1cd3f7ad0beb9d309f9491057cbf701
  $fArrayEltInt32_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int32)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32)
                    (Data.Array.Accelerate.Array.Data.$WAD_Int32
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Int.Int32)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt32_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Int.Int32
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int32)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Int.Int32
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int32>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Int.Int32>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt32_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int32
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int32 ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Int.Int32
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt32[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt32_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int32
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int32)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Int.Int32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int32)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltInt32_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int32>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int32>_R)) -}
4c5197212e7fa6dbfd14eb15694a53bc
  $fArrayEltInt32_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int32 ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Int.Int32
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
18ae747a9c2741a75794147439e8abb4
  $fArrayEltInt32_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32
    -> GHC.Types.Int -> GHC.Int.Int32
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int32)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int32 ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Int.Int32)
                   @ GHC.Int.Int32
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Int.Int32)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Int.Int32 -> GHC.Types.IO GHC.Int.Int32)
                      @ (GHC.Types.IO GHC.Int.Int32)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Int.Int32
                         @ GHC.Int.Int32
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int32)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readInt32OffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Int.Int32>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Int.Int32>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int32>_R))) }) -}
cc9033f129e51a9d0b1a32297b57318b
  $fArrayEltInt32_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int32
    -> GHC.Types.Int -> GHC.Types.IO GHC.Int.Int32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Int.Int32)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int32 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int32 -> GHC.Types.IO GHC.Int.Int32)
                   @ (GHC.Types.IO GHC.Int.Int32)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int32
                      @ GHC.Int.Int32
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int32)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readInt32OffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Int.Int32>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int32>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int32>_R)) }) -}
9b268327ce6d13a6b2345fa24df53837
  $fArrayEltInt32_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int32
    -> GHC.Types.Int -> GHC.Int.Int32 -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Int.Int32)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Int.Int32) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int32 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int32 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int32
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int32)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt32OffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int32>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt64 ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Int.Int64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int64
                  Data.Array.Accelerate.Array.Data.$WArrayEltRint64
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt64_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt64_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt64_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt64_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt64_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt64_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Int.Int64)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt64_$cptrsOfMutableArrayData -}
1ad37e6fe090dd95c0b34e611a556315
  $fArrayEltInt64_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int64)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64)
                    (Data.Array.Accelerate.Array.Data.$WAD_Int64
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Int.Int64)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt64_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Int.Int64
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int64)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Int.Int64
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int64>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Int.Int64>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt64_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int64
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int64 ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Int.Int64
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt64[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt64_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int64
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int64)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Int.Int64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int64)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltInt64_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int64>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int64>_R)) -}
47f0cf624e6f20cc4bfa13c491cb6f93
  $fArrayEltInt64_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int64 ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Int.Int64
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d503296fd99225f8a27ad2dde65b8903
  $fArrayEltInt64_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64
    -> GHC.Types.Int -> GHC.Int.Int64
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int64)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int64 ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Int.Int64)
                   @ GHC.Int.Int64
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Int.Int64)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Int.Int64 -> GHC.Types.IO GHC.Int.Int64)
                      @ (GHC.Types.IO GHC.Int.Int64)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Int.Int64
                         @ GHC.Int.Int64
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int64)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readInt64OffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Int.Int64>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int64>_R))) }) -}
c691f4998ab65da3400f1c95d1570594
  $fArrayEltInt64_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int64
    -> GHC.Types.Int -> GHC.Types.IO GHC.Int.Int64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Int.Int64)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int64 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int64 -> GHC.Types.IO GHC.Int.Int64)
                   @ (GHC.Types.IO GHC.Int.Int64)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int64
                      @ GHC.Int.Int64
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int64)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readInt64OffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int64>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int64>_R)) }) -}
9d067b2020732961299b3a7c615260b7
  $fArrayEltInt64_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int64
    -> GHC.Types.Int -> GHC.Int.Int64 -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Int.Int64)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Int.Int64) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int64 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int64 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int64
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int64)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt64OffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int64>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt8 ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Int.Int8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Int.Int8
                  Data.Array.Accelerate.Array.Data.$WArrayEltRint8
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt8_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt8_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt8_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt8_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt8_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt8_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltInt8_$cptrsOfMutableArrayData -}
6436da9b9752faae5f035b957f4fddd5
  $fArrayEltInt8_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int8)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8)
                    (Data.Array.Accelerate.Array.Data.$WAD_Int8
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Int.Int8)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt8_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Int.Int8
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Int.Int8)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Int.Int8
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Int.Int8>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Int.Int8>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt8_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int8
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Int.Int8) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int8 ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Int.Int8
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt8[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt8_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int8
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int8)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int8)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltInt8_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int8>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int8>_R)) -}
f0461e9a50ed4d1135bc75628eb21e73
  $fArrayEltInt8_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int8 ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Int.Int8
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b1a68036e3833ba65ef00acc091a4b83
  $fArrayEltInt8_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8
    -> GHC.Types.Int -> GHC.Int.Int8
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Int.Int8)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int8 ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Int.Int8)
                   @ GHC.Int.Int8
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Int.Int8)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Int.Int8 -> GHC.Types.IO GHC.Int.Int8)
                      @ (GHC.Types.IO GHC.Int.Int8)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Int.Int8
                         @ GHC.Int.Int8
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int8)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readInt8OffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Int.Int8>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int8>_R))) }) -}
c8949db5633153e9635a65c8fd38c231
  $fArrayEltInt8_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int8
    -> GHC.Types.Int -> GHC.Types.IO GHC.Int.Int8
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Int.Int8)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int8 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int8 -> GHC.Types.IO GHC.Int.Int8)
                   @ (GHC.Types.IO GHC.Int.Int8)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int8
                      @ GHC.Int.Int8
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int8)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readInt8OffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int8>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Int.Int8>_R)) }) -}
d33959119169c19cad23c15977fac3e2
  $fArrayEltInt8_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Int.Int8
    -> GHC.Types.Int -> GHC.Int.Int8 -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Int.Int8)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Int.Int8) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int8 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Int.Int8 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Int.Int8
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Int.Int8)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeInt8OffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Int.Int8>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
923b1a8a71603dbfc0207d000dc1ffa6
  $fArrayEltInt_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Int)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int)
                    (Data.Array.Accelerate.Array.Data.$WAD_Int
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Int))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Int)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Int))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray @ GHC.Types.Int)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Int)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableInt_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Types.Int
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Int)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Int)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Int)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Int)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Int)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Types.Int
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Int>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Types.Int>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Int
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Types.Int
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltInt_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Types.Int)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Int)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltInt_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Int>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Int>_R)) -}
a029a9ba9232b877da8fdf6b5daa0cd9
  $fArrayEltInt_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Types.Int
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
38da182d0e4736c2b085ff0a425a2b6e
  $fArrayEltInt_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Int)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Types.Int)
                   @ GHC.Types.Int
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Types.Int)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Types.Int -> GHC.Types.IO GHC.Types.Int)
                      @ (GHC.Types.IO GHC.Types.Int)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Types.Int
                         @ GHC.Types.Int
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Int)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readIntOffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Types.Int>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R))) }) -}
a4ca8dfaadb29c1535b422684e81c783
  $fArrayEltInt_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Int)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Int -> GHC.Types.IO GHC.Types.Int)
                   @ (GHC.Types.IO GHC.Types.Int)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Int)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readIntOffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Types.Int>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Int>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) }) -}
354fdd41b7342a5fe75643ef4984cf66
  $fArrayEltInt_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Int
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Int)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Int ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Int -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Int
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Int)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeIntOffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Int>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Types.Word
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.Word
                  Data.Array.Accelerate.Array.Data.$WArrayEltRword
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Types.Word)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord_$cptrsOfMutableArrayData -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord16 ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Word.Word16
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word16
                  Data.Array.Accelerate.Array.Data.$WArrayEltRword16
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord16_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord16_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord16_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord16_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord16_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord16_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Word.Word16)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord16_$cptrsOfMutableArrayData -}
aef4dfe309690380a73fa2b583aac756
  $fArrayEltWord16_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word16)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16)
                    (Data.Array.Accelerate.Array.Data.$WAD_Word16
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word16)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Word.Word16))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word16)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord16_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word16
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word16)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word16
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word16>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Word.Word16>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord16_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word16
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word16) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word16 ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word16
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord16[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord16_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word16
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word16)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Word.Word16)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word16)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltWord16_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word16>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word16>_R)) -}
a9ff7321c806df34e5461ca5820737ff
  $fArrayEltWord16_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word16)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word16 ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word16
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1ca685e9b45cbef36ce943634a3cb03f
  $fArrayEltWord16_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word16
    -> GHC.Types.Int -> GHC.Word.Word16
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word16)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word16 ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Word.Word16)
                   @ GHC.Word.Word16
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word16)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Word.Word16 -> GHC.Types.IO GHC.Word.Word16)
                      @ (GHC.Types.IO GHC.Word.Word16)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Word.Word16
                         @ GHC.Word.Word16
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word16)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readWord16OffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Word.Word16>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Word.Word16>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word16>_R))) }) -}
c89551a03126c89a46b88c84d0a60673
  $fArrayEltWord16_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word16
    -> GHC.Types.Int -> GHC.Types.IO GHC.Word.Word16
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Word.Word16)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word16 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word16 -> GHC.Types.IO GHC.Word.Word16)
                   @ (GHC.Types.IO GHC.Word.Word16)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word16
                      @ GHC.Word.Word16
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word16)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readWord16OffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Word.Word16>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word16>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word16>_R)) }) -}
9e6357528739dce1d09596b72c9b4305
  $fArrayEltWord16_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word16
    -> GHC.Types.Int -> GHC.Word.Word16 -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Word.Word16)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Word.Word16) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord160[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word16 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word16 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word16
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word16)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord16OffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word16>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord32 ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Word.Word32
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word32
                  Data.Array.Accelerate.Array.Data.$WArrayEltRword32
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord32_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord32_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord32_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord32_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord32_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord32_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Word.Word32)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord32_$cptrsOfMutableArrayData -}
bddc04174b8dfcf7c2a1381b504fa44b
  $fArrayEltWord32_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word32)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32)
                    (Data.Array.Accelerate.Array.Data.$WAD_Word32
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word32)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Word.Word32))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word32)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord32_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word32
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word32)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word32
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word32>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Word.Word32>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord32_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word32
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word32 ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word32
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord32[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord32_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word32
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word32)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Word.Word32)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word32)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltWord32_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word32>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word32>_R)) -}
fa2a23175af27e1339e9dd3b512dab4a
  $fArrayEltWord32_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word32)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word32 ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word32
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ce9b6604def994fa215089b557482dff
  $fArrayEltWord32_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word32
    -> GHC.Types.Int -> GHC.Word.Word32
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word32)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word32 ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Word.Word32)
                   @ GHC.Word.Word32
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word32)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Word.Word32 -> GHC.Types.IO GHC.Word.Word32)
                      @ (GHC.Types.IO GHC.Word.Word32)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Word.Word32
                         @ GHC.Word.Word32
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word32)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readWord32OffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Word.Word32>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word32>_R))) }) -}
3f0a5007da1ee32d1e9706246c87f013
  $fArrayEltWord32_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word32
    -> GHC.Types.Int -> GHC.Types.IO GHC.Word.Word32
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Word.Word32)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word32 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word32 -> GHC.Types.IO GHC.Word.Word32)
                   @ (GHC.Types.IO GHC.Word.Word32)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word32
                      @ GHC.Word.Word32
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word32)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readWord32OffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word32>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word32>_R)) }) -}
41113cf9525757f9ab80ee68ce967b76
  $fArrayEltWord32_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word32
    -> GHC.Types.Int -> GHC.Word.Word32 -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Word.Word32)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Word.Word32) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord320[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word32 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word32 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word32
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word32)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord32OffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word32>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord64 ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Word.Word64
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word64
                  Data.Array.Accelerate.Array.Data.$WArrayEltRword64
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord64_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord64_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord64_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord64_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord64_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord64_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Word.Word64)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord64_$cptrsOfMutableArrayData -}
5643af7650c18483b56f0909bfb111e5
  $fArrayEltWord64_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word64)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64)
                    (Data.Array.Accelerate.Array.Data.$WAD_Word64
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word64)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray
                                       GHC.Word.Word64))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word64)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord64_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word64
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word64)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word64
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word64>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Word.Word64>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord64_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word64 ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word64
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord64[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord64_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word64
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word64)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Word.Word64)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word64)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltWord64_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word64>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word64>_R)) -}
448f95311b1cec1d3ad0cbc4119d08eb
  $fArrayEltWord64_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word64)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word64 ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word64
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8f7554f74dcbe1456664b8a523e96c0c
  $fArrayEltWord64_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word64
    -> GHC.Types.Int -> GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word64)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word64 ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Word.Word64)
                   @ GHC.Word.Word64
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word64)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Word.Word64 -> GHC.Types.IO GHC.Word.Word64)
                      @ (GHC.Types.IO GHC.Word.Word64)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Word.Word64
                         @ GHC.Word.Word64
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word64)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readWord64OffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Word.Word64>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word64>_R))) }) -}
d72eeb28c1832a72d2c24a5d9a0468e0
  $fArrayEltWord64_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word64
    -> GHC.Types.Int -> GHC.Types.IO GHC.Word.Word64
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Word.Word64)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word64 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word64 -> GHC.Types.IO GHC.Word.Word64)
                   @ (GHC.Types.IO GHC.Word.Word64)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word64
                      @ GHC.Word.Word64
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word64)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readWord64OffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word64>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word64>_R)) }) -}
6c4187b16d0158faf1d0500f7f539a23
  $fArrayEltWord64_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word64
    -> GHC.Types.Int -> GHC.Word.Word64 -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Word.Word64)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Word.Word64) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord640[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word64 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word64 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word64
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word64)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord64OffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word64>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord8 ::
    Data.Array.Accelerate.Array.Data.ArrayElt GHC.Word.Word8
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Word.Word8
                  Data.Array.Accelerate.Array.Data.$WArrayEltRword8
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord8_$cunsafeIndexArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord8_$cptrsOfArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord8_$ctouchArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord8_$cnewArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord8_$cunsafeReadArrayData
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord8_$cunsafeWriteArrayData
                  (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                               GHC.Word.Word8)
                     (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                   (GHC.Base.returnIO
                      @ (Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8)
                      eta)
                     `cast`
                   (GHC.Types.N:IO[0]
                        <Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8>_R)
                     eta1)
                    `cast`
                  (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8>_R))
                  Data.Array.Accelerate.Array.Data.$fArrayEltWord8_$cptrsOfMutableArrayData -}
f765a4f55ff8870db589ed2340f85f76
  $fArrayEltWord8_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word8)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8)
                    (Data.Array.Accelerate.Array.Data.$WAD_Word8
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Word.Word8)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Word.Word8)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord8_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Word.Word8
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Word.Word8
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Word.Word8>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Word.Word8>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord8_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word8
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word8) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word8 ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Word.Word8
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord8[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord8_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word8
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word8)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Word.Word8)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word8)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltWord8_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word8>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word8>_R)) -}
437063b335d1f70783374cc94f34ad4c
  $fArrayEltWord8_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word8)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word8 ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Word.Word8
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7d02040bd8632af9ab3bd1a513eb14fe
  $fArrayEltWord8_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Word.Word8
    -> GHC.Types.Int -> GHC.Word.Word8
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Word.Word8)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word8 ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Word.Word8)
                   @ GHC.Word.Word8
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Word.Word8)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO GHC.Word.Word8)
                      @ (GHC.Types.IO GHC.Word.Word8)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Word.Word8
                         @ GHC.Word.Word8
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readWord8OffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Word.Word8>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word8>_R))) }) -}
20a81396fd38d68b76968d6aec7878be
  $fArrayEltWord8_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word8
    -> GHC.Types.Int -> GHC.Types.IO GHC.Word.Word8
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Word.Word8)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word8 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO GHC.Word.Word8)
                   @ (GHC.Types.IO GHC.Word.Word8)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word8
                      @ GHC.Word.Word8
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readWord8OffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Word.Word8>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Word.Word8>_R)) }) -}
d055e0336a4c9ec92d911562c6b6a898
  $fArrayEltWord8_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Word.Word8
    -> GHC.Types.Int -> GHC.Word.Word8 -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Word.Word8)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Word.Word8) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord80[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word8 ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Word.Word8
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Word.Word8)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWord8OffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Word.Word8>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
41390c934350737c01ee17fdbf6abb8b
  $fArrayEltWord_$cnewArrayData ::
    GHC.Types.Int
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Word)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (size :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Data.Array.Accelerate.Array.Data"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "./Data/Array/Accelerate/Array/Data.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 5#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 772#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 19#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 (Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$>
                    @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Word)
                    @ (Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Word)
                    (Data.Array.Accelerate.Array.Data.$WAD_Word
                       @ Data.Array.Accelerate.Array.Unique.UniqueArray)
                    (GHC.Base.$
                       @ 'GHC.Types.PtrRepLifted
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Word))
                       @ (GHC.Types.IO
                            (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Word))
                       (\ (x :: GHC.Types.IO
                                  (Data.Array.Accelerate.Array.Unique.UniqueArray
                                     GHC.Types.Word)) ->
                        case GHC.Classes.||
                               (GHC.Classes.not GHC.Types.False)
                               (GHC.Classes.geInt size (GHC.Types.I# 0#)) of wild {
                          GHC.Types.False
                          -> GHC.Err.error
                               @ 'GHC.Types.PtrRepLifted
                               @ (GHC.Types.IO
                                    (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Word))
                               $dIP2
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (Data.Array.Accelerate.Error.message
                                  Data.Array.Accelerate.Error.Internal
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "./Data/Array/Accelerate/Array/Data.hs:772:5: "#
                                        c
                                        n)
                                     (Data.Array.Accelerate.Error.call
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString# @ b "newArrayData"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "size must be >= 0"#)))))
                          GHC.Types.True -> x })
                       (GHC.Base.$
                          @ 'GHC.Types.PtrRepLifted
                          @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Word))
                          @ (GHC.Types.IO
                               (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Word))
                          (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=<
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Word)
                             @ (Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Word)
                             @ (GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Types.Word))
                             (Data.Array.Accelerate.Array.Unique.newUniqueArray
                                @ GHC.Types.Word)
                             (GHC.IO.Unsafe.unsafeInterleaveIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Word)))
                          (let {
                             bytes :: GHC.Types.Int
                             = GHC.Num.$fNumInt_$c*
                                 size
                                 (Foreign.Storable.$fStorableWord_$calignment
                                    (GHC.Err.undefined
                                       @ 'GHC.Types.PtrRepLifted
                                       @ GHC.Types.Word
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "undefined"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Array.Accelerate.Array.Data"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Array/Accelerate/Array/Data.hs"#))
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 34#)
                                             (GHC.Types.I# 774#)
                                             (GHC.Types.I# 43#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))))
                           } in
                           GHC.Base.bindIO
                             @ (GHC.Types.Int
                                -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                             @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Word)
                             (GHC.IORef.readIORef
                                @ (GHC.Types.Int
                                   -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                                Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes)
                             (\ (new :: GHC.Types.Int
                                        -> GHC.Types.IO
                                             (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)) ->
                              GHC.Base.bindIO
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)
                                @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Word)
                                (new bytes)
                                (\ (ptr :: GHC.ForeignPtr.ForeignPtr GHC.Word.Word8) ->
                                 GHC.Base.thenIO
                                   @ ()
                                   @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Word)
                                   (GHC.Base.$
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.Base.String
                                      @ (GHC.Types.IO ())
                                      (Data.Array.Accelerate.Debug.Trace.traceIO
                                         (Data.Array.Accelerate.Debug.Flags.dump_gc
                                            @ Data.Label.Point.Total
                                            Control.Arrow.$fArrowApply(->)))
                                      (Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "gc: allocated new host array (size=%d, ptr=%s)"#))
                                         bytes
                                         (GHC.ForeignPtr.$fShowForeignPtr_$cshow
                                            @ GHC.Word.Word8
                                            ptr)))
                                   (GHC.Base.thenIO
                                      @ ()
                                      @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Word)
                                      (Data.Array.Accelerate.Debug.Monitoring.didAllocateBytesLocal
                                         (case GHC.Base.id
                                                 @ GHC.Types.Int
                                                 bytes of wild { GHC.Types.I# x# ->
                                          GHC.Int.I64# x# }))
                                      (GHC.Base.returnIO
                                         @ (GHC.ForeignPtr.ForeignPtr GHC.Types.Word)
                                         (GHC.ForeignPtr.castForeignPtr
                                            @ GHC.Word.Word8
                                            @ GHC.Types.Word
                                            ptr)))))))))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.GArrayData
                         Data.Array.Accelerate.Array.Unique.UniqueArray GHC.Types.Word>_R)
                   eta)
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.GArrayData
                                  Data.Array.Accelerate.Array.Unique.UniqueArray
                                  GHC.Types.Word>_R)) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord_$cptrsOfArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word
    -> Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Word
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,A,A,1*U(U,A)))>m,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Word) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word ba ->
                 (Data.Array.Accelerate.Array.Unique.unsafeUniqueArrayPtr
                    @ GHC.Types.Word
                    ba)
                   `cast`
                 (Sub (Sym (Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord[0]))) }) -}
ff45a629a63c423d76148392bf0a84a4
  $fArrayEltWord_$cptrsOfMutableArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Word
    -> GHC.Types.IO
         (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Word)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(1*U(A,A,A,A,1*U(U,A)))><S,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (eta :: Data.Array.Accelerate.Array.Data.ArrayData
                             GHC.Types.Word)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (GHC.Base.returnIO
                    @ (Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Word)
                    (Data.Array.Accelerate.Array.Data.$fArrayEltWord_$cptrsOfArrayData
                       eta))
                   `cast`
                 (GHC.Types.N:IO[0]
                      <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Word>_R)
                   eta1)
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Word>_R)) -}
8e387be64be618a70d80463b3ce5ddf9
  $fArrayEltWord_$ctouchArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word
    -> GHC.Types.IO ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U(A,A,U,A,A))><S,U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Word)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word ba ->
                 (Data.Array.Accelerate.Array.Unique.touchUniqueArray
                    @ GHC.Types.Word
                    ba)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   eta })
                  `cast`
                (<Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b5b6eef6193083b26045c9aeb81d654c
  $fArrayEltWord_$cunsafeIndexArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData GHC.Types.Word
    -> GHC.Types.Int -> GHC.Types.Word
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.ArrayData
                            GHC.Types.Word)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word ba ->
                 GHC.Base.$!
                   @ (GHC.Types.IO GHC.Types.Word)
                   @ GHC.Types.Word
                   (GHC.IO.Unsafe.unsafePerformIO @ GHC.Types.Word)
                   (GHC.Base.$
                      @ 'GHC.Types.PtrRepLifted
                      @ (GHC.Ptr.Ptr GHC.Types.Word -> GHC.Types.IO GHC.Types.Word)
                      @ (GHC.Types.IO GHC.Types.Word)
                      (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                         @ GHC.Types.Word
                         @ GHC.Types.Word
                         ba)
                      (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Word)
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       (GHC.Storable.readWordOffPtr ptr i)
                         `cast`
                       (GHC.Types.N:IO[0] <GHC.Types.Word>_R)
                         eta)
                        `cast`
                      (<GHC.Ptr.Ptr GHC.Types.Word>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Word>_R))) }) -}
07b0705a3256021b0d28c141b5e26771
  $fArrayEltWord_$cunsafeReadArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Word
    -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Word
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Word)
                   (i :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Word -> GHC.Types.IO GHC.Types.Word)
                   @ (GHC.Types.IO GHC.Types.Word)
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Word
                      @ GHC.Types.Word
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Word)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.readWordOffPtr ptr i)
                      `cast`
                    (GHC.Types.N:IO[0] <GHC.Types.Word>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Word>_R
                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Word>_R)) }) -}
e83a7ba9cb8b2f4812e7fd43ba58a7d9
  $fArrayEltWord_$cunsafeWriteArrayData ::
    Data.Array.Accelerate.Array.Data.MutableArrayData GHC.Types.Word
    -> GHC.Types.Int -> GHC.Types.Word -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLLLS(SL))),1*U(1*U(A,A,U,A,1*U(U,U)))><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: INLINE (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Data.Array.Accelerate.Array.Data.MutableArrayData
                            GHC.Types.Word)
                   (i :: GHC.Types.Int)
                   (e :: GHC.Types.Word) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord0[0]
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Word ba ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Ptr.Ptr GHC.Types.Word -> GHC.Types.IO ())
                   @ (GHC.Types.IO ())
                   (Data.Array.Accelerate.Array.Unique.withUniqueArrayPtr
                      @ GHC.Types.Word
                      @ ()
                      ba)
                   (\ (ptr :: GHC.Ptr.Ptr GHC.Types.Word)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (GHC.Storable.writeWordOffPtr ptr i e)
                      `cast`
                    (GHC.Types.N:IO[0] <()>_R)
                      eta)
                     `cast`
                   (<GHC.Ptr.Ptr GHC.Types.Word>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
31ff569eb2221fd5edaac87269472440
  $tc'ArrayEltRbool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2294195011923956146##
                   16758540963813731767##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRbool1) -}
14af28dde2dc99fd1f5636901c74b55e
  $tc'ArrayEltRbool1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRbool"#) -}
2c6738790c0e3dd4e8cdace4c5c3a6b8
  $tc'ArrayEltRcchar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14540095843929388899##
                   16972011097901140154##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcchar1) -}
4e55d0edb027c0fe5630ad3a4b1bd235
  $tc'ArrayEltRcchar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcchar"#) -}
c6e1f9e35e7f71e79514894fe44fed0b
  $tc'ArrayEltRcdouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8805924345894204278##
                   3515067361305567757##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcdouble1) -}
cbdd14663e20a700bf160b8eb208d897
  $tc'ArrayEltRcdouble1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcdouble"#) -}
d8d107964c92df71e21f32458b1ce094
  $tc'ArrayEltRcfloat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8845845687321111902##
                   3127027984147744464##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcfloat1) -}
e760a89696e23b7e4322c392bd82831c
  $tc'ArrayEltRcfloat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcfloat"#) -}
16b4970ff5de492226f667ec786cdb19
  $tc'ArrayEltRchar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11216074436050329159##
                   7780113494574297415##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRchar1) -}
c89a269b74c16f269dee18e94430d02a
  $tc'ArrayEltRchar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRchar"#) -}
f72c4c328dfb3e721bc25b7cc1100c66
  $tc'ArrayEltRcint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15199067631237716487##
                   4459350023642084493##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcint1) -}
c80c938305e1ccee7d9ff8b087dfac0e
  $tc'ArrayEltRcint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcint"#) -}
a32620200fe3b4e8282544c6060cb936
  $tc'ArrayEltRcllong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11253501466270855770##
                   9218617659313044137##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcllong1) -}
eddb6897efb36f84c93cf55c5cf82a32
  $tc'ArrayEltRcllong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcllong"#) -}
74f8a968222e9dd9ee08b6e7e5bdbd5f
  $tc'ArrayEltRclong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12653533384475853789##
                   3115669495680339940##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRclong1) -}
5a509839b079acb24fd795dae00f0471
  $tc'ArrayEltRclong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRclong"#) -}
1caf0b21da152315562db8314597e9b0
  $tc'ArrayEltRcschar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10636354633844773906##
                   3084939523160465876##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcschar1) -}
ad7c2cc86378d265f8cf7707414448ed
  $tc'ArrayEltRcschar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcschar"#) -}
88b4c94d772993759e04b5c51349ec8f
  $tc'ArrayEltRcshort :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16922098374759914508##
                   2682024817573202294##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcshort1) -}
2301a81d26093fe5019f72f8224bb4ed
  $tc'ArrayEltRcshort1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcshort"#) -}
2f29c43116f929b4d3cd77661b37bd2f
  $tc'ArrayEltRcuchar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2211556525833404679##
                   4967828273020985933##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcuchar1) -}
e50cbf0b79a4eedfbcf40f2a0b4b72ae
  $tc'ArrayEltRcuchar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcuchar"#) -}
5b28846f6524dd39cd132975bcea1cc7
  $tc'ArrayEltRcuint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1870602788379049236##
                   14212270641380724832##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcuint1) -}
811c703b155d0eca822831c2add6909d
  $tc'ArrayEltRcuint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcuint"#) -}
bae0fc0c8cc6dee8ca8cc6de4711918e
  $tc'ArrayEltRcullong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   504834971078890097##
                   9935377590704259988##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcullong1) -}
e7eac50fff3619a914acc233ad3cf9ff
  $tc'ArrayEltRcullong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcullong"#) -}
bce4e24fec5004231af6e0a1a0106559
  $tc'ArrayEltRculong :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8260839852022983965##
                   8585381660085837427##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRculong1) -}
69d4c7290f61a99118c78ec5bc0715cb
  $tc'ArrayEltRculong1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRculong"#) -}
b500b732ba11bb4f713532333a286d7c
  $tc'ArrayEltRcushort :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10480796957015086067##
                   12715334365111228372##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRcushort1) -}
6782929f80eb754e43b525782ce40f75
  $tc'ArrayEltRcushort1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRcushort"#) -}
1d32d77f0ccb4d78cd7f85e4654db77b
  $tc'ArrayEltRdouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17257658954231184166##
                   10247611524158032492##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRdouble1) -}
235bdc261e502bf9a5c0bb4cf089601e
  $tc'ArrayEltRdouble1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRdouble"#) -}
e9c5cde08cc9f792cd2cf6154e7e2986
  $tc'ArrayEltRfloat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17674956305866267876##
                   15520878349571825380##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRfloat1) -}
aa227328772e0b42df99445a819067b8
  $tc'ArrayEltRfloat1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRfloat"#) -}
6e5ccbb5af2cab532c3e8781ff7fc9a3
  $tc'ArrayEltRint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9136053254020113809##
                   8971718747545462802##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRint1) -}
a3d7683597a5bde5905190bf401aed8e
  $tc'ArrayEltRint1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRint"#) -}
5a508c717b7f78cfb9c0da73374685c9
  $tc'ArrayEltRint16 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15123126892071425195##
                   1560787242036808804##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRint2) -}
252a80cff1cb0fe74d3c2853a17c60e1
  $tc'ArrayEltRint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRint16"#) -}
fbbbd0b25bb3d0f57188572b182d8c8d
  $tc'ArrayEltRint3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRint32"#) -}
d60c07bc3c7e3c5e5dd966f9e1c557dd
  $tc'ArrayEltRint32 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15649080459699823504##
                   6768312895247143270##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRint3) -}
cd4591eb7fe0449854ad84fd98ba95d2
  $tc'ArrayEltRint4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRint64"#) -}
a733222aca393762292400e7bcf7565d
  $tc'ArrayEltRint5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRint8"#) -}
a1ee5bdbfdfa6f0ba8c1d211824623e3
  $tc'ArrayEltRint64 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15486967345722167224##
                   5805899940056501196##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRint4) -}
a3b0691343702d738c2b45ac12f6e43f
  $tc'ArrayEltRint8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1915389665405351180##
                   4218761269108915101##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRint5) -}
a624c799c3ef0697cdd1c69e39f82e8c
  $tc'ArrayEltRpair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4194314032601456210##
                   12316597368299911855##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRpair1) -}
5a5c1df545a42c2b61c67b3dc34ec0e5
  $tc'ArrayEltRpair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRpair"#) -}
ca6eb4ec7177e4306f74a7364921f5da
  $tc'ArrayEltRunit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   934830274826105137##
                   268413662113913291##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRunit1) -}
02eb576bc4c9b0b4d71f027089168cd4
  $tc'ArrayEltRunit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRunit"#) -}
6a64b5089dd06436cfdf554f2f9f839c
  $tc'ArrayEltRword :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8116574734331939558##
                   15948200514758460966##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRword1) -}
26acebe3684af29cde26628a56c6b6a9
  $tc'ArrayEltRword1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRword"#) -}
11072a0f3a674875ebbfd33b6b76e335
  $tc'ArrayEltRword16 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5663808384455732879##
                   18008051484766620012##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRword2) -}
5095b1d6cc53067dda77ab50fdaffa2d
  $tc'ArrayEltRword2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRword16"#) -}
c2c5a55b4a856347e817c0310c3838c9
  $tc'ArrayEltRword3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRword32"#) -}
9e1ab812382d62ddefbf25602eb5dc7f
  $tc'ArrayEltRword32 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2887504523510201021##
                   4557314307404639007##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRword3) -}
7d542b691d15aa2e4aabebc993357d2b
  $tc'ArrayEltRword4 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRword64"#) -}
b1bad193237e4b4c710f23c32f25d019
  $tc'ArrayEltRword5 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayEltRword8"#) -}
e08cbca21d418a6bea1e255f25d4db6a
  $tc'ArrayEltRword64 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4377866739706357608##
                   8216245189811464819##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRword4) -}
ef8629200932d67eaa4b62ed23156a1b
  $tc'ArrayEltRword8 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5870504257721193420##
                   18065919193270512326##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'ArrayEltRword5) -}
9eebcf587b506702fa93c0b6dc564b3d
  $tc'C:ArrayElt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   695334617147347577##
                   8504954963863048071##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tc'C:ArrayElt1) -}
e006e41968ccc0e604c4a6136dc72c84
  $tc'C:ArrayElt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:ArrayElt"#) -}
f3e5eeb00c4529f5ebdbc105c730ebd6
  $tcArrayElt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10641551476573563464##
                   3756341206454350651##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tcArrayElt1) -}
c2a9b83167cb9ce87d992458adee43e1
  $tcArrayElt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ArrayElt"#) -}
e498925a66cce1525f1459613f5b44a1
  $tcArrayEltR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14014705362194614508##
                   18302449584410676674##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tcArrayEltR1) -}
1a17b5d117583ea50db04580bcfb16f9
  $tcArrayEltR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ArrayEltR"#) -}
ea575f6c03cadd1db8daa9b5d0fd0109
  $tcGArrayData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6126272137818808149##
                   12400642293198883901##
                   Data.Array.Accelerate.Array.Data.$trModule
                   Data.Array.Accelerate.Array.Data.$tcGArrayData1) -}
068ec6363e500c70330bf1d9278bf656
  $tcGArrayData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GArrayData"#) -}
f0fb0edf4ff0e9727ad49e13adaf87bb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.Array.Accelerate.Array.Data.$trModule2
                   Data.Array.Accelerate.Array.Data.$trModule1) -}
c8d9bd8e010ec4427f264c53fae43795
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Data.Array.Accelerate.Array.Data"#) -}
ffb7e26ea4f311c9030a677421576273
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "accelerate-1.0.0.0-5KTewgBt554ICR3vZPllxw"#) -}
251ac8cc288dc0eb1e92b71f08b6e16e
  type ArrayData e =
    Data.Array.Accelerate.Array.Data.MutableArrayData e
ff45a629a63c423d76148392bf0a84a4
  class ArrayElt e where
    type family ArrayPtrs e :: * open
    arrayElt :: Data.Array.Accelerate.Array.Data.ArrayEltR e
    unsafeIndexArrayData :: Data.Array.Accelerate.Array.Data.ArrayData
                              e
                            -> GHC.Types.Int -> e
    ptrsOfArrayData :: Data.Array.Accelerate.Array.Data.ArrayData e
                       -> Data.Array.Accelerate.Array.Data.ArrayPtrs e
    touchArrayData :: Data.Array.Accelerate.Array.Data.ArrayData e
                      -> GHC.Types.IO ()
    newArrayData :: GHC.Types.Int
                    -> GHC.Types.IO
                         (Data.Array.Accelerate.Array.Data.MutableArrayData e)
    unsafeReadArrayData :: Data.Array.Accelerate.Array.Data.MutableArrayData
                             e
                           -> GHC.Types.Int -> GHC.Types.IO e
    unsafeWriteArrayData :: Data.Array.Accelerate.Array.Data.MutableArrayData
                              e
                            -> GHC.Types.Int -> e -> GHC.Types.IO ()
    unsafeFreezeArrayData :: Data.Array.Accelerate.Array.Data.MutableArrayData
                               e
                             -> GHC.Types.IO (Data.Array.Accelerate.Array.Data.ArrayData e)
    ptrsOfMutableArrayData :: Data.Array.Accelerate.Array.Data.MutableArrayData
                                e
                              -> GHC.Types.IO (Data.Array.Accelerate.Array.Data.ArrayPtrs e)
    {-# MINIMAL arrayElt, unsafeIndexArrayData, ptrsOfArrayData,
                touchArrayData, newArrayData, unsafeReadArrayData,
                unsafeWriteArrayData #-}
ff45a629a63c423d76148392bf0a84a4
  type role ArrayEltR nominal
  data ArrayEltR a where
    ArrayEltRunit :: ArrayEltR ()
    ArrayEltRint :: ArrayEltR GHC.Types.Int
    ArrayEltRint8 :: ArrayEltR GHC.Int.Int8
    ArrayEltRint16 :: ArrayEltR GHC.Int.Int16
    ArrayEltRint32 :: ArrayEltR GHC.Int.Int32
    ArrayEltRint64 :: ArrayEltR GHC.Int.Int64
    ArrayEltRword :: ArrayEltR GHC.Types.Word
    ArrayEltRword8 :: ArrayEltR GHC.Word.Word8
    ArrayEltRword16 :: ArrayEltR GHC.Word.Word16
    ArrayEltRword32 :: ArrayEltR GHC.Word.Word32
    ArrayEltRword64 :: ArrayEltR GHC.Word.Word64
    ArrayEltRcshort :: ArrayEltR Foreign.C.Types.CShort
    ArrayEltRcushort :: ArrayEltR Foreign.C.Types.CUShort
    ArrayEltRcint :: ArrayEltR Foreign.C.Types.CInt
    ArrayEltRcuint :: ArrayEltR Foreign.C.Types.CUInt
    ArrayEltRclong :: ArrayEltR Foreign.C.Types.CLong
    ArrayEltRculong :: ArrayEltR Foreign.C.Types.CULong
    ArrayEltRcllong :: ArrayEltR Foreign.C.Types.CLLong
    ArrayEltRcullong :: ArrayEltR Foreign.C.Types.CULLong
    ArrayEltRfloat :: ArrayEltR GHC.Types.Float
    ArrayEltRdouble :: ArrayEltR GHC.Types.Double
    ArrayEltRcfloat :: ArrayEltR Foreign.C.Types.CFloat
    ArrayEltRcdouble :: ArrayEltR Foreign.C.Types.CDouble
    ArrayEltRbool :: ArrayEltR GHC.Types.Bool
    ArrayEltRchar :: ArrayEltR GHC.Types.Char
    ArrayEltRcchar :: ArrayEltR Foreign.C.Types.CChar
    ArrayEltRcschar :: ArrayEltR Foreign.C.Types.CSChar
    ArrayEltRcuchar :: ArrayEltR Foreign.C.Types.CUChar
    ArrayEltRpair :: (Data.Array.Accelerate.Array.Data.ArrayElt a1,
                      Data.Array.Accelerate.Array.Data.ArrayElt b) =>
                     (Data.Array.Accelerate.Array.Data.ArrayEltR a1)
                     -> (Data.Array.Accelerate.Array.Data.ArrayEltR b)
                     -> ArrayEltR (a1, b)
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrs()::
      Data.Array.Accelerate.Array.Data.ArrayPtrs () = ()
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrs(,)::
    [b, a]
      Data.Array.Accelerate.Array.Data.ArrayPtrs (a, b)
        = (Data.Array.Accelerate.Array.Data.ArrayPtrs a,
           Data.Array.Accelerate.Array.Data.ArrayPtrs b)
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsBool::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Bool
        = GHC.Ptr.Ptr GHC.Word.Word8
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCChar::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CChar
        = GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_CCHAR
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCDouble::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CDouble
        = GHC.Ptr.Ptr GHC.Types.Double
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCFloat::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CFloat
        = GHC.Ptr.Ptr GHC.Types.Float
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCInt::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CInt
        = GHC.Ptr.Ptr GHC.Int.Int32
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCLLong::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CLLong
        = GHC.Ptr.Ptr GHC.Int.Int64
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCLong::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CLong
        = GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_LONG
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCSChar::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CSChar
        = GHC.Ptr.Ptr GHC.Int.Int8
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCShort::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CShort
        = GHC.Ptr.Ptr GHC.Int.Int16
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCUChar::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CUChar
        = GHC.Ptr.Ptr GHC.Word.Word8
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCUInt::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CUInt
        = GHC.Ptr.Ptr GHC.Word.Word32
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCULLong::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CULLong
        = GHC.Ptr.Ptr GHC.Word.Word64
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCULong::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CULong
        = GHC.Ptr.Ptr Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsCUShort::
      Data.Array.Accelerate.Array.Data.ArrayPtrs Foreign.C.Types.CUShort
        = GHC.Ptr.Ptr GHC.Word.Word16
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsChar::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Char
        = GHC.Ptr.Ptr GHC.Types.Char
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsDouble::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Double
        = GHC.Ptr.Ptr GHC.Types.Double
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsFloat::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Float
        = GHC.Ptr.Ptr GHC.Types.Float
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsInt::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Int
        = GHC.Ptr.Ptr GHC.Types.Int
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsInt16::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int16
        = GHC.Ptr.Ptr GHC.Int.Int16
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsInt32::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int32
        = GHC.Ptr.Ptr GHC.Int.Int32
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsInt64::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int64
        = GHC.Ptr.Ptr GHC.Int.Int64
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsInt8::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Int.Int8
        = GHC.Ptr.Ptr GHC.Int.Int8
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsWord::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Types.Word
        = GHC.Ptr.Ptr GHC.Types.Word
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsWord16::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word16
        = GHC.Ptr.Ptr GHC.Word.Word16
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsWord32::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word32
        = GHC.Ptr.Ptr GHC.Word.Word32
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsWord64::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word64
        = GHC.Ptr.Ptr GHC.Word.Word64
ff45a629a63c423d76148392bf0a84a4
  axiom D:R:ArrayPtrsWord8::
      Data.Array.Accelerate.Array.Data.ArrayPtrs GHC.Word.Word8
        = GHC.Ptr.Ptr GHC.Word.Word8
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDataba()0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba ()
        = Data.Array.Accelerate.Array.Data.R:GArrayDataba() ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDataba(,)0::
    [b, a, (ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba (a, b)
        = Data.Array.Accelerate.Array.Data.R:GArrayDataba(,) b a ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaBool0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Types.Bool
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaBool ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCChar0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CChar
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCChar ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCDouble0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CDouble
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCDouble ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCFloat0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CFloat
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCFloat ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCInt0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba Foreign.C.Types.CInt
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCInt ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCLLong0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CLLong
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCLLong ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCLong0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CLong
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCLong ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCSChar0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CSChar
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCSChar ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCShort0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CShort
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCShort ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCUChar0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CUChar
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCUChar ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCUInt0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CUInt
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCUInt ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCULLong0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CULLong
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCULLong ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCULong0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CULong
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCULong ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaCUShort0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData
        ba Foreign.C.Types.CUShort
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaCUShort ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaChar0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Types.Char
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaChar ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaDouble0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Types.Double
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaDouble ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaFloat0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Types.Float
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaFloat ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaInt0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Types.Int
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaInt ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaInt160::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Int.Int16
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaInt16 ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaInt320::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Int.Int32
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaInt32 ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaInt640::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Int.Int64
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaInt64 ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaInt80::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Int.Int8
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaInt8 ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaWord0::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Types.Word
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaWord ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaWord160::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Word.Word16
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaWord16 ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaWord320::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Word.Word32
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaWord32 ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaWord640::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Word.Word64
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaWord64 ba
697284c7f841807a0ce0924e2ce12076
  axiom D:R:GArrayDatabaWord80::
    [(ba :: GHC.Types.* -> GHC.Types.*)]
      Data.Array.Accelerate.Array.Data.GArrayData ba GHC.Word.Word8
        = Data.Array.Accelerate.Array.Data.R:GArrayDatabaWord8 ba
697284c7f841807a0ce0924e2ce12076
  data family GArrayData (a :: GHC.Types.* -> GHC.Types.*) b
2a8adb9d6bd750860cc7374bd70d4e33
  type HTYPE_CCHAR = GHC.Int.Int8
ed9b6e6e03b92a9028d0e741ef8c54e9
  type HTYPE_INT = GHC.Int.Int64
b444c0bb3bd8ad509d3b538940fb195c
  type HTYPE_LONG = GHC.Int.Int64
14f56a66e4bf0b81e27430796166d485
  type HTYPE_UNSIGNED_LONG = GHC.Word.Word64
16723539611fea525f13b0e6e71d4f3e
  type HTYPE_WORD = GHC.Word.Word64
36b8be1e9c5b0193942b260165aaf8f0
  type MutableArrayData e =
    Data.Array.Accelerate.Array.Data.GArrayData
      Data.Array.Accelerate.Array.Unique.UniqueArray e
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData ba ()
    = AD_Unit
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData ba (a, b)
    = AD_Pair (Data.Array.Accelerate.Array.Data.GArrayData ba a)
              (Data.Array.Accelerate.Array.Data.GArrayData ba b)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Types.Bool
    = AD_Bool (ba GHC.Word.Word8)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CChar
    = AD_CChar (ba Data.Array.Accelerate.Array.Data.HTYPE_CCHAR)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CDouble
    = AD_CDouble (ba GHC.Types.Double)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CFloat
    = AD_CFloat (ba GHC.Types.Float)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CInt
    = AD_CInt (ba GHC.Int.Int32)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CLLong
    = AD_CLLong (ba GHC.Int.Int64)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CLong
    = AD_CLong (ba Data.Array.Accelerate.Array.Data.HTYPE_LONG)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CSChar
    = AD_CSChar (ba GHC.Int.Int8)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CShort
    = AD_CShort (ba GHC.Int.Int16)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CUChar
    = AD_CUChar (ba GHC.Word.Word8)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CUInt
    = AD_CUInt (ba GHC.Word.Word32)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CULLong
    = AD_CULLong (ba GHC.Word.Word64)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CULong
    = AD_CULong (ba Data.Array.Accelerate.Array.Data.HTYPE_UNSIGNED_LONG)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba Foreign.C.Types.CUShort
    = AD_CUShort (ba GHC.Word.Word16)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Types.Char
    = AD_Char (ba GHC.Types.Char)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Types.Double
    = AD_Double (ba GHC.Types.Double)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Types.Float
    = AD_Float (ba GHC.Types.Float)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Types.Int
    = AD_Int (ba GHC.Types.Int)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Int.Int16
    = AD_Int16 (ba GHC.Int.Int16)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Int.Int32
    = AD_Int32 (ba GHC.Int.Int32)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Int.Int64
    = AD_Int64 (ba GHC.Int.Int64)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Int.Int8
    = AD_Int8 (ba GHC.Int.Int8)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Types.Word
    = AD_Word (ba GHC.Types.Word)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Word.Word16
    = AD_Word16 (ba GHC.Word.Word16)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Word.Word32
    = AD_Word32 (ba GHC.Word.Word32)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Word.Word64
    = AD_Word64 (ba GHC.Word.Word64)
    RecFlag: Recursive
697284c7f841807a0ce0924e2ce12076
  data instance Data.Array.Accelerate.Array.Data.GArrayData
                  ba GHC.Word.Word8
    = AD_Word8 (ba GHC.Word.Word8)
    RecFlag: Recursive
fa0fe395846aa3cc57afcc7d24e28224
  __mallocForeignPtrBytes ::
    GHC.IORef.IORef
      (GHC.Types.Int
       -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
  {- Inline: NOINLINE -}
07575e664ffb4dc579fa287ac4db40e4
  fstArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData (a, b)
    -> Data.Array.Accelerate.Array.Data.ArrayData a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   @ b
                   (ds :: Data.Array.Accelerate.Array.Data.ArrayData (a, b)) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair x ds1 ->
                 x }) -}
2a6439b115005cc8f57b2a0351655da0
  pairArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData a
    -> Data.Array.Accelerate.Array.Data.ArrayData b
    -> Data.Array.Accelerate.Array.Data.ArrayData (a, b)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (\ @ a @ b ->
                 Data.Array.Accelerate.Array.Data.$WAD_Pair
                   @ b
                   @ a
                   @ Data.Array.Accelerate.Array.Unique.UniqueArray) -}
314a583214df0bdd87b0ac31692d11d7
  registerForeignPtrAllocator ::
    (GHC.Types.Int
     -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
    -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Array.Accelerate.Array.Data.registerForeignPtrAllocator1
                  `cast`
                (<GHC.Types.Int
                  -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8)>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3862285efdd536f87ad90462607c3144
  registerForeignPtrAllocator1 ::
    (GHC.Types.Int
     -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (new :: GHC.Types.Int
                           -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Data.IORef.atomicWriteIORef1
                   @ (GHC.Types.Int
                      -> GHC.Types.IO (GHC.ForeignPtr.ForeignPtr GHC.Word.Word8))
                   Data.Array.Accelerate.Array.Data.__mallocForeignPtrBytes
                   new
                   s) -}
50b20d1b99304a54265b5c8fac1d33c1
  runArrayData ::
    GHC.Types.IO
      (Data.Array.Accelerate.Array.Data.MutableArrayData e, e)
    -> (Data.Array.Accelerate.Array.Data.ArrayData e, e)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U(U,U)))>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e
                   (st :: GHC.Types.IO
                            (Data.Array.Accelerate.Array.Data.MutableArrayData e, e)) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (GHC.Types.IO
                        (Data.Array.Accelerate.Array.Data.MutableArrayData e, e))
                   @ (Data.Array.Accelerate.Array.Data.ArrayData e, e)
                   (GHC.IO.Unsafe.unsafePerformIO
                      @ (Data.Array.Accelerate.Array.Data.MutableArrayData e, e))
                   (GHC.Base.bindIO
                      @ (Data.Array.Accelerate.Array.Data.MutableArrayData e, e)
                      @ (Data.Array.Accelerate.Array.Data.MutableArrayData e, e)
                      st
                      (\ (ds :: (Data.Array.Accelerate.Array.Data.MutableArrayData e, e))
                         (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                       case ds of wild { (,) mad r ->
                       (GHC.Base.returnIO
                          @ (Data.Array.Accelerate.Array.Data.MutableArrayData e, e)
                          (mad, r))
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(Data.Array.Accelerate.Array.Data.MutableArrayData e, e)>_R)
                         eta })
                        `cast`
                      (<(Data.Array.Accelerate.Array.Data.MutableArrayData e, e)>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(Data.Array.Accelerate.Array.Data.MutableArrayData e,
                                       e)>_R)))) -}
af0cfc8d8fe4f82a52944318f5d2afdc
  sndArrayData ::
    Data.Array.Accelerate.Array.Data.ArrayData (a, b)
    -> Data.Array.Accelerate.Array.Data.ArrayData b
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   @ b
                   (ds :: Data.Array.Accelerate.Array.Data.ArrayData (a, b)) ->
                 case ds
                        `cast`
                      (Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0[0]
                           <b>_N
                           <a>_N
                           <Data.Array.Accelerate.Array.Unique.UniqueArray>_N) of wild { Data.Array.Accelerate.Array.Data.AD_Pair ds1 y ->
                 y }) -}
96e1e9668d7f67ab191bca67c4296134
  toBool :: GHC.Word.Word8 -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: GHC.Word.Word8) ->
                 case GHC.Word.eqWord8
                        ds
                        (GHC.Word.$fBitsWord8_$cfromInteger 0) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
instance Data.Array.Accelerate.Array.Data.ArrayElt [()]
  = Data.Array.Accelerate.Array.Data.$fArrayElt()
instance Data.Array.Accelerate.Array.Data.ArrayElt [(,)]
  = Data.Array.Accelerate.Array.Data.$fArrayElt(,)
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Types.Bool]
  = Data.Array.Accelerate.Array.Data.$fArrayEltBool
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CChar]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCChar
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCDouble
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCFloat
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCInt
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCLLong
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCLong
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CSChar]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCSChar
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCShort
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CUChar]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCUChar
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCUInt
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCULLong
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCULong
instance Data.Array.Accelerate.Array.Data.ArrayElt [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Array.Data.$fArrayEltCUShort
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Types.Char]
  = Data.Array.Accelerate.Array.Data.$fArrayEltChar
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Types.Double]
  = Data.Array.Accelerate.Array.Data.$fArrayEltDouble
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Types.Float]
  = Data.Array.Accelerate.Array.Data.$fArrayEltFloat
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Types.Int]
  = Data.Array.Accelerate.Array.Data.$fArrayEltInt
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Int.Int16]
  = Data.Array.Accelerate.Array.Data.$fArrayEltInt16
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Int.Int32]
  = Data.Array.Accelerate.Array.Data.$fArrayEltInt32
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Int.Int64]
  = Data.Array.Accelerate.Array.Data.$fArrayEltInt64
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Int.Int8]
  = Data.Array.Accelerate.Array.Data.$fArrayEltInt8
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Types.Word]
  = Data.Array.Accelerate.Array.Data.$fArrayEltWord
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Word.Word16]
  = Data.Array.Accelerate.Array.Data.$fArrayEltWord16
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Word.Word32]
  = Data.Array.Accelerate.Array.Data.$fArrayEltWord32
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Word.Word64]
  = Data.Array.Accelerate.Array.Data.$fArrayEltWord64
instance Data.Array.Accelerate.Array.Data.ArrayElt [GHC.Word.Word8]
  = Data.Array.Accelerate.Array.Data.$fArrayEltWord8
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [()]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrs()
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Types.Int]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Int.Int8]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt8
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Int.Int16]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt16
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Int.Int32]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt32
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Int.Int64]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsInt64
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Types.Word]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Word.Word8]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord8
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Word.Word16]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord16
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Word.Word32]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord32
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Word.Word64]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsWord64
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCShort
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCUShort
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCInt
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCUInt
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCLong
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCULong
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCLLong
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCULLong
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Types.Float]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsFloat
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Types.Double]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsDouble
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCFloat
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCDouble
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Types.Bool]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsBool
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [GHC.Types.Char]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsChar
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CChar]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCChar
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CSChar]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCSChar
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [Foreign.C.Types.CUChar]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrsCUChar
family instance Data.Array.Accelerate.Array.Data.ArrayPtrs [(,)]
  = Data.Array.Accelerate.Array.Data.D:R:ArrayPtrs(,)
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [()]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDataba()0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Types.Int]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Int.Int8]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt80
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Int.Int16]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt160
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Int.Int32]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt320
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Int.Int64]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaInt640
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Types.Word]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Word.Word8]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord80
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Word.Word16]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord160
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Word.Word32]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord320
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Word.Word64]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaWord640
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CShort]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCShort0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CUShort]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUShort0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CInt]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCInt0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CUInt]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUInt0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CLong]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLong0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CULong]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULong0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CLLong]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCLLong0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CULLong]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCULLong0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Types.Float]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaFloat0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Types.Double]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaDouble0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CFloat]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCFloat0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CDouble]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCDouble0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Types.Bool]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaBool0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [GHC.Types.Char]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaChar0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CChar]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCChar0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CSChar]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCSChar0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [Foreign.C.Types.CUChar]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDatabaCUChar0
family instance Data.Array.Accelerate.Array.Data.GArrayData [.],
                                                            [(,)]
  = Data.Array.Accelerate.Array.Data.D:R:GArrayDataba(,)0
"SPEC/Data.Array.Accelerate.Array.Data $fPrintfArg[]_$cparseFormat @ Char" [ALWAYS] forall ($dIsChar :: Text.Printf.IsChar
                                                                                                          GHC.Types.Char)
  Text.Printf.$fPrintfArg[]_$cparseFormat @ GHC.Types.Char $dIsChar
  = Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s$fPrintfArg[]_$cparseFormat
"SPEC/Data.Array.Accelerate.Array.Data <$> @ IO _ _" [ALWAYS] forall @ a
                                                                     @ b
                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                     GHC.Types.IO)
  Data.Functor.<$> @ GHC.Types.IO @ a @ b $dFunctor
  = Data.Array.Accelerate.Array.Data.$fArrayElt(,)_$s<$> @ a @ b
"SPEC/Data.Array.Accelerate.Array.Data <=< @ IO _ _ _" [ALWAYS] forall @ b
                                                                       @ c
                                                                       @ a
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     GHC.Types.IO)
  Control.Monad.<=< @ GHC.Types.IO @ b @ c @ a $dMonad
  = Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s<=< @ b @ c @ a
"SPEC/Data.Array.Accelerate.Array.Data >=> @ IO _ _ _" [ALWAYS] forall @ a
                                                                       @ b
                                                                       @ c
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     GHC.Types.IO)
  Control.Monad.>=> @ GHC.Types.IO @ a @ b @ c $dMonad
  = Data.Array.Accelerate.Array.Data.$fArrayEltBool_$s>=> @ a @ b @ c
"SPEC/Data.Array.Accelerate.Array.Data printf @ (Int
                                                -> String -> String)" [ALWAYS] forall ($dPrintfType :: Text.Printf.PrintfType
                                                                                                                                                              (GHC.Types.Int
                                                                                                                                                               -> GHC.Base.String
                                                                                                                                                               -> GHC.Base.String))
  Text.Printf.printf @ (GHC.Types.Int
                        -> GHC.Base.String -> GHC.Base.String)
                     $dPrintfType
  = Data.Array.Accelerate.Array.Data.$fArrayEltBool_$sprintf
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

